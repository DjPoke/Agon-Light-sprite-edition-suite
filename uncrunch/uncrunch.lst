PC     Output      Line
040000             0001   ; uncrunch.asm
040000             0002   ; (B.Vignoli)
040000             0003   ;
040000             0004   ; MIT Licence
040000             0005   ;
040000             0006   
040000             0007   .ASSUME ADL=1
040000             0008   .ORG $040000
040000             0009   
040000 C3 2F 02 04 0010   	JP start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .ALIGN 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .DB "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	INCLUDE "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0207*  
040045             0208*  	MACRO VDU_DE
040045             0209*  		LD A,E
040045             0210*  		RST.LIS	10h
040045             0211*  		LD A,D
040045             0212*  		RST.LIS	10h
040045             0213*  	ENDMACRO
040045             0214*  
040045             0215*  	MACRO VDU_HL
040045             0216*  		LD A,L
040045             0217*  		RST.LIS	10h
040045             0218*  		LD A,H
040045             0219*  		RST.LIS	10h
040045             0220*  	ENDMACRO
040045             0019   	INCLUDE "debug.inc"
040045             0001*  ;=================
040045             0002*  ; Debug functions
040045             0003*  ;=================
040045             0004*  ; A = byte to debug
040045             0005*  debug_byte:
040045 F5          0006*  	PUSH AF
040046 C5          0007*  	PUSH BC
040047 D5          0008*  	PUSH DE
040048 E5          0009*  	PUSH HL
040049 21 00 00 00 0010*  	LD HL,$000000
04004D 6F          0011*  	LD L,A
04004E 11 8A 00 04 0012*  	LD DE,debug_text
040052 D5          0013*  	PUSH DE
040053 CD 90 00 04 0014*  	CALL num2dec
040057 E1          0015*  	POP HL
040058 23          0016*  	INC HL
040059 23          0017*  	INC HL
04005A 01 03 00 00 0018*  	LD BC,3
04005E 3E 00       0019*  	LD A,0
040060 49 DF       0020*  	RST.LIS $18
040062 E1          0021*  	POP HL
040063 D1          0022*  	POP DE
040064 C1          0023*  	POP BC
040065 F1          0024*  	POP AF
040066 C9          0025*  	RET
040067             0026*  
040067             0027*  ; HL = word to debug
040067             0028*  debug_word:
040067 F5          0029*  	PUSH AF
040068 C5          0030*  	PUSH BC
040069 D5          0031*  	PUSH DE
04006A E5          0032*  	PUSH HL
04006B 11 00 00 00 0033*  	LD DE,$000000 ; remove HLU
04006F 5D          0034*  	LD E,L
040070 54          0035*  	LD D,H
040071 D5          0036*  	PUSH DE
040072 E1          0037*  	POP HL
040073 11 8A 00 04 0038*  	LD DE,debug_text
040077 D5          0039*  	PUSH DE
040078 CD 90 00 04 0040*  	CALL num2dec
04007C E1          0041*  	POP HL
04007D 01 05 00 00 0042*  	LD BC,5
040081 3E 00       0043*  	LD A,0
040083 49 DF       0044*  	RST.LIS $18
040085 E1          0045*  	POP HL
040086 D1          0046*  	POP DE
040087 C1          0047*  	POP BC
040088 F1          0048*  	POP AF
040089 C9          0049*  	RET
04008A             0050*  
04008A             0051*  debug_text:
04008A             0052*  	DS 6
040090             0053*  
040090             0054*  ; 16 bits number to string
040090             0055*  num2dec:
040090 01 F0 D8 FF 0056*  	LD BC,-10000
040094 CD B1 00 04 0057*  	CALL num1
040098 01 18 FC FF 0058*  	LD BC,-1000
04009C CD B1 00 04 0059*  	CALL num1
0400A0 01 9C FF FF 0060*  	LD BC,-100
0400A4 CD B1 00 04 0061*  	CALL num1
0400A8 01 F6 FF FF 0062*  	LD BC,-10
0400AC CD B1 00 04 0063*  	CALL num1
0400B0 48          0064*  	LD C,B
0400B1             0065*  
0400B1 3E 2F       0066*  num1: LD A,'0'-1
0400B3 3C          0067*  num2: INC A
0400B4 09          0068*  	ADD HL,BC
0400B5 38 FC       0069*  	JR C,num2
0400B7 ED 42       0070*  	SBC HL,BC
0400B9             0071*  
0400B9 12          0072*  	LD (DE),A
0400BA 13          0073*  	INC DE
0400BB C9          0074*  	RET
0400BC             0020   
0400BC             0021   ; equ
0400BC             0022   KEY_ESCAPE: EQU -113
0400BC             0023   
0400BC             0024   BITLOOKUP:
0400BC 01 02 04 08 0025   	DB 01h,02h,04h,08h
0400C0 10 20 40 80 0026   	DB 10h,20h,40h,80h
0400C4             0027   
0400C4             0028   ; data
0400C4             0029   not_crunched_screen_filename:
0400C4 73 63 72 65 0030   	DB "screens/not_crunched.scn",0
       65 6E 73 2F 
       6E 6F 74 5F 
       63 72 75 6E 
       63 68 65 64 
       2E 73 63 6E 
       00          
0400DD             0031   
0400DD             0032   crunched_screen_filename:
0400DD 73 63 72 65 0033   	DB "screens/crunched.scn",0
       65 6E 73 2F 
       63 72 75 6E 
       63 68 65 64 
       2E 73 63 6E 
       00          
0400F2             0034   
0400F2             0035   mode_value:
0400F2 00          0036   	DB 0
0400F3             0037   
0400F3             0038   colors_count:
0400F3 00          0039   	DB 0
0400F4             0040   
0400F4             0041   red_tint:
0400F4 00          0042   	DB 0
0400F5             0043   
0400F5             0044   green_tint:
0400F5 00          0045   	DB 0
0400F6             0046   
0400F6             0047   blue_tint:
0400F6 00          0048   	DB 0
0400F7             0049   
0400F7             0050   colors_by_mode:
0400F7 10          0051   	DB 16
0400F8 04          0052   	DB 4
0400F9 02          0053   	DB 2
0400FA 40          0054   	DB 64
0400FB 10          0055   	DB 16
0400FC 04          0056   	DB 4
0400FD 02          0057   	DB 2
0400FE 10          0058   	DB 16
0400FF 40          0059   	DB 64
040100 10          0060   	DB 16
040101 04          0061   	DB 4
040102 02          0062   	DB 2
040103 40          0063   	DB 64
040104 10          0064   	DB 16
040105 04          0065   	DB 4
040106 02          0066   	DB 2
040107 04          0067   	DB 4
040108 02          0068   	DB 2
040109 02          0069   	DB 2
04010A 04          0070   	DB 4
04010B 40          0071   	DB 64
04010C 10          0072   	DB 16
04010D 04          0073   	DB 4
04010E 02          0074   	DB 2
04010F             0075   
04010F             0076   width_by_mode:
04010F 80 02       0077   	DW 640
040111 80 02       0078   	DW 640
040113 80 02       0079   	DW 640
040115 80 02       0080   	DW 640
040117 80 02       0081   	DW 640
040119 80 02       0082   	DW 640
04011B 80 02       0083   	DW 640
04011D 00 00       0084   	DW 0
04011F 40 01       0085   	DW 320
040121 40 01       0086   	DW 320
040123 40 01       0087   	DW 320
040125 40 01       0088   	DW 320
040127 40 01       0089   	DW 320
040129 40 01       0090   	DW 320
04012B 40 01       0091   	DW 320
04012D 40 01       0092   	DW 320
04012F 20 03       0093   	DW 800
040131 20 03       0094   	DW 800
040133 00 04       0095   	DW 1024
040135 00 04       0096   	DW 1024
040137 00 02       0097   	DW 512
040139 00 02       0098   	DW 512
04013B 00 02       0099   	DW 512
04013D 00 02       0100   	DW 512
04013F             0101   
04013F             0102   height_by_mode:
04013F E0 01       0103   	DW 480
040141 E0 01       0104   	DW 480
040143 E0 01       0105   	DW 480
040145 F0 00       0106   	DW 240
040147 F0 00       0107   	DW 240
040149 F0 00       0108   	DW 240
04014B F0 00       0109   	DW 240
04014D 00 00       0110   	DW 0
04014F F0 00       0111   	DW 240
040151 F0 00       0112   	DW 240
040153 F0 00       0113   	DW 240
040155 F0 00       0114   	DW 240
040157 C8 00       0115   	DW 200
040159 C8 00       0116   	DW 200
04015B C8 00       0117   	DW 200
04015D C8 00       0118   	DW 200
04015F 58 02       0119   	DW 600
040161 58 02       0120   	DW 600
040163 00 03       0121   	DW 768
040165 00 03       0122   	DW 768
040167 80 01       0123   	DW 384
040169 80 01       0124   	DW 384
04016B 80 01       0125   	DW 384
04016D 80 01       0126   	DW 384
04016F             0127   
04016F             0128   palette_rgb:
04016F             0129   	DS 192
04022F             0130   
04022F             0131   ; start main program ============================
04022F             0132   start:
04022F F5          0133   	PUSH AF
040230 C5          0134   	PUSH BC
040231 D5          0135   	PUSH DE
040232 DD E5       0136   	PUSH IX
040234 FD E5       0137   	PUSH IY
040236             0138   
040236             0139   	; reset sprites and bitmaps data
040236             0140   	VDU 23
040236 3E 17       0001M  		LD	A, function
040238 49 D7       0002M  		RST.LIS	10h
04023A             0141   	VDU 27
04023A 3E 1B       0001M  		LD	A, function
04023C 49 D7       0002M  		RST.LIS	10h
04023E             0142   	VDU 16
04023E 3E 10       0001M  		LD	A, function
040240 49 D7       0002M  		RST.LIS	10h
040242             0143   
040242             0144   	; set mode 8
040242             0145   	VDU 22
040242 3E 16       0001M  		LD	A, function
040244 49 D7       0002M  		RST.LIS	10h
040246             0146   	VDU 8
040246 3E 08       0001M  		LD	A, function
040248 49 D7       0002M  		RST.LIS	10h
04024A             0147   
04024A             0148   	; set black paper color
04024A             0149   	VDU 17
04024A 3E 11       0001M  		LD	A, function
04024C 49 D7       0002M  		RST.LIS	10h
04024E             0150   	VDU 128
04024E 3E 80       0001M  		LD	A, function
040250 49 D7       0002M  		RST.LIS	10h
040252             0151   
040252             0152   	; clear screen
040252             0153   	VDU 12
040252 3E 0C       0001M  		LD	A, function
040254 49 D7       0002M  		RST.LIS	10h
040256             0154   
040256             0155   	; hide cursor
040256             0156   	VDU 23
040256 3E 17       0001M  		LD	A, function
040258 49 D7       0002M  		RST.LIS	10h
04025A             0157   	VDU 1
04025A 3E 01       0001M  		LD	A, function
04025C 49 D7       0002M  		RST.LIS	10h
04025E             0158   	VDU 0
04025E 3E 00       0001M  		LD	A, function
040260 49 D7       0002M  		RST.LIS	10h
040262             0159   
040262             0160   	; disable logical screen
040262             0161   	VDU 23
040262 3E 17       0001M  		LD	A, function
040264 49 D7       0002M  		RST.LIS	10h
040266             0162   	VDU 0
040266 3E 00       0001M  		LD	A, function
040268 49 D7       0002M  		RST.LIS	10h
04026A             0163   	VDU $C0
04026A 3E C0       0001M  		LD	A, function
04026C 49 D7       0002M  		RST.LIS	10h
04026E             0164   	VDU 0
04026E 3E 00       0001M  		LD	A, function
040270 49 D7       0002M  		RST.LIS	10h
040272             0165   
040272             0166   	; set pen 15
040272             0167   	VDU 17
040272 3E 11       0001M  		LD	A, function
040274 49 D7       0002M  		RST.LIS	10h
040276             0168   	VDU 15
040276 3E 0F       0001M  		LD	A, function
040278 49 D7       0002M  		RST.LIS	10h
04027A             0169   
04027A             0170   	; load raw screen
04027A             0171   	;CALL load_raw_screen
04027A             0172   
04027A             0173   	; load crunched screen
04027A CD DC 04 04 0174   	CALL load_crunched_screen
04027E             0175   
04027E             0176   exit_program:
04027E             0177   	; wait for any key to be released
04027E 21 8F FF FF 0178   	LD HL,KEY_ESCAPE
040282 CD C0 05 04 0179   	CALL inkey
040286 FE 01       0180   	CP 1
040288 20 F4       0181   	JR NZ,exit_program
04028A             0182   
04028A             0183   	; reset to mode 1
04028A             0184   	VDU 22
04028A 3E 16       0001M  		LD	A, function
04028C 49 D7       0002M  		RST.LIS	10h
04028E             0185   	VDU 1
04028E 3E 01       0001M  		LD	A, function
040290 49 D7       0002M  		RST.LIS	10h
040292             0186   
040292             0187   	; enable logical screen
040292             0188   	VDU 23
040292 3E 17       0001M  		LD	A, function
040294 49 D7       0002M  		RST.LIS	10h
040296             0189   	VDU 0
040296 3E 00       0001M  		LD	A, function
040298 49 D7       0002M  		RST.LIS	10h
04029A             0190   	VDU $C0
04029A 3E C0       0001M  		LD	A, function
04029C 49 D7       0002M  		RST.LIS	10h
04029E             0191   	VDU 1
04029E 3E 01       0001M  		LD	A, function
0402A0 49 D7       0002M  		RST.LIS	10h
0402A2             0192   
0402A2             0193   	; position the texte cursor at home
0402A2             0194   	VDU 30
0402A2 3E 1E       0001M  		LD	A, function
0402A4 49 D7       0002M  		RST.LIS	10h
0402A6             0195   
0402A6             0196   	; show cursor
0402A6             0197   	VDU 23
0402A6 3E 17       0001M  		LD	A, function
0402A8 49 D7       0002M  		RST.LIS	10h
0402AA             0198   	VDU 1
0402AA 3E 01       0001M  		LD	A, function
0402AC 49 D7       0002M  		RST.LIS	10h
0402AE             0199   	VDU 1
0402AE 3E 01       0001M  		LD	A, function
0402B0 49 D7       0002M  		RST.LIS	10h
0402B2             0200   
0402B2 FD E1       0201   	POP IY
0402B4 DD E1       0202   	POP IX
0402B6 D1          0203   	POP DE
0402B7 C1          0204   	POP BC
0402B8 F1          0205   	POP AF
0402B9 21 00 00 00 0206   	LD HL,0
0402BD             0207   
0402BD C9          0208   	RET
0402BE             0209   
0402BE             0210   ; ===============================================
0402BE             0211   
0402BE             0212   ; load a raw screen
0402BE             0213   load_raw_screen:
0402BE             0214   	; open the file for read
0402BE 21 C4 00 04 0215   	LD HL,not_crunched_screen_filename
0402C2 0E 01       0216   	LD C,fa_open_existing|fa_read
0402C4             0217   	MOSCALL mos_fopen
0402C4 3E 0A       0001M  		LD	A, function
0402C6 49 CF       0002M  		RST.LIS	08h
0402C8             0218   
0402C8             0219   	; exit on error
0402C8 FE 00       0220   	CP 0
0402CA C8          0221   	RET Z
0402CB             0222   
0402CB             0223   	; filehandle -> C
0402CB 4F          0224   	LD C,A
0402CC             0225   
0402CC             0226   	; read the mode
0402CC             0227   	MOSCALL mos_fgetc
0402CC 3E 0C       0001M  		LD	A, function
0402CE 49 CF       0002M  		RST.LIS	08h
0402D0 DA D2 04 04 0228   	JP C,lrs_error
0402D4             0229   
0402D4 21 F2 00 04 0230   	LD HL,mode_value
0402D8 77          0231   	LD (HL),A
0402D9             0232   
0402D9             0233   	; set the readen mode
0402D9 C5          0234   	PUSH BC
0402DA F5          0235   	PUSH AF
0402DB             0236   	VDU 22
0402DB 3E 16       0001M  		LD	A, function
0402DD 49 D7       0002M  		RST.LIS	10h
0402DF F1          0237   	POP AF
0402E0 F5          0238   	PUSH AF
0402E1             0239   	VDU_A
0402E1 49 D7       0001M  		RST.LIS	10h
0402E3             0240   	VDU 23 ; hide cursor
0402E3 3E 17       0001M  		LD	A, function
0402E5 49 D7       0002M  		RST.LIS	10h
0402E7             0241   	VDU 1
0402E7 3E 01       0001M  		LD	A, function
0402E9 49 D7       0002M  		RST.LIS	10h
0402EB             0242   	VDU 0
0402EB 3E 00       0001M  		LD	A, function
0402ED 49 D7       0002M  		RST.LIS	10h
0402EF F1          0243   	POP AF
0402F0 C1          0244   	POP BC
0402F1             0245   
0402F1             0246   	; get colors count
0402F1 21 F7 00 04 0247   	LD HL,colors_by_mode
0402F5 11 00 00 00 0248   	LD DE,$000000
0402F9 5F          0249   	LD E,A
0402FA 19          0250   	ADD HL,DE
0402FB 7E          0251   	LD A,(HL) ; number of colors
0402FC 21 F3 00 04 0252   	LD HL,colors_count
040300 77          0253   	LD (HL),A
040301             0254   
040301             0255   	; read the palette
040301 21 6F 01 04 0256   	LD HL,palette_rgb
040305 11 00 00 00 0257   	LD DE,$000000
040309 5F          0258   	LD E,A
04030A 16 03       0259   	LD D,3
04030C ED 5C       0260   	MLT DE
04030E D5          0261   	PUSH DE
04030F             0262   	MOSCALL mos_fread
04030F 3E 1A       0001M  		LD	A, function
040311 49 CF       0002M  		RST.LIS	08h
040313 E1          0263   	POP HL
040314 B7          0264   	OR A
040315 ED 52       0265   	SBC HL,DE
040317 19          0266   	ADD HL,DE
040318 C2 D2 04 04 0267   	JP NZ,lrs_error
04031C             0268   
04031C             0269   	; set the palette
04031C 21 F3 00 04 0270   	LD HL,colors_count
040320 7E          0271   	LD A,(HL)
040321 FE 00       0272   	CP 0
040323 CA D2 04 04 0273   	JP Z,lrs_error
040327             0274   
040327 C5          0275   	PUSH BC
040328 06 00       0276   	LD B,0
04032A DD 21 6F 01 0277   	LD IX,palette_rgb
       04          
04032F             0278   
04032F             0279   lrs_set_palette:
04032F DD 4E 00    0280   	LD C,(IX+0)
040332 DD 5E 01    0281   	LD E,(IX+1)
040335 DD 6E 02    0282   	LD L,(IX+2)
040338 DD 23       0283   	INC IX
04033A DD 23       0284   	INC IX
04033C DD 23       0285   	INC IX
04033E CD F1 05 04 0286   	CALL set_color
040342 3D          0287   	DEC A
040343 04          0288   	INC B
040344 FE 00       0289   	CP 0
040346 20 E7       0290   	JR NZ,lrs_set_palette
040348             0291   
040348 C1          0292   	POP BC
040349             0293   
040349             0294   	; read crunched flag
040349             0295   	MOSCALL mos_fgetc
040349 3E 0C       0001M  		LD	A, function
04034B 49 CF       0002M  		RST.LIS	08h
04034D DA D2 04 04 0296   	JP C,lrs_error
040351             0297   
040351             0298   	; not crunched file flag
040351 FE 00       0299   	CP 0
040353 C2 D2 04 04 0300   	JP NZ,lrs_error
040357             0301   
040357             0302   	; read data on the sdcard
040357 21 00 00 05 0303   	LD HL,$050000
04035B 11 00 FA 00 0304   	LD DE,64000
04035F             0305   	MOSCALL mos_fread
04035F 3E 1A       0001M  		LD	A, function
040361 49 CF       0002M  		RST.LIS	08h
040363 21 00 FA 00 0306   	LD HL,64000
040367 B7          0307   	OR A
040368 ED 52       0308   	SBC HL,DE
04036A 19          0309   	ADD HL,DE ; DE = 64000 ?
04036B C2 D2 04 04 0310   	JP NZ,lrs_error
04036F             0311   
04036F             0312   	; read data on the sdcard
04036F 21 00 FA 05 0313   	LD HL,$05FA00
040373 11 00 06 00 0314   	LD DE,1536
040377             0315   	MOSCALL mos_fread
040377 3E 1A       0001M  		LD	A, function
040379 49 CF       0002M  		RST.LIS	08h
04037B 21 00 06 00 0316   	LD HL,1536
04037F B7          0317   	OR A
040380 ED 52       0318   	SBC HL,DE
040382 19          0319   	ADD HL,DE ; DE = 1536 ?
040383 C2 D2 04 04 0320   	JP NZ,lrs_error
040387             0321   
040387             0322   	; read data on the sdcard
040387 21 00 00 06 0323   	LD HL,$060000
04038B 11 00 2C 00 0324   	LD DE,11264
04038F             0325   	MOSCALL mos_fread
04038F 3E 1A       0001M  		LD	A, function
040391 49 CF       0002M  		RST.LIS	08h
040393 21 00 2C 00 0326   	LD HL,11264
040397 B7          0327   	OR A
040398 ED 52       0328   	SBC HL,DE
04039A 19          0329   	ADD HL,DE ; DE = 11264 ?
04039B C2 D2 04 04 0330   	JP NZ,lrs_error
04039F             0331   
04039F             0332   	; close the file
04039F             0333   	MOSCALL mos_fclose
04039F 3E 0B       0001M  		LD	A, function
0403A1 49 CF       0002M  		RST.LIS	08h
0403A3             0334   
0403A3             0335   	; clear buffer 64255
0403A3             0336   	VDU 23
0403A3 3E 17       0001M  		LD	A, function
0403A5 49 D7       0002M  		RST.LIS	10h
0403A7             0337   	VDU 0
0403A7 3E 00       0001M  		LD	A, function
0403A9 49 D7       0002M  		RST.LIS	10h
0403AB             0338   	VDU $A0
0403AB 3E A0       0001M  		LD	A, function
0403AD 49 D7       0002M  		RST.LIS	10h
0403AF             0339   	VDU $FF ; buffer number (16 bits)
0403AF 3E FF       0001M  		LD	A, function
0403B1 49 D7       0002M  		RST.LIS	10h
0403B3             0340   	VDU $FA
0403B3 3E FA       0001M  		LD	A, function
0403B5 49 D7       0002M  		RST.LIS	10h
0403B7             0341   	VDU 2 ; command
0403B7 3E 02       0001M  		LD	A, function
0403B9 49 D7       0002M  		RST.LIS	10h
0403BB             0342   
0403BB             0343   	; coordinates to draw a piece of screen
0403BB 21 00 00 05 0344   	LD HL,$050000 ; start address
0403BF FD 21 00 01 0345   	LD IY,256 ; 256 blocks of 256 bytes for the 1st RAM part
       00          
0403C4             0346   
0403C4             0347   lrs_upload_block:
0403C4             0348   	; upload data to the buffer
0403C4             0349   	VDU 23
0403C4 3E 17       0001M  		LD	A, function
0403C6 49 D7       0002M  		RST.LIS	10h
0403C8             0350   	VDU 0
0403C8 3E 00       0001M  		LD	A, function
0403CA 49 D7       0002M  		RST.LIS	10h
0403CC             0351   	VDU $A0
0403CC 3E A0       0001M  		LD	A, function
0403CE 49 D7       0002M  		RST.LIS	10h
0403D0             0352   	VDU $FF ; buffer number (16 bits)
0403D0 3E FF       0001M  		LD	A, function
0403D2 49 D7       0002M  		RST.LIS	10h
0403D4             0353   	VDU $FA
0403D4 3E FA       0001M  		LD	A, function
0403D6 49 D7       0002M  		RST.LIS	10h
0403D8             0354   	VDU 0 ; command
0403D8 3E 00       0001M  		LD	A, function
0403DA 49 D7       0002M  		RST.LIS	10h
0403DC 11 00 01 00 0355   	LD DE,256 ; 256 bytes
0403E0             0356   	VDU_DE
0403E0 7B          0001M  		LD A,E
0403E1 49 D7       0002M  		RST.LIS	10h
0403E3 7A          0003M  		LD A,D
0403E4 49 D7       0004M  		RST.LIS	10h
0403E6             0357   
0403E6 C5          0358   	PUSH BC
0403E7 DD E5       0359   	PUSH IX
0403E9 01 00 01 00 0360   	LD BC,256
0403ED             0361   lrs_loop:
0403ED 7E          0362   	LD A,(HL) ; rgba2222 color
0403EE             0363   	VDU_A
0403EE 49 D7       0001M  		RST.LIS	10h
0403F0 23          0364   	INC HL
0403F1 0B          0365   	DEC BC
0403F2 78          0366   	LD A,B
0403F3 B1          0367   	OR C
0403F4 C2 ED 03 04 0368   	JP NZ,lrs_loop
0403F8 DD E1       0369   	POP IX
0403FA C1          0370   	POP BC
0403FB             0371   
0403FB             0372   	; next block of 256 bytes
0403FB FD 2B       0373   	DEC IY
0403FD FD E5       0374   	PUSH IY
0403FF D1          0375   	POP DE
040400 7A          0376   	LD A,D
040401 B3          0377   	OR E
040402 FE 00       0378   	CP 0
040404 C2 C4 03 04 0379   	JP NZ,lrs_upload_block
040408             0380   
040408             0381   	; second part
040408             0382   	; coordinates to draw a piece of screen
040408 21 00 00 06 0383   	LD HL,$060000 ; start address
04040C FD 21 2C 00 0384   	LD IY,44 ; 44 blocks of 256 bytes for the 2nd RAM part
       00          
040411             0385   
040411             0386   lrs_upload_block2:
040411             0387   	; upload data to the buffer
040411             0388   	VDU 23
040411 3E 17       0001M  		LD	A, function
040413 49 D7       0002M  		RST.LIS	10h
040415             0389   	VDU 0
040415 3E 00       0001M  		LD	A, function
040417 49 D7       0002M  		RST.LIS	10h
040419             0390   	VDU $A0
040419 3E A0       0001M  		LD	A, function
04041B 49 D7       0002M  		RST.LIS	10h
04041D             0391   	VDU $FF ; buffer number (16 bits)
04041D 3E FF       0001M  		LD	A, function
04041F 49 D7       0002M  		RST.LIS	10h
040421             0392   	VDU $FA
040421 3E FA       0001M  		LD	A, function
040423 49 D7       0002M  		RST.LIS	10h
040425             0393   	VDU 0 ; command
040425 3E 00       0001M  		LD	A, function
040427 49 D7       0002M  		RST.LIS	10h
040429 11 00 01 00 0394   	LD DE,256 ; 256 bytes
04042D             0395   	VDU_DE
04042D 7B          0001M  		LD A,E
04042E 49 D7       0002M  		RST.LIS	10h
040430 7A          0003M  		LD A,D
040431 49 D7       0004M  		RST.LIS	10h
040433             0396   
040433 C5          0397   	PUSH BC
040434 DD E5       0398   	PUSH IX
040436 01 00 01 00 0399   	LD BC,256
04043A             0400   lrs_loop2:
04043A 7E          0401   	LD A,(HL) ; rgba2222 color
04043B             0402   	VDU_A
04043B 49 D7       0001M  		RST.LIS	10h
04043D 23          0403   	INC HL
04043E 0B          0404   	DEC BC
04043F 78          0405   	LD A,B
040440 B1          0406   	OR C
040441 C2 3A 04 04 0407   	JP NZ,lrs_loop2
040445 DD E1       0408   	POP IX
040447 C1          0409   	POP BC
040448             0410   
040448             0411   	; next block of 256 bytes
040448 FD 2B       0412   	DEC IY
04044A FD E5       0413   	PUSH IY
04044C D1          0414   	POP DE
04044D 7A          0415   	LD A,D
04044E B3          0416   	OR E
04044F FE 00       0417   	CP 0
040451 C2 11 04 04 0418   	JP NZ,lrs_upload_block2
040455             0419   
040455             0420   	; consolidate buffer 0
040455             0421   	VDU 23
040455 3E 17       0001M  		LD	A, function
040457 49 D7       0002M  		RST.LIS	10h
040459             0422   	VDU 0
040459 3E 00       0001M  		LD	A, function
04045B 49 D7       0002M  		RST.LIS	10h
04045D             0423   	VDU $A0
04045D 3E A0       0001M  		LD	A, function
04045F 49 D7       0002M  		RST.LIS	10h
040461             0424   	VDU $FF ; buffer number (16 bits)
040461 3E FF       0001M  		LD	A, function
040463 49 D7       0002M  		RST.LIS	10h
040465             0425   	VDU $FA
040465 3E FA       0001M  		LD	A, function
040467 49 D7       0002M  		RST.LIS	10h
040469             0426   	VDU 14 ; command
040469 3E 0E       0001M  		LD	A, function
04046B 49 D7       0002M  		RST.LIS	10h
04046D             0427   
04046D             0428   	; set buffer 64255 as bitmap (bitmap 255)
04046D             0429   	VDU 23
04046D 3E 17       0001M  		LD	A, function
04046F 49 D7       0002M  		RST.LIS	10h
040471             0430   	VDU 27
040471 3E 1B       0001M  		LD	A, function
040473 49 D7       0002M  		RST.LIS	10h
040475             0431   	VDU $20
040475 3E 20       0001M  		LD	A, function
040477 49 D7       0002M  		RST.LIS	10h
040479             0432   	VDU $FF ; bitmap number (16 bits)
040479 3E FF       0001M  		LD	A, function
04047B 49 D7       0002M  		RST.LIS	10h
04047D             0433   	VDU $FA
04047D 3E FA       0001M  		LD	A, function
04047F 49 D7       0002M  		RST.LIS	10h
040481             0434   
040481             0435   	; set buffer 64255 attributes
040481             0436   	VDU 23
040481 3E 17       0001M  		LD	A, function
040483 49 D7       0002M  		RST.LIS	10h
040485             0437   	VDU 27
040485 3E 1B       0001M  		LD	A, function
040487 49 D7       0002M  		RST.LIS	10h
040489             0438   	VDU $21
040489 3E 21       0001M  		LD	A, function
04048B 49 D7       0002M  		RST.LIS	10h
04048D 11 40 01 00 0439   	LD DE,320 ; width
040491 21 F0 00 00 0440   	LD HL,240 ; height
040495             0441   	VDU_DE
040495 7B          0001M  		LD A,E
040496 49 D7       0002M  		RST.LIS	10h
040498 7A          0003M  		LD A,D
040499 49 D7       0004M  		RST.LIS	10h
04049B             0442   	VDU_HL
04049B 7D          0001M  		LD A,L
04049C 49 D7       0002M  		RST.LIS	10h
04049E 7C          0003M  		LD A,H
04049F 49 D7       0004M  		RST.LIS	10h
0404A1             0443   	VDU 1 ; rgba2222
0404A1 3E 01       0001M  		LD	A, function
0404A3 49 D7       0002M  		RST.LIS	10h
0404A5             0444   
0404A5             0445   	; select bitmap 255
0404A5             0446   	VDU 23
0404A5 3E 17       0001M  		LD	A, function
0404A7 49 D7       0002M  		RST.LIS	10h
0404A9             0447   	VDU 27
0404A9 3E 1B       0001M  		LD	A, function
0404AB 49 D7       0002M  		RST.LIS	10h
0404AD             0448   	VDU 0
0404AD 3E 00       0001M  		LD	A, function
0404AF 49 D7       0002M  		RST.LIS	10h
0404B1             0449   	VDU 255
0404B1 3E FF       0001M  		LD	A, function
0404B3 49 D7       0002M  		RST.LIS	10h
0404B5             0450   
0404B5             0451   	; draw bitmap 255 at coordinates 0,0
0404B5             0452   	VDU 23
0404B5 3E 17       0001M  		LD	A, function
0404B7 49 D7       0002M  		RST.LIS	10h
0404B9             0453   	VDU 27
0404B9 3E 1B       0001M  		LD	A, function
0404BB 49 D7       0002M  		RST.LIS	10h
0404BD             0454   	VDU 3
0404BD 3E 03       0001M  		LD	A, function
0404BF 49 D7       0002M  		RST.LIS	10h
0404C1             0455   	VDU 0
0404C1 3E 00       0001M  		LD	A, function
0404C3 49 D7       0002M  		RST.LIS	10h
0404C5             0456   	VDU 0
0404C5 3E 00       0001M  		LD	A, function
0404C7 49 D7       0002M  		RST.LIS	10h
0404C9             0457   	VDU 0
0404C9 3E 00       0001M  		LD	A, function
0404CB 49 D7       0002M  		RST.LIS	10h
0404CD             0458   	VDU 0
0404CD 3E 00       0001M  		LD	A, function
0404CF 49 D7       0002M  		RST.LIS	10h
0404D1 C9          0459   	RET
0404D2             0460   
0404D2             0461   lrs_error:
0404D2             0462   	VDU 7
0404D2 3E 07       0001M  		LD	A, function
0404D4 49 D7       0002M  		RST.LIS	10h
0404D6             0463   	MOSCALL mos_fclose
0404D6 3E 0B       0001M  		LD	A, function
0404D8 49 CF       0002M  		RST.LIS	08h
0404DA C9          0464   	RET
0404DB             0465   
0404DB             0466   lrs_exit:
0404DB C9          0467   	RET
0404DC             0468   
0404DC             0469   ; load a crunched screen
0404DC             0470   load_crunched_screen:
0404DC             0471   	; open the file for read
0404DC 21 DD 00 04 0472   	LD HL,crunched_screen_filename
0404E0 0E 01       0473   	LD C,fa_open_existing|fa_read
0404E2             0474   	MOSCALL mos_fopen
0404E2 3E 0A       0001M  		LD	A, function
0404E4 49 CF       0002M  		RST.LIS	08h
0404E6             0475   
0404E6             0476   	; exit on error
0404E6 FE 00       0477   	CP 0
0404E8 C8          0478   	RET Z
0404E9             0479   
0404E9             0480   	; filehandle -> C
0404E9 4F          0481   	LD C,A
0404EA             0482   
0404EA             0483   	; read the mode
0404EA             0484   	MOSCALL mos_fgetc
0404EA 3E 0C       0001M  		LD	A, function
0404EC 49 CF       0002M  		RST.LIS	08h
0404EE DA B2 05 04 0485   	JP C,lcs_error
0404F2             0486   
0404F2 21 F2 00 04 0487   	LD HL,mode_value
0404F6 77          0488   	LD (HL),A
0404F7             0489   
0404F7             0490   	; set the readen mode
0404F7 C5          0491   	PUSH BC
0404F8 F5          0492   	PUSH AF
0404F9             0493   	VDU 22
0404F9 3E 16       0001M  		LD	A, function
0404FB 49 D7       0002M  		RST.LIS	10h
0404FD F1          0494   	POP AF
0404FE F5          0495   	PUSH AF
0404FF             0496   	VDU_A
0404FF 49 D7       0001M  		RST.LIS	10h
040501             0497   	VDU 23 ; hide cursor
040501 3E 17       0001M  		LD	A, function
040503 49 D7       0002M  		RST.LIS	10h
040505             0498   	VDU 1
040505 3E 01       0001M  		LD	A, function
040507 49 D7       0002M  		RST.LIS	10h
040509             0499   	VDU 0
040509 3E 00       0001M  		LD	A, function
04050B 49 D7       0002M  		RST.LIS	10h
04050D F1          0500   	POP AF
04050E C1          0501   	POP BC
04050F             0502   
04050F             0503   	; get colors count
04050F 21 F7 00 04 0504   	LD HL,colors_by_mode
040513 11 00 00 00 0505   	LD DE,$000000
040517 5F          0506   	LD E,A
040518 19          0507   	ADD HL,DE
040519 7E          0508   	LD A,(HL) ; number of colors
04051A 21 F3 00 04 0509   	LD HL,colors_count
04051E 77          0510   	LD (HL),A
04051F             0511   
04051F             0512   	; read the palette
04051F 21 6F 01 04 0513   	LD HL,palette_rgb
040523 11 00 00 00 0514   	LD DE,$000000
040527 5F          0515   	LD E,A
040528 16 03       0516   	LD D,3
04052A ED 5C       0517   	MLT DE
04052C D5          0518   	PUSH DE
04052D             0519   	MOSCALL mos_fread
04052D 3E 1A       0001M  		LD	A, function
04052F 49 CF       0002M  		RST.LIS	08h
040531 E1          0520   	POP HL
040532 B7          0521   	OR A
040533 ED 52       0522   	SBC HL,DE
040535 19          0523   	ADD HL,DE
040536 C2 B2 05 04 0524   	JP NZ,lcs_error
04053A             0525   
04053A             0526   	; set the palette
04053A 21 F3 00 04 0527   	LD HL,colors_count
04053E 7E          0528   	LD A,(HL)
04053F FE 00       0529   	CP 0
040541 CA B2 05 04 0530   	JP Z,lcs_error
040545             0531   
040545 C5          0532   	PUSH BC
040546 06 00       0533   	LD B,0
040548 DD 21 6F 01 0534   	LD IX,palette_rgb
       04          
04054D             0535   
04054D             0536   lcs_set_palette:
04054D DD 4E 00    0537   	LD C,(IX+0)
040550 DD 5E 01    0538   	LD E,(IX+1)
040553 DD 6E 02    0539   	LD L,(IX+2)
040556 DD 23       0540   	INC IX
040558 DD 23       0541   	INC IX
04055A DD 23       0542   	INC IX
04055C CD F1 05 04 0543   	CALL set_color
040560 3D          0544   	DEC A
040561 04          0545   	INC B
040562 FE 00       0546   	CP 0
040564 20 E7       0547   	JR NZ,lcs_set_palette
040566             0548   
040566 C1          0549   	POP BC
040567             0550   
040567             0551   	; read crunched flag
040567             0552   	MOSCALL mos_fgetc
040567 3E 0C       0001M  		LD	A, function
040569 49 CF       0002M  		RST.LIS	08h
04056B DA B2 05 04 0553   	JP C,lcs_error
04056F             0554   
04056F             0555   	; crunched file flag
04056F FE 01       0556   	CP 1
040571 C2 B2 05 04 0557   	JP NZ,lcs_error
040575             0558   
040575             0559   	; read data on the sdcard, and uncrunch
040575 11 00 00 00 0560   	LD DE,$000000 ; x screen
040579 21 00 00 00 0561   	LD HL,$000000 ; y screen
04057D             0562   
04057D             0563   lcs_loop:
04057D             0564   	MOSCALL mos_fgetc
04057D 3E 0C       0001M  		LD	A, function
04057F 49 CF       0002M  		RST.LIS	08h
040581 DA BB 05 04 0565   	JP C,lcs_exit
040585             0566   
040585             0567   	; case > 0
040585 FE 01       0568   	CP 1
040587 CC 31 06 04 0569   	CALL Z,plot_pixel
04058B CA 7D 05 04 0570   	JP Z,lcs_loop
04058F             0571   
04058F             0572   	; case 0,0
04058F             0573   	MOSCALL mos_fgetc
04058F 3E 0C       0001M  		LD	A, function
040591 49 CF       0002M  		RST.LIS	08h
040593 DA BB 05 04 0574   	JP C,lcs_exit
040597             0575   
040597 FE 00       0576   	CP 0
040599 CC 31 06 04 0577   	CALL Z,plot_pixel
04059D CA 7D 05 04 0578   	JP Z,lcs_loop
0405A1             0579   
0405A1             0580   	; case command, count, value
0405A1 47          0581   	LD B,A
0405A2             0582   
0405A2             0583   	MOSCALL mos_fgetc
0405A2 3E 0C       0001M  		LD	A, function
0405A4 49 CF       0002M  		RST.LIS	08h
0405A6 DA BB 05 04 0584   	JP C,lcs_exit
0405AA             0585   
0405AA CC 86 06 04 0586   	CALL Z,plot_line
0405AE C3 7D 05 04 0587   	JP lcs_loop
0405B2             0588   
0405B2             0589   lcs_error:
0405B2             0590   	VDU 7
0405B2 3E 07       0001M  		LD	A, function
0405B4 49 D7       0002M  		RST.LIS	10h
0405B6             0591   	MOSCALL mos_fclose
0405B6 3E 0B       0001M  		LD	A, function
0405B8 49 CF       0002M  		RST.LIS	08h
0405BA C9          0592   	RET
0405BB             0593   
0405BB             0594   lcs_exit:
0405BB             0595   	MOSCALL mos_fclose
0405BB 3E 0B       0001M  		LD	A, function
0405BD 49 CF       0002M  		RST.LIS	08h
0405BF C9          0596   	RET
0405C0             0597   
0405C0             0598   ; input: HL = negative key to check
0405C0             0599   inkey:
0405C0             0600   	MOSCALL	mos_getkbmap
0405C0 3E 1E       0001M  		LD	A, function
0405C2 49 CF       0002M  		RST.LIS	08h
0405C4 23          0601   	INC	HL
0405C5 7D          0602   	LD	A, L
0405C6 ED 44       0603   	NEG
0405C8 4F          0604   	LD	C, A
0405C9 3E 01       0605   	LD	A, 1
0405CB FA EF 05 04 0606   	JP	M,inkey_false ; < -128 ?
0405CF             0607   
0405CF 21 BC 00 04 0608   	LD	HL,BITLOOKUP
0405D3 11 00 00 00 0609   	LD	DE,0
0405D7 79          0610   	LD	A,C
0405D8 E6 07       0611   	AND	00000111b
0405DA 5F          0612   	LD	E,A
0405DB 19          0613   	ADD	HL,DE
0405DC 46          0614   	LD	B,(HL)
0405DD             0615   
0405DD 79          0616   	LD	A,C
0405DE E6 78       0617   	AND	01111000b
0405E0 0F          0618   	RRCA
0405E1 0F          0619   	RRCA
0405E2 0F          0620   	RRCA
0405E3 5F          0621   	LD	E, A
0405E4 DD 19       0622   	ADD	IX,DE
0405E6 DD 7E 00    0623   	LD	A,(IX+0)
0405E9 A0          0624   	AND	B
0405EA 28 03       0625   	JR Z,inkey_false
0405EC 3E 01       0626   	LD A,1
0405EE C9          0627   	RET
0405EF             0628   inkey_false:
0405EF AF          0629   	XOR A
0405F0 C9          0630   	RET
0405F1             0631   
0405F1             0632   ; set color RGB (a = c,e,l)
0405F1             0633   set_color:
0405F1 DD E5       0634   	PUSH IX
0405F3 F5          0635   	PUSH AF
0405F4 C5          0636   	PUSH BC
0405F5 D5          0637   	PUSH DE
0405F6 E5          0638   	PUSH HL
0405F7             0639   
0405F7 C5          0640   	PUSH BC
0405F8 E5          0641   	PUSH HL
0405F9 21 F4 00 04 0642   	LD HL,red_tint
0405FD 71          0643   	LD (HL),C
0405FE 21 F5 00 04 0644   	LD HL,green_tint
040602 73          0645   	LD (HL),E
040603 D1          0646   	POP DE
040604 21 F6 00 04 0647   	LD HL,blue_tint
040608 73          0648   	LD (HL),E
040609             0649   
040609             0650   	VDU 19
040609 3E 13       0001M  		LD	A, function
04060B 49 D7       0002M  		RST.LIS	10h
04060D C1          0651   	POP BC
04060E 78          0652   	LD A,B
04060F             0653   	VDU_A
04060F 49 D7       0001M  		RST.LIS	10h
040611             0654   	VDU 255
040611 3E FF       0001M  		LD	A, function
040613 49 D7       0002M  		RST.LIS	10h
040615             0655   
040615 21 F4 00 04 0656   	LD HL,red_tint
040619 7E          0657   	LD A,(HL)
04061A             0658   	VDU_A
04061A 49 D7       0001M  		RST.LIS	10h
04061C             0659   
04061C 21 F5 00 04 0660   	LD HL,green_tint
040620 7E          0661   	LD A,(HL)
040621             0662   	VDU_A
040621 49 D7       0001M  		RST.LIS	10h
040623             0663   
040623 21 F6 00 04 0664   	LD HL,blue_tint
040627 7E          0665   	LD A,(HL)
040628             0666   	VDU_A
040628 49 D7       0001M  		RST.LIS	10h
04062A             0667   
04062A E1          0668   	POP HL
04062B D1          0669   	POP DE
04062C C1          0670   	POP BC
04062D F1          0671   	POP AF
04062E DD E1       0672   	POP IX
040630 C9          0673   	ret
040631             0674   
040631             0675   ; A -> color
040631             0676   plot_pixel:
040631 F5          0677   	PUSH AF
040632 C5          0678   	PUSH BC
040633 D5          0679   	PUSH DE
040634 E5          0680   	PUSH HL
040635             0681   
040635 F5          0682   	PUSH AF
040636             0683   	VDU 18
040636 3E 12       0001M  		LD	A, function
040638 49 D7       0002M  		RST.LIS	10h
04063A             0684   	VDU 0
04063A 3E 00       0001M  		LD	A, function
04063C 49 D7       0002M  		RST.LIS	10h
04063E F1          0685   	POP AF
04063F             0686   	VDU_A
04063F 49 D7       0001M  		RST.LIS	10h
040641             0687   
040641             0688   	VDU 25
040641 3E 19       0001M  		LD	A, function
040643 49 D7       0002M  		RST.LIS	10h
040645             0689   	VDU 4
040645 3E 04       0001M  		LD	A, function
040647 49 D7       0002M  		RST.LIS	10h
040649             0690   
040649 E1          0691   	POP HL
04064A D1          0692   	POP DE
04064B C1          0693   	POP BC
04064C F1          0694   	POP AF
04064D F5          0695   	PUSH AF
04064E C5          0696   	PUSH BC
04064F D5          0697   	PUSH DE
040650 E5          0698   	PUSH HL
040651             0699   
040651             0700   	VDU_DE
040651 7B          0001M  		LD A,E
040652 49 D7       0002M  		RST.LIS	10h
040654 7A          0003M  		LD A,D
040655 49 D7       0004M  		RST.LIS	10h
040657             0701   
040657 E1          0702   	POP HL
040658 D1          0703   	POP DE
040659 C1          0704   	POP BC
04065A F1          0705   	POP AF
04065B F5          0706   	PUSH AF
04065C C5          0707   	PUSH BC
04065D D5          0708   	PUSH DE
04065E E5          0709   	PUSH HL
04065F             0710   
04065F             0711   	VDU_HL
04065F 7D          0001M  		LD A,L
040660 49 D7       0002M  		RST.LIS	10h
040662 7C          0003M  		LD A,H
040663 49 D7       0004M  		RST.LIS	10h
040665             0712   
040665 E1          0713   	POP HL
040666 D1          0714   	POP DE
040667 C1          0715   	POP BC
040668 F1          0716   	POP AF
040669             0717   
040669 13          0718   	INC DE
04066A             0719   
04066A E5          0720   	PUSH HL
04066B DD 21 0F 01 0721   	LD IX,width_by_mode
       04          
040670 DD 6E 00    0722   	LD L,(IX+0)
040673 DD 66 01    0723   	LD H,(IX+1)
040676 EB          0724   	EX DE,HL
040677 B7          0725   	OR A
040678 ED 52       0726   	SBC HL,DE
04067A 19          0727   	ADD HL,DE
04067B EB          0728   	EX DE,HL
04067C E1          0729   	POP HL
04067D 28 01       0730   	JR Z,pp_carriage_return
04067F C9          0731   	ret
040680             0732   
040680             0733   pp_carriage_return:
040680 11 00 00 00 0734   	LD DE,$000000
040684 23          0735   	INC HL
040685 C9          0736   	ret
040686             0737   
040686             0738   ; B -> count of pixels to draw
040686             0739   ; A -> color
040686             0740   plot_line:
040686 F5          0741   	PUSH AF
040687 C5          0742   	PUSH BC
040688 D5          0743   	PUSH DE
040689 E5          0744   	PUSH HL
04068A             0745   
04068A E1          0746   	POP HL
04068B D1          0747   	POP DE
04068C C1          0748   	POP BC
04068D F1          0749   	POP AF
04068E C9          0750   	ret
