PC     Output      Line
040000             0001   ; uncrunch.asm
040000             0002   ; (B.Vignoli)
040000             0003   ;
040000             0004   ; MIT Licence
040000             0005   ;
040000             0006   
040000             0007   .ASSUME ADL=1
040000             0008   .ORG $040000
040000             0009   
040000 C3 57 01 04 0010   	JP start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .ALIGN 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .DB "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	INCLUDE "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0207*  
040045             0208*  	MACRO VDU_DE
040045             0209*  		LD A,E
040045             0210*  		RST.LIS	10h
040045             0211*  		LD A,D
040045             0212*  		RST.LIS	10h
040045             0213*  	ENDMACRO
040045             0214*  
040045             0215*  	MACRO VDU_HL
040045             0216*  		LD A,L
040045             0217*  		RST.LIS	10h
040045             0218*  		LD A,H
040045             0219*  		RST.LIS	10h
040045             0220*  	ENDMACRO
040045             0019   
040045             0020   ; equ
040045             0021   KEY_ESCAPE: EQU -113
040045             0022   
040045             0023   BITLOOKUP:
040045 01 02 04 08 0024   	DB 01h,02h,04h,08h
040049 10 20 40 80 0025   	DB 10h,20h,40h,80h
04004D             0026   
04004D             0027   ; data
04004D             0028   not_crunched_screen_filename:
04004D 73 63 72 65 0029   	DB "screens/not_crunched.scn",0
       65 6E 73 2F 
       6E 6F 74 5F 
       63 72 75 6E 
       63 68 65 64 
       2E 73 63 6E 
       00          
040066             0030   
040066             0031   crunched_screen_filename:
040066 73 63 72 65 0032   	DB "screens/crunched.scn",0
       65 6E 73 2F 
       63 72 75 6E 
       63 68 65 64 
       2E 73 63 6E 
       00          
04007B             0033   
04007B             0034   colors_count:
04007B 00          0035   	DB 0
04007C             0036   
04007C             0037   red_tint:
04007C 00          0038   	DB 0
04007D             0039   
04007D             0040   green_tint:
04007D 00          0041   	DB 0
04007E             0042   
04007E             0043   blue_tint:
04007E 00          0044   	DB 0
04007F             0045   
04007F             0046   colors_by_mode:
04007F 10          0047   	DB 16
040080 04          0048   	DB 4
040081 02          0049   	DB 2
040082 40          0050   	DB 64
040083 10          0051   	DB 16
040084 04          0052   	DB 4
040085 02          0053   	DB 2
040086 10          0054   	DB 16
040087 40          0055   	DB 64
040088 10          0056   	DB 16
040089 04          0057   	DB 4
04008A 02          0058   	DB 2
04008B 40          0059   	DB 64
04008C 10          0060   	DB 16
04008D 04          0061   	DB 4
04008E 02          0062   	DB 2
04008F 04          0063   	DB 4
040090 02          0064   	DB 2
040091 02          0065   	DB 2
040092 04          0066   	DB 4
040093 40          0067   	DB 64
040094 10          0068   	DB 16
040095 04          0069   	DB 4
040096 02          0070   	DB 2
040097             0071   
040097             0072   palette_rgb:
040097             0073   	DS 192
040157             0074   
040157             0075   ; start main program ============================
040157             0076   start:
040157 F5          0077   	PUSH AF
040158 C5          0078   	PUSH BC
040159 D5          0079   	PUSH DE
04015A DD E5       0080   	PUSH IX
04015C FD E5       0081   	PUSH IY
04015E             0082   
04015E             0083   	; reset sprites and bitmaps data
04015E             0084   	VDU 23
04015E 3E 17       0001M  		LD	A, function
040160 49 D7       0002M  		RST.LIS	10h
040162             0085   	VDU 27
040162 3E 1B       0001M  		LD	A, function
040164 49 D7       0002M  		RST.LIS	10h
040166             0086   	VDU 16
040166 3E 10       0001M  		LD	A, function
040168 49 D7       0002M  		RST.LIS	10h
04016A             0087   
04016A             0088   	; set mode 8
04016A             0089   	VDU 22
04016A 3E 16       0001M  		LD	A, function
04016C 49 D7       0002M  		RST.LIS	10h
04016E             0090   	VDU 8
04016E 3E 08       0001M  		LD	A, function
040170 49 D7       0002M  		RST.LIS	10h
040172             0091   
040172             0092   	; set black paper color
040172             0093   	VDU 17
040172 3E 11       0001M  		LD	A, function
040174 49 D7       0002M  		RST.LIS	10h
040176             0094   	VDU 128
040176 3E 80       0001M  		LD	A, function
040178 49 D7       0002M  		RST.LIS	10h
04017A             0095   
04017A             0096   	; clear screen
04017A             0097   	VDU 12
04017A 3E 0C       0001M  		LD	A, function
04017C 49 D7       0002M  		RST.LIS	10h
04017E             0098   
04017E             0099   	; hide cursor
04017E             0100   	VDU 23
04017E 3E 17       0001M  		LD	A, function
040180 49 D7       0002M  		RST.LIS	10h
040182             0101   	VDU 1
040182 3E 01       0001M  		LD	A, function
040184 49 D7       0002M  		RST.LIS	10h
040186             0102   	VDU 0
040186 3E 00       0001M  		LD	A, function
040188 49 D7       0002M  		RST.LIS	10h
04018A             0103   
04018A             0104   	; disable logical screen
04018A             0105   	VDU 23
04018A 3E 17       0001M  		LD	A, function
04018C 49 D7       0002M  		RST.LIS	10h
04018E             0106   	VDU 0
04018E 3E 00       0001M  		LD	A, function
040190 49 D7       0002M  		RST.LIS	10h
040192             0107   	VDU $C0
040192 3E C0       0001M  		LD	A, function
040194 49 D7       0002M  		RST.LIS	10h
040196             0108   	VDU 0
040196 3E 00       0001M  		LD	A, function
040198 49 D7       0002M  		RST.LIS	10h
04019A             0109   
04019A             0110   	; set pen 15
04019A             0111   	VDU 17
04019A 3E 11       0001M  		LD	A, function
04019C 49 D7       0002M  		RST.LIS	10h
04019E             0112   	VDU 15
04019E 3E 0F       0001M  		LD	A, function
0401A0 49 D7       0002M  		RST.LIS	10h
0401A2             0113   
0401A2             0114   	; load raw screen
0401A2 CD E6 01 04 0115   	CALL load_raw_screen
0401A6             0116   
0401A6             0117   	; load crunched screen
0401A6             0118   	;CALL load_crunched_screen
0401A6             0119   
0401A6             0120   exit_program:
0401A6             0121   	; wait for any key to be released
0401A6 21 8F FF FF 0122   	LD HL,KEY_ESCAPE
0401AA CD D1 04 04 0123   	CALL inkey
0401AE FE 01       0124   	CP 1
0401B0 20 F4       0125   	JR NZ,exit_program
0401B2             0126   
0401B2             0127   	; reset to mode 1
0401B2             0128   	VDU 22
0401B2 3E 16       0001M  		LD	A, function
0401B4 49 D7       0002M  		RST.LIS	10h
0401B6             0129   	VDU 1
0401B6 3E 01       0001M  		LD	A, function
0401B8 49 D7       0002M  		RST.LIS	10h
0401BA             0130   
0401BA             0131   	; enable logical screen
0401BA             0132   	VDU 23
0401BA 3E 17       0001M  		LD	A, function
0401BC 49 D7       0002M  		RST.LIS	10h
0401BE             0133   	VDU 0
0401BE 3E 00       0001M  		LD	A, function
0401C0 49 D7       0002M  		RST.LIS	10h
0401C2             0134   	VDU $C0
0401C2 3E C0       0001M  		LD	A, function
0401C4 49 D7       0002M  		RST.LIS	10h
0401C6             0135   	VDU 1
0401C6 3E 01       0001M  		LD	A, function
0401C8 49 D7       0002M  		RST.LIS	10h
0401CA             0136   
0401CA             0137   	; position the texte cursor at home
0401CA             0138   	VDU 30
0401CA 3E 1E       0001M  		LD	A, function
0401CC 49 D7       0002M  		RST.LIS	10h
0401CE             0139   
0401CE             0140   	; show cursor
0401CE             0141   	VDU 23
0401CE 3E 17       0001M  		LD	A, function
0401D0 49 D7       0002M  		RST.LIS	10h
0401D2             0142   	VDU 1
0401D2 3E 01       0001M  		LD	A, function
0401D4 49 D7       0002M  		RST.LIS	10h
0401D6             0143   	VDU 1
0401D6 3E 01       0001M  		LD	A, function
0401D8 49 D7       0002M  		RST.LIS	10h
0401DA             0144   
0401DA FD E1       0145   	POP IY
0401DC DD E1       0146   	POP IX
0401DE D1          0147   	POP DE
0401DF C1          0148   	POP BC
0401E0 F1          0149   	POP AF
0401E1 21 00 00 00 0150   	LD HL,0
0401E5             0151   
0401E5 C9          0152   	RET
0401E6             0153   
0401E6             0154   ; ===============================================
0401E6             0155   
0401E6             0156   ; load a raw screen
0401E6             0157   load_raw_screen:
0401E6             0158   	; open the file for read
0401E6 21 4D 00 04 0159   	LD HL,not_crunched_screen_filename
0401EA 0E 01       0160   	LD C,fa_open_existing|fa_read
0401EC             0161   	MOSCALL mos_fopen
0401EC 3E 0A       0001M  		LD	A, function
0401EE 49 CF       0002M  		RST.LIS	08h
0401F0             0162   
0401F0             0163   	; exit on error
0401F0 FE 00       0164   	CP 0
0401F2 C8          0165   	RET Z
0401F3             0166   
0401F3             0167   	; filehandle -> C
0401F3 4F          0168   	LD C,A
0401F4             0169   
0401F4             0170   	; read the mode
0401F4             0171   	MOSCALL mos_fgetc
0401F4 3E 0C       0001M  		LD	A, function
0401F6 49 CF       0002M  		RST.LIS	08h
0401F8 DA F2 03 04 0172   	JP C,lrs_error
0401FC             0173   
0401FC             0174   	; set the readen mode
0401FC C5          0175   	PUSH BC
0401FD F5          0176   	PUSH AF
0401FE             0177   	VDU 22
0401FE 3E 16       0001M  		LD	A, function
040200 49 D7       0002M  		RST.LIS	10h
040202 F1          0178   	POP AF
040203 F5          0179   	PUSH AF
040204             0180   	VDU_A
040204 49 D7       0001M  		RST.LIS	10h
040206             0181   	VDU 23 ; hide cursor
040206 3E 17       0001M  		LD	A, function
040208 49 D7       0002M  		RST.LIS	10h
04020A             0182   	VDU 1
04020A 3E 01       0001M  		LD	A, function
04020C 49 D7       0002M  		RST.LIS	10h
04020E             0183   	VDU 0
04020E 3E 00       0001M  		LD	A, function
040210 49 D7       0002M  		RST.LIS	10h
040212 F1          0184   	POP AF
040213 C1          0185   	POP BC
040214             0186   
040214             0187   	; get colors count
040214 21 7F 00 04 0188   	LD HL,colors_by_mode
040218 11 00 00 00 0189   	LD DE,#000000
04021C 5F          0190   	LD E,A
04021D 19          0191   	ADD HL,DE
04021E 7E          0192   	LD A,(HL) ; number of colors
04021F 21 7B 00 04 0193   	LD HL,colors_count
040223 77          0194   	LD (HL),A
040224             0195   
040224             0196   	; read the palette
040224 21 97 00 04 0197   	LD HL,palette_rgb
040228 11 00 00 00 0198   	LD DE,#000000
04022C 5F          0199   	LD E,A
04022D 16 03       0200   	LD D,3
04022F ED 5C       0201   	MLT DE
040231 D5          0202   	PUSH DE
040232             0203   	MOSCALL mos_fread
040232 3E 1A       0001M  		LD	A, function
040234 49 CF       0002M  		RST.LIS	08h
040236 E1          0204   	POP HL
040237 B7          0205   	OR A
040238 ED 52       0206   	SBC HL,DE
04023A 19          0207   	ADD HL,DE
04023B C2 F2 03 04 0208   	JP NZ,lrs_error
04023F             0209   
04023F             0210   	; set the palette
04023F 21 7B 00 04 0211   	LD HL,colors_count
040243 7E          0212   	LD A,(HL)
040244 FE 00       0213   	CP 0
040246 CA F2 03 04 0214   	JP Z,lrs_error
04024A             0215   
04024A C5          0216   	PUSH BC
04024B 06 00       0217   	LD B,0
04024D 21 97 00 04 0218   	LD HL,palette_rgb
040251             0219   
040251             0220   lrs_set_palette:
040251 4E          0221   	LD C,(HL)
040252 23          0222   	INC HL
040253 5E          0223   	LD E,(HL)
040254 F5          0224   	push af
040255 7B          0225   	ld a,e
040256 CD 81 05 04 0226   	call debug_byte
04025A F1          0227   	pop af
04025B             0228   
04025B 23          0229   	INC HL
04025C 6E          0230   	LD L,(HL)
04025D 23          0231   	INC HL
04025E CD 02 05 04 0232   	CALL set_color
040262 3D          0233   	DEC A
040263 04          0234   	INC B
040264 FE 00       0235   	CP 0
040266 20 E9       0236   	JR NZ,lrs_set_palette
040268             0237   
040268 C1          0238   	POP BC
040269             0239   
040269             0240   	; read crunched flag
040269             0241   	MOSCALL mos_fgetc
040269 3E 0C       0001M  		LD	A, function
04026B 49 CF       0002M  		RST.LIS	08h
04026D DA F2 03 04 0242   	JP C,lrs_error
040271             0243   
040271             0244   	; not crunched file flag
040271 FE 00       0245   	CP 0
040273 C2 F2 03 04 0246   	JP NZ,lrs_error
040277             0247   
040277             0248   	; read data on the sdcard
040277 21 00 00 05 0249   	LD HL,$050000
04027B 11 00 FA 00 0250   	LD DE,64000
04027F             0251   	MOSCALL mos_fread
04027F 3E 1A       0001M  		LD	A, function
040281 49 CF       0002M  		RST.LIS	08h
040283 21 00 FA 00 0252   	LD HL,64000
040287 B7          0253   	OR A
040288 ED 52       0254   	SBC HL,DE
04028A 19          0255   	ADD HL,DE ; DE = 64000 ?
04028B C2 F2 03 04 0256   	JP NZ,lrs_error
04028F             0257   
04028F             0258   	; read data on the sdcard
04028F 21 00 FA 05 0259   	LD HL,$05FA00
040293 11 00 06 00 0260   	LD DE,1536
040297             0261   	MOSCALL mos_fread
040297 3E 1A       0001M  		LD	A, function
040299 49 CF       0002M  		RST.LIS	08h
04029B 21 00 06 00 0262   	LD HL,1536
04029F B7          0263   	OR A
0402A0 ED 52       0264   	SBC HL,DE
0402A2 19          0265   	ADD HL,DE ; DE = 1536 ?
0402A3 C2 F2 03 04 0266   	JP NZ,lrs_error
0402A7             0267   
0402A7             0268   	; read data on the sdcard
0402A7 21 00 00 06 0269   	LD HL,$060000
0402AB 11 00 2C 00 0270   	LD DE,11264
0402AF             0271   	MOSCALL mos_fread
0402AF 3E 1A       0001M  		LD	A, function
0402B1 49 CF       0002M  		RST.LIS	08h
0402B3 21 00 2C 00 0272   	LD HL,11264
0402B7 B7          0273   	OR A
0402B8 ED 52       0274   	SBC HL,DE
0402BA 19          0275   	ADD HL,DE ; DE = 11264 ?
0402BB C2 F2 03 04 0276   	JP NZ,lrs_error
0402BF             0277   
0402BF             0278   	; close the file
0402BF             0279   	MOSCALL mos_fclose
0402BF 3E 0B       0001M  		LD	A, function
0402C1 49 CF       0002M  		RST.LIS	08h
0402C3             0280   
0402C3             0281   	; clear buffer 64255
0402C3             0282   	VDU 23
0402C3 3E 17       0001M  		LD	A, function
0402C5 49 D7       0002M  		RST.LIS	10h
0402C7             0283   	VDU 0
0402C7 3E 00       0001M  		LD	A, function
0402C9 49 D7       0002M  		RST.LIS	10h
0402CB             0284   	VDU $A0
0402CB 3E A0       0001M  		LD	A, function
0402CD 49 D7       0002M  		RST.LIS	10h
0402CF             0285   	VDU $FF ; buffer number (16 bits)
0402CF 3E FF       0001M  		LD	A, function
0402D1 49 D7       0002M  		RST.LIS	10h
0402D3             0286   	VDU $FA
0402D3 3E FA       0001M  		LD	A, function
0402D5 49 D7       0002M  		RST.LIS	10h
0402D7             0287   	VDU 2 ; command
0402D7 3E 02       0001M  		LD	A, function
0402D9 49 D7       0002M  		RST.LIS	10h
0402DB             0288   
0402DB             0289   	; coordinates to draw a piece of screen
0402DB 21 00 00 05 0290   	LD HL,$050000 ; start address
0402DF FD 21 00 01 0291   	LD IY,256 ; 256 blocks of 256 bytes for the 1st RAM part
       00          
0402E4             0292   
0402E4             0293   lrs_upload_block:
0402E4             0294   	; upload data to the buffer
0402E4             0295   	VDU 23
0402E4 3E 17       0001M  		LD	A, function
0402E6 49 D7       0002M  		RST.LIS	10h
0402E8             0296   	VDU 0
0402E8 3E 00       0001M  		LD	A, function
0402EA 49 D7       0002M  		RST.LIS	10h
0402EC             0297   	VDU $A0
0402EC 3E A0       0001M  		LD	A, function
0402EE 49 D7       0002M  		RST.LIS	10h
0402F0             0298   	VDU $FF ; buffer number (16 bits)
0402F0 3E FF       0001M  		LD	A, function
0402F2 49 D7       0002M  		RST.LIS	10h
0402F4             0299   	VDU $FA
0402F4 3E FA       0001M  		LD	A, function
0402F6 49 D7       0002M  		RST.LIS	10h
0402F8             0300   	VDU 0 ; command
0402F8 3E 00       0001M  		LD	A, function
0402FA 49 D7       0002M  		RST.LIS	10h
0402FC 11 00 01 00 0301   	LD DE,256 ; 256 bytes
040300             0302   	VDU_DE
040300 7B          0001M  		LD A,E
040301 49 D7       0002M  		RST.LIS	10h
040303 7A          0003M  		LD A,D
040304 49 D7       0004M  		RST.LIS	10h
040306             0303   
040306 C5          0304   	PUSH BC
040307 DD E5       0305   	PUSH IX
040309 01 00 01 00 0306   	LD BC,256
04030D             0307   lrs_loop:
04030D 7E          0308   	LD A,(HL) ; rgba2222 color
04030E             0309   	VDU_A
04030E 49 D7       0001M  		RST.LIS	10h
040310 23          0310   	INC HL
040311 0B          0311   	DEC BC
040312 78          0312   	LD A,B
040313 B1          0313   	OR C
040314 C2 0D 03 04 0314   	JP NZ,lrs_loop
040318 DD E1       0315   	POP IX
04031A C1          0316   	POP BC
04031B             0317   
04031B             0318   	; next block of 256 bytes
04031B FD 2B       0319   	DEC IY
04031D FD E5       0320   	PUSH IY
04031F D1          0321   	POP DE
040320 7A          0322   	LD A,D
040321 B3          0323   	OR E
040322 FE 00       0324   	CP 0
040324 C2 E4 02 04 0325   	JP NZ,lrs_upload_block
040328             0326   
040328             0327   	; second part
040328             0328   	; coordinates to draw a piece of screen
040328 21 00 00 06 0329   	LD HL,$060000 ; start address
04032C FD 21 2C 00 0330   	LD IY,44 ; 44 blocks of 256 bytes for the 2nd RAM part
       00          
040331             0331   
040331             0332   lrs_upload_block2:
040331             0333   	; upload data to the buffer
040331             0334   	VDU 23
040331 3E 17       0001M  		LD	A, function
040333 49 D7       0002M  		RST.LIS	10h
040335             0335   	VDU 0
040335 3E 00       0001M  		LD	A, function
040337 49 D7       0002M  		RST.LIS	10h
040339             0336   	VDU $A0
040339 3E A0       0001M  		LD	A, function
04033B 49 D7       0002M  		RST.LIS	10h
04033D             0337   	VDU $FF ; buffer number (16 bits)
04033D 3E FF       0001M  		LD	A, function
04033F 49 D7       0002M  		RST.LIS	10h
040341             0338   	VDU $FA
040341 3E FA       0001M  		LD	A, function
040343 49 D7       0002M  		RST.LIS	10h
040345             0339   	VDU 0 ; command
040345 3E 00       0001M  		LD	A, function
040347 49 D7       0002M  		RST.LIS	10h
040349 11 00 01 00 0340   	LD DE,256 ; 256 bytes
04034D             0341   	VDU_DE
04034D 7B          0001M  		LD A,E
04034E 49 D7       0002M  		RST.LIS	10h
040350 7A          0003M  		LD A,D
040351 49 D7       0004M  		RST.LIS	10h
040353             0342   
040353 C5          0343   	PUSH BC
040354 DD E5       0344   	PUSH IX
040356 01 00 01 00 0345   	LD BC,256
04035A             0346   lrs_loop2:
04035A 7E          0347   	LD A,(HL) ; rgba2222 color
04035B             0348   	VDU_A
04035B 49 D7       0001M  		RST.LIS	10h
04035D 23          0349   	INC HL
04035E 0B          0350   	DEC BC
04035F 78          0351   	LD A,B
040360 B1          0352   	OR C
040361 C2 5A 03 04 0353   	JP NZ,lrs_loop2
040365 DD E1       0354   	POP IX
040367 C1          0355   	POP BC
040368             0356   
040368             0357   	; next block of 256 bytes
040368 FD 2B       0358   	DEC IY
04036A FD E5       0359   	PUSH IY
04036C D1          0360   	POP DE
04036D 7A          0361   	LD A,D
04036E B3          0362   	OR E
04036F FE 00       0363   	CP 0
040371 C2 31 03 04 0364   	JP NZ,lrs_upload_block2
040375             0365   
040375             0366   	; consolidate buffer 0
040375             0367   	VDU 23
040375 3E 17       0001M  		LD	A, function
040377 49 D7       0002M  		RST.LIS	10h
040379             0368   	VDU 0
040379 3E 00       0001M  		LD	A, function
04037B 49 D7       0002M  		RST.LIS	10h
04037D             0369   	VDU $A0
04037D 3E A0       0001M  		LD	A, function
04037F 49 D7       0002M  		RST.LIS	10h
040381             0370   	VDU $FF ; buffer number (16 bits)
040381 3E FF       0001M  		LD	A, function
040383 49 D7       0002M  		RST.LIS	10h
040385             0371   	VDU $FA
040385 3E FA       0001M  		LD	A, function
040387 49 D7       0002M  		RST.LIS	10h
040389             0372   	VDU 14 ; command
040389 3E 0E       0001M  		LD	A, function
04038B 49 D7       0002M  		RST.LIS	10h
04038D             0373   
04038D             0374   	; set buffer 64255 as bitmap (bitmap 255)
04038D             0375   	VDU 23
04038D 3E 17       0001M  		LD	A, function
04038F 49 D7       0002M  		RST.LIS	10h
040391             0376   	VDU 27
040391 3E 1B       0001M  		LD	A, function
040393 49 D7       0002M  		RST.LIS	10h
040395             0377   	VDU $20
040395 3E 20       0001M  		LD	A, function
040397 49 D7       0002M  		RST.LIS	10h
040399             0378   	VDU $FF ; bitmap number (16 bits)
040399 3E FF       0001M  		LD	A, function
04039B 49 D7       0002M  		RST.LIS	10h
04039D             0379   	VDU $FA
04039D 3E FA       0001M  		LD	A, function
04039F 49 D7       0002M  		RST.LIS	10h
0403A1             0380   
0403A1             0381   	; set buffer 64255 attributes
0403A1             0382   	VDU 23
0403A1 3E 17       0001M  		LD	A, function
0403A3 49 D7       0002M  		RST.LIS	10h
0403A5             0383   	VDU 27
0403A5 3E 1B       0001M  		LD	A, function
0403A7 49 D7       0002M  		RST.LIS	10h
0403A9             0384   	VDU $21
0403A9 3E 21       0001M  		LD	A, function
0403AB 49 D7       0002M  		RST.LIS	10h
0403AD 11 40 01 00 0385   	LD DE,320 ; width
0403B1 21 F0 00 00 0386   	LD HL,240 ; height
0403B5             0387   	VDU_DE
0403B5 7B          0001M  		LD A,E
0403B6 49 D7       0002M  		RST.LIS	10h
0403B8 7A          0003M  		LD A,D
0403B9 49 D7       0004M  		RST.LIS	10h
0403BB             0388   	VDU_HL
0403BB 7D          0001M  		LD A,L
0403BC 49 D7       0002M  		RST.LIS	10h
0403BE 7C          0003M  		LD A,H
0403BF 49 D7       0004M  		RST.LIS	10h
0403C1             0389   	VDU 1 ; rgba2222
0403C1 3E 01       0001M  		LD	A, function
0403C3 49 D7       0002M  		RST.LIS	10h
0403C5             0390   
0403C5             0391   	; select bitmap 255
0403C5             0392   	VDU 23
0403C5 3E 17       0001M  		LD	A, function
0403C7 49 D7       0002M  		RST.LIS	10h
0403C9             0393   	VDU 27
0403C9 3E 1B       0001M  		LD	A, function
0403CB 49 D7       0002M  		RST.LIS	10h
0403CD             0394   	VDU 0
0403CD 3E 00       0001M  		LD	A, function
0403CF 49 D7       0002M  		RST.LIS	10h
0403D1             0395   	VDU 255
0403D1 3E FF       0001M  		LD	A, function
0403D3 49 D7       0002M  		RST.LIS	10h
0403D5             0396   
0403D5             0397   	; draw bitmap 255 at coordinates 0,0
0403D5             0398   	VDU 23
0403D5 3E 17       0001M  		LD	A, function
0403D7 49 D7       0002M  		RST.LIS	10h
0403D9             0399   	VDU 27
0403D9 3E 1B       0001M  		LD	A, function
0403DB 49 D7       0002M  		RST.LIS	10h
0403DD             0400   	VDU 3
0403DD 3E 03       0001M  		LD	A, function
0403DF 49 D7       0002M  		RST.LIS	10h
0403E1             0401   	VDU 0
0403E1 3E 00       0001M  		LD	A, function
0403E3 49 D7       0002M  		RST.LIS	10h
0403E5             0402   	VDU 0
0403E5 3E 00       0001M  		LD	A, function
0403E7 49 D7       0002M  		RST.LIS	10h
0403E9             0403   	VDU 0
0403E9 3E 00       0001M  		LD	A, function
0403EB 49 D7       0002M  		RST.LIS	10h
0403ED             0404   	VDU 0
0403ED 3E 00       0001M  		LD	A, function
0403EF 49 D7       0002M  		RST.LIS	10h
0403F1 C9          0405   	RET
0403F2             0406   
0403F2             0407   lrs_error:
0403F2             0408   	VDU 7
0403F2 3E 07       0001M  		LD	A, function
0403F4 49 D7       0002M  		RST.LIS	10h
0403F6             0409   	MOSCALL mos_fclose
0403F6 3E 0B       0001M  		LD	A, function
0403F8 49 CF       0002M  		RST.LIS	08h
0403FA C9          0410   	RET
0403FB             0411   
0403FB             0412   lrs_exit:
0403FB C9          0413   	RET
0403FC             0414   
0403FC             0415   ; load a crunched screen
0403FC             0416   load_crunched_screen:
0403FC             0417   	; open the file for read
0403FC 21 66 00 04 0418   	LD HL,crunched_screen_filename
040400 0E 01       0419   	LD C,fa_open_existing|fa_read
040402             0420   	MOSCALL mos_fopen
040402 3E 0A       0001M  		LD	A, function
040404 49 CF       0002M  		RST.LIS	08h
040406             0421   
040406             0422   	; exit on error
040406 FE 00       0423   	CP 0
040408 C8          0424   	RET Z
040409             0425   
040409             0426   	; filehandle -> C
040409 4F          0427   	LD C,A
04040A             0428   
04040A             0429   	; read the mode
04040A             0430   	MOSCALL mos_fgetc
04040A 3E 0C       0001M  		LD	A, function
04040C 49 CF       0002M  		RST.LIS	08h
04040E DA C3 04 04 0431   	JP C,lcs_error
040412             0432   
040412             0433   	; set the readen mode
040412 C5          0434   	PUSH BC
040413 F5          0435   	PUSH AF
040414             0436   	VDU 22
040414 3E 16       0001M  		LD	A, function
040416 49 D7       0002M  		RST.LIS	10h
040418 F1          0437   	POP AF
040419 F5          0438   	PUSH AF
04041A             0439   	VDU_A
04041A 49 D7       0001M  		RST.LIS	10h
04041C             0440   	VDU 23 ; hide cursor
04041C 3E 17       0001M  		LD	A, function
04041E 49 D7       0002M  		RST.LIS	10h
040420             0441   	VDU 1
040420 3E 01       0001M  		LD	A, function
040422 49 D7       0002M  		RST.LIS	10h
040424             0442   	VDU 0
040424 3E 00       0001M  		LD	A, function
040426 49 D7       0002M  		RST.LIS	10h
040428 F1          0443   	POP AF
040429 C1          0444   	POP BC
04042A             0445   
04042A             0446   	; get colors count
04042A 21 7F 00 04 0447   	LD HL,colors_by_mode
04042E 11 00 00 00 0448   	LD DE,#000000
040432 5F          0449   	LD E,A
040433 19          0450   	ADD HL,DE
040434 7E          0451   	LD A,(HL) ; number of colors
040435 21 7B 00 04 0452   	LD HL,colors_count
040439 77          0453   	LD (HL),A
04043A             0454   
04043A             0455   	; read the palette
04043A 21 97 00 04 0456   	LD HL,palette_rgb
04043E 11 00 00 00 0457   	LD DE,#000000
040442 5F          0458   	LD E,A
040443 16 03       0459   	LD D,3
040445 ED 5C       0460   	MLT DE
040447 D5          0461   	PUSH DE
040448             0462   	MOSCALL mos_fread
040448 3E 1A       0001M  		LD	A, function
04044A 49 CF       0002M  		RST.LIS	08h
04044C E1          0463   	POP HL
04044D B7          0464   	OR A
04044E ED 52       0465   	SBC HL,DE
040450 19          0466   	ADD HL,DE
040451 C2 C3 04 04 0467   	JP NZ,lcs_error
040455             0468   
040455             0469   	; set the palette
040455 21 7B 00 04 0470   	LD HL,colors_count
040459 7E          0471   	LD A,(HL)
04045A FE 00       0472   	CP 0
04045C CA C3 04 04 0473   	JP Z,lcs_error
040460             0474   
040460 C5          0475   	PUSH BC
040461 06 00       0476   	LD B,0
040463 21 97 00 04 0477   	LD HL,palette_rgb
040467             0478   
040467             0479   lcs_set_palette:
040467 4E          0480   	LD C,(HL)
040468 23          0481   	INC HL
040469 5E          0482   	LD E,(HL)
04046A 23          0483   	INC HL
04046B 6E          0484   	LD L,(HL)
04046C 23          0485   	INC HL
04046D CD 02 05 04 0486   	CALL set_color
040471 3D          0487   	DEC A
040472 04          0488   	INC B
040473 FE 00       0489   	CP 0
040475 20 F0       0490   	JR NZ,lcs_set_palette
040477             0491   
040477 C1          0492   	POP BC
040478             0493   
040478             0494   	; read crunched flag
040478             0495   	MOSCALL mos_fgetc
040478 3E 0C       0001M  		LD	A, function
04047A 49 CF       0002M  		RST.LIS	08h
04047C DA C3 04 04 0496   	JP C,lcs_error
040480             0497   
040480             0498   	; crunched file flag
040480 FE 01       0499   	CP 1
040482 C2 C3 04 04 0500   	JP NZ,lcs_error
040486             0501   
040486             0502   	; read data on the sdcard, and uncrunch
040486 11 00 00 00 0503   	LD DE,#000000 ; x screen
04048A 21 00 00 00 0504   	LD HL,#000000 ; y screen
04048E             0505   
04048E             0506   lcs_loop:
04048E             0507   	MOSCALL mos_fgetc
04048E 3E 0C       0001M  		LD	A, function
040490 49 CF       0002M  		RST.LIS	08h
040492 DA CC 04 04 0508   	JP C,lcs_exit
040496             0509   
040496             0510   	; case > 0
040496 FE 01       0511   	CP 1
040498 CC 3E 05 04 0512   	CALL Z,plot_pixel
04049C CA 8E 04 04 0513   	JP Z,lcs_loop
0404A0             0514   
0404A0             0515   	; case 0,0
0404A0             0516   	MOSCALL mos_fgetc
0404A0 3E 0C       0001M  		LD	A, function
0404A2 49 CF       0002M  		RST.LIS	08h
0404A4 DA CC 04 04 0517   	JP C,lcs_exit
0404A8             0518   
0404A8 FE 00       0519   	CP 0
0404AA CC 3E 05 04 0520   	CALL Z,plot_pixel
0404AE CA 8E 04 04 0521   	JP Z,lcs_loop
0404B2             0522   
0404B2             0523   	; case command, count, value
0404B2 47          0524   	LD B,A
0404B3             0525   
0404B3             0526   	MOSCALL mos_fgetc
0404B3 3E 0C       0001M  		LD	A, function
0404B5 49 CF       0002M  		RST.LIS	08h
0404B7 DA CC 04 04 0527   	JP C,lcs_exit
0404BB             0528   
0404BB CC 78 05 04 0529   	CALL Z,plot_line
0404BF C3 8E 04 04 0530   	JP lcs_loop
0404C3             0531   
0404C3             0532   lcs_error:
0404C3             0533   	VDU 7
0404C3 3E 07       0001M  		LD	A, function
0404C5 49 D7       0002M  		RST.LIS	10h
0404C7             0534   	MOSCALL mos_fclose
0404C7 3E 0B       0001M  		LD	A, function
0404C9 49 CF       0002M  		RST.LIS	08h
0404CB C9          0535   	RET
0404CC             0536   
0404CC             0537   lcs_exit:
0404CC             0538   	MOSCALL mos_fclose
0404CC 3E 0B       0001M  		LD	A, function
0404CE 49 CF       0002M  		RST.LIS	08h
0404D0 C9          0539   	RET
0404D1             0540   
0404D1             0541   ; input: HL = negative key to check
0404D1             0542   inkey:
0404D1             0543   	MOSCALL	mos_getkbmap
0404D1 3E 1E       0001M  		LD	A, function
0404D3 49 CF       0002M  		RST.LIS	08h
0404D5 23          0544   	INC	HL
0404D6 7D          0545   	LD	A, L
0404D7 ED 44       0546   	NEG
0404D9 4F          0547   	LD	C, A
0404DA 3E 01       0548   	LD	A, 1
0404DC FA 00 05 04 0549   	JP	M,inkey_false ; < -128 ?
0404E0             0550   
0404E0 21 45 00 04 0551   	LD	HL,BITLOOKUP
0404E4 11 00 00 00 0552   	LD	DE,0
0404E8 79          0553   	LD	A,C
0404E9 E6 07       0554   	AND	00000111b
0404EB 5F          0555   	LD	E,A
0404EC 19          0556   	ADD	HL,DE
0404ED 46          0557   	LD	B,(HL)
0404EE             0558   
0404EE 79          0559   	LD	A,C
0404EF E6 78       0560   	AND	01111000b
0404F1 0F          0561   	RRCA
0404F2 0F          0562   	RRCA
0404F3 0F          0563   	RRCA
0404F4 5F          0564   	LD	E, A
0404F5 DD 19       0565   	ADD	IX,DE
0404F7 DD 7E 00    0566   	LD	A,(IX+0)
0404FA A0          0567   	AND	B
0404FB 28 03       0568   	JR Z,inkey_false
0404FD 3E 01       0569   	LD A,1
0404FF C9          0570   	RET
040500             0571   inkey_false:
040500 AF          0572   	XOR A
040501 C9          0573   	RET
040502             0574   
040502             0575   ; set color RGB (a = c,e,l)
040502             0576   set_color:
040502 F5          0577   	PUSH AF
040503 C5          0578   	PUSH BC
040504 D5          0579   	PUSH DE
040505 E5          0580   	PUSH HL
040506             0581   
040506 E5          0582   	PUSH HL
040507 21 7C 00 04 0583   	LD HL,red_tint
04050B 71          0584   	LD (HL),C
04050C 21 7D 00 04 0585   	LD HL,green_tint
040510 73          0586   	LD (HL),E
040511 D1          0587   	POP DE
040512 21 7E 00 04 0588   	LD HL,blue_tint
040516 73          0589   	LD (HL),E
040517             0590   
040517 C5          0591   	PUSH BC
040518             0592   	VDU 19
040518 3E 13       0001M  		LD	A, function
04051A 49 D7       0002M  		RST.LIS	10h
04051C C1          0593   	POP BC
04051D 78          0594   	LD A,B
04051E             0595   	VDU_A
04051E 49 D7       0001M  		RST.LIS	10h
040520             0596   	VDU 255
040520 3E FF       0001M  		LD	A, function
040522 49 D7       0002M  		RST.LIS	10h
040524             0597   
040524 21 7C 00 04 0598   	LD HL,red_tint
040528 7E          0599   	LD A,(HL)
040529             0600   	VDU_A
040529 49 D7       0001M  		RST.LIS	10h
04052B             0601   
04052B 21 7D 00 04 0602   	LD HL,green_tint
04052F 7E          0603   	LD A,(HL)
040530             0604   	VDU_A
040530 49 D7       0001M  		RST.LIS	10h
040532             0605   
040532 21 7E 00 04 0606   	LD HL,blue_tint
040536 7E          0607   	LD A,(HL)
040537             0608   	VDU_A
040537 49 D7       0001M  		RST.LIS	10h
040539             0609   
040539 E1          0610   	pop hl
04053A D1          0611   	pop de
04053B C1          0612   	pop bc
04053C F1          0613   	pop af
04053D C9          0614   	ret
04053E             0615   
04053E             0616   ; A -> color
04053E             0617   plot_pixel:
04053E F5          0618   	PUSH AF
04053F C5          0619   	PUSH BC
040540 D5          0620   	PUSH DE
040541 E5          0621   	PUSH HL
040542             0622   
040542 F5          0623   	PUSH AF
040543             0624   	VDU 18
040543 3E 12       0001M  		LD	A, function
040545 49 D7       0002M  		RST.LIS	10h
040547             0625   	VDU 0
040547 3E 00       0001M  		LD	A, function
040549 49 D7       0002M  		RST.LIS	10h
04054B F1          0626   	POP AF
04054C             0627   	VDU_A
04054C 49 D7       0001M  		RST.LIS	10h
04054E             0628   
04054E             0629   	VDU 25
04054E 3E 19       0001M  		LD	A, function
040550 49 D7       0002M  		RST.LIS	10h
040552             0630   	VDU 0
040552 3E 00       0001M  		LD	A, function
040554 49 D7       0002M  		RST.LIS	10h
040556             0631   
040556 E1          0632   	POP HL
040557 D1          0633   	POP DE
040558 C1          0634   	POP BC
040559 F1          0635   	POP AF
04055A F5          0636   	PUSH AF
04055B C5          0637   	PUSH BC
04055C D5          0638   	PUSH DE
04055D E5          0639   	PUSH HL
04055E             0640   
04055E             0641   	VDU_DE
04055E 7B          0001M  		LD A,E
04055F 49 D7       0002M  		RST.LIS	10h
040561 7A          0003M  		LD A,D
040562 49 D7       0004M  		RST.LIS	10h
040564             0642   
040564 E1          0643   	POP HL
040565 D1          0644   	POP DE
040566 C1          0645   	POP BC
040567 F1          0646   	POP AF
040568 F5          0647   	PUSH AF
040569 C5          0648   	PUSH BC
04056A D5          0649   	PUSH DE
04056B E5          0650   	PUSH HL
04056C             0651   
04056C             0652   	VDU_HL
04056C 7D          0001M  		LD A,L
04056D 49 D7       0002M  		RST.LIS	10h
04056F 7C          0003M  		LD A,H
040570 49 D7       0004M  		RST.LIS	10h
040572             0653   
040572 E1          0654   	POP HL
040573 D1          0655   	POP DE
040574 C1          0656   	POP BC
040575 F1          0657   	POP AF
040576             0658   
040576 13          0659   	INC DE
040577 C9          0660   	ret
040578             0661   
040578             0662   ; B -> count of pixels to draw
040578             0663   ; A -> color
040578             0664   plot_line:
040578 F5          0665   	PUSH AF
040579 C5          0666   	PUSH BC
04057A D5          0667   	PUSH DE
04057B E5          0668   	PUSH HL
04057C             0669   
04057C E1          0670   	POP HL
04057D D1          0671   	POP DE
04057E C1          0672   	POP BC
04057F F1          0673   	POP AF
040580 C9          0674   	ret
040581             0675   
040581             0676   ;=================
040581             0677   ; Debug functions
040581             0678   ;=================
040581             0679   ; A = byte to debug
040581             0680   debug_byte:
040581 F5          0681   	PUSH AF
040582 C5          0682   	PUSH BC
040583 D5          0683   	PUSH DE
040584 E5          0684   	PUSH HL
040585 21 00 00 00 0685   	LD HL,$000000
040589 6F          0686   	LD L,A
04058A 11 C6 05 04 0687   	LD DE,debug_text
04058E D5          0688   	PUSH DE
04058F CD CC 05 04 0689   	CALL num2dec
040593 E1          0690   	POP HL
040594 23          0691   	INC HL
040595 23          0692   	INC HL
040596 01 03 00 00 0693   	LD BC,3
04059A 3E 00       0694   	LD A,0
04059C 49 DF       0695   	RST.LIS $18
04059E E1          0696   	POP HL
04059F D1          0697   	POP DE
0405A0 C1          0698   	POP BC
0405A1 F1          0699   	POP AF
0405A2 C9          0700   	RET
0405A3             0701   
0405A3             0702   ; HL = word to debug
0405A3             0703   debug_word:
0405A3 F5          0704   	PUSH AF
0405A4 C5          0705   	PUSH BC
0405A5 D5          0706   	PUSH DE
0405A6 E5          0707   	PUSH HL
0405A7 11 00 00 00 0708   	LD DE,$000000 ; remove HLU
0405AB 5D          0709   	LD E,L
0405AC 54          0710   	LD D,H
0405AD D5          0711   	PUSH DE
0405AE E1          0712   	POP HL
0405AF 11 C6 05 04 0713   	LD DE,debug_text
0405B3 D5          0714   	PUSH DE
0405B4 CD CC 05 04 0715   	CALL num2dec
0405B8 E1          0716   	POP HL
0405B9 01 05 00 00 0717   	LD BC,5
0405BD 3E 00       0718   	LD A,0
0405BF 49 DF       0719   	RST.LIS $18
0405C1 E1          0720   	POP HL
0405C2 D1          0721   	POP DE
0405C3 C1          0722   	POP BC
0405C4 F1          0723   	POP AF
0405C5 C9          0724   	RET
0405C6             0725   
0405C6             0726   debug_text:
0405C6             0727   	DS 6
0405CC             0728   
0405CC             0729   ; 16 bits number to string
0405CC             0730   num2dec:
0405CC 01 F0 D8 FF 0731   	LD BC,-10000
0405D0 CD ED 05 04 0732   	CALL num1
0405D4 01 18 FC FF 0733   	LD BC,-1000
0405D8 CD ED 05 04 0734   	CALL num1
0405DC 01 9C FF FF 0735   	LD BC,-100
0405E0 CD ED 05 04 0736   	CALL num1
0405E4 01 F6 FF FF 0737   	LD BC,-10
0405E8 CD ED 05 04 0738   	CALL num1
0405EC 48          0739   	LD C,B
0405ED             0740   
0405ED 3E 2F       0741   num1: LD A,'0'-1
0405EF 3C          0742   num2: INC A
0405F0 09          0743   	ADD HL,BC
0405F1 38 FC       0744   	JR C,num2
0405F3 ED 42       0745   	SBC HL,BC
0405F5             0746   
0405F5 12          0747   	LD (DE),A
0405F6 13          0748   	INC DE
0405F7 C9          0749   	RET
