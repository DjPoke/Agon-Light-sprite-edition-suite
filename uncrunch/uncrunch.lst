PC     Output      Line
040000             0001   ; uncrunch.asm
040000             0002   ; (B.Vignoli)
040000             0003   ;
040000             0004   ; MIT Licence
040000             0005   ;
040000             0006   
040000             0007   .ASSUME ADL=1
040000             0008   .ORG $040000
040000             0009   
040000 C3 33 02 04 0010   	JP start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .ALIGN 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .DB "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	INCLUDE "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0207*  
040045             0208*  	MACRO VDU_DE
040045             0209*  		LD A,E
040045             0210*  		RST.LIS	10h
040045             0211*  		LD A,D
040045             0212*  		RST.LIS	10h
040045             0213*  	ENDMACRO
040045             0214*  
040045             0215*  	MACRO VDU_HL
040045             0216*  		LD A,L
040045             0217*  		RST.LIS	10h
040045             0218*  		LD A,H
040045             0219*  		RST.LIS	10h
040045             0220*  	ENDMACRO
040045             0019   	INCLUDE "debug.inc"
040045             0001*  ;=================
040045             0002*  ; Debug functions
040045             0003*  ;=================
040045             0004*  ; A = byte to debug
040045             0005*  debug_byte:
040045 F5          0006*  	PUSH AF
040046 C5          0007*  	PUSH BC
040047 D5          0008*  	PUSH DE
040048 E5          0009*  	PUSH HL
040049 21 00 00 00 0010*  	LD HL,$000000
04004D 6F          0011*  	LD L,A
04004E 11 8A 00 04 0012*  	LD DE,debug_text
040052 D5          0013*  	PUSH DE
040053 CD 90 00 04 0014*  	CALL num2dec
040057 E1          0015*  	POP HL
040058 23          0016*  	INC HL
040059 23          0017*  	INC HL
04005A 01 03 00 00 0018*  	LD BC,3
04005E 3E 00       0019*  	LD A,0
040060 49 DF       0020*  	RST.LIS $18
040062 E1          0021*  	POP HL
040063 D1          0022*  	POP DE
040064 C1          0023*  	POP BC
040065 F1          0024*  	POP AF
040066 C9          0025*  	RET
040067             0026*  
040067             0027*  ; HL = word to debug
040067             0028*  debug_word:
040067 F5          0029*  	PUSH AF
040068 C5          0030*  	PUSH BC
040069 D5          0031*  	PUSH DE
04006A E5          0032*  	PUSH HL
04006B 11 00 00 00 0033*  	LD DE,$000000 ; remove HLU
04006F 5D          0034*  	LD E,L
040070 54          0035*  	LD D,H
040071 D5          0036*  	PUSH DE
040072 E1          0037*  	POP HL
040073 11 8A 00 04 0038*  	LD DE,debug_text
040077 D5          0039*  	PUSH DE
040078 CD 90 00 04 0040*  	CALL num2dec
04007C E1          0041*  	POP HL
04007D 01 05 00 00 0042*  	LD BC,5
040081 3E 00       0043*  	LD A,0
040083 49 DF       0044*  	RST.LIS $18
040085 E1          0045*  	POP HL
040086 D1          0046*  	POP DE
040087 C1          0047*  	POP BC
040088 F1          0048*  	POP AF
040089 C9          0049*  	RET
04008A             0050*  
04008A             0051*  debug_text:
04008A             0052*  	DS 6
040090             0053*  
040090             0054*  ; 16 bits number to string
040090             0055*  num2dec:
040090 01 F0 D8 FF 0056*  	LD BC,-10000
040094 CD B1 00 04 0057*  	CALL num1
040098 01 18 FC FF 0058*  	LD BC,-1000
04009C CD B1 00 04 0059*  	CALL num1
0400A0 01 9C FF FF 0060*  	LD BC,-100
0400A4 CD B1 00 04 0061*  	CALL num1
0400A8 01 F6 FF FF 0062*  	LD BC,-10
0400AC CD B1 00 04 0063*  	CALL num1
0400B0 48          0064*  	LD C,B
0400B1             0065*  
0400B1 3E 2F       0066*  num1: LD A,'0'-1
0400B3 3C          0067*  num2: INC A
0400B4 09          0068*  	ADD HL,BC
0400B5 38 FC       0069*  	JR C,num2
0400B7 ED 42       0070*  	SBC HL,BC
0400B9             0071*  
0400B9 12          0072*  	LD (DE),A
0400BA 13          0073*  	INC DE
0400BB C9          0074*  	RET
0400BC             0020   
0400BC             0021   ; equ
0400BC             0022   KEY_ESCAPE: EQU -113
0400BC             0023   
0400BC             0024   BITLOOKUP:
0400BC 01 02 04 08 0025   	DB 01h,02h,04h,08h
0400C0 10 20 40 80 0026   	DB 10h,20h,40h,80h
0400C4             0027   
0400C4             0028   ; data
0400C4             0029   not_crunched_screen_filename:
0400C4 73 63 72 65 0030   	DB "screens/not_crunched.scn",0
       65 6E 73 2F 
       6E 6F 74 5F 
       63 72 75 6E 
       63 68 65 64 
       2E 73 63 6E 
       00          
0400DD             0031   
0400DD             0032   crunched_screen_filename:
0400DD 73 63 72 65 0033   	DB "screens/crunched.scn",0
       65 6E 73 2F 
       63 72 75 6E 
       63 68 65 64 
       2E 73 63 6E 
       00          
0400F2             0034   
0400F2             0035   mode_value:
0400F2 00          0036   	DB 0
0400F3             0037   
0400F3             0038   width_value:
0400F3 00 00       0039   	DW 0
0400F5             0040   
0400F5             0041   height_value:
0400F5 00 00       0042   	DW 0
0400F7             0043   
0400F7             0044   colors_count:
0400F7 00          0045   	DB 0
0400F8             0046   
0400F8             0047   red_tint:
0400F8 00          0048   	DB 0
0400F9             0049   
0400F9             0050   green_tint:
0400F9 00          0051   	DB 0
0400FA             0052   
0400FA             0053   blue_tint:
0400FA 00          0054   	DB 0
0400FB             0055   
0400FB             0056   colors_by_mode:
0400FB 10          0057   	DB 16
0400FC 04          0058   	DB 4
0400FD 02          0059   	DB 2
0400FE 40          0060   	DB 64
0400FF 10          0061   	DB 16
040100 04          0062   	DB 4
040101 02          0063   	DB 2
040102 10          0064   	DB 16
040103 40          0065   	DB 64
040104 10          0066   	DB 16
040105 04          0067   	DB 4
040106 02          0068   	DB 2
040107 40          0069   	DB 64
040108 10          0070   	DB 16
040109 04          0071   	DB 4
04010A 02          0072   	DB 2
04010B 04          0073   	DB 4
04010C 02          0074   	DB 2
04010D 02          0075   	DB 2
04010E 04          0076   	DB 4
04010F 40          0077   	DB 64
040110 10          0078   	DB 16
040111 04          0079   	DB 4
040112 02          0080   	DB 2
040113             0081   
040113             0082   width_by_mode:
040113 80 02       0083   	DW 640
040115 80 02       0084   	DW 640
040117 80 02       0085   	DW 640
040119 80 02       0086   	DW 640
04011B 80 02       0087   	DW 640
04011D 80 02       0088   	DW 640
04011F 80 02       0089   	DW 640
040121 00 00       0090   	DW 0
040123 40 01       0091   	DW 320
040125 40 01       0092   	DW 320
040127 40 01       0093   	DW 320
040129 40 01       0094   	DW 320
04012B 40 01       0095   	DW 320
04012D 40 01       0096   	DW 320
04012F 40 01       0097   	DW 320
040131 40 01       0098   	DW 320
040133 20 03       0099   	DW 800
040135 20 03       0100   	DW 800
040137 00 04       0101   	DW 1024
040139 00 04       0102   	DW 1024
04013B 00 02       0103   	DW 512
04013D 00 02       0104   	DW 512
04013F 00 02       0105   	DW 512
040141 00 02       0106   	DW 512
040143             0107   
040143             0108   height_by_mode:
040143 E0 01       0109   	DW 480
040145 E0 01       0110   	DW 480
040147 E0 01       0111   	DW 480
040149 F0 00       0112   	DW 240
04014B F0 00       0113   	DW 240
04014D F0 00       0114   	DW 240
04014F F0 00       0115   	DW 240
040151 00 00       0116   	DW 0
040153 F0 00       0117   	DW 240
040155 F0 00       0118   	DW 240
040157 F0 00       0119   	DW 240
040159 F0 00       0120   	DW 240
04015B C8 00       0121   	DW 200
04015D C8 00       0122   	DW 200
04015F C8 00       0123   	DW 200
040161 C8 00       0124   	DW 200
040163 58 02       0125   	DW 600
040165 58 02       0126   	DW 600
040167 00 03       0127   	DW 768
040169 00 03       0128   	DW 768
04016B 80 01       0129   	DW 384
04016D 80 01       0130   	DW 384
04016F 80 01       0131   	DW 384
040171 80 01       0132   	DW 384
040173             0133   
040173             0134   palette_rgb:
040173             0135   	DS 192
040233             0136   
040233             0137   ; start main program ============================
040233             0138   start:
040233 F5          0139   	PUSH AF
040234 C5          0140   	PUSH BC
040235 D5          0141   	PUSH DE
040236 DD E5       0142   	PUSH IX
040238 FD E5       0143   	PUSH IY
04023A             0144   
04023A             0145   	; reset sprites and bitmaps data
04023A             0146   	VDU 23
04023A 3E 17       0001M  		LD	A, function
04023C 49 D7       0002M  		RST.LIS	10h
04023E             0147   	VDU 27
04023E 3E 1B       0001M  		LD	A, function
040240 49 D7       0002M  		RST.LIS	10h
040242             0148   	VDU 16
040242 3E 10       0001M  		LD	A, function
040244 49 D7       0002M  		RST.LIS	10h
040246             0149   
040246             0150   	; set mode 8
040246             0151   	VDU 22
040246 3E 16       0001M  		LD	A, function
040248 49 D7       0002M  		RST.LIS	10h
04024A             0152   	VDU 8
04024A 3E 08       0001M  		LD	A, function
04024C 49 D7       0002M  		RST.LIS	10h
04024E             0153   
04024E             0154   	; set black paper color
04024E             0155   	VDU 17
04024E 3E 11       0001M  		LD	A, function
040250 49 D7       0002M  		RST.LIS	10h
040252             0156   	VDU 128
040252 3E 80       0001M  		LD	A, function
040254 49 D7       0002M  		RST.LIS	10h
040256             0157   
040256             0158   	; clear screen
040256             0159   	VDU 12
040256 3E 0C       0001M  		LD	A, function
040258 49 D7       0002M  		RST.LIS	10h
04025A             0160   
04025A             0161   	; hide cursor
04025A             0162   	VDU 23
04025A 3E 17       0001M  		LD	A, function
04025C 49 D7       0002M  		RST.LIS	10h
04025E             0163   	VDU 1
04025E 3E 01       0001M  		LD	A, function
040260 49 D7       0002M  		RST.LIS	10h
040262             0164   	VDU 0
040262 3E 00       0001M  		LD	A, function
040264 49 D7       0002M  		RST.LIS	10h
040266             0165   
040266             0166   	; disable logical screen
040266             0167   	VDU 23
040266 3E 17       0001M  		LD	A, function
040268 49 D7       0002M  		RST.LIS	10h
04026A             0168   	VDU 0
04026A 3E 00       0001M  		LD	A, function
04026C 49 D7       0002M  		RST.LIS	10h
04026E             0169   	VDU $C0
04026E 3E C0       0001M  		LD	A, function
040270 49 D7       0002M  		RST.LIS	10h
040272             0170   	VDU 0
040272 3E 00       0001M  		LD	A, function
040274 49 D7       0002M  		RST.LIS	10h
040276             0171   
040276             0172   	; set pen 15
040276             0173   	VDU 17
040276 3E 11       0001M  		LD	A, function
040278 49 D7       0002M  		RST.LIS	10h
04027A             0174   	VDU 15
04027A 3E 0F       0001M  		LD	A, function
04027C 49 D7       0002M  		RST.LIS	10h
04027E             0175   
04027E             0176   	; load raw screen
04027E CD C2 02 04 0177   	CALL load_raw_screen
040282             0178   
040282             0179   	; load crunched screen
040282             0180   	;CALL load_crunched_screen
040282             0181   
040282             0182   exit_program:
040282             0183   	; wait for any key to be released
040282 21 8F FF FF 0184   	LD HL,KEY_ESCAPE
040286 CD 56 06 04 0185   	CALL inkey
04028A FE 01       0186   	CP 1
04028C 20 F4       0187   	JR NZ,exit_program
04028E             0188   
04028E             0189   	; reset to mode 1
04028E             0190   	VDU 22
04028E 3E 16       0001M  		LD	A, function
040290 49 D7       0002M  		RST.LIS	10h
040292             0191   	VDU 1
040292 3E 01       0001M  		LD	A, function
040294 49 D7       0002M  		RST.LIS	10h
040296             0192   
040296             0193   	; enable logical screen
040296             0194   	VDU 23
040296 3E 17       0001M  		LD	A, function
040298 49 D7       0002M  		RST.LIS	10h
04029A             0195   	VDU 0
04029A 3E 00       0001M  		LD	A, function
04029C 49 D7       0002M  		RST.LIS	10h
04029E             0196   	VDU $C0
04029E 3E C0       0001M  		LD	A, function
0402A0 49 D7       0002M  		RST.LIS	10h
0402A2             0197   	VDU 1
0402A2 3E 01       0001M  		LD	A, function
0402A4 49 D7       0002M  		RST.LIS	10h
0402A6             0198   
0402A6             0199   	; position the texte cursor at home
0402A6             0200   	VDU 30
0402A6 3E 1E       0001M  		LD	A, function
0402A8 49 D7       0002M  		RST.LIS	10h
0402AA             0201   
0402AA             0202   	; show cursor
0402AA             0203   	VDU 23
0402AA 3E 17       0001M  		LD	A, function
0402AC 49 D7       0002M  		RST.LIS	10h
0402AE             0204   	VDU 1
0402AE 3E 01       0001M  		LD	A, function
0402B0 49 D7       0002M  		RST.LIS	10h
0402B2             0205   	VDU 1
0402B2 3E 01       0001M  		LD	A, function
0402B4 49 D7       0002M  		RST.LIS	10h
0402B6             0206   
0402B6 FD E1       0207   	POP IY
0402B8 DD E1       0208   	POP IX
0402BA D1          0209   	POP DE
0402BB C1          0210   	POP BC
0402BC F1          0211   	POP AF
0402BD 21 00 00 00 0212   	LD HL,0
0402C1             0213   
0402C1 C9          0214   	RET
0402C2             0215   
0402C2             0216   ; ===============================================
0402C2             0217   
0402C2             0218   ; load a raw screen
0402C2             0219   load_raw_screen:
0402C2             0220   	; open the file for read
0402C2 21 C4 00 04 0221   	LD HL,not_crunched_screen_filename
0402C6 0E 01       0222   	LD C,fa_open_existing|fa_read
0402C8             0223   	MOSCALL mos_fopen
0402C8 3E 0A       0001M  		LD	A, function
0402CA 49 CF       0002M  		RST.LIS	08h
0402CC             0224   
0402CC             0225   	; exit on error
0402CC FE 00       0226   	CP 0
0402CE C8          0227   	RET Z
0402CF             0228   
0402CF             0229   	; filehandle -> C
0402CF 4F          0230   	LD C,A
0402D0             0231   
0402D0             0232   	; read the mode
0402D0             0233   	MOSCALL mos_fgetc
0402D0 3E 0C       0001M  		LD	A, function
0402D2 49 CF       0002M  		RST.LIS	08h
0402D4 DA 2A 05 04 0234   	JP C,lrs_error
0402D8             0235   
0402D8             0236   	; store the mode
0402D8 21 F2 00 04 0237   	LD HL,mode_value
0402DC 77          0238   	LD (HL),A
0402DD             0239   
0402DD             0240   	; store the width of the screen
0402DD F5          0241   	PUSH AF
0402DE             0242   
0402DE 21 13 01 04 0243   	LD HL,width_by_mode
0402E2 11 00 00 00 0244   	LD DE,#000000
0402E6 5F          0245   	LD E,A
0402E7 16 02       0246   	LD D,2
0402E9 ED 5C       0247   	MLT DE
0402EB 19          0248   	ADD HL,DE
0402EC E5          0249   	PUSH HL
0402ED DD E1       0250   	POP IX
0402EF 21 F3 00 04 0251   	LD HL,width_value
0402F3 DD 7E 00    0252   	LD A,(IX+0)
0402F6 77          0253   	LD (HL),A
0402F7 23          0254   	INC HL
0402F8 DD 7E 01    0255   	LD A,(IX+1)
0402FB 77          0256   	LD (HL),A
0402FC             0257   
0402FC             0258   	; store the height of the screen
0402FC F1          0259   	POP AF
0402FD F5          0260   	PUSH AF
0402FE 21 43 01 04 0261   	LD HL,height_by_mode
040302 11 00 00 00 0262   	LD DE,#000000
040306 5F          0263   	LD E,A
040307 16 02       0264   	LD D,2
040309 ED 5C       0265   	MLT DE
04030B 19          0266   	ADD HL,DE
04030C E5          0267   	PUSH HL
04030D DD E1       0268   	POP IX
04030F 21 F5 00 04 0269   	LD HL,height_value
040313 DD 7E 00    0270   	LD A,(IX+0)
040316 77          0271   	LD (HL),A
040317 23          0272   	INC HL
040318 DD 7E 01    0273   	LD A,(IX+1)
04031B 77          0274   	LD (HL),A
04031C F1          0275   	POP AF
04031D             0276   
04031D             0277   	; set the readen mode
04031D C5          0278   	PUSH BC
04031E F5          0279   	PUSH AF
04031F             0280   	VDU 22
04031F 3E 16       0001M  		LD	A, function
040321 49 D7       0002M  		RST.LIS	10h
040323 F1          0281   	POP AF
040324 F5          0282   	PUSH AF
040325             0283   	VDU_A
040325 49 D7       0001M  		RST.LIS	10h
040327             0284   	VDU 23 ; hide cursor
040327 3E 17       0001M  		LD	A, function
040329 49 D7       0002M  		RST.LIS	10h
04032B             0285   	VDU 1
04032B 3E 01       0001M  		LD	A, function
04032D 49 D7       0002M  		RST.LIS	10h
04032F             0286   	VDU 0
04032F 3E 00       0001M  		LD	A, function
040331 49 D7       0002M  		RST.LIS	10h
040333 F1          0287   	POP AF
040334 C1          0288   	POP BC
040335             0289   
040335             0290   	; get colors count
040335 21 FB 00 04 0291   	LD HL,colors_by_mode
040339 11 00 00 00 0292   	LD DE,$000000
04033D 5F          0293   	LD E,A
04033E 19          0294   	ADD HL,DE
04033F 7E          0295   	LD A,(HL) ; number of colors
040340 21 F7 00 04 0296   	LD HL,colors_count
040344 77          0297   	LD (HL),A
040345             0298   
040345             0299   	; read the palette
040345 21 73 01 04 0300   	LD HL,palette_rgb
040349 11 00 00 00 0301   	LD DE,$000000
04034D 5F          0302   	LD E,A
04034E 16 03       0303   	LD D,3
040350 ED 5C       0304   	MLT DE
040352 D5          0305   	PUSH DE
040353             0306   	MOSCALL mos_fread
040353 3E 1A       0001M  		LD	A, function
040355 49 CF       0002M  		RST.LIS	08h
040357 E1          0307   	POP HL
040358 B7          0308   	OR A
040359 ED 52       0309   	SBC HL,DE
04035B 19          0310   	ADD HL,DE
04035C C2 2A 05 04 0311   	JP NZ,lrs_error
040360             0312   
040360             0313   	; set the palette
040360 21 F7 00 04 0314   	LD HL,colors_count
040364 7E          0315   	LD A,(HL)
040365 FE 00       0316   	CP 0
040367 CA 2A 05 04 0317   	JP Z,lrs_error
04036B             0318   
04036B C5          0319   	PUSH BC
04036C 06 00       0320   	LD B,0
04036E DD 21 73 01 0321   	LD IX,palette_rgb
       04          
040373             0322   
040373             0323   lrs_set_palette:
040373 DD 4E 00    0324   	LD C,(IX+0)
040376 DD 5E 01    0325   	LD E,(IX+1)
040379 DD 6E 02    0326   	LD L,(IX+2)
04037C DD 23       0327   	INC IX
04037E DD 23       0328   	INC IX
040380 DD 23       0329   	INC IX
040382 CD 87 06 04 0330   	CALL set_color
040386 04          0331   	INC B
040387 B8          0332   	CP B
040388 20 E9       0333   	JR NZ,lrs_set_palette
04038A             0334   
04038A C1          0335   	POP BC
04038B             0336   
04038B             0337   	; read crunched flag
04038B             0338   	MOSCALL mos_fgetc
04038B 3E 0C       0001M  		LD	A, function
04038D 49 CF       0002M  		RST.LIS	08h
04038F DA 2A 05 04 0339   	JP C,lrs_error
040393             0340   
040393             0341   	; not crunched file flag
040393 FE 00       0342   	CP 0
040395 C2 2A 05 04 0343   	JP NZ,lrs_error
040399             0344   
040399             0345   	; read data on the sdcard
040399 21 00 00 05 0346   	LD HL,$050000
04039D 11 00 FA 00 0347   	LD DE,64000
0403A1             0348   	MOSCALL mos_fread
0403A1 3E 1A       0001M  		LD	A, function
0403A3 49 CF       0002M  		RST.LIS	08h
0403A5 21 00 FA 00 0349   	LD HL,64000
0403A9 B7          0350   	OR A
0403AA ED 52       0351   	SBC HL,DE
0403AC 19          0352   	ADD HL,DE ; DE = 64000 ?
0403AD C2 2A 05 04 0353   	JP NZ,lrs_error
0403B1             0354   
0403B1             0355   	; read data on the sdcard
0403B1 21 00 FA 05 0356   	LD HL,$05FA00
0403B5 11 00 06 00 0357   	LD DE,1536
0403B9             0358   	MOSCALL mos_fread
0403B9 3E 1A       0001M  		LD	A, function
0403BB 49 CF       0002M  		RST.LIS	08h
0403BD 21 00 06 00 0359   	LD HL,1536
0403C1 B7          0360   	OR A
0403C2 ED 52       0361   	SBC HL,DE
0403C4 19          0362   	ADD HL,DE ; DE = 1536 ?
0403C5 C2 2A 05 04 0363   	JP NZ,lrs_error
0403C9             0364   
0403C9             0365   	; read data on the sdcard
0403C9 21 00 00 06 0366   	LD HL,$060000
0403CD 11 00 2C 00 0367   	LD DE,11264
0403D1             0368   	MOSCALL mos_fread
0403D1 3E 1A       0001M  		LD	A, function
0403D3 49 CF       0002M  		RST.LIS	08h
0403D5 21 00 2C 00 0369   	LD HL,11264
0403D9 B7          0370   	OR A
0403DA ED 52       0371   	SBC HL,DE
0403DC 19          0372   	ADD HL,DE ; DE = 11264 ?
0403DD C2 2A 05 04 0373   	JP NZ,lrs_error
0403E1             0374   
0403E1             0375   	; close the file
0403E1             0376   	MOSCALL mos_fclose
0403E1 3E 0B       0001M  		LD	A, function
0403E3 49 CF       0002M  		RST.LIS	08h
0403E5             0377   
0403E5             0378   	; clear buffer 64255
0403E5             0379   	VDU 23
0403E5 3E 17       0001M  		LD	A, function
0403E7 49 D7       0002M  		RST.LIS	10h
0403E9             0380   	VDU 0
0403E9 3E 00       0001M  		LD	A, function
0403EB 49 D7       0002M  		RST.LIS	10h
0403ED             0381   	VDU $A0
0403ED 3E A0       0001M  		LD	A, function
0403EF 49 D7       0002M  		RST.LIS	10h
0403F1             0382   	VDU $FF ; buffer number (16 bits)
0403F1 3E FF       0001M  		LD	A, function
0403F3 49 D7       0002M  		RST.LIS	10h
0403F5             0383   	VDU $FA
0403F5 3E FA       0001M  		LD	A, function
0403F7 49 D7       0002M  		RST.LIS	10h
0403F9             0384   	VDU 2 ; command
0403F9 3E 02       0001M  		LD	A, function
0403FB 49 D7       0002M  		RST.LIS	10h
0403FD             0385   
0403FD             0386   	; coordinates to draw a piece of screen
0403FD 21 00 00 05 0387   	LD HL,$050000 ; start address
040401 FD 21 00 01 0388   	LD IY,256 ; 256 blocks of 256 bytes for the 1st RAM part
       00          
040406             0389   
040406             0390   lrs_upload_block:
040406             0391   	; upload data to the buffer
040406             0392   	VDU 23
040406 3E 17       0001M  		LD	A, function
040408 49 D7       0002M  		RST.LIS	10h
04040A             0393   	VDU 0
04040A 3E 00       0001M  		LD	A, function
04040C 49 D7       0002M  		RST.LIS	10h
04040E             0394   	VDU $A0
04040E 3E A0       0001M  		LD	A, function
040410 49 D7       0002M  		RST.LIS	10h
040412             0395   	VDU $FF ; buffer number (16 bits)
040412 3E FF       0001M  		LD	A, function
040414 49 D7       0002M  		RST.LIS	10h
040416             0396   	VDU $FA
040416 3E FA       0001M  		LD	A, function
040418 49 D7       0002M  		RST.LIS	10h
04041A             0397   	VDU 0 ; command
04041A 3E 00       0001M  		LD	A, function
04041C 49 D7       0002M  		RST.LIS	10h
04041E 11 00 01 00 0398   	LD DE,256 ; 256 bytes
040422             0399   	VDU_DE
040422 7B          0001M  		LD A,E
040423 49 D7       0002M  		RST.LIS	10h
040425 7A          0003M  		LD A,D
040426 49 D7       0004M  		RST.LIS	10h
040428             0400   
040428 C5          0401   	PUSH BC
040429 DD E5       0402   	PUSH IX
04042B 01 00 01 00 0403   	LD BC,256
04042F             0404   lrs_loop:
04042F 7E          0405   	LD A,(HL) ; rgba2222 color
040430             0406   	VDU_A
040430 49 D7       0001M  		RST.LIS	10h
040432 23          0407   	INC HL
040433 0B          0408   	DEC BC
040434 78          0409   	LD A,B
040435 B1          0410   	OR C
040436 C2 2F 04 04 0411   	JP NZ,lrs_loop
04043A DD E1       0412   	POP IX
04043C C1          0413   	POP BC
04043D             0414   
04043D             0415   	; next block of 256 bytes
04043D FD 2B       0416   	DEC IY
04043F FD E5       0417   	PUSH IY
040441 D1          0418   	POP DE
040442 7A          0419   	LD A,D
040443 B3          0420   	OR E
040444 FE 00       0421   	CP 0
040446 C2 06 04 04 0422   	JP NZ,lrs_upload_block
04044A             0423   
04044A             0424   	; second part
04044A             0425   	; coordinates to draw a piece of screen
04044A 21 00 00 06 0426   	LD HL,$060000 ; start address
04044E FD 21 2C 00 0427   	LD IY,44 ; 44 blocks of 256 bytes for the 2nd RAM part
       00          
040453             0428   
040453             0429   lrs_upload_block2:
040453             0430   	; upload data to the buffer
040453             0431   	VDU 23
040453 3E 17       0001M  		LD	A, function
040455 49 D7       0002M  		RST.LIS	10h
040457             0432   	VDU 0
040457 3E 00       0001M  		LD	A, function
040459 49 D7       0002M  		RST.LIS	10h
04045B             0433   	VDU $A0
04045B 3E A0       0001M  		LD	A, function
04045D 49 D7       0002M  		RST.LIS	10h
04045F             0434   	VDU $FF ; buffer number (16 bits)
04045F 3E FF       0001M  		LD	A, function
040461 49 D7       0002M  		RST.LIS	10h
040463             0435   	VDU $FA
040463 3E FA       0001M  		LD	A, function
040465 49 D7       0002M  		RST.LIS	10h
040467             0436   	VDU 0 ; command
040467 3E 00       0001M  		LD	A, function
040469 49 D7       0002M  		RST.LIS	10h
04046B 11 00 01 00 0437   	LD DE,256 ; 256 bytes
04046F             0438   	VDU_DE
04046F 7B          0001M  		LD A,E
040470 49 D7       0002M  		RST.LIS	10h
040472 7A          0003M  		LD A,D
040473 49 D7       0004M  		RST.LIS	10h
040475             0439   
040475 C5          0440   	PUSH BC
040476 DD E5       0441   	PUSH IX
040478 01 00 01 00 0442   	LD BC,256
04047C             0443   lrs_loop2:
04047C 7E          0444   	LD A,(HL) ; rgba2222 color
04047D             0445   	VDU_A
04047D 49 D7       0001M  		RST.LIS	10h
04047F 23          0446   	INC HL
040480 0B          0447   	DEC BC
040481 78          0448   	LD A,B
040482 B1          0449   	OR C
040483 C2 7C 04 04 0450   	JP NZ,lrs_loop2
040487 DD E1       0451   	POP IX
040489 C1          0452   	POP BC
04048A             0453   
04048A             0454   	; next block of 256 bytes
04048A FD 2B       0455   	DEC IY
04048C FD E5       0456   	PUSH IY
04048E D1          0457   	POP DE
04048F 7A          0458   	LD A,D
040490 B3          0459   	OR E
040491 FE 00       0460   	CP 0
040493 C2 53 04 04 0461   	JP NZ,lrs_upload_block2
040497             0462   
040497             0463   	; consolidate buffer 0
040497             0464   	VDU 23
040497 3E 17       0001M  		LD	A, function
040499 49 D7       0002M  		RST.LIS	10h
04049B             0465   	VDU 0
04049B 3E 00       0001M  		LD	A, function
04049D 49 D7       0002M  		RST.LIS	10h
04049F             0466   	VDU $A0
04049F 3E A0       0001M  		LD	A, function
0404A1 49 D7       0002M  		RST.LIS	10h
0404A3             0467   	VDU $FF ; buffer number (16 bits)
0404A3 3E FF       0001M  		LD	A, function
0404A5 49 D7       0002M  		RST.LIS	10h
0404A7             0468   	VDU $FA
0404A7 3E FA       0001M  		LD	A, function
0404A9 49 D7       0002M  		RST.LIS	10h
0404AB             0469   	VDU 14 ; command
0404AB 3E 0E       0001M  		LD	A, function
0404AD 49 D7       0002M  		RST.LIS	10h
0404AF             0470   
0404AF             0471   	; set buffer 64255 as bitmap (bitmap 255)
0404AF             0472   	VDU 23
0404AF 3E 17       0001M  		LD	A, function
0404B1 49 D7       0002M  		RST.LIS	10h
0404B3             0473   	VDU 27
0404B3 3E 1B       0001M  		LD	A, function
0404B5 49 D7       0002M  		RST.LIS	10h
0404B7             0474   	VDU $20
0404B7 3E 20       0001M  		LD	A, function
0404B9 49 D7       0002M  		RST.LIS	10h
0404BB             0475   	VDU $FF ; bitmap number (16 bits)
0404BB 3E FF       0001M  		LD	A, function
0404BD 49 D7       0002M  		RST.LIS	10h
0404BF             0476   	VDU $FA
0404BF 3E FA       0001M  		LD	A, function
0404C1 49 D7       0002M  		RST.LIS	10h
0404C3             0477   
0404C3             0478   	; set buffer 64255 attributes
0404C3             0479   	VDU 23
0404C3 3E 17       0001M  		LD	A, function
0404C5 49 D7       0002M  		RST.LIS	10h
0404C7             0480   	VDU 27
0404C7 3E 1B       0001M  		LD	A, function
0404C9 49 D7       0002M  		RST.LIS	10h
0404CB             0481   	VDU $21
0404CB 3E 21       0001M  		LD	A, function
0404CD 49 D7       0002M  		RST.LIS	10h
0404CF DD 21 F3 00 0482   	LD IX,width_value
       04          
0404D4 FD 21 F5 00 0483   	LD IY,height_value
       04          
0404D9 11 00 00 00 0484   	LD DE,$000000
0404DD 21 00 00 00 0485   	LD HL,$000000
0404E1 DD 5E 00    0486   	LD E,(IX+0)
0404E4 DD 56 01    0487   	LD D,(IX+1)
0404E7 FD 6E 00    0488   	LD L,(IY+0)
0404EA FD 66 01    0489   	LD H,(IY+1)
0404ED             0490   	VDU_DE
0404ED 7B          0001M  		LD A,E
0404EE 49 D7       0002M  		RST.LIS	10h
0404F0 7A          0003M  		LD A,D
0404F1 49 D7       0004M  		RST.LIS	10h
0404F3             0491   	VDU_HL
0404F3 7D          0001M  		LD A,L
0404F4 49 D7       0002M  		RST.LIS	10h
0404F6 7C          0003M  		LD A,H
0404F7 49 D7       0004M  		RST.LIS	10h
0404F9             0492   	VDU 1 ; rgba2222
0404F9 3E 01       0001M  		LD	A, function
0404FB 49 D7       0002M  		RST.LIS	10h
0404FD             0493   
0404FD             0494   	; select bitmap 255
0404FD             0495   	VDU 23
0404FD 3E 17       0001M  		LD	A, function
0404FF 49 D7       0002M  		RST.LIS	10h
040501             0496   	VDU 27
040501 3E 1B       0001M  		LD	A, function
040503 49 D7       0002M  		RST.LIS	10h
040505             0497   	VDU 0
040505 3E 00       0001M  		LD	A, function
040507 49 D7       0002M  		RST.LIS	10h
040509             0498   	VDU 255
040509 3E FF       0001M  		LD	A, function
04050B 49 D7       0002M  		RST.LIS	10h
04050D             0499   
04050D             0500   	; draw bitmap 255 at coordinates 0,0
04050D             0501   	VDU 23
04050D 3E 17       0001M  		LD	A, function
04050F 49 D7       0002M  		RST.LIS	10h
040511             0502   	VDU 27
040511 3E 1B       0001M  		LD	A, function
040513 49 D7       0002M  		RST.LIS	10h
040515             0503   	VDU 3
040515 3E 03       0001M  		LD	A, function
040517 49 D7       0002M  		RST.LIS	10h
040519             0504   	VDU 0
040519 3E 00       0001M  		LD	A, function
04051B 49 D7       0002M  		RST.LIS	10h
04051D             0505   	VDU 0
04051D 3E 00       0001M  		LD	A, function
04051F 49 D7       0002M  		RST.LIS	10h
040521             0506   	VDU 0
040521 3E 00       0001M  		LD	A, function
040523 49 D7       0002M  		RST.LIS	10h
040525             0507   	VDU 0
040525 3E 00       0001M  		LD	A, function
040527 49 D7       0002M  		RST.LIS	10h
040529 C9          0508   	RET
04052A             0509   
04052A             0510   lrs_error:
04052A             0511   	VDU 7
04052A 3E 07       0001M  		LD	A, function
04052C 49 D7       0002M  		RST.LIS	10h
04052E             0512   	MOSCALL mos_fclose
04052E 3E 0B       0001M  		LD	A, function
040530 49 CF       0002M  		RST.LIS	08h
040532 C9          0513   	RET
040533             0514   
040533             0515   lrs_exit:
040533 C9          0516   	RET
040534             0517   
040534             0518   ; load a crunched screen
040534             0519   load_crunched_screen:
040534             0520   	; open the file for read
040534 21 DD 00 04 0521   	LD HL,crunched_screen_filename
040538 0E 01       0522   	LD C,fa_open_existing|fa_read
04053A             0523   	MOSCALL mos_fopen
04053A 3E 0A       0001M  		LD	A, function
04053C 49 CF       0002M  		RST.LIS	08h
04053E             0524   
04053E             0525   	; exit on error
04053E FE 00       0526   	CP 0
040540 C8          0527   	RET Z
040541             0528   
040541             0529   	; filehandle -> C
040541 4F          0530   	LD C,A
040542             0531   
040542             0532   	; read the mode
040542             0533   	MOSCALL mos_fgetc
040542 3E 0C       0001M  		LD	A, function
040544 49 CF       0002M  		RST.LIS	08h
040546 DA 48 06 04 0534   	JP C,lcs_error
04054A             0535   
04054A             0536   	; store the mode
04054A 21 F2 00 04 0537   	LD HL,mode_value
04054E 77          0538   	LD (HL),A
04054F             0539   
04054F             0540   	; store the width of the screen
04054F F5          0541   	PUSH AF
040550             0542   
040550 21 13 01 04 0543   	LD HL,width_by_mode
040554 11 00 00 00 0544   	LD DE,#000000
040558 5F          0545   	LD E,A
040559 16 02       0546   	LD D,2
04055B ED 5C       0547   	MLT DE
04055D 19          0548   	ADD HL,DE
04055E E5          0549   	PUSH HL
04055F DD E1       0550   	POP IX
040561 21 F3 00 04 0551   	LD HL,width_value
040565 DD 7E 00    0552   	LD A,(IX+0)
040568 77          0553   	LD (HL),A
040569 23          0554   	INC HL
04056A DD 7E 01    0555   	LD A,(IX+1)
04056D 77          0556   	LD (HL),A
04056E             0557   
04056E             0558   	; store the height of the screen
04056E F1          0559   	POP AF
04056F F5          0560   	PUSH AF
040570 21 43 01 04 0561   	LD HL,height_by_mode
040574 11 00 00 00 0562   	LD DE,#000000
040578 5F          0563   	LD E,A
040579 16 02       0564   	LD D,2
04057B ED 5C       0565   	MLT DE
04057D 19          0566   	ADD HL,DE
04057E E5          0567   	PUSH HL
04057F DD E1       0568   	POP IX
040581 21 F5 00 04 0569   	LD HL,height_value
040585 DD 7E 00    0570   	LD A,(IX+0)
040588 77          0571   	LD (HL),A
040589 23          0572   	INC HL
04058A DD 7E 01    0573   	LD A,(IX+1)
04058D 77          0574   	LD (HL),A
04058E F1          0575   	POP AF
04058F             0576   
04058F             0577   	; set the readen mode
04058F C5          0578   	PUSH BC
040590 F5          0579   	PUSH AF
040591             0580   	VDU 22
040591 3E 16       0001M  		LD	A, function
040593 49 D7       0002M  		RST.LIS	10h
040595 F1          0581   	POP AF
040596 F5          0582   	PUSH AF
040597             0583   	VDU_A
040597 49 D7       0001M  		RST.LIS	10h
040599             0584   	VDU 23 ; hide cursor
040599 3E 17       0001M  		LD	A, function
04059B 49 D7       0002M  		RST.LIS	10h
04059D             0585   	VDU 1
04059D 3E 01       0001M  		LD	A, function
04059F 49 D7       0002M  		RST.LIS	10h
0405A1             0586   	VDU 0
0405A1 3E 00       0001M  		LD	A, function
0405A3 49 D7       0002M  		RST.LIS	10h
0405A5 F1          0587   	POP AF
0405A6 C1          0588   	POP BC
0405A7             0589   
0405A7             0590   	; get colors count
0405A7 21 FB 00 04 0591   	LD HL,colors_by_mode
0405AB 11 00 00 00 0592   	LD DE,$000000
0405AF 5F          0593   	LD E,A
0405B0 19          0594   	ADD HL,DE
0405B1 7E          0595   	LD A,(HL) ; number of colors
0405B2 21 F7 00 04 0596   	LD HL,colors_count
0405B6 77          0597   	LD (HL),A
0405B7             0598   
0405B7             0599   	; read the palette
0405B7 21 73 01 04 0600   	LD HL,palette_rgb
0405BB 11 00 00 00 0601   	LD DE,$000000
0405BF 5F          0602   	LD E,A
0405C0 16 03       0603   	LD D,3
0405C2 ED 5C       0604   	MLT DE
0405C4 D5          0605   	PUSH DE
0405C5             0606   	MOSCALL mos_fread
0405C5 3E 1A       0001M  		LD	A, function
0405C7 49 CF       0002M  		RST.LIS	08h
0405C9 E1          0607   	POP HL
0405CA B7          0608   	OR A
0405CB ED 52       0609   	SBC HL,DE
0405CD 19          0610   	ADD HL,DE
0405CE C2 48 06 04 0611   	JP NZ,lcs_error
0405D2             0612   
0405D2             0613   	; set the palette
0405D2 21 F7 00 04 0614   	LD HL,colors_count
0405D6 7E          0615   	LD A,(HL)
0405D7 FE 00       0616   	CP 0
0405D9 CA 48 06 04 0617   	JP Z,lcs_error
0405DD             0618   
0405DD C5          0619   	PUSH BC
0405DE 06 00       0620   	LD B,0
0405E0 DD 21 73 01 0621   	LD IX,palette_rgb
       04          
0405E5             0622   
0405E5             0623   lcs_set_palette:
0405E5 DD 4E 00    0624   	LD C,(IX+0)
0405E8 DD 5E 01    0625   	LD E,(IX+1)
0405EB DD 6E 02    0626   	LD L,(IX+2)
0405EE DD 23       0627   	INC IX
0405F0 DD 23       0628   	INC IX
0405F2 DD 23       0629   	INC IX
0405F4 CD 87 06 04 0630   	CALL set_color
0405F8 04          0631   	INC B
0405F9 B8          0632   	CP B
0405FA 30 E9       0633   	JR NC,lcs_set_palette
0405FC             0634   
0405FC C1          0635   	POP BC
0405FD             0636   
0405FD             0637   	; read crunched flag
0405FD             0638   	MOSCALL mos_fgetc
0405FD 3E 0C       0001M  		LD	A, function
0405FF 49 CF       0002M  		RST.LIS	08h
040601 DA 48 06 04 0639   	JP C,lcs_error
040605             0640   
040605             0641   	; crunched file flag
040605 FE 01       0642   	CP 1
040607 C2 48 06 04 0643   	JP NZ,lcs_error
04060B             0644   
04060B             0645   	; read data on the sdcard, and uncrunch
04060B 11 00 00 00 0646   	LD DE,$000000 ; x screen
04060F 21 00 00 00 0647   	LD HL,$000000 ; y screen
040613             0648   
040613             0649   lcs_loop:
040613             0650   	MOSCALL mos_fgetc
040613 3E 0C       0001M  		LD	A, function
040615 49 CF       0002M  		RST.LIS	08h
040617 DA 51 06 04 0651   	JP C,lcs_exit
04061B             0652   
04061B             0653   	; case > 0
04061B FE 01       0654   	CP 1
04061D CC C7 06 04 0655   	CALL Z,plot_pixel
040621 CA 13 06 04 0656   	JP Z,lcs_loop
040625             0657   
040625             0658   	; case 0,0
040625             0659   	MOSCALL mos_fgetc
040625 3E 0C       0001M  		LD	A, function
040627 49 CF       0002M  		RST.LIS	08h
040629 DA 51 06 04 0660   	JP C,lcs_exit
04062D             0661   
04062D FE 00       0662   	CP 0
04062F CC C7 06 04 0663   	CALL Z,plot_pixel
040633 CA 13 06 04 0664   	JP Z,lcs_loop
040637             0665   
040637             0666   	; case command, count, value
040637 47          0667   	LD B,A
040638             0668   
040638             0669   	MOSCALL mos_fgetc
040638 3E 0C       0001M  		LD	A, function
04063A 49 CF       0002M  		RST.LIS	08h
04063C DA 51 06 04 0670   	JP C,lcs_exit
040640             0671   
040640 CC 2C 07 04 0672   	CALL Z,plot_line
040644 C3 13 06 04 0673   	JP lcs_loop
040648             0674   
040648             0675   lcs_error:
040648             0676   	VDU 7
040648 3E 07       0001M  		LD	A, function
04064A 49 D7       0002M  		RST.LIS	10h
04064C             0677   	MOSCALL mos_fclose
04064C 3E 0B       0001M  		LD	A, function
04064E 49 CF       0002M  		RST.LIS	08h
040650 C9          0678   	RET
040651             0679   
040651             0680   lcs_exit:
040651             0681   	MOSCALL mos_fclose
040651 3E 0B       0001M  		LD	A, function
040653 49 CF       0002M  		RST.LIS	08h
040655 C9          0682   	RET
040656             0683   
040656             0684   ; input: HL = negative key to check
040656             0685   inkey:
040656             0686   	MOSCALL	mos_getkbmap
040656 3E 1E       0001M  		LD	A, function
040658 49 CF       0002M  		RST.LIS	08h
04065A 23          0687   	INC	HL
04065B 7D          0688   	LD	A, L
04065C ED 44       0689   	NEG
04065E 4F          0690   	LD	C, A
04065F 3E 01       0691   	LD	A, 1
040661 FA 85 06 04 0692   	JP	M,inkey_false ; < -128 ?
040665             0693   
040665 21 BC 00 04 0694   	LD	HL,BITLOOKUP
040669 11 00 00 00 0695   	LD	DE,0
04066D 79          0696   	LD	A,C
04066E E6 07       0697   	AND	00000111b
040670 5F          0698   	LD	E,A
040671 19          0699   	ADD	HL,DE
040672 46          0700   	LD	B,(HL)
040673             0701   
040673 79          0702   	LD	A,C
040674 E6 78       0703   	AND	01111000b
040676 0F          0704   	RRCA
040677 0F          0705   	RRCA
040678 0F          0706   	RRCA
040679 5F          0707   	LD	E, A
04067A DD 19       0708   	ADD	IX,DE
04067C DD 7E 00    0709   	LD	A,(IX+0)
04067F A0          0710   	AND	B
040680 28 03       0711   	JR Z,inkey_false
040682 3E 01       0712   	LD A,1
040684 C9          0713   	RET
040685             0714   inkey_false:
040685 AF          0715   	XOR A
040686 C9          0716   	RET
040687             0717   
040687             0718   ; set color RGB (a = c,e,l)
040687             0719   set_color:
040687 DD E5       0720   	PUSH IX
040689 F5          0721   	PUSH AF
04068A C5          0722   	PUSH BC
04068B D5          0723   	PUSH DE
04068C E5          0724   	PUSH HL
04068D             0725   
04068D C5          0726   	PUSH BC
04068E E5          0727   	PUSH HL
04068F 21 F8 00 04 0728   	LD HL,red_tint
040693 71          0729   	LD (HL),C
040694 21 F9 00 04 0730   	LD HL,green_tint
040698 73          0731   	LD (HL),E
040699 D1          0732   	POP DE
04069A 21 FA 00 04 0733   	LD HL,blue_tint
04069E 73          0734   	LD (HL),E
04069F             0735   
04069F             0736   	VDU 19
04069F 3E 13       0001M  		LD	A, function
0406A1 49 D7       0002M  		RST.LIS	10h
0406A3 C1          0737   	POP BC
0406A4 78          0738   	LD A,B
0406A5             0739   	VDU_A
0406A5 49 D7       0001M  		RST.LIS	10h
0406A7             0740   	VDU 255
0406A7 3E FF       0001M  		LD	A, function
0406A9 49 D7       0002M  		RST.LIS	10h
0406AB             0741   
0406AB 21 F8 00 04 0742   	LD HL,red_tint
0406AF 7E          0743   	LD A,(HL)
0406B0             0744   	VDU_A
0406B0 49 D7       0001M  		RST.LIS	10h
0406B2             0745   
0406B2 21 F9 00 04 0746   	LD HL,green_tint
0406B6 7E          0747   	LD A,(HL)
0406B7             0748   	VDU_A
0406B7 49 D7       0001M  		RST.LIS	10h
0406B9             0749   
0406B9 21 FA 00 04 0750   	LD HL,blue_tint
0406BD 7E          0751   	LD A,(HL)
0406BE             0752   	VDU_A
0406BE 49 D7       0001M  		RST.LIS	10h
0406C0             0753   
0406C0 E1          0754   	POP HL
0406C1 D1          0755   	POP DE
0406C2 C1          0756   	POP BC
0406C3 F1          0757   	POP AF
0406C4 DD E1       0758   	POP IX
0406C6 C9          0759   	ret
0406C7             0760   
0406C7             0761   ; DE -> x
0406C7             0762   ; HL -> y
0406C7             0763   ; A -> color
0406C7             0764   plot_pixel:
0406C7 F5          0765   	PUSH AF
0406C8 C5          0766   	PUSH BC
0406C9 D5          0767   	PUSH DE
0406CA E5          0768   	PUSH HL
0406CB             0769   
0406CB F5          0770   	PUSH AF
0406CC             0771   	VDU 18
0406CC 3E 12       0001M  		LD	A, function
0406CE 49 D7       0002M  		RST.LIS	10h
0406D0             0772   	VDU 0
0406D0 3E 00       0001M  		LD	A, function
0406D2 49 D7       0002M  		RST.LIS	10h
0406D4 F1          0773   	POP AF
0406D5             0774   	VDU_A
0406D5 49 D7       0001M  		RST.LIS	10h
0406D7             0775   
0406D7             0776   	VDU 25
0406D7 3E 19       0001M  		LD	A, function
0406D9 49 D7       0002M  		RST.LIS	10h
0406DB             0777   	VDU 4
0406DB 3E 04       0001M  		LD	A, function
0406DD 49 D7       0002M  		RST.LIS	10h
0406DF             0778   
0406DF E1          0779   	POP HL
0406E0 D1          0780   	POP DE
0406E1 D5          0781   	PUSH DE
0406E2 E5          0782   	PUSH HL
0406E3             0783   
0406E3             0784   	VDU_DE
0406E3 7B          0001M  		LD A,E
0406E4 49 D7       0002M  		RST.LIS	10h
0406E6 7A          0003M  		LD A,D
0406E7 49 D7       0004M  		RST.LIS	10h
0406E9             0785   
0406E9 E1          0786   	POP HL
0406EA D1          0787   	POP DE
0406EB D5          0788   	PUSH DE
0406EC E5          0789   	PUSH HL
0406ED             0790   
0406ED             0791   	VDU_HL
0406ED 7D          0001M  		LD A,L
0406EE 49 D7       0002M  		RST.LIS	10h
0406F0 7C          0003M  		LD A,H
0406F1 49 D7       0004M  		RST.LIS	10h
0406F3             0792   
0406F3             0793   	VDU 25
0406F3 3E 19       0001M  		LD	A, function
0406F5 49 D7       0002M  		RST.LIS	10h
0406F7             0794   	VDU 5
0406F7 3E 05       0001M  		LD	A, function
0406F9 49 D7       0002M  		RST.LIS	10h
0406FB             0795   
0406FB E1          0796   	POP HL
0406FC D1          0797   	POP DE
0406FD D5          0798   	PUSH DE
0406FE E5          0799   	PUSH HL
0406FF             0800   
0406FF             0801   	VDU_DE
0406FF 7B          0001M  		LD A,E
040700 49 D7       0002M  		RST.LIS	10h
040702 7A          0003M  		LD A,D
040703 49 D7       0004M  		RST.LIS	10h
040705             0802   
040705 E1          0803   	POP HL
040706 D1          0804   	POP DE
040707 D5          0805   	PUSH DE
040708 E5          0806   	PUSH HL
040709             0807   
040709             0808   	VDU_HL
040709 7D          0001M  		LD A,L
04070A 49 D7       0002M  		RST.LIS	10h
04070C 7C          0003M  		LD A,H
04070D 49 D7       0004M  		RST.LIS	10h
04070F             0809   
04070F E1          0810   	POP HL
040710 D1          0811   	POP DE
040711 C1          0812   	POP BC
040712 F1          0813   	POP AF
040713             0814   
040713 13          0815   	INC DE
040714             0816   
040714 E5          0817   	PUSH HL
040715 DD 21 F3 00 0818   	LD IX,width_value
       04          
04071A DD 6E 00    0819   	LD L,(IX+0)
04071D DD 66 01    0820   	LD H,(IX+1)
040720 B7          0821   	OR A
040721 ED 52       0822   	SBC HL,DE
040723 19          0823   	ADD HL,DE
040724 E1          0824   	POP HL
040725 C0          0825   	RET NZ
040726             0826   
040726 11 00 00 00 0827   	LD DE,$000000
04072A 23          0828   	INC HL
04072B C9          0829   	RET
04072C             0830   
04072C             0831   ; DE -> x
04072C             0832   ; HL -> y
04072C             0833   ; B -> count of pixels to draw
04072C             0834   ; A -> color
04072C             0835   plot_line:
04072C F5          0836   	PUSH AF
04072D C5          0837   	PUSH BC
04072E D5          0838   	PUSH DE
04072F E5          0839   	PUSH HL
040730             0840   
040730 E1          0841   	POP HL
040731 D1          0842   	POP DE
040732 C1          0843   	POP BC
040733 F1          0844   	POP AF
040734 C9          0845   	ret
