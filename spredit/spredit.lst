PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023-2024
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   
040045             0022   MAX_FRAMES:			equ 8
040045             0023   
040045             0024   COLOR_WHITE:		equ 15
040045             0025   COLOR_BLACK:		equ 0
040045             0026   
040045             0027   TITLE_X: 	equ 17
040045             0028   TITLE_Y: 	equ 2
040045             0029   MENU_X: 	equ 13
040045             0030   MENU1_Y: 	equ 8
040045             0031   MENU2_Y: 	equ 12
040045             0032   MENU3_Y: 	equ 16
040045             0033   MENU4_Y: 	equ 20
040045             0034   MENU5_Y: 	equ 24
040045             0035   FILENAME_X: equ 7
040045             0036   FILENAME_Y: equ 24
040045             0037   
040045             0038   SPR44: 		equ 4
040045             0039   SPR88: 		equ 8
040045             0040   SPR1616: 	equ 16
040045             0041   SPR3232: 	equ 32
040045             0042   
040045             0043   SPR44_width: 	equ 32
040045             0044   SPR88_width: 	equ 16
040045             0045   SPR1616_width: 	equ 8
040045             0046   SPR3232_width: 	equ 4
040045             0047   
040045             0048   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0049   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0050   
040045             0051   FILENAME_LENGTH:	equ 16
040045             0052   
040045             0053   HEADER_BUFFER_SIZE:		equ 16
040045             0054   
040045             0055   SLOWDOWN_DELAY:	equ 20
040045             0056   
040045             0057   KEY_SPACE: equ -99 ; draw with color
040045             0058   KEY_UP: equ -58 ; move
040045             0059   KEY_DOWN: equ -42
040045             0060   KEY_LEFT: equ -26
040045             0061   KEY_RIGHT: equ -122
040045             0062   KEY_DELETE: equ -90 ; remove color with black
040045             0063   KEY_N: equ -86 ; add a new void frame
040045             0064   KEY_C: equ -83 ; copy current frame to a new frame
040045             0065   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0066   KEY_PGUP: equ -64 ; select frame
040045             0067   KEY_PGDOWN: equ -79
040045             0068   KEY_L: equ -87 ; load sprite
040045             0069   KEY_S: equ -82 ; save sprite
040045             0070   KEY_E: equ -35 ; export sprite as assembler data
040045             0071   KEY_R: equ -52 ; rotate frame clockwise
040045             0072   KEY_F: equ -68 ; flip frame horizontally
040045             0073   KEY_M: equ -102 ; mirror frame vertically
040045             0074   KEY_ESCAPE: equ -113
040045             0075   KEY_F1: equ -114 ; select 4x4 sprite
040045             0076   KEY_F2: equ -115 ; select 8x8 sprite
040045             0077   KEY_F3: equ -116 ; select 16x16 sprite
040045             0078   KEY_F4: equ -21 ; select 32x32 sprite
040045             0079   KEY_RETURN: equ -74 ; floodfill
040045             0080   
040045             0081   ; play mode:
040045             0082   KEY_P:	equ -56 ; switch to play mode
040045             0083   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0084   
040045             0085   ; palette mode:
040045             0086   KEY_TAB: equ -97 ; switch to palette mode
040045             0087   KEY_1:	equ -49 ; red+
040045             0088   KEY_2:	equ -50 ; green+
040045             0089   KEY_3:	equ -18 ; blue+
040045             0090   KEY_4:	equ -19 ; red-
040045             0091   KEY_5:	equ -20 ; green-
040045             0092   KEY_6:	equ -53; blue-
040045             0093   KEY_7:	equ -37 ; reset color to black
040045             0094   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0095   ; KEY_S: save palette file
040045             0096   
040045             0097   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0098   MAX_PAL_DATA_HI: equ 03h
040045             0099   MAX_PAL_DATA_LO: equ 44h
040045             0100   
040045             0101   BITLOOKUP:
040045 01 02 04 08 0102   	DB 01h,02h,04h,08h
040049 10 20 40 80 0103   	DB 10h,20h,40h,80h
04004D             0104   
04004D             0105   ;======================================================================
04004D             0106   start:
04004D F5          0107   	push af
04004E C5          0108   	push bc
04004F D5          0109   	push de
040050 DD E5       0110   	push ix
040052 FD E5       0111   	push iy
040054             0112   
040054             0113   	; set mode 8 (320x240x64)
040054             0114   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0115   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0116   
04005C             0117   	; disable logical scale coordinates system
04005C             0118   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0119   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0120   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0121   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0122   
04006C             0123   	; set text colors
04006C             0124   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0125   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0126   
040074             0127   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0128   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0129   
04007C             0130   	; set graphics pen
04007C             0131   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0132   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0133   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0134   
040088             0135   	; hide cursor
040088             0136   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0137   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0138   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0139   
040094             0140   	; store coordinates
040094 DD 21 22 1A 0141   	ld ix,x1
       04          
040099 21 00 00 00 0142   	ld hl,0
04009D DD 75 00    0143   	ld (ix+0),l
0400A0 DD 74 01    0144   	ld (ix+1),h
0400A3             0145   
0400A3 DD 21 24 1A 0146   	ld ix,y1
       04          
0400A8 21 00 00 00 0147   	ld hl,0
0400AC DD 75 00    0148   	ld (ix+0),l
0400AF DD 74 01    0149   	ld (ix+1),h
0400B2             0150   
0400B2 DD 21 26 1A 0151   	ld ix,x2
       04          
0400B7 21 3F 01 00 0152   	ld hl,319
0400BB DD 75 00    0153   	ld (ix+0),l
0400BE DD 74 01    0154   	ld (ix+1),h
0400C1             0155   
0400C1 DD 21 28 1A 0156   	ld ix,y2
       04          
0400C6 21 EF 00 00 0157   	ld hl,239
0400CA DD 75 00    0158   	ld (ix+0),l
0400CD DD 74 01    0159   	ld (ix+1),h
0400D0             0160   
0400D0             0161   	; draw the border rectangle
0400D0 CD 34 0C 04 0162   	call fn_rect
0400D4             0163   
0400D4             0164   	; locate x,y
0400D4             0165   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0166   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0167   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0168   
0400E0             0169   	; print text
0400E0 21 39 1A 04 0170   	ld hl,title
0400E4 01 00 00 00 0171   	ld bc,0
0400E8 AF          0172   	xor a
0400E9 49 DF       0173   	rst.lis $18
0400EB             0174   
0400EB             0175   	; locate x,y
0400EB             0176   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0177   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0178   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0179   
0400F7             0180   	; print text
0400F7 21 42 1A 04 0181   	ld hl,menu1
0400FB 01 00 00 00 0182   	ld bc,0
0400FF AF          0183   	xor a
040100 49 DF       0184   	rst.lis $18
040102             0185   
040102             0186   	; locate x,y
040102             0187   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0188   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0189   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0190   
04010E             0191   	; print text
04010E 21 51 1A 04 0192   	ld hl,menu2
040112 01 00 00 00 0193   	ld bc,0
040116 AF          0194   	xor a
040117 49 DF       0195   	rst.lis $18
040119             0196   
040119             0197   	; locate x,y
040119             0198   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0199   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0200   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0201   
040125             0202   	; print text
040125 21 60 1A 04 0203   	ld hl,menu3
040129 01 00 00 00 0204   	ld bc,0
04012D AF          0205   	xor a
04012E 49 DF       0206   	rst.lis $18
040130             0207   
040130             0208   	; locate x,y
040130             0209   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0210   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0211   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0212   
04013C             0213   	; print text
04013C 21 71 1A 04 0214   	ld hl,menu4
040140 01 00 00 00 0215   	ld bc,0
040144 AF          0216   	xor a
040145 49 DF       0217   	rst.lis $18
040147             0218   
040147             0219   ; menu loop
040147             0220   menu_loop:
040147 21 8F FF FF 0221   	ld hl,KEY_ESCAPE
04014B CD CB 18 04 0222   	call fn_inkey
04014F FE 01       0223   	CP 1
040151 CA 10 0C 04 0224   	jp z,exit_program
040155             0225   
040155 21 8E FF FF 0226   	ld hl,KEY_F1
040159 CD CB 18 04 0227   	call fn_inkey
04015D FE 01       0228   	CP 1
04015F CA 91 01 04 0229   	jp z,ml_menu1
040163             0230   
040163 21 8D FF FF 0231   	ld hl,KEY_F2
040167 CD CB 18 04 0232   	call fn_inkey
04016B FE 01       0233   	CP 1
04016D CA 97 01 04 0234   	jp z,ml_menu2
040171             0235   
040171 21 8C FF FF 0236   	ld hl,KEY_F3
040175 CD CB 18 04 0237   	call fn_inkey
040179 FE 01       0238   	CP 1
04017B CA 9D 01 04 0239   	jp z,ml_menu3
04017F             0240   
04017F 21 EB FF FF 0241   	ld hl,KEY_F4
040183 CD CB 18 04 0242   	call fn_inkey
040187 FE 01       0243   	CP 1
040189 CA A3 01 04 0244   	jp z,ml_menu4
04018D             0245   
04018D C3 47 01 04 0246   	jp menu_loop
040191             0247   
040191             0248   ml_menu1:
040191 3E 04       0249   	ld a,SPR44
040193 16 20       0250   	ld d,SPR44_width
040195 18 10       0251   	jr exit_menu_loop
040197             0252   
040197             0253   ml_menu2:
040197 3E 08       0254   	ld a,SPR88
040199 16 10       0255   	ld d,SPR88_width
04019B 18 0A       0256   	jr exit_menu_loop
04019D             0257   
04019D             0258   ml_menu3:
04019D 3E 10       0259   	ld a,SPR1616
04019F 16 08       0260   	ld d,SPR1616_width
0401A1 18 04       0261   	jr exit_menu_loop
0401A3             0262   
0401A3             0263   ml_menu4:
0401A3 3E 20       0264   	ld a,SPR3232
0401A5 16 04       0265   	ld d,SPR3232_width
0401A7             0266   
0401A7             0267   exit_menu_loop:
0401A7             0268   	; store edited sprite size
0401A7 21 37 1A 04 0269   	ld hl,spr_size
0401AB 77          0270   	ld (hl),a
0401AC 21 36 1A 04 0271   	ld hl,pixel_width
0401B0 72          0272   	ld (hl),d
0401B1             0273   
0401B1             0274   	; clear the text screen
0401B1             0275   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0276   
0401B5             0277   	; set colors count to max colors
0401B5 21 57 1B 04 0278   	ld hl,colors_count
0401B9 3E 40       0279   	ld a,MAX_COLORS
0401BB 77          0280   	ld (hl),a
0401BC             0281   
0401BC CD 05 19 04 0282   	call fn_draw_the_palette
0401C0             0283   
0401C0             0284   	; store coordinates
0401C0 DD 21 22 1A 0285   	ld ix,x1
       04          
0401C5 21 00 00 00 0286   	ld hl,0
0401C9 DD 75 00    0287   	ld (ix+0),l
0401CC DD 74 01    0288   	ld (ix+1),h
0401CF             0289   
0401CF DD 21 24 1A 0290   	ld ix,y1
       04          
0401D4 21 0B 00 00 0291   	ld hl,11
0401D8 DD 75 00    0292   	ld (ix+0),l
0401DB DD 74 01    0293   	ld (ix+1),h
0401DE             0294   
0401DE DD 21 26 1A 0295   	ld ix,x2
       04          
0401E3 21 3F 01 00 0296   	ld hl,319
0401E7 DD 75 00    0297   	ld (ix+0),l
0401EA DD 74 01    0298   	ld (ix+1),h
0401ED             0299   
0401ED DD 21 28 1A 0300   	ld ix,y2
       04          
0401F2 21 EF 00 00 0301   	ld hl,239
0401F6 DD 75 00    0302   	ld (ix+0),l
0401F9 DD 74 01    0303   	ld (ix+1),h
0401FC             0304   
0401FC             0305   	; draw the border rectangle
0401FC CD 34 0C 04 0306   	call fn_rect
040200             0307   
040200             0308   	; store edited sprite coordinates
040200 DD 21 2A 1A 0309   	ld ix,xs1
       04          
040205 FD 21 22 1A 0310   	ld iy,x1
       04          
04020A DD 6E 00    0311   	ld l,(ix+0)
04020D DD 66 01    0312   	ld h,(ix+1)
040210 FD 75 00    0313   	ld (iy+0),l
040213 FD 74 01    0314   	ld (iy+1),h
040216             0315   
040216 DD 21 2C 1A 0316   	ld ix,ys1
       04          
04021B FD 21 24 1A 0317   	ld iy,y1
       04          
040220 DD 6E 00    0318   	ld l,(ix+0)
040223 DD 66 01    0319   	ld h,(ix+1)
040226 FD 75 00    0320   	ld (iy+0),l
040229 FD 74 01    0321   	ld (iy+1),h
04022C             0322   
04022C DD 21 2E 1A 0323   	ld ix,xs2
       04          
040231 FD 21 26 1A 0324   	ld iy,x2
       04          
040236 DD 6E 00    0325   	ld l,(ix+0)
040239 DD 66 01    0326   	ld h,(ix+1)
04023C FD 75 00    0327   	ld (iy+0),l
04023F FD 74 01    0328   	ld (iy+1),h
040242             0329   
040242 DD 21 30 1A 0330   	ld ix,ys2
       04          
040247 FD 21 28 1A 0331   	ld iy,y2
       04          
04024C DD 6E 00    0332   	ld l,(ix+0)
04024F DD 66 01    0333   	ld h,(ix+1)
040252 FD 75 00    0334   	ld (iy+0),l
040255 FD 74 01    0335   	ld (iy+1),h
040258             0336   
040258             0337   	; draw the sprite's border rectangle
040258 CD 34 0C 04 0338   	call fn_rect
04025C             0339   
04025C             0340   	; update sprite size descriptions
04025C CD 67 18 04 0341   	call fn_show_spr_descr
040260             0342   
040260             0343   ; initialize sprite vars
040260             0344   init_sprite_vars:
040260             0345   	; initialize coordinates before drawing the sprite
040260 DD 21 32 1A 0346   	ld ix,xpix
       04          
040265 AF          0347   	xor a
040266 DD 77 00    0348   	ld (ix+0),a ; xpix = 0
040269 DD 77 01    0349   	ld (ix+1),a	; ypix = 0
04026C DD 21 38 1A 0350   	ld ix,current_pen
       04          
040271 3E 0F       0351   	ld a,COLOR_WHITE
040273 DD 77 00    0352   	ld (ix+0),a ; current pen -> white
040276             0353   
040276             0354   	; set vars
040276 21 5D 1B 04 0355   	ld hl,current_frame
04027A AF          0356   	xor a
04027B 77          0357   	ld (hl),a
04027C 3C          0358   	inc a
04027D 21 5E 1B 04 0359   	ld hl,frames_count
040281 77          0360   	ld (hl),a
040282             0361   
040282             0362   	; fill buffers with zeros
040282 01 00 20 00 0363   	ld bc,BUFFER_SIZE
040286 21 66 1B 04 0364   	ld hl,sprite_buffer
04028A             0365   
04028A             0366   isv_fill_loop:
04028A AF          0367   	xor a
04028B 77          0368   	ld (hl),a
04028C 0B          0369   	dec bc
04028D 23          0370   	inc hl
04028E 78          0371   	ld a,b
04028F B1          0372   	or c
040290 FE 00       0373   	cp 0
040292 20 F6       0374   	jr nz,isv_fill_loop
040294             0375   
040294             0376   ; draw the pixel with a border
040294 CD C1 0D 04 0377   	call fn_draw_pixel_with_border
040298             0378   
040298             0379   ; draw sprite loop
040298             0380   draw_sprite_loop:
040298 21 9D FF FF 0381   	ld hl,KEY_SPACE
04029C CD CB 18 04 0382   	call fn_inkey
0402A0 FE 01       0383   	cp 1
0402A2 CC B4 03 04 0384   	call z,dsl_set_pen
0402A6             0385   
0402A6 21 C6 FF FF 0386   	ld hl,KEY_UP
0402AA CD CB 18 04 0387   	call fn_inkey
0402AE FE 01       0388   	cp 1
0402B0 CC D9 03 04 0389   	call z,dsl_up
0402B4             0390   
0402B4 21 D6 FF FF 0391   	ld hl,KEY_DOWN
0402B8 CD CB 18 04 0392   	call fn_inkey
0402BC FE 01       0393   	cp 1
0402BE CC 00 04 04 0394   	call z,dsl_down
0402C2             0395   
0402C2 21 E6 FF FF 0396   	ld hl,KEY_LEFT
0402C6 CD CB 18 04 0397   	call fn_inkey
0402CA FE 01       0398   	cp 1
0402CC CC 2C 04 04 0399   	call z,dsl_left
0402D0             0400   
0402D0 21 86 FF FF 0401   	ld hl,KEY_RIGHT
0402D4 CD CB 18 04 0402   	call fn_inkey
0402D8 FE 01       0403   	cp 1
0402DA CC 53 04 04 0404   	call z,dsl_right
0402DE             0405   
0402DE 21 A6 FF FF 0406   	ld hl,KEY_DELETE
0402E2 CD CB 18 04 0407   	call fn_inkey
0402E6 FE 01       0408   	cp 1
0402E8 CC C8 03 04 0409   	call z,dsl_reset_pen
0402EC             0410   
0402EC 21 9F FF FF 0411   	ld hl,KEY_TAB
0402F0 CD CB 18 04 0412   	call fn_inkey
0402F4 FE 01       0413   	cp 1
0402F6 CA 27 09 04 0414   	jp z,dsl_palette_tool
0402FA             0415   
0402FA 21 AA FF FF 0416   	ld hl,KEY_N
0402FE CD CB 18 04 0417   	call fn_inkey
040302 FE 01       0418   	cp 1
040304 CC CE 04 04 0419   	call z,dsl_add_frame
040308             0420   
040308 21 AD FF FF 0421   	ld hl,KEY_C
04030C CD CB 18 04 0422   	call fn_inkey
040310 FE 01       0423   	cp 1
040312 CC 65 05 04 0424   	call z,dsl_add_and_copy_frame
040316             0425   
040316 21 D0 FF FF 0426   	ld hl,KEY_BACKSPACE
04031A CD CB 18 04 0427   	call fn_inkey
04031E FE 01       0428   	cp 1
040320 CC CC 05 04 0429   	call z,dsl_delete_frame
040324             0430   
040324 21 C0 FF FF 0431   	ld hl,KEY_PGUP
040328 CD CB 18 04 0432   	call fn_inkey
04032C FE 01       0433   	cp 1
04032E CC C5 06 04 0434   	call z,dsl_next_frame
040332             0435   
040332 21 B1 FF FF 0436   	ld hl,KEY_PGDOWN
040336 CD CB 18 04 0437   	call fn_inkey
04033A FE 01       0438   	cp 1
04033C CC A6 06 04 0439   	call z,dsl_previous_frame
040340             0440   
040340 21 A9 FF FF 0441   	ld hl,KEY_L
040344 CD CB 18 04 0442   	call fn_inkey
040348 FE 01       0443   	cp 1
04034A CC 7F 04 04 0444   	call z,dsl_load_sprite
04034E             0445   
04034E 21 AE FF FF 0446   	ld hl,KEY_S
040352 CD CB 18 04 0447   	call fn_inkey
040356 FE 01       0448   	cp 1
040358 CC 9C 04 04 0449   	call z,dsl_save_sprite
04035C             0450   
04035C 21 DD FF FF 0451   	ld hl,KEY_E
040360 CD CB 18 04 0452   	call fn_inkey
040364 FE 01       0453   	cp 1
040366 CC B5 04 04 0454   	call z,dsl_export_sprite
04036A             0455   
04036A 21 CC FF FF 0456   	ld hl,KEY_R
04036E CD CB 18 04 0457   	call fn_inkey
040372 FE 01       0458   	cp 1
040374 CC EB 06 04 0459   	call z,dsl_rotate_frame
040378             0460   
040378 21 BC FF FF 0461   	ld hl,KEY_F
04037C CD CB 18 04 0462   	call fn_inkey
040380 FE 01       0463   	cp 1
040382 CC A0 07 04 0464   	call z,dsl_flip_frame
040386             0465   
040386 21 9A FF FF 0466   	ld hl,KEY_M
04038A CD CB 18 04 0467   	call fn_inkey
04038E FE 01       0468   	cp 1
040390 CC 07 08 04 0469   	call z,dsl_mirror_frame
040394             0470   
040394 21 B6 FF FF 0471   	ld hl,KEY_RETURN
040398 CD CB 18 04 0472   	call fn_inkey
04039C FE 01       0473   	cp 1
04039E CC 87 08 04 0474   	call z,dsl_flood_fill
0403A2             0475   
0403A2 21 8F FF FF 0476   	ld hl,KEY_ESCAPE
0403A6 CD CB 18 04 0477   	call fn_inkey
0403AA FE 01       0478   	cp 1
0403AC CA 10 0C 04 0479   	jp z,exit_program
0403B0             0480   
0403B0 C3 98 02 04 0481   	jp draw_sprite_loop
0403B4             0482   
0403B4             0483   ; set the pen of the current pixel
0403B4             0484   dsl_set_pen:
0403B4 CD EB 0D 04 0485   	call fn_get_pixel_color
0403B8 21 38 1A 04 0486   	ld hl,current_pen
0403BC BE          0487   	cp (hl)
0403BD C8          0488   	ret z
0403BE 7E          0489   	ld a,(hl)
0403BF CD 2D 0E 04 0490   	call fn_set_pixel_color
0403C3 CD C1 0D 04 0491   	call fn_draw_pixel_with_border
0403C7 C9          0492   	ret
0403C8             0493   
0403C8             0494   ; reset the pen of the current pixel
0403C8             0495   dsl_reset_pen:
0403C8 CD EB 0D 04 0496   	call fn_get_pixel_color
0403CC FE 00       0497   	cp 0
0403CE C8          0498   	ret z
0403CF AF          0499   	xor a
0403D0 CD 2D 0E 04 0500   	call fn_set_pixel_color
0403D4 CD C1 0D 04 0501   	call fn_draw_pixel_with_border
0403D8 C9          0502   	ret
0403D9             0503   
0403D9             0504   ; move pixel up
0403D9             0505   dsl_up:
0403D9 21 33 1A 04 0506   	ld hl,ypix
0403DD 7E          0507   	ld a,(hl)
0403DE FE 00       0508   	cp 0
0403E0 C8          0509   	ret z
0403E1             0510   
0403E1 21 9D FF FF 0511   	ld hl,KEY_SPACE
0403E5 CD CB 18 04 0512   	call fn_inkey
0403E9 FE 01       0513   	cp 1
0403EB CC B4 03 04 0514   	call z,dsl_set_pen
0403EF             0515   
0403EF CD D5 0D 04 0516   	call fn_draw_pixel_without_border
0403F3 CD 71 0E 04 0517   	call fn_move_up
0403F7 CD C1 0D 04 0518   	call fn_draw_pixel_with_border
0403FB CD 46 18 04 0519   	call fn_slowdown
0403FF C9          0520   	ret
040400             0521   
040400             0522   ; move pixel down
040400             0523   dsl_down:
040400 21 37 1A 04 0524   	ld hl,spr_size
040404 56          0525   	ld d,(hl)
040405 15          0526   	dec d
040406             0527   
040406 21 33 1A 04 0528   	ld hl,ypix
04040A 7E          0529   	ld a,(hl)
04040B BA          0530   	cp d
04040C C8          0531   	ret z
04040D             0532   
04040D 21 9D FF FF 0533   	ld hl,KEY_SPACE
040411 CD CB 18 04 0534   	call fn_inkey
040415 FE 01       0535   	cp 1
040417 CC B4 03 04 0536   	call z,dsl_set_pen
04041B             0537   
04041B CD D5 0D 04 0538   	call fn_draw_pixel_without_border
04041F CD 77 0E 04 0539   	call fn_move_down
040423 CD C1 0D 04 0540   	call fn_draw_pixel_with_border
040427 CD 46 18 04 0541   	call fn_slowdown
04042B C9          0542   	ret
04042C             0543   
04042C             0544   ; move pixel left
04042C             0545   dsl_left:
04042C 21 32 1A 04 0546   	ld hl,xpix
040430 7E          0547   	ld a,(hl)
040431 FE 00       0548   	cp 0
040433 C8          0549   	ret z
040434             0550   
040434 21 9D FF FF 0551   	ld hl,KEY_SPACE
040438 CD CB 18 04 0552   	call fn_inkey
04043C FE 01       0553   	cp 1
04043E CC B4 03 04 0554   	call z,dsl_set_pen
040442             0555   
040442 CD D5 0D 04 0556   	call fn_draw_pixel_without_border
040446 CD 7D 0E 04 0557   	call fn_move_left
04044A CD C1 0D 04 0558   	call fn_draw_pixel_with_border
04044E CD 46 18 04 0559   	call fn_slowdown
040452 C9          0560   	ret
040453             0561   
040453             0562   ; move pixel right
040453             0563   dsl_right:
040453 21 37 1A 04 0564   	ld hl,spr_size
040457 56          0565   	ld d,(hl)
040458 15          0566   	dec d
040459             0567   
040459 21 32 1A 04 0568   	ld hl,xpix
04045D 7E          0569   	ld a,(hl)
04045E BA          0570   	cp d
04045F C8          0571   	ret z
040460             0572   
040460 21 9D FF FF 0573   	ld hl,KEY_SPACE
040464 CD CB 18 04 0574   	call fn_inkey
040468 FE 01       0575   	cp 1
04046A CC B4 03 04 0576   	call z,dsl_set_pen
04046E             0577   
04046E CD D5 0D 04 0578   	call fn_draw_pixel_without_border
040472 CD 83 0E 04 0579   	call fn_move_right
040476 CD C1 0D 04 0580   	call fn_draw_pixel_with_border
04047A CD 46 18 04 0581   	call fn_slowdown
04047E C9          0582   	ret
04047F             0583   
04047F             0584   ; load a sprite
04047F             0585   dsl_load_sprite:
04047F 21 A9 FF FF 0586   	ld hl,KEY_L
040483 CD CB 18 04 0587   	call fn_inkey
040487 FE 00       0588   	cp 0
040489 20 F4       0589   	jr nz,dsl_load_sprite
04048B             0590   
04048B CD D5 0D 04 0591   	call fn_draw_pixel_without_border
04048F CD 60 13 04 0592   	call fn_load_sprite
040493 CD BD 17 04 0593   	call fn_refresh_sprite
040497 CD C1 0D 04 0594   	call fn_draw_pixel_with_border
04049B C9          0595   	ret
04049C             0596   
04049C             0597   ; save a sprite
04049C             0598   dsl_save_sprite:
04049C 21 AE FF FF 0599   	ld hl,KEY_S
0404A0 CD CB 18 04 0600   	call fn_inkey
0404A4 FE 00       0601   	cp 0
0404A6 20 F4       0602   	jr nz,dsl_save_sprite
0404A8             0603   
0404A8 CD D5 0D 04 0604   	call fn_draw_pixel_without_border
0404AC CD 8F 14 04 0605   	call fn_save_sprite
0404B0 CD BD 17 04 0606   	call fn_refresh_sprite
0404B4 C9          0607   	ret
0404B5             0608   
0404B5             0609   dsl_export_sprite:
0404B5 21 DD FF FF 0610   	ld hl,KEY_E
0404B9 CD CB 18 04 0611   	call fn_inkey
0404BD FE 00       0612   	cp 0
0404BF 20 F4       0613   	jr nz,dsl_export_sprite
0404C1             0614   
0404C1 CD D5 0D 04 0615   	call fn_draw_pixel_without_border
0404C5 CD 9A 15 04 0616   	call fn_export_sprite
0404C9 CD BD 17 04 0617   	call fn_refresh_sprite
0404CD C9          0618   	ret
0404CE             0619   
0404CE             0620   
0404CE             0621   ; add a frame to the animation
0404CE             0622   dsl_add_frame:
0404CE 21 AA FF FF 0623   	ld hl,KEY_N
0404D2 CD CB 18 04 0624   	call fn_inkey
0404D6 FE 00       0625   	cp 0
0404D8 20 F4       0626   	jr nz,dsl_add_frame
0404DA             0627   
0404DA             0628   	; frames limit reached ? exit
0404DA 21 5E 1B 04 0629   	ld hl,frames_count
0404DE 7E          0630   	ld a,(hl)
0404DF FE 08       0631   	cp MAX_FRAMES
0404E1 C8          0632   	ret z
0404E2             0633   
0404E2             0634   	; get the number of frames to copy
0404E2 21 5E 1B 04 0635   	ld hl,frames_count
0404E6 7E          0636   	ld a,(hl)
0404E7 21 5D 1B 04 0637   	ld hl,current_frame
0404EB 46          0638   	ld b,(hl)
0404EC 90          0639   	sub b
0404ED 3D          0640   	dec a
0404EE             0641   
0404EE             0642   	; get sprsize² (length of a sprite, in bytes)
0404EE 21 37 1A 04 0643   	ld hl,spr_size
0404F2 11 00 00 00 0644   	ld de,$000000
0404F6 5E          0645   	ld e,(hl)
0404F7 56          0646   	ld d,(hl)
0404F8 ED 5C       0647   	mlt de ; DE = sprsize²
0404FA             0648   
0404FA             0649   	; prepare for the case we goto af_zap...
0404FA 21 66 1B 04 0650   	ld hl,sprite_buffer
0404FE             0651   
0404FE F5          0652   	push af
0404FF E5          0653   	push hl
040500 21 5D 1B 04 0654   	ld hl,current_frame
040504 7E          0655   	ld a,(hl)
040505 3C          0656   	inc a
040506 47          0657   	ld b,a
040507 E1          0658   	pop hl
040508 F1          0659   	pop af
040509             0660   
040509             0661   af_loop0:
040509 19          0662   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050A 10 FD       0663   	djnz af_loop0
04050C             0664   
04050C E5          0665   	push hl ; store HL = sprite buffer + sprsize²
04050D FE 00       0666   	cp 0
04050F CA 37 05 04 0667   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040513 E1          0668   	pop hl ; HL unused in this case
040514             0669   
040514 21 00 00 00 0670   	ld hl,$000000 ; HL is 0 to store the result
040518 47          0671   	ld b,a ; B = frames to copy
040519             0672   
040519             0673   ; multiply number of frames to copy by sprsize²
040519             0674   af_loop1:
040519 19          0675   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051A 10 FD       0676   	djnz af_loop1
04051C             0677   
04051C E5          0678   	push hl
04051D C1          0679   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04051E             0680   
04051E 21 5D 1B 04 0681   	ld hl,current_frame
040522 7E          0682   	ld a,(hl)
040523 3C          0683   	inc a
040524 21 66 1B 04 0684   	ld hl,sprite_buffer
040528             0685   
040528 C5          0686   	push bc
040529 47          0687   	ld b,a
04052A             0688   
04052A             0689   af_loop2:
04052A 19          0690   	add hl,de ; HL = sprite buffer + length to copy
04052B 10 FD       0691   	djnz af_loop2
04052D             0692   
04052D C1          0693   	pop bc
04052E             0694   
04052E E5          0695   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04052F             0696   
04052F 09          0697   	add hl,bc
040530 2B          0698   	dec hl ; HL = end address to copy to end target address
040531             0699   
040531 E5          0700   	push hl
040532 19          0701   	add hl,de
040533 EB          0702   	ex de,hl ; DE = end target address
040534 E1          0703   	pop hl
040535             0704   
040535 ED B8       0705   	lddr
040537             0706   
040537             0707   af_zap:
040537             0708   	; multiply number of frames to copy by sprsize²
040537 21 37 1A 04 0709   	ld hl,spr_size
04053B 01 00 00 00 0710   	ld bc,$000000
04053F 4E          0711   	ld c,(hl)
040540 46          0712   	ld b,(hl)
040541 ED 4C       0713   	mlt bc ; BC = sprsize²
040543             0714   
040543 E1          0715   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040544             0716   
040544             0717   ; fill frame with 0 color
040544             0718   af_loop3:
040544 AF          0719   	xor a
040545 77          0720   	ld (hl),a
040546 23          0721   	inc hl
040547 0B          0722   	dec bc
040548 78          0723   	ld a,b
040549 B1          0724   	or c
04054A FE 00       0725   	cp 0
04054C 20 F6       0726   	jr nz,af_loop3
04054E             0727   
04054E             0728   	; increment the frames count and the current frame values
04054E 21 5E 1B 04 0729   	ld hl,frames_count
040552 34          0730   	inc (hl)
040553 21 5D 1B 04 0731   	ld hl,current_frame
040557 34          0732   	inc (hl)
040558             0733   
040558 CD FD 17 04 0734   	call fn_change_frame
04055C CD 22 18 04 0735   	call fn_change_frames_count
040560 CD BD 17 04 0736   	call fn_refresh_sprite
040564 C9          0737   	ret
040565             0738   
040565             0739   ; add a copy of the current frame to the animation
040565             0740   dsl_add_and_copy_frame:
040565 21 AD FF FF 0741   	ld hl,KEY_C
040569 CD CB 18 04 0742   	call fn_inkey
04056D FE 00       0743   	cp 0
04056F 20 F4       0744   	jr nz,dsl_add_and_copy_frame
040571             0745   
040571             0746   	; frames limit reached ? exit
040571 21 5E 1B 04 0747   	ld hl,frames_count
040575 7E          0748   	ld a,(hl)
040576 FE 08       0749   	cp MAX_FRAMES
040578 C8          0750   	ret z
040579             0751   
040579             0752   	; get the number of frames to copy
040579 21 5E 1B 04 0753   	ld hl,frames_count
04057D 7E          0754   	ld a,(hl)
04057E 21 5D 1B 04 0755   	ld hl,current_frame
040582 46          0756   	ld b,(hl)
040583 90          0757   	sub b
040584             0758   
040584             0759   	; get sprsize² (length of a sprite, in bytes)
040584 21 37 1A 04 0760   	ld hl,spr_size
040588 11 00 00 00 0761   	ld de,$000000
04058C 5E          0762   	ld e,(hl)
04058D 56          0763   	ld d,(hl)
04058E ED 5C       0764   	mlt de ; DE = sprsize²
040590             0765   
040590 21 00 00 00 0766   	ld hl,$000000 ; HL is 0 to store the result
040594 47          0767   	ld b,a ; B = frames to copy
040595             0768   
040595             0769   ; multiply number of frames to copy by sprsize²
040595             0770   aacf_loop1:
040595 19          0771   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040596 10 FD       0772   	djnz aacf_loop1
040598             0773   
040598 E5          0774   	push hl
040599 C1          0775   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059A             0776   
04059A 21 5D 1B 04 0777   	ld hl,current_frame
04059E 7E          0778   	ld a,(hl)
04059F 21 66 1B 04 0779   	ld hl,sprite_buffer
0405A3 FE 00       0780   	cp 0
0405A5 28 06       0781   	jr z,aacf_loop_end2
0405A7             0782   
0405A7 C5          0783   	push bc
0405A8 47          0784   	ld b,a
0405A9             0785   
0405A9             0786   aacf_loop2:
0405A9 19          0787   	add hl,de ; HL = sprite buffer + length to copy
0405AA 10 FD       0788   	djnz aacf_loop2
0405AC             0789   
0405AC C1          0790   	pop bc
0405AD             0791   
0405AD             0792   aacf_loop_end2:
0405AD 09          0793   	add hl,bc
0405AE 2B          0794   	dec hl ; HL = end address to copy to end target address
0405AF             0795   
0405AF E5          0796   	push hl
0405B0 19          0797   	add hl,de
0405B1 EB          0798   	ex de,hl ; DE = end target address
0405B2 E1          0799   	pop hl
0405B3             0800   
0405B3 ED B8       0801   	lddr
0405B5             0802   
0405B5             0803   	; increment the frames count and the current frame values
0405B5 21 5E 1B 04 0804   	ld hl,frames_count
0405B9 34          0805   	inc (hl)
0405BA 21 5D 1B 04 0806   	ld hl,current_frame
0405BE 34          0807   	inc (hl)
0405BF             0808   
0405BF CD FD 17 04 0809   	call fn_change_frame
0405C3 CD 22 18 04 0810   	call fn_change_frames_count
0405C7 CD BD 17 04 0811   	call fn_refresh_sprite
0405CB C9          0812   	ret
0405CC             0813   
0405CC             0814   ; delete last frame from animation
0405CC             0815   dsl_delete_frame:
0405CC 21 D0 FF FF 0816   	ld hl,KEY_BACKSPACE
0405D0 CD CB 18 04 0817   	call fn_inkey
0405D4 FE 00       0818   	cp 0
0405D6 20 F4       0819   	jr nz,dsl_delete_frame
0405D8             0820   
0405D8             0821   	; delete current selected frame
0405D8 21 37 1A 04 0822   	ld hl,spr_size
0405DC 01 00 00 00 0823   	ld bc,$000000
0405E0 4E          0824   	ld c,(hl)
0405E1 46          0825   	ld b,(hl)
0405E2 ED 4C       0826   	mlt bc ; BC = sprsize²
0405E4 21 5D 1B 04 0827   	ld hl,current_frame
0405E8 7E          0828   	ld a,(hl) ; A = current frame
0405E9 21 66 1B 04 0829   	ld hl,sprite_buffer ; HL = sprite buffer
0405ED C5          0830   	push bc
0405EE FE 00       0831   	cp 0
0405F0 28 06       0832   	jr z,df_loop2
0405F2             0833   
0405F2             0834   df_loop1:
0405F2 09          0835   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F3 3D          0836   	dec a
0405F4 FE 00       0837   	cp 0
0405F6 20 FA       0838   	jr nz,df_loop1
0405F8             0839   
0405F8             0840   ; clear the current frame
0405F8             0841   df_loop2:
0405F8 AF          0842   	xor a
0405F9 77          0843   	ld (hl),a
0405FA 23          0844   	inc hl
0405FB 0B          0845   	dec bc
0405FC 78          0846   	ld a,b
0405FD B1          0847   	or c
0405FE FE 00       0848   	cp 0
040600 20 F6       0849   	jr nz,df_loop2
040602             0850   
040602             0851   	; current frame + 1 = frames count ?
040602 E5          0852   	push hl
040603 21 5D 1B 04 0853   	ld hl,current_frame
040607 5E          0854   	ld e,(hl)
040608 1C          0855   	inc e
040609 21 5E 1B 04 0856   	ld hl,frames_count
04060D 7E          0857   	ld a,(hl)
04060E BB          0858   	cp e
04060F E1          0859   	pop hl
040610 C1          0860   	pop bc
040611 CA 8A 06 04 0861   	jp z,df_exit
040615             0862   
040615 11 5E 1B 04 0863   	ld de,frames_count
040619 1A          0864   	ld a,(de) ; A = frames count
04061A E5          0865   	push hl
04061B 21 5D 1B 04 0866   	ld hl,current_frame
04061F 5E          0867   	ld e,(hl) ; E = current frame
040620 E1          0868   	pop hl
040621 93          0869   	sub e
040622 3D          0870   	dec a ; A = number of frames to copy back
040623             0871   
040623 EB          0872   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040624 21 00 00 00 0873   	ld hl,$000000
040628 FE 00       0874   	cp 0 ; 0 frames to copy ?
04062A 28 06       0875   	jr z,df_exit_loop3
04062C             0876   
04062C             0877   df_loop3:
04062C 09          0878   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04062D 3D          0879   	dec a
04062E FE 00       0880   	cp 0
040630 20 FA       0881   	jr nz,df_loop3
040632             0882   
040632             0883   df_exit_loop3:
040632 E5          0884   	push hl
040633 C1          0885   	pop bc ; BC = total length of area to copy
040634 D5          0886   	push de
040635 E1          0887   	pop hl ; HL = DE = start of area to copy
040636             0888   
040636 C5          0889   	push bc
040637 D5          0890   	push de
040638 E5          0891   	push hl
040639 21 37 1A 04 0892   	ld hl,spr_size
04063D 11 00 00 00 0893   	ld de,$000000
040641 5E          0894   	ld e,(hl)
040642 56          0895   	ld d,(hl)
040643 ED 5C       0896   	mlt de ; DE = one sprite frame length
040645 E1          0897   	pop hl
040646 B7          0898   	or a
040647 ED 52       0899   	sbc hl,de ; HL = target area to copy
040649 D1          0900   	pop de
04064A EB          0901   	ex de,hl ; DE = target, HL = start
04064B C1          0902   	pop bc
04064C ED B0       0903   	ldir
04064E             0904   
04064E 21 37 1A 04 0905   	ld hl,spr_size
040652 01 00 00 00 0906   	ld bc,$000000
040656 4E          0907   	ld c,(hl)
040657 46          0908   	ld b,(hl)
040658 ED 4C       0909   	mlt bc ; DE = one sprite frame length
04065A             0910   
04065A             0911   	; delete last frame data
04065A 21 5E 1B 04 0912   	ld hl,frames_count
04065E 7E          0913   	ld a,(hl) ; A =frames count
04065F 3D          0914   	dec a ; A = last frame
040660 21 66 1B 04 0915   	ld hl,sprite_buffer ; HL = sprite buffer
040664 FE 00       0916   	cp 0
040666 28 06       0917   	jr z,df_loop5
040668             0918   
040668             0919   df_loop4:
040668 09          0920   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
040669 3D          0921   	dec a
04066A FE 00       0922   	cp 0
04066C 20 FA       0923   	jr nz,df_loop4
04066E             0924   
04066E             0925   ; clear the current frame
04066E             0926   df_loop5:
04066E AF          0927   	xor a
04066F 77          0928   	ld (hl),a
040670 23          0929   	inc hl
040671 0B          0930   	dec bc
040672 78          0931   	ld a,b
040673 B1          0932   	or c
040674 FE 00       0933   	cp 0
040676 20 F6       0934   	jr nz,df_loop5
040678             0935   
040678             0936   	; decrement frames count
040678 21 5E 1B 04 0937   	ld hl,frames_count
04067C 35          0938   	dec (hl)
04067D             0939   
04067D CD FD 17 04 0940   	call fn_change_frame
040681 CD 22 18 04 0941   	call fn_change_frames_count
040685 CD BD 17 04 0942   	call fn_refresh_sprite
040689 C9          0943   	ret
04068A             0944   
04068A             0945   df_exit:
04068A 21 5E 1B 04 0946   	ld hl,frames_count
04068E 7E          0947   	ld a,(hl)
04068F FE 01       0948   	cp 1
040691 28 06       0949   	jr z,df_exit_end
040693 35          0950   	dec (hl)
040694 21 5D 1B 04 0951   	ld hl,current_frame
040698 35          0952   	dec (hl)
040699             0953   
040699             0954   df_exit_end:
040699 CD FD 17 04 0955   	call fn_change_frame
04069D CD 22 18 04 0956   	call fn_change_frames_count
0406A1 CD BD 17 04 0957   	call fn_refresh_sprite
0406A5 C9          0958   	ret
0406A6             0959   
0406A6             0960   ; goto previous frame
0406A6             0961   dsl_previous_frame:
0406A6 21 B1 FF FF 0962   	ld hl,KEY_PGDOWN
0406AA CD CB 18 04 0963   	call fn_inkey
0406AE FE 00       0964   	cp 0
0406B0 20 F4       0965   	jr nz,dsl_previous_frame
0406B2             0966   
0406B2 21 5D 1B 04 0967   	ld hl,current_frame
0406B6 7E          0968   	ld a,(hl)
0406B7 FE 00       0969   	cp 0
0406B9 C8          0970   	ret z
0406BA             0971   
0406BA 3D          0972   	dec a
0406BB 77          0973   	ld (hl),a
0406BC CD FD 17 04 0974   	call fn_change_frame
0406C0 CD BD 17 04 0975   	call fn_refresh_sprite
0406C4 C9          0976   	ret
0406C5             0977   
0406C5             0978   ; goto next frame
0406C5             0979   dsl_next_frame:
0406C5 21 C0 FF FF 0980   	ld hl,KEY_PGUP
0406C9 CD CB 18 04 0981   	call fn_inkey
0406CD FE 00       0982   	cp 0
0406CF 20 F4       0983   	jr nz,dsl_next_frame
0406D1             0984   
0406D1 21 5D 1B 04 0985   	ld hl,current_frame
0406D5 7E          0986   	ld a,(hl)
0406D6 3C          0987   	inc a
0406D7 21 5E 1B 04 0988   	ld hl,frames_count
0406DB BE          0989   	cp (hl)
0406DC C8          0990   	ret z
0406DD             0991   
0406DD 21 5D 1B 04 0992   	ld hl,current_frame
0406E1 77          0993   	ld (hl),a
0406E2 CD FD 17 04 0994   	call fn_change_frame
0406E6 CD BD 17 04 0995   	call fn_refresh_sprite
0406EA C9          0996   	ret
0406EB             0997   
0406EB             0998   ; rotate a frame 90° clockwise
0406EB             0999   dsl_rotate_frame:
0406EB 21 CC FF FF 1000   	ld hl,KEY_R
0406EF CD CB 18 04 1001   	call fn_inkey
0406F3 FE 00       1002   	cp 0
0406F5 20 F4       1003   	jr nz,dsl_rotate_frame
0406F7             1004   
0406F7             1005   	; find HL as start of the first frame (buffer)
0406F7 21 37 1A 04 1006   	ld hl,spr_size
0406FB 01 00 00 00 1007   	ld bc,$000000
0406FF 11 00 00 00 1008   	ld de,$000000
040703 5E          1009   	ld e,(hl)
040704 56          1010   	ld d,(hl)
040705 4B          1011   	ld c,e
040706 ED 5C       1012   	mlt de ; DE = sprite length in bytes
040708 21 5D 1B 04 1013   	ld hl,current_frame
04070C 7E          1014   	ld a,(hl) ; A = current frame
04070D 21 66 1B 04 1015   	ld hl,sprite_buffer
040711 FE 00       1016   	cp 0
040713 28 04       1017   	jr z,rf_noloop1
040715 47          1018   	ld b,a
040716             1019   
040716             1020   rf_loop1:
040716 19          1021   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040717 10 FD       1022   	djnz rf_loop1
040719             1023   
040719             1024   rf_noloop1:
040719 C5          1025   	push bc
04071A E5          1026   	push hl
04071B             1027   
04071B             1028   	; copy current frame to swap sprite buffer
04071B 11 D2 3E 04 1029   	ld de,swap_sprite_buffer
04071F 41          1030   	ld b,c
040720 ED 4C       1031   	mlt bc
040722 ED B0       1032   	ldir
040724             1033   
040724 FD E1       1034   	pop iy ; IY: destination
040726 C1          1035   	pop bc
040727             1036   
040727 79          1037   	ld a,c
040728 01 00 00 00 1038   	ld bc,$000000
04072C 4F          1039   	ld c,a ; BC = sprite size
04072D             1040   
04072D             1041   	; turn and copy swap sprite buffer frame to sprite buffer
04072D DD 21 D2 3E 1042   	ld ix,swap_sprite_buffer ; IX: source
       04          
040732 11 00 00 00 1043   	ld de,0 ; x
040736 21 00 00 00 1044   	ld hl,0 ; y
04073A             1045   
04073A             1046   rf_loop2:
04073A DD E5       1047   	push ix
04073C FD E5       1048   	push iy
04073E             1049   
04073E D5          1050   	push de
04073F E5          1051   	push hl
040740             1052   
040740             1053   	; add x
040740 DD 19       1054   	add ix,de
040742             1055   
040742             1056   	; add y * width
040742 7C          1057   	ld a,h
040743 B5          1058   	or l
040744 FE 00       1059   	cp 0
040746 28 09       1060   	jr z,rf_done1
040748             1061   rf_loop3:
040748 DD 09       1062   	add ix,bc
04074A 2B          1063   	dec hl
04074B 7C          1064   	ld a,h
04074C B5          1065   	or l
04074D FE 00       1066   	cp 0
04074F 20 F7       1067   	jr nz,rf_loop3
040751             1068   
040751             1069   rf_done1:
040751             1070   	; found the pixel value
040751 DD 7E 00    1071   	ld a,(ix+0)
040754             1072   
040754 E1          1073   	pop hl
040755 D1          1074   	pop de
040756 D5          1075   	push de
040757 E5          1076   	push hl
040758             1077   
040758             1078   	; add y
040758 EB          1079   	ex de,hl
040759 FD 09       1080   	add iy,bc
04075B B7          1081   	or a
04075C E5          1082   	push hl
04075D FD E5       1083   	push iy
04075F E1          1084   	pop hl
040760 ED 52       1085   	sbc hl,de
040762 E5          1086   	push hl
040763 FD E1       1087   	pop iy
040765 FD 2B       1088   	dec iy
040767 E1          1089   	pop hl
040768 EB          1090   	ex de,hl
040769             1091   
040769             1092   	; add x * width
040769 F5          1093   	push af
04076A 7A          1094   	ld a,d
04076B B3          1095   	or e
04076C FE 00       1096   	cp 0
04076E 28 09       1097   	jr z,rf_done2
040770             1098   rf_loop5:
040770 FD 09       1099   	add iy,bc
040772 1B          1100   	dec de
040773 7A          1101   	ld a,d
040774 B3          1102   	or e
040775 FE 00       1103   	cp 0
040777 20 F7       1104   	jr nz,rf_loop5
040779             1105   
040779             1106   rf_done2:
040779 F1          1107   	pop af
04077A             1108   
04077A             1109   	; store the pixel value
04077A FD 77 00    1110   	ld (iy+0),a
04077D             1111   
04077D E1          1112   	pop hl
04077E D1          1113   	pop de
04077F             1114   
04077F FD E1       1115   	pop iy
040781 DD E1       1116   	pop ix
040783             1117   
040783 13          1118   	inc de
040784 EB          1119   	ex de,hl
040785 B7          1120   	or a
040786 ED 42       1121   	sbc hl,bc
040788 09          1122   	add hl,bc
040789 EB          1123   	ex de,hl
04078A DA 3A 07 04 1124   	jp c,rf_loop2
04078E             1125   
04078E 11 00 00 00 1126   	ld de,0
040792 23          1127   	inc hl
040793 B7          1128   	or a
040794 ED 42       1129   	sbc hl,bc
040796 09          1130   	add hl,bc
040797 DA 3A 07 04 1131   	jp c,rf_loop2
04079B             1132   
04079B CD BD 17 04 1133   	call fn_refresh_sprite
04079F C9          1134   	ret
0407A0             1135   
0407A0             1136   ; flip frame horizontally
0407A0             1137   dsl_flip_frame:
0407A0 21 BC FF FF 1138   	ld hl,KEY_F
0407A4 CD CB 18 04 1139   	call fn_inkey
0407A8 FE 00       1140   	cp 0
0407AA 20 F4       1141   	jr nz,dsl_flip_frame
0407AC             1142   
0407AC 21 37 1A 04 1143   	ld hl,spr_size
0407B0 11 00 00 00 1144   	ld de,$000000
0407B4 5E          1145   	ld e,(hl)
0407B5 56          1146   	ld d,(hl)
0407B6 4B          1147   	ld c,e
0407B7 ED 5C       1148   	mlt de ; DE = sprite length in bytes
0407B9 21 5D 1B 04 1149   	ld hl,current_frame
0407BD 7E          1150   	ld a,(hl) ; A = current frame
0407BE 21 66 1B 04 1151   	ld hl,sprite_buffer
0407C2 FE 00       1152   	cp 0
0407C4 28 04       1153   	jr z,ff_noloop1
0407C6 47          1154   	ld b,a
0407C7             1155   
0407C7             1156   ff_loop1:
0407C7 19          1157   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407C8 10 FD       1158   	djnz ff_loop1
0407CA             1159   
0407CA             1160   ff_noloop1:
0407CA 41          1161   	ld b,c ; B = sprite height
0407CB 11 00 00 00 1162   	ld de,$000000
0407CF 59          1163   	ld e,c ; DE = sprite width
0407D0 79          1164   	ld a,c ; A = sprite width
0407D1 CB 3F       1165   	srl a ; A = sprite height / 2
0407D3             1166   
0407D3 E5          1167   	push hl
0407D4 DD E1       1168   	pop ix ; IX = frame address
0407D6 19          1169   	add hl,de ; HL = frame address + sprite width - 1
0407D7 2B          1170   	dec hl
0407D8 E5          1171   	push hl
0407D9 FD E1       1172   	pop iy ; IY = IX + sprite width - 1
0407DB             1173   
0407DB             1174   ff_loop2:
0407DB F5          1175   	push af
0407DC D5          1176   	push de
0407DD DD E5       1177   	push ix
0407DF FD E5       1178   	push iy
0407E1             1179   ff_loop3:
0407E1 DD 5E 00    1180   	ld e,(ix+0)
0407E4 FD 56 00    1181   	ld d,(iy+0)
0407E7 DD 72 00    1182   	ld (ix+0),d
0407EA FD 73 00    1183   	ld (iy+0),e
0407ED DD 23       1184   	inc ix
0407EF FD 2B       1185   	dec iy
0407F1 3D          1186   	dec a
0407F2 FE 00       1187   	cp 0
0407F4 20 EB       1188   	jr nz,ff_loop3
0407F6 FD E1       1189   	pop iy
0407F8 DD E1       1190   	pop ix
0407FA D1          1191   	pop de
0407FB F1          1192   	pop af
0407FC DD 19       1193   	add ix,de
0407FE FD 19       1194   	add iy,de
040800 10 D9       1195   	djnz ff_loop2
040802             1196   
040802 CD BD 17 04 1197   	call fn_refresh_sprite
040806 C9          1198   	ret
040807             1199   
040807             1200   ; mirror frame vertically
040807             1201   dsl_mirror_frame:
040807 21 9A FF FF 1202   	ld hl,KEY_M
04080B CD CB 18 04 1203   	call fn_inkey
04080F FE 00       1204   	cp 0
040811 20 F4       1205   	jr nz,dsl_mirror_frame
040813             1206   
040813 21 37 1A 04 1207   	ld hl,spr_size
040817 01 00 00 00 1208   	ld bc,$000000
04081B 11 00 00 00 1209   	ld de,$000000
04081F 5E          1210   	ld e,(hl)
040820 56          1211   	ld d,(hl)
040821 4B          1212   	ld c,e
040822 ED 5C       1213   	mlt de ; DE = sprite length in bytes
040824 21 5D 1B 04 1214   	ld hl,current_frame
040828 7E          1215   	ld a,(hl) ; A = current frame
040829 21 66 1B 04 1216   	ld hl,sprite_buffer
04082D FE 00       1217   	cp 0
04082F 28 04       1218   	jr z,mf_noloop1
040831 47          1219   	ld b,a
040832             1220   
040832             1221   mf_loop1:
040832 19          1222   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040833 10 FD       1223   	djnz mf_loop1
040835             1224   
040835             1225   mf_noloop1:
040835 11 00 00 00 1226   	ld de,$000000
040839 59          1227   	ld e,c ; E = sprite height
04083A 79          1228   	ld a,c ; A = sprite width
04083B 41          1229   	ld b,c ; B = sprite height
04083C CB 38       1230   	srl b ; divide B by 2, so B = sprite height / 2
04083E             1231   
04083E E5          1232   	push hl
04083F DD E1       1233   	pop ix ; IX = frame address
040841 51          1234   	ld d,c
040842 15          1235   	dec d
040843 ED 5C       1236   	mlt de ; DE = sprite length - sprite width
040845 19          1237   	add hl,de ; HL = frame address + sprite length - sprite width
040846 E5          1238   	push hl
040847 FD E1       1239   	pop iy ; IY = IX + sprite length - sprite width
040849 21 00 00 00 1240   	ld hl,$000000
04084D 69          1241   	ld l,c ; HL = sprite width
04084E             1242   
04084E             1243   mf_loop2:
04084E F5          1244   	push af
04084F D5          1245   	push de
040850 DD E5       1246   	push ix
040852 FD E5       1247   	push iy
040854             1248   mf_loop3:
040854 DD 5E 00    1249   	ld e,(ix+0)
040857 FD 56 00    1250   	ld d,(iy+0)
04085A DD 72 00    1251   	ld (ix+0),d
04085D FD 73 00    1252   	ld (iy+0),e
040860 DD 23       1253   	inc ix
040862 FD 23       1254   	inc iy
040864 3D          1255   	dec a
040865 FE 00       1256   	cp 0
040867 20 EB       1257   	jr nz,mf_loop3
040869 FD E1       1258   	pop iy
04086B DD E1       1259   	pop ix
04086D D1          1260   	pop de
04086E F1          1261   	pop af
04086F EB          1262   	ex de,hl
040870 DD 19       1263   	add ix,de
040872 EB          1264   	ex de,hl
040873 E5          1265   	push hl
040874 FD E5       1266   	push iy
040876 E1          1267   	pop hl
040877 D1          1268   	pop de
040878 B7          1269   	or a
040879 ED 52       1270   	sbc hl,de
04087B E5          1271   	push hl
04087C D5          1272   	push de
04087D E1          1273   	pop hl
04087E FD E1       1274   	pop iy
040880 10 CC       1275   	djnz mf_loop2
040882             1276   
040882 CD BD 17 04 1277   	call fn_refresh_sprite
040886 C9          1278   	ret
040887             1279   
040887             1280   dsl_flood_fill:
040887 21 B6 FF FF 1281   	ld hl,KEY_RETURN
04088B CD CB 18 04 1282   	call fn_inkey
04088F FE 00       1283   	cp 0
040891 20 F4       1284   	jr nz,dsl_flood_fill
040893             1285   
040893             1286   	; hide the cursor
040893 CD D5 0D 04 1287   	call fn_draw_pixel_without_border
040897             1288   
040897             1289   	; memorize pixel coordinates
040897 3A 32 1A 04 1290   	ld a,(xpix)
04089B 32 34 1A 04 1291   	ld (memxpix),a
04089F 3A 33 1A 04 1292   	ld a,(ypix)
0408A3 32 35 1A 04 1293   	ld (memypix),a
0408A7             1294   
0408A7             1295   	; fill all recursively
0408A7 3A 32 1A 04 1296   	ld a,(xpix)
0408AB 5F          1297   	ld e,a
0408AC 3A 33 1A 04 1298   	ld a,(ypix)
0408B0 57          1299   	ld d,a
0408B1 CD D2 08 04 1300   	call dsl_flood_fill_loop
0408B5             1301   
0408B5             1302   	; refresh all the sprite
0408B5 CD BD 17 04 1303   	call fn_refresh_sprite
0408B9             1304   
0408B9             1305   	; hide the cursor again
0408B9 CD D5 0D 04 1306   	call fn_draw_pixel_without_border
0408BD             1307   
0408BD             1308   	; restore pixel coordinates
0408BD             1309   	; and cursor
0408BD 3A 34 1A 04 1310   	ld a,(memxpix)
0408C1 32 32 1A 04 1311   	ld (xpix),a
0408C5 3A 35 1A 04 1312   	ld a,(memypix)
0408C9 32 33 1A 04 1313   	ld (ypix),a
0408CD CD C1 0D 04 1314   	call fn_draw_pixel_with_border
0408D1 C9          1315   	ret
0408D2             1316   
0408D2             1317   dsl_flood_fill_loop:
0408D2 D5          1318   	push de
0408D3             1319   
0408D3 DD 21 37 1A 1320   	ld ix,spr_size
       04          
0408D8             1321   
0408D8             1322   	; out  of the sprite area ?
0408D8 7B          1323   	ld a,e
0408D9 DD BE 00    1324   	cp (ix+0)
0408DC D2 25 09 04 1325   	jp nc,ffl_exit
0408E0             1326   
0408E0             1327   	; out  of the sprite area ?
0408E0 7A          1328   	ld a,d
0408E1 DD BE 00    1329   	cp (ix+0)
0408E4 D2 25 09 04 1330   	jp nc,ffl_exit
0408E8             1331   
0408E8             1332   	; replace current pixel, if it is
0408E8             1333   	; inside the sprite area,
0408E8             1334   	; and has not the select palette color
0408E8 7B          1335   	ld a,e
0408E9 32 32 1A 04 1336   	ld (xpix),a
0408ED 7A          1337   	ld a,d
0408EE 32 33 1A 04 1338   	ld (ypix),a
0408F2 CD EB 0D 04 1339   	call fn_get_pixel_color
0408F6 21 38 1A 04 1340   	ld hl,current_pen
0408FA BE          1341   	cp (hl)
0408FB CA 25 09 04 1342   	jp z,ffl_exit
0408FF 7E          1343   	ld a,(hl)
040900 CD 2D 0E 04 1344   	call fn_set_pixel_color
040904             1345   
040904             1346   	; restore coordinates
040904 3A 32 1A 04 1347   	ld a,(xpix)
040908 5F          1348   	ld e,a
040909 3A 33 1A 04 1349   	ld a,(ypix)
04090D 57          1350   	ld d,a
04090E             1351   
04090E             1352   	; draw pixel at right
04090E 1C          1353   	inc e
04090F CD D2 08 04 1354   	call dsl_flood_fill_loop
040913 1D          1355   	dec e
040914             1356   	; draw pixel at left
040914 1D          1357   	dec e
040915 CD D2 08 04 1358   	call dsl_flood_fill_loop
040919 1C          1359   	inc e
04091A             1360   	; draw pixel up
04091A 14          1361   	inc d
04091B CD D2 08 04 1362   	call dsl_flood_fill_loop
04091F 15          1363   	dec d
040920             1364   	; draw pixel down
040920 15          1365   	dec d
040921 CD D2 08 04 1366   	call dsl_flood_fill_loop
040925             1367   
040925             1368   ffl_exit:
040925 D1          1369   	pop de
040926 C9          1370   	ret
040927             1371   
040927             1372   ; change current tool to palette tool
040927             1373   dsl_palette_tool:
040927 21 9F FF FF 1374   	ld hl,KEY_TAB
04092B CD CB 18 04 1375   	call fn_inkey
04092F FE 00       1376   	cp 0
040931 20 F4       1377   	jr nz,dsl_palette_tool
040933             1378   
040933             1379   	; hide sprite drawing cursor
040933 CD D5 0D 04 1380   	call fn_draw_pixel_without_border
040937             1381   
040937             1382   	; draw selected palette color
040937 21 38 1A 04 1383   	ld hl,current_pen
04093B 4E          1384   	ld c,(hl)
04093C CD 89 0E 04 1385   	call fn_draw_palette_with_border
040940             1386   
040940             1387   ; select palette color
040940             1388   dsl_palette_tool_loop:
040940             1389   	; move to left color in the palette
040940 21 E6 FF FF 1390   	ld hl,KEY_LEFT
040944 CD CB 18 04 1391   	call fn_inkey
040948 FE 01       1392   	cp 1
04094A CC C0 0B 04 1393   	call z,dsl_dec_pen
04094E             1394   
04094E             1395   	; move to right color in the palette
04094E 21 86 FF FF 1396   	ld hl,KEY_RIGHT
040952 CD CB 18 04 1397   	call fn_inkey
040956 FE 01       1398   	cp 1
040958 CC E7 0B 04 1399   	call z,dsl_inc_pen
04095C             1400   
04095C             1401   	; return to draw sprite tool
04095C 21 9F FF FF 1402   	ld hl,KEY_TAB
040960 CD CB 18 04 1403   	call fn_inkey
040964 FE 01       1404   	cp 1
040966 CA A3 0B 04 1405   	jp z,dsl_draw_sprite_tool
04096A             1406   
04096A             1407   	; load palette
04096A 21 A9 FF FF 1408   	ld hl,KEY_L
04096E CD CB 18 04 1409   	call fn_inkey
040972 FE 01       1410   	cp 1
040974 CC 4B 0B 04 1411   	call z,dslp_load_palette
040978             1412   
040978             1413   	; save palette
040978 21 AE FF FF 1414   	ld hl,KEY_S
04097C CD CB 18 04 1415   	call fn_inkey
040980 FE 01       1416   	cp 1
040982 CC 7D 0B 04 1417   	call z,dslp_save_palette
040986             1418   
040986             1419   	; red up
040986 21 CF FF FF 1420   	ld hl,KEY_1
04098A CD CB 18 04 1421   	call fn_inkey
04098E FE 01       1422   	cp 1
040990 CC FA 09 04 1423   	call z,dslp_red_up
040994             1424   
040994             1425   	; green up
040994 21 CE FF FF 1426   	ld hl,KEY_2
040998 CD CB 18 04 1427   	call fn_inkey
04099C FE 01       1428   	cp 1
04099E CC 2A 0A 04 1429   	call z,dslp_green_up
0409A2             1430   
0409A2             1431   	; blue up
0409A2 21 EE FF FF 1432   	ld hl,KEY_3
0409A6 CD CB 18 04 1433   	call fn_inkey
0409AA FE 01       1434   	cp 1
0409AC CC 5A 0A 04 1435   	call z,dslp_blue_up
0409B0             1436   
0409B0             1437   	; red down
0409B0 21 ED FF FF 1438   	ld hl,KEY_4
0409B4 CD CB 18 04 1439   	call fn_inkey
0409B8 FE 01       1440   	cp 1
0409BA CC 8A 0A 04 1441   	call z,dslp_red_down
0409BE             1442   
0409BE             1443   	; green down
0409BE 21 EC FF FF 1444   	ld hl,KEY_5
0409C2 CD CB 18 04 1445   	call fn_inkey
0409C6 FE 01       1446   	cp 1
0409C8 CC BA 0A 04 1447   	call z,dslp_green_down
0409CC             1448   
0409CC             1449   	; blue down
0409CC 21 CB FF FF 1450   	ld hl,KEY_6
0409D0 CD CB 18 04 1451   	call fn_inkey
0409D4 FE 01       1452   	cp 1
0409D6 CC EA 0A 04 1453   	call z,dslp_blue_down
0409DA             1454   
0409DA             1455   	; reset to black
0409DA 21 DB FF FF 1456   	ld hl,KEY_7
0409DE CD CB 18 04 1457   	call fn_inkey
0409E2 FE 01       1458   	cp 1
0409E4 CC 1A 0B 04 1459   	call z,dslp_reset_color
0409E8             1460   
0409E8             1461   	; exit program
0409E8 21 8F FF FF 1462   	ld hl,KEY_ESCAPE
0409EC CD CB 18 04 1463   	call fn_inkey
0409F0 FE 01       1464   	cp 1
0409F2 CA 10 0C 04 1465   	jp z,exit_program
0409F6             1466   
0409F6 C3 40 09 04 1467   	jp dsl_palette_tool_loop
0409FA             1468   
0409FA             1469   dslp_red_up:
0409FA 21 38 1A 04 1470   	ld hl,current_pen
0409FE 4E          1471   	ld c,(hl)
0409FF CD EE 0E 04 1472   	call fn_draw_palette_without_border
040A03 21 38 1A 04 1473   	ld hl,current_pen
040A07 46          1474   	ld b,(hl)
040A08 CD ED 19 04 1475   	call fn_get_color
040A0C 0C          1476   	inc c
040A0D CD 8E 19 04 1477   	call fn_set_color
040A11 CD 05 19 04 1478   	call fn_draw_the_palette
040A15 CD BD 17 04 1479   	call fn_refresh_sprite
040A19 21 38 1A 04 1480   	ld hl,current_pen
040A1D 4E          1481   	ld c,(hl)
040A1E CD 89 0E 04 1482   	call fn_draw_palette_with_border
040A22 CD 46 18 04 1483   	call fn_slowdown
040A26 C3 40 09 04 1484   	jp dsl_palette_tool_loop
040A2A             1485   
040A2A             1486   dslp_green_up:
040A2A 21 38 1A 04 1487   	ld hl,current_pen
040A2E 4E          1488   	ld c,(hl)
040A2F CD EE 0E 04 1489   	call fn_draw_palette_without_border
040A33 21 38 1A 04 1490   	ld hl,current_pen
040A37 46          1491   	ld b,(hl)
040A38 CD ED 19 04 1492   	call fn_get_color
040A3C 1C          1493   	inc e
040A3D CD 8E 19 04 1494   	call fn_set_color
040A41 CD 05 19 04 1495   	call fn_draw_the_palette
040A45 CD BD 17 04 1496   	call fn_refresh_sprite
040A49 21 38 1A 04 1497   	ld hl,current_pen
040A4D 4E          1498   	ld c,(hl)
040A4E CD 89 0E 04 1499   	call fn_draw_palette_with_border
040A52 CD 46 18 04 1500   	call fn_slowdown
040A56 C3 40 09 04 1501   	jp dsl_palette_tool_loop
040A5A             1502   
040A5A             1503   dslp_blue_up:
040A5A 21 38 1A 04 1504   	ld hl,current_pen
040A5E 4E          1505   	ld c,(hl)
040A5F CD EE 0E 04 1506   	call fn_draw_palette_without_border
040A63 21 38 1A 04 1507   	ld hl,current_pen
040A67 46          1508   	ld b,(hl)
040A68 CD ED 19 04 1509   	call fn_get_color
040A6C 2C          1510   	inc l
040A6D CD 8E 19 04 1511   	call fn_set_color
040A71 CD 05 19 04 1512   	call fn_draw_the_palette
040A75 CD BD 17 04 1513   	call fn_refresh_sprite
040A79 21 38 1A 04 1514   	ld hl,current_pen
040A7D 4E          1515   	ld c,(hl)
040A7E CD 89 0E 04 1516   	call fn_draw_palette_with_border
040A82 CD 46 18 04 1517   	call fn_slowdown
040A86 C3 40 09 04 1518   	jp dsl_palette_tool_loop
040A8A             1519   
040A8A             1520   dslp_red_down:
040A8A 21 38 1A 04 1521   	ld hl,current_pen
040A8E 4E          1522   	ld c,(hl)
040A8F CD EE 0E 04 1523   	call fn_draw_palette_without_border
040A93 21 38 1A 04 1524   	ld hl,current_pen
040A97 46          1525   	ld b,(hl)
040A98 CD ED 19 04 1526   	call fn_get_color
040A9C 0D          1527   	dec c
040A9D CD 8E 19 04 1528   	call fn_set_color
040AA1 CD 05 19 04 1529   	call fn_draw_the_palette
040AA5 CD BD 17 04 1530   	call fn_refresh_sprite
040AA9 21 38 1A 04 1531   	ld hl,current_pen
040AAD 4E          1532   	ld c,(hl)
040AAE CD 89 0E 04 1533   	call fn_draw_palette_with_border
040AB2 CD 46 18 04 1534   	call fn_slowdown
040AB6 C3 40 09 04 1535   	jp dsl_palette_tool_loop
040ABA             1536   
040ABA             1537   dslp_green_down:
040ABA 21 38 1A 04 1538   	ld hl,current_pen
040ABE 4E          1539   	ld c,(hl)
040ABF CD EE 0E 04 1540   	call fn_draw_palette_without_border
040AC3 21 38 1A 04 1541   	ld hl,current_pen
040AC7 46          1542   	ld b,(hl)
040AC8 CD ED 19 04 1543   	call fn_get_color
040ACC 1D          1544   	dec e
040ACD CD 8E 19 04 1545   	call fn_set_color
040AD1 CD 05 19 04 1546   	call fn_draw_the_palette
040AD5 CD BD 17 04 1547   	call fn_refresh_sprite
040AD9 21 38 1A 04 1548   	ld hl,current_pen
040ADD 4E          1549   	ld c,(hl)
040ADE CD 89 0E 04 1550   	call fn_draw_palette_with_border
040AE2 CD 46 18 04 1551   	call fn_slowdown
040AE6 C3 40 09 04 1552   	jp dsl_palette_tool_loop
040AEA             1553   
040AEA             1554   dslp_blue_down:
040AEA 21 38 1A 04 1555   	ld hl,current_pen
040AEE 4E          1556   	ld c,(hl)
040AEF CD EE 0E 04 1557   	call fn_draw_palette_without_border
040AF3 21 38 1A 04 1558   	ld hl,current_pen
040AF7 46          1559   	ld b,(hl)
040AF8 CD ED 19 04 1560   	call fn_get_color
040AFC 2D          1561   	dec l
040AFD CD 8E 19 04 1562   	call fn_set_color
040B01 CD 05 19 04 1563   	call fn_draw_the_palette
040B05 CD BD 17 04 1564   	call fn_refresh_sprite
040B09 21 38 1A 04 1565   	ld hl,current_pen
040B0D 4E          1566   	ld c,(hl)
040B0E CD 89 0E 04 1567   	call fn_draw_palette_with_border
040B12 CD 46 18 04 1568   	call fn_slowdown
040B16 C3 40 09 04 1569   	jp dsl_palette_tool_loop
040B1A             1570   
040B1A             1571   dslp_reset_color:
040B1A 21 38 1A 04 1572   	ld hl,current_pen
040B1E 4E          1573   	ld c,(hl)
040B1F CD EE 0E 04 1574   	call fn_draw_palette_without_border
040B23 21 38 1A 04 1575   	ld hl,current_pen
040B27 46          1576   	ld b,(hl)
040B28 0E 00       1577   	ld c,0
040B2A 1E 00       1578   	ld e,0
040B2C 2E 00       1579   	ld l,0
040B2E CD 8E 19 04 1580   	call fn_set_color
040B32 CD 05 19 04 1581   	call fn_draw_the_palette
040B36 CD BD 17 04 1582   	call fn_refresh_sprite
040B3A 21 38 1A 04 1583   	ld hl,current_pen
040B3E 4E          1584   	ld c,(hl)
040B3F CD 89 0E 04 1585   	call fn_draw_palette_with_border
040B43 CD 46 18 04 1586   	call fn_slowdown
040B47 C3 40 09 04 1587   	jp dsl_palette_tool_loop
040B4B             1588   
040B4B             1589   dslp_load_palette:
040B4B 21 A9 FF FF 1590   	ld hl,KEY_L
040B4F CD CB 18 04 1591   	call fn_inkey
040B53 FE 00       1592   	cp 0
040B55 20 F4       1593   	jr nz,dslp_load_palette
040B57             1594   
040B57 21 38 1A 04 1595   	ld hl,current_pen
040B5B 4E          1596   	ld c,(hl)
040B5C CD EE 0E 04 1597   	call fn_draw_palette_without_border
040B60 CD 68 10 04 1598   	call fn_load_palette
040B64 CD 05 19 04 1599   	call fn_draw_the_palette
040B68 CD BD 17 04 1600   	call fn_refresh_sprite
040B6C 21 38 1A 04 1601   	ld hl,current_pen
040B70 4E          1602   	ld c,(hl)
040B71 CD 89 0E 04 1603   	call fn_draw_palette_with_border
040B75 CD FD 17 04 1604   	call fn_change_frame
040B79 C3 40 09 04 1605   	jp dsl_palette_tool_loop
040B7D             1606   
040B7D             1607   dslp_save_palette:
040B7D 21 AE FF FF 1608   	ld hl,KEY_S
040B81 CD CB 18 04 1609   	call fn_inkey
040B85 FE 00       1610   	cp 0
040B87 20 F4       1611   	jr nz,dslp_save_palette
040B89             1612   
040B89 21 38 1A 04 1613   	ld hl,current_pen
040B8D 4E          1614   	ld c,(hl)
040B8E CD EE 0E 04 1615   	call fn_draw_palette_without_border
040B92 CD 5F 13 04 1616   	call fn_save_palette
040B96 21 38 1A 04 1617   	ld hl,current_pen
040B9A 4E          1618   	ld c,(hl)
040B9B CD 89 0E 04 1619   	call fn_draw_palette_with_border
040B9F C3 40 09 04 1620   	jp dsl_palette_tool_loop
040BA3             1621   
040BA3             1622   dsl_draw_sprite_tool:
040BA3 21 9F FF FF 1623   	ld hl,KEY_TAB
040BA7 CD CB 18 04 1624   	call fn_inkey
040BAB FE 00       1625   	cp 0
040BAD 20 F4       1626   	jr nz,dsl_draw_sprite_tool
040BAF             1627   
040BAF             1628   	; unselect palette color
040BAF 21 38 1A 04 1629   	ld hl,current_pen
040BB3 4E          1630   	ld c,(hl)
040BB4 CD EE 0E 04 1631   	call fn_draw_palette_without_border
040BB8             1632   
040BB8             1633   	; draw the pixel with a border
040BB8 CD C1 0D 04 1634   	call fn_draw_pixel_with_border
040BBC             1635   
040BBC C3 98 02 04 1636   	jp draw_sprite_loop
040BC0             1637   
040BC0             1638   dsl_dec_pen:
040BC0 21 38 1A 04 1639   	ld hl,current_pen
040BC4 7E          1640   	ld a,(hl)
040BC5 FE 00       1641   	cp 0
040BC7 C8          1642   	ret z
040BC8 FE 40       1643   	cp MAX_COLORS
040BCA D0          1644   	ret nc
040BCB             1645   
040BCB 4F          1646   	ld c,a ; c is the old pen
040BCC 3D          1647   	dec a ; a is the new pen
040BCD             1648   
040BCD F5          1649   	push af
040BCE C5          1650   	push bc
040BCF             1651   
040BCF             1652   	; unselect palette color
040BCF CD EE 0E 04 1653   	call fn_draw_palette_without_border
040BD3             1654   
040BD3 C1          1655   	pop bc
040BD4 F1          1656   	pop af
040BD5             1657   
040BD5             1658   	; replace current pen value
040BD5 21 38 1A 04 1659   	ld hl,current_pen
040BD9 77          1660   	ld (hl),a
040BDA             1661   
040BDA             1662   	; select palette color
040BDA 4F          1663   	ld c,a
040BDB CD 89 0E 04 1664   	call fn_draw_palette_with_border
040BDF CD 46 18 04 1665   	call fn_slowdown
040BE3 C3 40 09 04 1666   	jp dsl_palette_tool_loop
040BE7             1667   
040BE7             1668   dsl_inc_pen:
040BE7 21 38 1A 04 1669   	ld hl,current_pen
040BEB 7E          1670   	ld a,(hl)
040BEC 21 57 1B 04 1671   	ld hl,colors_count
040BF0 4E          1672   	ld c,(hl)
040BF1 0D          1673   	dec c
040BF2 B9          1674   	cp c
040BF3 D0          1675   	ret nc
040BF4             1676   
040BF4 4F          1677   	ld c,a ; c is the old pen
040BF5 3C          1678   	inc a ; a is the new pen
040BF6             1679   
040BF6 F5          1680   	push af
040BF7 C5          1681   	push bc
040BF8             1682   
040BF8             1683   	; unselect palette color
040BF8 CD EE 0E 04 1684   	call fn_draw_palette_without_border
040BFC             1685   
040BFC C1          1686   	pop bc
040BFD F1          1687   	pop af
040BFE             1688   
040BFE             1689   	; replace current pen value
040BFE 21 38 1A 04 1690   	ld hl,current_pen
040C02 77          1691   	ld (hl),a
040C03             1692   
040C03             1693   	; select palette color
040C03 4F          1694   	ld c,a
040C04 CD 89 0E 04 1695   	call fn_draw_palette_with_border
040C08 CD 46 18 04 1696   	call fn_slowdown
040C0C C3 40 09 04 1697   	jp dsl_palette_tool_loop
040C10             1698   
040C10             1699   ; exit program
040C10             1700   exit_program:
040C10             1701   	; reset to mode 1
040C10             1702   	vdu 22
040C10 3E 16       0001M  		LD	A, function
040C12 49 D7       0002M  		RST.LIS	10h
040C14             1703   	vdu 1
040C14 3E 01       0001M  		LD	A, function
040C16 49 D7       0002M  		RST.LIS	10h
040C18             1704   
040C18             1705   	; position the texte cursor at home
040C18             1706   	vdu 30
040C18 3E 1E       0001M  		LD	A, function
040C1A 49 D7       0002M  		RST.LIS	10h
040C1C             1707   
040C1C             1708   	; show cursor
040C1C             1709   	vdu 23
040C1C 3E 17       0001M  		LD	A, function
040C1E 49 D7       0002M  		RST.LIS	10h
040C20             1710   	vdu 1
040C20 3E 01       0001M  		LD	A, function
040C22 49 D7       0002M  		RST.LIS	10h
040C24             1711   	vdu 1
040C24 3E 01       0001M  		LD	A, function
040C26 49 D7       0002M  		RST.LIS	10h
040C28             1712   
040C28 FD E1       1713   	pop iy
040C2A DD E1       1714   	pop ix
040C2C D1          1715   	pop de
040C2D C1          1716   	pop bc
040C2E F1          1717   	pop af
040C2F 21 00 00 00 1718   	ld hl,0
040C33             1719   
040C33 C9          1720   	ret
040C34             1721   ;======================================================================
040C34             1722   
040C34             1723   ; draw a rectangle
040C34             1724   fn_rect:
040C34             1725   	vdu 25
040C34 3E 19       0001M  		LD	A, function
040C36 49 D7       0002M  		RST.LIS	10h
040C38             1726   	vdu 4
040C38 3E 04       0001M  		LD	A, function
040C3A 49 D7       0002M  		RST.LIS	10h
040C3C DD 21 22 1A 1727   	ld ix,x1
       04          
040C41 DD 7E 00    1728   	ld a,(ix + 0)
040C44             1729   	vdu_a
040C44 49 D7       0001M  		RST.LIS	10h
040C46 DD 7E 01    1730   	ld a,(ix + 1)
040C49             1731   	vdu_a
040C49 49 D7       0001M  		RST.LIS	10h
040C4B FD 21 24 1A 1732   	ld iy,y1
       04          
040C50 FD 7E 00    1733   	ld a,(iy + 0)
040C53             1734   	vdu_a
040C53 49 D7       0001M  		RST.LIS	10h
040C55 FD 7E 01    1735   	ld a,(iy + 1)
040C58             1736   	vdu_a
040C58 49 D7       0001M  		RST.LIS	10h
040C5A             1737   
040C5A             1738   	vdu 25
040C5A 3E 19       0001M  		LD	A, function
040C5C 49 D7       0002M  		RST.LIS	10h
040C5E             1739   	vdu 5
040C5E 3E 05       0001M  		LD	A, function
040C60 49 D7       0002M  		RST.LIS	10h
040C62 DD 21 26 1A 1740   	ld ix,x2
       04          
040C67 DD 7E 00    1741   	ld a,(ix + 0)
040C6A             1742   	vdu_a
040C6A 49 D7       0001M  		RST.LIS	10h
040C6C DD 7E 01    1743   	ld a,(ix + 1)
040C6F             1744   	vdu_a
040C6F 49 D7       0001M  		RST.LIS	10h
040C71 FD 21 24 1A 1745   	ld iy,y1
       04          
040C76 FD 7E 00    1746   	ld a,(iy + 0)
040C79             1747   	vdu_a
040C79 49 D7       0001M  		RST.LIS	10h
040C7B FD 7E 01    1748   	ld a,(iy + 1)
040C7E             1749   	vdu_a
040C7E 49 D7       0001M  		RST.LIS	10h
040C80             1750   
040C80             1751   	vdu 25
040C80 3E 19       0001M  		LD	A, function
040C82 49 D7       0002M  		RST.LIS	10h
040C84             1752   	vdu 5
040C84 3E 05       0001M  		LD	A, function
040C86 49 D7       0002M  		RST.LIS	10h
040C88 DD 21 26 1A 1753   	ld ix,x2
       04          
040C8D DD 7E 00    1754   	ld a,(ix + 0)
040C90             1755   	vdu_a
040C90 49 D7       0001M  		RST.LIS	10h
040C92 DD 7E 01    1756   	ld a,(ix + 1)
040C95             1757   	vdu_a
040C95 49 D7       0001M  		RST.LIS	10h
040C97 FD 21 28 1A 1758   	ld iy,y2
       04          
040C9C FD 7E 00    1759   	ld a,(iy + 0)
040C9F             1760   	vdu_a
040C9F 49 D7       0001M  		RST.LIS	10h
040CA1 FD 7E 01    1761   	ld a,(iy + 1)
040CA4             1762   	vdu_a
040CA4 49 D7       0001M  		RST.LIS	10h
040CA6             1763   
040CA6             1764   	vdu 25
040CA6 3E 19       0001M  		LD	A, function
040CA8 49 D7       0002M  		RST.LIS	10h
040CAA             1765   	vdu 5
040CAA 3E 05       0001M  		LD	A, function
040CAC 49 D7       0002M  		RST.LIS	10h
040CAE DD 21 22 1A 1766   	ld ix,x1
       04          
040CB3 DD 7E 00    1767   	ld a,(ix + 0)
040CB6             1768   	vdu_a
040CB6 49 D7       0001M  		RST.LIS	10h
040CB8 DD 7E 01    1769   	ld a,(ix + 1)
040CBB             1770   	vdu_a
040CBB 49 D7       0001M  		RST.LIS	10h
040CBD FD 21 28 1A 1771   	ld iy,y2
       04          
040CC2 FD 7E 00    1772   	ld a,(iy + 0)
040CC5             1773   	vdu_a
040CC5 49 D7       0001M  		RST.LIS	10h
040CC7 FD 7E 01    1774   	ld a,(iy + 1)
040CCA             1775   	vdu_a
040CCA 49 D7       0001M  		RST.LIS	10h
040CCC             1776   
040CCC             1777   	vdu 25
040CCC 3E 19       0001M  		LD	A, function
040CCE 49 D7       0002M  		RST.LIS	10h
040CD0             1778   	vdu 5
040CD0 3E 05       0001M  		LD	A, function
040CD2 49 D7       0002M  		RST.LIS	10h
040CD4 DD 21 22 1A 1779   	ld ix,x1
       04          
040CD9 DD 7E 00    1780   	ld a,(ix + 0)
040CDC             1781   	vdu_a
040CDC 49 D7       0001M  		RST.LIS	10h
040CDE DD 7E 01    1782   	ld a,(ix + 1)
040CE1             1783   	vdu_a
040CE1 49 D7       0001M  		RST.LIS	10h
040CE3 FD 21 24 1A 1784   	ld iy,y1
       04          
040CE8 FD 7E 00    1785   	ld a,(iy + 0)
040CEB             1786   	vdu_a
040CEB 49 D7       0001M  		RST.LIS	10h
040CED FD 7E 01    1787   	ld a,(iy + 1)
040CF0             1788   	vdu_a
040CF0 49 D7       0001M  		RST.LIS	10h
040CF2             1789   
040CF2 C9          1790   	ret
040CF3             1791   
040CF3             1792   ; draw a filled rectangle
040CF3             1793   fn_rectf:
040CF3 DD 21 22 1A 1794   	ld ix,x1
       04          
040CF8 FD 21 24 1A 1795   	ld iy,y1
       04          
040CFD             1796   
040CFD             1797   	vdu 25
040CFD 3E 19       0001M  		LD	A, function
040CFF 49 D7       0002M  		RST.LIS	10h
040D01             1798   	vdu 4
040D01 3E 04       0001M  		LD	A, function
040D03 49 D7       0002M  		RST.LIS	10h
040D05 DD 7E 00    1799   	ld a,(ix+0)
040D08             1800   	vdu_a
040D08 49 D7       0001M  		RST.LIS	10h
040D0A DD 7E 01    1801   	ld a,(ix+1)
040D0D             1802   	vdu_a
040D0D 49 D7       0001M  		RST.LIS	10h
040D0F FD 7E 00    1803   	ld a,(iy+0)
040D12             1804   	vdu_a
040D12 49 D7       0001M  		RST.LIS	10h
040D14 FD 7E 01    1805   	ld a,(iy+1)
040D17             1806   	vdu_a
040D17 49 D7       0001M  		RST.LIS	10h
040D19             1807   
040D19 DD 21 26 1A 1808   	ld ix,x2
       04          
040D1E FD 21 28 1A 1809   	ld iy,y2
       04          
040D23             1810   
040D23             1811   	vdu 25
040D23 3E 19       0001M  		LD	A, function
040D25 49 D7       0002M  		RST.LIS	10h
040D27             1812   	vdu 101
040D27 3E 65       0001M  		LD	A, function
040D29 49 D7       0002M  		RST.LIS	10h
040D2B DD 7E 00    1813   	ld a,(ix+0)
040D2E             1814   	vdu_a
040D2E 49 D7       0001M  		RST.LIS	10h
040D30 DD 7E 01    1815   	ld a,(ix+1)
040D33             1816   	vdu_a
040D33 49 D7       0001M  		RST.LIS	10h
040D35 FD 7E 00    1817   	ld a,(iy+0)
040D38             1818   	vdu_a
040D38 49 D7       0001M  		RST.LIS	10h
040D3A FD 7E 01    1819   	ld a,(iy+1)
040D3D             1820   	vdu_a
040D3D 49 D7       0001M  		RST.LIS	10h
040D3F             1821   
040D3F C9          1822   	ret
040D40             1823   
040D40             1824   fn_calc_pixel_coords:
040D40 11 00 00 00 1825   	ld de,$000000 ; reset deu
040D44             1826   
040D44             1827   	; calculate coordinates x of the resized pixel
040D44 21 32 1A 04 1828   	ld hl,xpix
040D48 5E          1829   	ld e,(hl) ; E = xpix
040D49 21 36 1A 04 1830   	ld hl,pixel_width
040D4D 56          1831   	ld d,(hl) ; D = pixel_width
040D4E D5          1832   	push de
040D4F E1          1833   	pop hl ; HL = DE
040D50 ED 6C       1834   	mlt hl ; HL = xpix * pixel_width
040D52 DD 21 2A 1A 1835   	ld ix,xs1
       04          
040D57 DD 5E 00    1836   	ld e,(ix+0)
040D5A DD 56 01    1837   	ld d,(ix+1)
040D5D 13          1838   	inc de ; DE = xs1 + 1
040D5E 19          1839   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040D5F FD 21 22 1A 1840   	ld iy,x1
       04          
040D64 FD 75 00    1841   	ld (iy+0),l
040D67 FD 74 01    1842   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040D6A E5          1843   	push hl
040D6B 21 36 1A 04 1844   	ld hl,pixel_width
040D6F 16 00       1845   	ld d,0
040D71 5E          1846   	ld e,(hl)
040D72 E1          1847   	pop hl
040D73 19          1848   	add hl,de
040D74 2B          1849   	dec hl
040D75 FD 21 26 1A 1850   	ld iy,x2
       04          
040D7A FD 75 00    1851   	ld (iy+0),l
040D7D FD 74 01    1852   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040D80             1853   
040D80 11 00 00 00 1854   	ld de,$000000 ; reset deu
040D84             1855   
040D84             1856   	; calculate coordinates y of the resized pixel
040D84 21 33 1A 04 1857   	ld hl,ypix
040D88 5E          1858   	ld e,(hl) ; E = ypix
040D89 21 36 1A 04 1859   	ld hl,pixel_width
040D8D 56          1860   	ld d,(hl) ; D = pixel_width
040D8E D5          1861   	push de
040D8F E1          1862   	pop hl ; HL = DE
040D90 ED 6C       1863   	mlt hl ; HL = ypix * pixel_width
040D92 DD 21 2C 1A 1864   	ld ix,ys1
       04          
040D97 DD 5E 00    1865   	ld e,(ix+0)
040D9A DD 56 01    1866   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040D9D 13          1867   	inc de ; DE = ys1 + 1
040D9E 19          1868   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040D9F FD 21 24 1A 1869   	ld iy,y1
       04          
040DA4 FD 75 00    1870   	ld (iy+0),l
040DA7 FD 74 01    1871   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040DAA E5          1872   	push hl
040DAB 21 36 1A 04 1873   	ld hl,pixel_width
040DAF 16 00       1874   	ld d,0
040DB1 5E          1875   	ld e,(hl)
040DB2 E1          1876   	pop hl
040DB3 19          1877   	add hl,de
040DB4 2B          1878   	dec hl
040DB5 FD 21 28 1A 1879   	ld iy,y2
       04          
040DBA FD 75 00    1880   	ld (iy+0),l
040DBD FD 74 01    1881   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040DC0             1882   
040DC0 C9          1883   	ret
040DC1             1884   
040DC1             1885   ; draw the resized pixel border, with its color
040DC1             1886   fn_draw_pixel_with_border:
040DC1 CD D5 0D 04 1887   	call fn_draw_pixel_without_border
040DC5             1888   
040DC5             1889   	; set graphics pen
040DC5             1890   	vdu 18
040DC5 3E 12       0001M  		LD	A, function
040DC7 49 D7       0002M  		RST.LIS	10h
040DC9             1891   	vdu 0
040DC9 3E 00       0001M  		LD	A, function
040DCB 49 D7       0002M  		RST.LIS	10h
040DCD             1892   	vdu 1 ; pen 1
040DCD 3E 01       0001M  		LD	A, function
040DCF 49 D7       0002M  		RST.LIS	10h
040DD1             1893   
040DD1             1894   	; draw the sprite's border rectangle
040DD1 C3 34 0C 04 1895   	jp fn_rect
040DD5             1896   
040DD5             1897   ; draw the resized pixel color
040DD5             1898   fn_draw_pixel_without_border:
040DD5 CD 40 0D 04 1899   	call fn_calc_pixel_coords
040DD9             1900   
040DD9             1901   	; set graphics pen
040DD9             1902   	vdu 18
040DD9 3E 12       0001M  		LD	A, function
040DDB 49 D7       0002M  		RST.LIS	10h
040DDD             1903   	vdu 0
040DDD 3E 00       0001M  		LD	A, function
040DDF 49 D7       0002M  		RST.LIS	10h
040DE1 CD EB 0D 04 1904   	call fn_get_pixel_color
040DE5             1905   	vdu_a
040DE5 49 D7       0001M  		RST.LIS	10h
040DE7             1906   
040DE7             1907   	; draw the sprite's color rectangle
040DE7 C3 F3 0C 04 1908   	jp fn_rectf
040DEB             1909   
040DEB             1910   ; get pixel color value in the sprite buffer
040DEB             1911   ; returns A: pixel color (0-63)
040DEB             1912   fn_get_pixel_color:
040DEB 11 00 00 00 1913   	ld de,$000000 ; reset deu
040DEF             1914   
040DEF             1915   	; calculate the offset to add to the address
040DEF 21 33 1A 04 1916   	ld hl,ypix
040DF3 5E          1917   	ld e,(hl) ; E = ypix
040DF4 21 37 1A 04 1918   	ld hl,spr_size
040DF8 56          1919   	ld d,(hl) ; D = sprsize
040DF9 D5          1920   	push de
040DFA E1          1921   	pop hl
040DFB ED 6C       1922   	mlt hl ; HL = ypix * sprsize
040DFD E5          1923   	push hl
040DFE 21 32 1A 04 1924   	ld hl,xpix
040E02 5E          1925   	ld e,(hl)
040E03 16 00       1926   	ld d,0
040E05 E1          1927   	pop hl
040E06 19          1928   	add hl,de ; HL = (ypix * sprsize) + xpix
040E07             1929   
040E07 11 5D 1B 04 1930   	ld de,current_frame
040E0B 1A          1931   	ld a,(de)
040E0C FE 00       1932   	cp 0
040E0E 28 16       1933   	jr z,gpc_end_loop
040E10             1934   
040E10 47          1935   	ld b,a
040E11 E5          1936   	push hl
040E12 11 00 00 00 1937   	ld de,$000000
040E16 21 37 1A 04 1938   	ld hl,spr_size
040E1A 5E          1939   	ld e,(hl)
040E1B 56          1940   	ld d,(hl)
040E1C D5          1941   	push de
040E1D E1          1942   	pop hl
040E1E ED 6C       1943   	mlt hl
040E20 E5          1944   	push hl
040E21 D1          1945   	pop de ; DE = sprsize²
040E22 E1          1946   	pop hl
040E23             1947   
040E23             1948   gpc_loop:
040E23 19          1949   	add hl,de
040E24 10 FD       1950   	djnz gpc_loop
040E26             1951   
040E26             1952   gpc_end_loop:
040E26             1953   	; add the offset to the address
040E26 11 66 1B 04 1954   	ld de,sprite_buffer
040E2A 19          1955   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040E2B             1956   
040E2B             1957   	; get pixel color value
040E2B 7E          1958   	ld a,(hl)
040E2C             1959   
040E2C C9          1960   	ret
040E2D             1961   
040E2D             1962   ; get pixel color value in the sprite buffer
040E2D             1963   ; A: pixel color (0-63)
040E2D             1964   fn_set_pixel_color:
040E2D 11 00 00 00 1965   	ld de,$000000 ; reset deu
040E31             1966   
040E31             1967   	; calculate the offset to add to the address
040E31 21 33 1A 04 1968   	ld hl,ypix
040E35 5E          1969   	ld e,(hl) ; E = ypix
040E36 21 37 1A 04 1970   	ld hl,spr_size
040E3A 56          1971   	ld d,(hl) ; D = sprsize
040E3B D5          1972   	push de
040E3C E1          1973   	pop hl
040E3D ED 6C       1974   	mlt hl ; HL = ypix * sprsize
040E3F E5          1975   	push hl
040E40 21 32 1A 04 1976   	ld hl,xpix
040E44 5E          1977   	ld e,(hl)
040E45 16 00       1978   	ld d,0
040E47 E1          1979   	pop hl
040E48 19          1980   	add hl,de ; HL = (ypix * sprsize) + xpix
040E49 F5          1981   	push af
040E4A             1982   
040E4A 11 5D 1B 04 1983   	ld de,current_frame
040E4E 1A          1984   	ld a,(de)
040E4F FE 00       1985   	cp 0
040E51 28 16       1986   	jr z,spc_end_loop
040E53             1987   
040E53 47          1988   	ld b,a
040E54 E5          1989   	push hl
040E55 11 00 00 00 1990   	ld de,$000000
040E59 21 37 1A 04 1991   	ld hl,spr_size
040E5D 5E          1992   	ld e,(hl)
040E5E 56          1993   	ld d,(hl)
040E5F D5          1994   	push de
040E60 E1          1995   	pop hl
040E61 ED 6C       1996   	mlt hl
040E63 E5          1997   	push hl
040E64 D1          1998   	pop de ; DE = sprsize²
040E65 E1          1999   	pop hl
040E66             2000   
040E66             2001   spc_loop:
040E66 19          2002   	add hl,de
040E67 10 FD       2003   	djnz spc_loop
040E69             2004   
040E69             2005   spc_end_loop:
040E69             2006   
040E69             2007   	; add the offset to the address
040E69 11 66 1B 04 2008   	ld de,sprite_buffer
040E6D 19          2009   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040E6E             2010   
040E6E             2011   	; set pixel color value
040E6E F1          2012   	pop af
040E6F 77          2013   	ld (hl),a
040E70             2014   
040E70 C9          2015   	ret
040E71             2016   
040E71             2017   fn_move_up:
040E71 21 33 1A 04 2018   	ld hl,ypix
040E75 35          2019   	dec (hl)
040E76 C9          2020   	ret
040E77             2021   
040E77             2022   fn_move_down:
040E77 21 33 1A 04 2023   	ld hl,ypix
040E7B 34          2024   	inc (hl)
040E7C C9          2025   	ret
040E7D             2026   
040E7D             2027   fn_move_left:
040E7D 21 32 1A 04 2028   	ld hl,xpix
040E81 35          2029   	dec (hl)
040E82 C9          2030   	ret
040E83             2031   
040E83             2032   fn_move_right:
040E83 21 32 1A 04 2033   	ld hl,xpix
040E87 34          2034   	inc (hl)
040E88 C9          2035   	ret
040E89             2036   
040E89             2037   ; draw palette color whit border and selection
040E89             2038   ; C = color number (0-63)
040E89             2039   fn_draw_palette_with_border:
040E89 C5          2040   	push bc
040E8A             2041   
040E8A             2042   	; choose palette color
040E8A             2043   	vdu 18
040E8A 3E 12       0001M  		LD	A, function
040E8C 49 D7       0002M  		RST.LIS	10h
040E8E             2044   	vdu 0
040E8E 3E 00       0001M  		LD	A, function
040E90 49 D7       0002M  		RST.LIS	10h
040E92 C1          2045   	pop bc
040E93 C5          2046   	push bc
040E94 79          2047   	ld a,c
040E95             2048   	vdu_a
040E95 49 D7       0001M  		RST.LIS	10h
040E97             2049   
040E97             2050   	; store coordinates for a palette square
040E97 DD 21 22 1A 2051   	ld ix,x1
       04          
040E9C E1          2052   	pop hl
040E9D E5          2053   	push hl
040E9E 26 05       2054   	ld h,5
040EA0 ED 6C       2055   	mlt hl
040EA2 E5          2056   	push hl
040EA3 DD 75 00    2057   	ld (ix+0),l
040EA6 DD 74 01    2058   	ld (ix+1),h
040EA9             2059   
040EA9 DD 21 24 1A 2060   	ld ix,y1
       04          
040EAE 21 00 00 00 2061   	ld hl,0
040EB2 DD 75 00    2062   	ld (ix+0),l
040EB5 DD 74 01    2063   	ld (ix+1),h
040EB8             2064   
040EB8 DD 21 26 1A 2065   	ld ix,x2
       04          
040EBD E1          2066   	pop hl
040EBE 11 04 00 00 2067   	ld de,4
040EC2 19          2068   	add hl,de
040EC3 DD 75 00    2069   	ld (ix+0),l
040EC6 DD 74 01    2070   	ld (ix+1),h
040EC9             2071   
040EC9 DD 21 28 1A 2072   	ld ix,y2
       04          
040ECE 21 0A 00 00 2073   	ld hl,10
040ED2 DD 75 00    2074   	ld (ix+0),l
040ED5 DD 74 01    2075   	ld (ix+1),h
040ED8             2076   
040ED8             2077   	; draw the palette filled square
040ED8 CD F3 0C 04 2078   	call fn_rectf
040EDC             2079   
040EDC             2080   	; choose pen 1
040EDC             2081   	vdu 18
040EDC 3E 12       0001M  		LD	A, function
040EDE 49 D7       0002M  		RST.LIS	10h
040EE0             2082   	vdu 0
040EE0 3E 00       0001M  		LD	A, function
040EE2 49 D7       0002M  		RST.LIS	10h
040EE4 3E 01       2083   	ld a,1
040EE6             2084   	vdu_a
040EE6 49 D7       0001M  		RST.LIS	10h
040EE8             2085   
040EE8             2086   	; draw the palette square border
040EE8 CD 34 0C 04 2087   	call fn_rect
040EEC             2088   
040EEC             2089   	; next color ?
040EEC C1          2090   	pop bc
040EED             2091   
040EED C9          2092   	ret
040EEE             2093   
040EEE             2094   ; draw palette color whitout border and selection
040EEE             2095   ; C = color number (0-63)
040EEE             2096   fn_draw_palette_without_border:
040EEE C5          2097   	push bc
040EEF             2098   
040EEF             2099   	; choose palette color
040EEF             2100   	vdu 18
040EEF 3E 12       0001M  		LD	A, function
040EF1 49 D7       0002M  		RST.LIS	10h
040EF3             2101   	vdu 0
040EF3 3E 00       0001M  		LD	A, function
040EF5 49 D7       0002M  		RST.LIS	10h
040EF7 C1          2102   	pop bc
040EF8 C5          2103   	push bc
040EF9 79          2104   	ld a,c
040EFA             2105   	vdu_a
040EFA 49 D7       0001M  		RST.LIS	10h
040EFC             2106   
040EFC             2107   	; store coordinates for a palette square
040EFC DD 21 22 1A 2108   	ld ix,x1
       04          
040F01 E1          2109   	pop hl
040F02 E5          2110   	push hl
040F03 26 05       2111   	ld h,5
040F05 ED 6C       2112   	mlt hl
040F07 E5          2113   	push hl
040F08 DD 75 00    2114   	ld (ix+0),l
040F0B DD 74 01    2115   	ld (ix+1),h
040F0E             2116   
040F0E DD 21 24 1A 2117   	ld ix,y1
       04          
040F13 21 00 00 00 2118   	ld hl,0
040F17 DD 75 00    2119   	ld (ix+0),l
040F1A DD 74 01    2120   	ld (ix+1),h
040F1D             2121   
040F1D DD 21 26 1A 2122   	ld ix,x2
       04          
040F22 E1          2123   	pop hl
040F23 11 04 00 00 2124   	ld de,4
040F27 19          2125   	add hl,de
040F28 DD 75 00    2126   	ld (ix+0),l
040F2B DD 74 01    2127   	ld (ix+1),h
040F2E             2128   
040F2E DD 21 28 1A 2129   	ld ix,y2
       04          
040F33 21 0A 00 00 2130   	ld hl,10
040F37 DD 75 00    2131   	ld (ix+0),l
040F3A DD 74 01    2132   	ld (ix+1),h
040F3D             2133   
040F3D             2134   	; draw the palette filled square
040F3D CD F3 0C 04 2135   	call fn_rectf
040F41             2136   
040F41 C1          2137   	pop bc
040F42             2138   
040F42 C9          2139   	ret
040F43             2140   
040F43             2141   ; get an ascii key value
040F43             2142   fn_input_key:
040F43 C5          2143   	push bc
040F44             2144   	moscall mos_getkey
040F44 3E 00       0001M  		LD	A, function
040F46 49 CF       0002M  		RST.LIS	08h
040F48 C1          2145   	pop bc
040F49 C9          2146   	ret
040F4A             2147   
040F4A             2148   ; input a text of 8 chars
040F4A             2149   fn_input_text8:
040F4A             2150   	; locate x,y
040F4A             2151   	vdu 31
040F4A 3E 1F       0001M  		LD	A, function
040F4C 49 D7       0002M  		RST.LIS	10h
040F4E             2152   	vdu FILENAME_X
040F4E 3E 07       0001M  		LD	A, function
040F50 49 D7       0002M  		RST.LIS	10h
040F52             2153   	vdu FILENAME_Y
040F52 3E 18       0001M  		LD	A, function
040F54 49 D7       0002M  		RST.LIS	10h
040F56             2154   
040F56             2155   	; print text
040F56 21 A4 1A 04 2156   	ld hl,filename_label
040F5A 01 00 00 00 2157   	ld bc,0
040F5E AF          2158   	xor a
040F5F 49 DF       2159   	rst.lis $18
040F61             2160   
040F61             2161   	; show cursor
040F61             2162   	vdu 23
040F61 3E 17       0001M  		LD	A, function
040F63 49 D7       0002M  		RST.LIS	10h
040F65             2163   	vdu 1
040F65 3E 01       0001M  		LD	A, function
040F67 49 D7       0002M  		RST.LIS	10h
040F69             2164   	vdu 1
040F69 3E 01       0001M  		LD	A, function
040F6B 49 D7       0002M  		RST.LIS	10h
040F6D             2165   
040F6D 0E 00       2166   	ld c,0
040F6F             2167   
040F6F             2168   it8_loop:
040F6F             2169   	; get ascii key
040F6F CD 43 0F 04 2170   	call fn_input_key
040F73 B7          2171   	or a
040F74 CA 6F 0F 04 2172   	jp z,it8_loop
040F78             2173   
040F78 FE 2E       2174   	cp '.'
040F7A CA C4 0F 04 2175   	jp z,it8l_add_char
040F7E             2176   
040F7E FE 2D       2177   	cp '-'
040F80 CA C4 0F 04 2178   	jp z,it8l_add_char
040F84             2179   
040F84 FE 5F       2180   	cp '_'
040F86 CA C4 0F 04 2181   	jp z,it8l_add_char
040F8A             2182   
040F8A FE 7F       2183   	cp 127
040F8C CA F8 0F 04 2184   	jp z,it8l_backspace
040F90             2185   
040F90 FE 0D       2186   	cp 13
040F92 CA 36 10 04 2187   	jp z,it8l_return
040F96             2188   
040F96 FE 30       2189   	cp '0'
040F98 DA 6F 0F 04 2190   	jp c,it8_loop
040F9C             2191   
040F9C 16 39       2192   	ld d,'9'
040F9E 14          2193   	inc d
040F9F BA          2194   	cp d
040FA0 DA C4 0F 04 2195   	jp c,it8l_add_char
040FA4             2196   
040FA4 FE 41       2197   	cp 'A'
040FA6 DA 6F 0F 04 2198   	jp c,it8_loop
040FAA             2199   
040FAA 16 5A       2200   	ld d,'Z'
040FAC 14          2201   	inc d
040FAD BA          2202   	cp d
040FAE DA C4 0F 04 2203   	jp c,it8l_add_char
040FB2             2204   
040FB2 FE 61       2205   	cp 'a'
040FB4 DA 6F 0F 04 2206   	jp c,it8_loop
040FB8             2207   
040FB8 16 7A       2208   	ld d,'z'
040FBA 14          2209   	inc d
040FBB BA          2210   	cp d
040FBC DA C4 0F 04 2211   	jp c,it8l_add_char
040FC0             2212   
040FC0 C3 6F 0F 04 2213   	jp it8_loop
040FC4             2214   
040FC4             2215   it8l_add_char:
040FC4 F5          2216   	push af
040FC5 79          2217   	ld a,c
040FC6 FE 10       2218   	cp 16
040FC8 38 05       2219   	jr c,it8l_poke_char
040FCA F1          2220   	pop af
040FCB C3 6F 0F 04 2221   	jp it8_loop
040FCF             2222   
040FCF             2223   it8l_poke_char:
040FCF F1          2224   	pop af
040FD0 21 AE 1A 04 2225   	ld hl,filename
040FD4 06 00       2226   	ld b,0
040FD6 09          2227   	add hl,bc
040FD7 77          2228   	ld (hl),a
040FD8 0C          2229   	inc c
040FD9 F5          2230   	push af
040FDA C5          2231   	push bc
040FDB             2232   
040FDB             2233   	; locate x,y
040FDB             2234   	vdu 31
040FDB 3E 1F       0001M  		LD	A, function
040FDD 49 D7       0002M  		RST.LIS	10h
040FDF             2235   	vdu FILENAME_X+9
040FDF 3E 10       0001M  		LD	A, function
040FE1 49 D7       0002M  		RST.LIS	10h
040FE3             2236   	vdu FILENAME_Y
040FE3 3E 18       0001M  		LD	A, function
040FE5 49 D7       0002M  		RST.LIS	10h
040FE7             2237   
040FE7             2238   	; print text
040FE7 21 AE 1A 04 2239   	ld hl,filename
040FEB 01 00 00 00 2240   	ld bc,0
040FEF AF          2241   	xor a
040FF0 49 DF       2242   	rst.lis $18
040FF2             2243   
040FF2 C1          2244   	pop bc
040FF3 F1          2245   	pop af
040FF4             2246   
040FF4 C3 6F 0F 04 2247   	jp it8_loop
040FF8             2248   
040FF8             2249   it8l_backspace:
040FF8 79          2250   	ld a,c
040FF9 FE 00       2251   	cp 0
040FFB CA 6F 0F 04 2252   	jp z,it8_loop
040FFF             2253   
040FFF             2254   	; delete a character of the filename
040FFF 21 AE 1A 04 2255   	ld hl,filename
041003 06 00       2256   	ld b,0
041005 09          2257   	add hl,bc
041006 AF          2258   	xor a
041007 77          2259   	ld (hl),a
041008 0D          2260   	dec c
041009 C5          2261   	push bc
04100A             2262   
04100A             2263   	; locate x,y
04100A             2264   	vdu 31
04100A 3E 1F       0001M  		LD	A, function
04100C 49 D7       0002M  		RST.LIS	10h
04100E 3E 10       2265   	ld a,FILENAME_X+9
041010 81          2266   	add a,c
041011             2267   	vdu_a
041011 49 D7       0001M  		RST.LIS	10h
041013             2268   	vdu FILENAME_Y
041013 3E 18       0001M  		LD	A, function
041015 49 D7       0002M  		RST.LIS	10h
041017             2269   
041017 C5          2270   	push bc
041018             2271   
041018             2272   	; print text
041018 21 D3 1A 04 2273   	ld hl,spacechar
04101C 01 00 00 00 2274   	ld bc,0
041020 AF          2275   	xor a
041021 49 DF       2276   	rst.lis $18
041023             2277   
041023 C1          2278   	pop bc
041024             2279   
041024             2280   	; locate x,y
041024             2281   	vdu 31
041024 3E 1F       0001M  		LD	A, function
041026 49 D7       0002M  		RST.LIS	10h
041028 3E 10       2282   	ld a,FILENAME_X+9
04102A 81          2283   	add a,c
04102B             2284   	vdu_a
04102B 49 D7       0001M  		RST.LIS	10h
04102D             2285   	vdu FILENAME_Y
04102D 3E 18       0001M  		LD	A, function
04102F 49 D7       0002M  		RST.LIS	10h
041031             2286   
041031 C1          2287   	pop bc
041032 C3 6F 0F 04 2288   	jp it8_loop
041036             2289   
041036             2290   it8l_return:
041036             2291   	; locate x,y
041036             2292   	vdu 31
041036 3E 1F       0001M  		LD	A, function
041038 49 D7       0002M  		RST.LIS	10h
04103A             2293   	vdu FILENAME_X
04103A 3E 07       0001M  		LD	A, function
04103C 49 D7       0002M  		RST.LIS	10h
04103E             2294   	vdu FILENAME_Y
04103E 3E 18       0001M  		LD	A, function
041040 49 D7       0002M  		RST.LIS	10h
041042             2295   
041042             2296   	; print text
041042 21 D5 1A 04 2297   	ld hl,void_filename
041046 01 00 00 00 2298   	ld bc,0
04104A AF          2299   	xor a
04104B 49 DF       2300   	rst.lis $18
04104D             2301   
04104D             2302   	; hide cursor
04104D             2303   	vdu 23
04104D 3E 17       0001M  		LD	A, function
04104F 49 D7       0002M  		RST.LIS	10h
041051             2304   	vdu 1
041051 3E 01       0001M  		LD	A, function
041053 49 D7       0002M  		RST.LIS	10h
041055             2305   	vdu 0
041055 3E 00       0001M  		LD	A, function
041057 49 D7       0002M  		RST.LIS	10h
041059             2306   
041059             2307   it8l_endloop:
041059 21 B6 FF FF 2308   	ld hl,KEY_RETURN
04105D CD CB 18 04 2309   	call fn_inkey
041061 FE 01       2310   	CP 1
041063 CA 59 10 04 2311   	jp z,it8l_endloop
041067             2312   
041067 C9          2313   	ret
041068             2314   
041068             2315   ; load a palette
041068             2316   fn_load_palette:
041068             2317   	; clear the filename on the screen
041068 21 AE 1A 04 2318   	ld hl,filename
04106C 06 10       2319   	ld b,FILENAME_LENGTH
04106E AF          2320   	xor a
04106F             2321   
04106F             2322   lp_clear_filename:
04106F 77          2323   	ld (hl),a
041070 23          2324   	inc hl
041071 10 FC       2325   	djnz lp_clear_filename
041073             2326   
041073             2327   	; get filename
041073 CD 4A 0F 04 2328   	call fn_input_text8
041077             2329   
041077             2330   	; set path to 'palettes/'
041077 21 C7 1A 04 2331   	ld hl,palette_path
04107B             2332   	moscall mos_cd
04107B 3E 03       0001M  		LD	A, function
04107D 49 CF       0002M  		RST.LIS	08h
04107F             2333   
04107F             2334   	; exit on folder error
04107F FE 00       2335   	cp 0
041081 C2 43 11 04 2336   	jp nz,lp_folder_error
041085             2337   
041085             2338   	; open the file for read
041085 21 AE 1A 04 2339   	ld hl,filename
041089 0E 01       2340   	ld c,fa_open_existing|fa_read
04108B             2341   	moscall mos_fopen
04108B 3E 0A       0001M  		LD	A, function
04108D 49 CF       0002M  		RST.LIS	08h
04108F             2342   
04108F             2343   	; exit on file error
04108F FE 00       2344   	cp 0
041091 CA 95 12 04 2345   	jp z,lp_file_error
041095             2346   
041095             2347   	; filehandle -> C
041095 4F          2348   	ld c,a
041096             2349   
041096             2350   	; get palette header
041096 21 66 3B 04 2351   	ld hl,header_buffer
04109A 11 10 00 00 2352   	ld de,16
04109E C5          2353   	push bc ; store filehandle
04109F             2354   	moscall mos_fread
04109F 3E 1A       0001M  		LD	A, function
0410A1 49 CF       0002M  		RST.LIS	08h
0410A3 C1          2355   	pop bc ; restore filehandle
0410A4 3E 10       2356   	ld a,16
0410A6 BB          2357   	cp e
0410A7 C2 27 11 04 2358   	jp nz,lp_close_error
0410AB             2359   
0410AB             2360   	; compare loaded header with needed header
0410AB 11 C2 3E 04 2361   	ld de,header
0410AF 21 66 3B 04 2362   	ld hl,header_buffer
0410B3 47          2363   	ld b,a
0410B4             2364   
0410B4             2365   lp_compare:
0410B4 1A          2366   	ld a,(de)
0410B5 BE          2367   	cp (hl)
0410B6 C2 4B 11 04 2368   	jp nz,lp_header_error
0410BA             2369   
0410BA 13          2370   	inc de
0410BB 23          2371   	inc hl
0410BC 05          2372   	dec b
0410BD             2373   
0410BD 78          2374   	ld a,b
0410BE FE 00       2375   	cp 0
0410C0 C2 B4 10 04 2376   	jp nz,lp_compare
0410C4             2377   
0410C4             2378   	; prepare to read the number of colors
0410C4 21 76 3B 04 2379   	ld hl,color_buffer
0410C8             2380   
0410C8             2381   lp_getcount:
0410C8             2382   	; read a string for colors count
0410C8 C5          2383   	push bc
0410C9 E5          2384   	push hl
0410CA             2385   
0410CA             2386   	; read colors data
0410CA             2387   	moscall mos_fgetc
0410CA 3E 0C       0001M  		LD	A, function
0410CC 49 CF       0002M  		RST.LIS	08h
0410CE             2388   
0410CE E1          2389   	pop hl
0410CF C1          2390   	pop bc
0410D0             2391   
0410D0             2392   	; exit if eof
0410D0 DA 27 11 04 2393   	jp c,lp_close_error
0410D4             2394   
0410D4 FE 30       2395   	cp 48 ; < 0
0410D6 38 0A       2396   	jr c,lpgc_next
0410D8 FE 3A       2397   	cp 58 ; > 9
0410DA D2 90 12 04 2398   	jp nc,lp_data_error
0410DE             2399   
0410DE 77          2400   	ld (hl),a
0410DF 23          2401   	inc hl
0410E0 18 E6       2402   	jr lp_getcount
0410E2             2403   
0410E2             2404   lpgc_next:
0410E2 F5          2405   	push af
0410E3 3E 0D       2406   	ld a,13
0410E5 77          2407   	ld (hl),a ; store CR
0410E6 F1          2408   	pop af
0410E7             2409   
0410E7             2410   	; test CR
0410E7 FE 0D       2411   	cp 13
0410E9 C2 27 11 04 2412   	jp nz,lp_close_error
0410ED             2413   
0410ED C5          2414   	push bc
0410EE             2415   
0410EE             2416   	; read LF
0410EE             2417   	moscall mos_fgetc
0410EE 3E 0C       0001M  		LD	A, function
0410F0 49 CF       0002M  		RST.LIS	08h
0410F2             2418   
0410F2 C1          2419   	pop bc
0410F3             2420   
0410F3             2421   	; test LF
0410F3 FE 0A       2422   	cp 10
0410F5 C2 27 11 04 2423   	jp nz,lp_close_error
0410F9             2424   
0410F9             2425   	; prepare to read color strings
0410F9 11 00 00 00 2426   	ld de,#000000
0410FD 21 79 3B 04 2427   	ld hl,palette_buffer
041101             2428   
041101             2429   lp_load_pal_loop:
041101 C5          2430   	push bc
041102 D5          2431   	push de
041103 E5          2432   	push hl
041104             2433   
041104             2434   	; read colors data
041104             2435   	moscall mos_fgetc
041104 3E 0C       0001M  		LD	A, function
041106 49 CF       0002M  		RST.LIS	08h
041108             2436   
041108             2437   	; exit if eof
041108 DA 20 11 04 2438   	jp c,lp_loaded
04110C             2439   
04110C E1          2440   	pop hl
04110D D1          2441   	pop de
04110E C1          2442   	pop bc
04110F             2443   
04110F 77          2444   	ld (hl),a ; store loaded char in palette buffer
041110 23          2445   	inc hl
041111 13          2446   	inc de ; count chars
041112 7A          2447   	ld a,d
041113 FE 03       2448   	cp MAX_PAL_DATA_HI
041115 DA 01 11 04 2449   	jp c,lp_load_pal_loop
041119 7B          2450   	ld a,e
04111A FE 44       2451   	cp MAX_PAL_DATA_LO
04111C DA 01 11 04 2452   	jp c,lp_load_pal_loop
041120             2453   
041120             2454   ; end of file
041120             2455   lp_loaded:
041120 E1          2456   	pop hl
041121 D1          2457   	pop de
041122 C1          2458   	pop bc
041123             2459   
041123 C3 53 11 04 2460   	jp lp_close
041127             2461   
041127             2462   lp_close_error:
041127 C5          2463   	push bc
041128             2464   
041128             2465   	; read error
041128 CD E1 16 04 2466   	call fn_print_file_error
04112C             2467   
04112C C1          2468   	pop bc
04112D             2469   
04112D             2470   	; close the file
04112D             2471   	moscall mos_fclose
04112D 3E 0B       0001M  		LD	A, function
04112F 49 CF       0002M  		RST.LIS	08h
041131             2472   
041131             2473   	; set path to home
041131 21 D0 1A 04 2474   	ld hl,back_path
041135             2475   	moscall mos_cd
041135 3E 03       0001M  		LD	A, function
041137 49 CF       0002M  		RST.LIS	08h
041139             2476   
041139             2477   	; exit on error
041139 FE 00       2478   	cp 0
04113B C2 43 11 04 2479   	jp nz,lp_folder_error
04113F             2480   
04113F C3 8A 12 04 2481   	jp lp_exit
041143             2482   
041143             2483   lp_folder_error:
041143             2484   	; write error
041143 CD 18 17 04 2485   	call fn_print_folder_error
041147 C3 8A 12 04 2486   	jp lp_exit
04114B             2487   
04114B             2488   lp_header_error:
04114B             2489   	; write error
04114B CD 4F 17 04 2490   	call fn_print_header_error
04114F C3 8A 12 04 2491   	jp lp_exit
041153             2492   
041153             2493   lp_close:
041153 C5          2494   	push bc
041154             2495   
041154             2496   	; close the file
041154             2497   	moscall mos_fclose
041154 3E 0B       0001M  		LD	A, function
041156 49 CF       0002M  		RST.LIS	08h
041158             2498   
041158 C1          2499   	pop bc
041159             2500   
041159             2501   	; set path to home
041159 21 D0 1A 04 2502   	ld hl,back_path
04115D             2503   	moscall mos_cd
04115D 3E 03       0001M  		LD	A, function
04115F 49 CF       0002M  		RST.LIS	08h
041161             2504   
041161             2505   	; exit on error
041161 FE 00       2506   	cp 0
041163 C2 43 11 04 2507   	jp nz,lp_folder_error
041167             2508   
041167             2509   	; read the number of colors we have in the palette
041167 21 76 3B 04 2510   	ld hl,color_buffer
04116B 7E          2511   	ld a,(hl)
04116C 47          2512   	ld b,a
04116D 23          2513   	inc hl
04116E 7E          2514   	ld a,(hl)
04116F 4F          2515   	ld c,a ; bc = 1st char, 2nd char or CR
041170             2516   
041170             2517   	; first is a char number ?
041170 78          2518   	ld a,b
041171 FE 30       2519   	cp 48
041173 DA 90 12 04 2520   	jp c,lp_data_error
041177 FE 3A       2521   	cp 58
041179 D2 90 12 04 2522   	jp nc,lp_data_error
04117D             2523   
04117D 79          2524   	ld a,c
04117E FE 0D       2525   	cp 13
041180 C2 A2 11 04 2526   	jp nz,lp_two_numbers
041184             2527   
041184             2528   ; only one number
041184 78          2529   	ld a,b
041185 D6 30       2530   	sub 48
041187             2531   
041187 21 58 1B 04 2532   	ld hl,new_colors_count
04118B 77          2533   	ld (hl),a
04118C             2534   
04118C FE 00       2535   	cp 0
04118E CA 90 12 04 2536   	jp z,lp_data_error
041192 FE 03       2537   	cp 3
041194 DA D7 11 04 2538   	jp c,lp_two_colors
041198 FE 05       2539   	cp 5
04119A DA F8 11 04 2540   	jp c,lp_four_colors
04119E             2541   
04119E C3 19 12 04 2542   	jp lp_sixteen_colors
0411A2             2543   
0411A2             2544   ; two numbers
0411A2             2545   lp_two_numbers:
0411A2 79          2546   	ld a,c
0411A3 FE 30       2547   	cp 48
0411A5 DA 90 12 04 2548   	jp c,lp_data_error
0411A9 FE 3A       2549   	cp 58
0411AB D2 90 12 04 2550   	jp nc,lp_data_error
0411AF             2551   
0411AF 78          2552   	ld a,b
0411B0 D6 30       2553   	sub 48
0411B2 01 00 00 00 2554   	ld bc,#000000
0411B6 47          2555   	ld b,a
0411B7 0E 0A       2556   	ld c,10
0411B9 ED 4C       2557   	mlt bc
0411BB 81          2558   	add a,c
0411BC             2559   
0411BC 21 58 1B 04 2560   	ld hl,new_colors_count
0411C0 77          2561   	ld (hl),a
0411C1             2562   
0411C1 FE 0A       2563   	cp 10
0411C3 DA 90 12 04 2564   	jp c,lp_data_error
0411C7 FE 11       2565   	cp 17
0411C9 DA 19 12 04 2566   	jp c,lp_sixteen_colors
0411CD FE 41       2567   	cp 65
0411CF DA 3A 12 04 2568   	jp c,lp_sixty_four_colors
0411D3             2569   
0411D3 C3 90 12 04 2570   	jp lp_data_error
0411D7             2571   
0411D7             2572   lp_two_colors:
0411D7 21 57 1B 04 2573   	ld hl,colors_count
0411DB 3E 02       2574   	ld a,2
0411DD 77          2575   	ld (hl),a
0411DE             2576   
0411DE 47          2577   	ld b,a
0411DF 21 38 1A 04 2578   	ld hl,current_pen
0411E3 7E          2579   	ld a,(hl)
0411E4 B8          2580   	cp b
0411E5 38 02       2581   	jr c,lptc_done
0411E7 05          2582   	dec b
0411E8 70          2583   	ld (hl),b
0411E9             2584   
0411E9             2585   lptc_done:
0411E9 21 58 1B 04 2586   	ld hl,new_colors_count
0411ED 7E          2587   	ld a,(hl) ; real number of coulours
0411EE 06 00       2588   	ld b,0 ; start wit color 0
0411F0 21 79 3B 04 2589   	ld hl,palette_buffer ; palette will be got here
0411F4 C3 5B 12 04 2590   	jp lp_read_colors
0411F8             2591   
0411F8             2592   lp_four_colors:
0411F8 21 57 1B 04 2593   	ld hl,colors_count
0411FC 3E 04       2594   	ld a,4
0411FE 77          2595   	ld (hl),a
0411FF             2596   
0411FF 47          2597   	ld b,a
041200 21 38 1A 04 2598   	ld hl,current_pen
041204 7E          2599   	ld a,(hl)
041205 B8          2600   	cp b
041206 38 02       2601   	jr c,lpfc_done
041208 05          2602   	dec b
041209 70          2603   	ld (hl),b
04120A             2604   
04120A             2605   lpfc_done:
04120A 21 58 1B 04 2606   	ld hl,new_colors_count
04120E 7E          2607   	ld a,(hl) ; real number of coulours
04120F 06 00       2608   	ld b,0 ; start wit color 0
041211 21 79 3B 04 2609   	ld hl,palette_buffer ; palette will be got here
041215 C3 5B 12 04 2610   	jp lp_read_colors
041219             2611   
041219             2612   lp_sixteen_colors:
041219 21 57 1B 04 2613   	ld hl,colors_count
04121D 3E 10       2614   	ld a,16
04121F 77          2615   	ld (hl),a
041220             2616   
041220 47          2617   	ld b,a
041221 21 38 1A 04 2618   	ld hl,current_pen
041225 7E          2619   	ld a,(hl)
041226 B8          2620   	cp b
041227 38 02       2621   	jr c,lpsc_done
041229 05          2622   	dec b
04122A 70          2623   	ld (hl),b
04122B             2624   
04122B             2625   lpsc_done:
04122B 21 58 1B 04 2626   	ld hl,new_colors_count
04122F 7E          2627   	ld a,(hl) ; real number of coulours
041230 06 00       2628   	ld b,0 ; start wit color 0
041232 21 79 3B 04 2629   	ld hl,palette_buffer ; palette will be got here
041236 C3 5B 12 04 2630   	jp lp_read_colors
04123A             2631   
04123A             2632   lp_sixty_four_colors:
04123A 21 57 1B 04 2633   	ld hl,colors_count
04123E 3E 40       2634   	ld a,64
041240 77          2635   	ld (hl),a
041241             2636   
041241 47          2637   	ld b,a
041242 21 38 1A 04 2638   	ld hl,current_pen
041246 7E          2639   	ld a,(hl)
041247 B8          2640   	cp b
041248 38 02       2641   	jr c,lpsfc_done
04124A 05          2642   	dec b
04124B 70          2643   	ld (hl),b
04124C             2644   
04124C             2645   lpsfc_done:
04124C 21 58 1B 04 2646   	ld hl,new_colors_count
041250 7E          2647   	ld a,(hl) ; real number of coulours
041251 06 00       2648   	ld b,0 ; start wit color 0
041253 21 79 3B 04 2649   	ld hl,palette_buffer ; palette will be taken here
041257 C3 5B 12 04 2650   	jp lp_read_colors
04125B             2651   
04125B             2652   lp_read_colors:
04125B F5          2653   	push af
04125C             2654   
04125C CD A8 12 04 2655   	call lp_read_tint ; read red tint
041260             2656   
041260 E5          2657   	push hl
041261 21 59 1B 04 2658   	ld hl,red_tint
041265 77          2659   	ld (hl),a
041266 E1          2660   	pop hl
041267             2661   
041267 CD A8 12 04 2662   	call lp_read_tint ; read green tint
04126B             2663   
04126B E5          2664   	push hl
04126C 21 5A 1B 04 2665   	ld hl,green_tint
041270 77          2666   	ld (hl),a
041271 E1          2667   	pop hl
041272             2668   
041272 CD A8 12 04 2669   	call lp_read_tint ; read blue tint
041276             2670   
041276 E5          2671   	push hl
041277 21 5B 1B 04 2672   	ld hl,blue_tint
04127B 77          2673   	ld (hl),a
04127C E1          2674   	pop hl
04127D             2675   
04127D CD 34 13 04 2676   	call lp_set_tint
041281             2677   
041281 F1          2678   	pop af
041282             2679   
041282 04          2680   	inc b ; increment number of colors
041283 3D          2681   	dec a ; decrement real number of colors
041284 FE 00       2682   	cp 0
041286 C2 5B 12 04 2683   	jp nz,lp_read_colors
04128A             2684   
04128A             2685   lp_exit:
04128A C9          2686   	ret
04128B             2687   
04128B             2688   lp_wrong_exit:
04128B F1          2689   	pop af
04128C C3 90 12 04 2690   	jp lp_data_error
041290             2691   
041290             2692   lp_data_error:
041290 CD 86 17 04 2693   	call fn_print_data_error
041294 C9          2694   	ret
041295             2695   
041295             2696   lp_file_error:
041295 CD E1 16 04 2697   	call fn_print_file_error
041299             2698   
041299             2699   	; set path to home
041299 21 D0 1A 04 2700   	ld hl,back_path
04129D             2701   	moscall mos_cd
04129D 3E 03       0001M  		LD	A, function
04129F 49 CF       0002M  		RST.LIS	08h
0412A1             2702   
0412A1             2703   	; exit on error
0412A1 FE 00       2704   	cp 0
0412A3 C2 43 11 04 2705   	jp nz,lp_folder_error
0412A7             2706   
0412A7 C9          2707   	ret
0412A8             2708   
0412A8             2709   lp_read_tint:
0412A8 0E 00       2710   	ld c,0 ; number of chars readen for a single string number
0412AA 11 BE 3E 04 2711   	ld de,temp_chars_buffer ; temp buffer for a string number
0412AE             2712   
0412AE             2713   	; read next string number
0412AE CD 18 13 04 2714   	call lprt_read_chars
0412B2             2715   
0412B2 79          2716   	ld a,c
0412B3 FE 00       2717   	cp 0 ; no numbers
0412B5 CA CF 12 04 2718   	jp z,lprt_wrong_exit
0412B9 FE 04       2719   	cp 4 ; too many numbers
0412BB D2 CF 12 04 2720   	jp nc,lprt_wrong_exit
0412BF             2721   
0412BF FE 03       2722   	cp 3
0412C1 28 29       2723   	jr z,lprt_three_int
0412C3             2724   
0412C3 FE 02       2725   	cp 2
0412C5 28 0A       2726   	jr z,lprt_two_int
0412C7             2727   
0412C7             2728   	; one int only
0412C7 11 BE 3E 04 2729   	ld de,temp_chars_buffer
0412CB 1A          2730   	ld a,(de)
0412CC D6 30       2731   	sub 48
0412CE C9          2732   	ret
0412CF             2733   
0412CF             2734   lprt_wrong_exit:
0412CF AF          2735   	xor a
0412D0 C9          2736   	ret
0412D1             2737   
0412D1             2738   ; two int
0412D1             2739   lprt_two_int:
0412D1 C5          2740   	push bc
0412D2 11 BE 3E 04 2741   	ld de,temp_chars_buffer
0412D6 1A          2742   	ld a,(de)
0412D7 D6 30       2743   	sub 48
0412D9 D5          2744   	push de
0412DA 11 00 00 00 2745   	ld de,#000000
0412DE 5F          2746   	ld e,a
0412DF 16 0A       2747   	ld d,10
0412E1 ED 5C       2748   	mlt de
0412E3 43          2749   	ld b,e
0412E4 D1          2750   	pop de
0412E5 13          2751   	inc de
0412E6 1A          2752   	ld a,(de)
0412E7 D6 30       2753   	sub 48
0412E9 80          2754   	add a,b ; full int value is here
0412EA C1          2755   	pop bc
0412EB C9          2756   	ret
0412EC             2757   
0412EC             2758   ; three int
0412EC             2759   lprt_three_int:
0412EC C5          2760   	push bc
0412ED 11 BE 3E 04 2761   	ld de,temp_chars_buffer
0412F1 1A          2762   	ld a,(de)
0412F2 D6 30       2763   	sub 48
0412F4 D5          2764   	push de
0412F5 11 00 00 00 2765   	ld de,#000000
0412F9 5F          2766   	ld e,a
0412FA 16 64       2767   	ld d,100
0412FC ED 5C       2768   	mlt de
0412FE 43          2769   	ld b,e
0412FF D1          2770   	pop de
041300 13          2771   	inc de
041301 1A          2772   	ld a,(de)
041302 D6 30       2773   	sub 48
041304 D5          2774   	push de
041305 11 00 00 00 2775   	ld de,#000000
041309 5F          2776   	ld e,a
04130A 16 0A       2777   	ld d,10
04130C ED 5C       2778   	mlt de
04130E 4B          2779   	ld c,e
04130F D1          2780   	pop de
041310 13          2781   	inc de
041311 1A          2782   	ld a,(de)
041312 D6 30       2783   	sub 48
041314 81          2784   	add a,c
041315 80          2785   	add a,b ; full int value is here
041316 C1          2786   	pop bc
041317 C9          2787   	ret
041318             2788   
041318             2789   lprt_read_chars:
041318 3E 0D       2790   	ld a,13
04131A 12          2791   	ld (de),a ; store eol as next default temp char
04131B             2792   
04131B 7E          2793   	ld a,(hl) ; get the new char in the palette buffer
04131C 23          2794   	inc hl
04131D             2795   
04131D FE 20       2796   	cp 32
04131F C8          2797   	ret z ; ret if space
041320 FE 0D       2798   	cp 13
041322 28 F4       2799   	jr z,lprt_read_chars ; loop if CR
041324 FE 0A       2800   	cp 10
041326 C8          2801   	ret z ; ret if LF
041327 FE 30       2802   	cp 48
041329 D8          2803   	ret c ; ret if not number
04132A FE 3A       2804   	cp 58
04132C D0          2805   	ret nc ; ret if not number
04132D             2806   
04132D             2807   ; found a number, store it
04132D 12          2808   	ld (de),a
04132E 13          2809   	inc de
04132F 0C          2810   	inc c
041330 C3 18 13 04 2811   	jp lprt_read_chars
041334             2812   
041334             2813   ; set tint (RGB = c,e,l)
041334             2814   lp_set_tint:
041334 F5          2815   	push af
041335 C5          2816   	push bc
041336 D5          2817   	push de
041337 E5          2818   	push hl
041338             2819   
041338 C5          2820   	push bc
041339             2821   	vdu 19
041339 3E 13       0001M  		LD	A, function
04133B 49 D7       0002M  		RST.LIS	10h
04133D C1          2822   	pop bc
04133E 78          2823   	ld a,b
04133F             2824   	vdu_a
04133F 49 D7       0001M  		RST.LIS	10h
041341             2825   	vdu 255
041341 3E FF       0001M  		LD	A, function
041343 49 D7       0002M  		RST.LIS	10h
041345             2826   
041345 21 59 1B 04 2827   	ld hl,red_tint
041349 7E          2828   	ld a,(hl)
04134A             2829   	vdu_a
04134A 49 D7       0001M  		RST.LIS	10h
04134C             2830   
04134C 21 5A 1B 04 2831   	ld hl,green_tint
041350 7E          2832   	ld a,(hl)
041351             2833   	vdu_a
041351 49 D7       0001M  		RST.LIS	10h
041353             2834   
041353 21 5B 1B 04 2835   	ld hl,blue_tint
041357 7E          2836   	ld a,(hl)
041358             2837   	vdu_a
041358 49 D7       0001M  		RST.LIS	10h
04135A             2838   
04135A E1          2839   	pop hl
04135B D1          2840   	pop de
04135C C1          2841   	pop bc
04135D F1          2842   	pop af
04135E C9          2843   	ret
04135F             2844   
04135F             2845   ; save the palette
04135F             2846   fn_save_palette:
04135F C9          2847   	ret
041360             2848   
041360             2849   ; load a sprite, giving its full name, with extension
041360             2850   fn_load_sprite:
041360             2851   	; clear the filename on the screen
041360 21 AE 1A 04 2852   	ld hl,filename
041364 06 10       2853   	ld b,FILENAME_LENGTH
041366 AF          2854   	xor a
041367             2855   
041367             2856   ls_clear_filename:
041367 77          2857   	ld (hl),a
041368 23          2858   	inc hl
041369 10 FC       2859   	djnz ls_clear_filename
04136B             2860   
04136B             2861   	; get filename
04136B CD 4A 0F 04 2862   	call fn_input_text8
04136F             2863   
04136F             2864   	; set path to 'sprites/'
04136F 21 BF 1A 04 2865   	ld hl,sprite_path
041373             2866   	moscall mos_cd
041373 3E 03       0001M  		LD	A, function
041375 49 CF       0002M  		RST.LIS	08h
041377             2867   
041377             2868   	; exit on folder error
041377 FE 00       2869   	cp 0
041379 C2 4A 14 04 2870   	jp nz,ls_folder_error
04137D             2871   
04137D             2872   	; open the file for read
04137D 21 AE 1A 04 2873   	ld hl,filename
041381 0E 01       2874   	ld c,fa_open_existing|fa_read
041383             2875   	moscall mos_fopen
041383 3E 0A       0001M  		LD	A, function
041385 49 CF       0002M  		RST.LIS	08h
041387             2876   
041387             2877   	; exit on file error
041387 FE 00       2878   	cp 0
041389 CA 7C 14 04 2879   	jp z,ls_file_error
04138D             2880   
04138D             2881   	; filehandle -> C
04138D 4F          2882   	ld c,a
04138E             2883   
04138E             2884   	; get colors count
04138E             2885   	moscall mos_fgetc
04138E 3E 0C       0001M  		LD	A, function
041390 49 CF       0002M  		RST.LIS	08h
041392 DA 25 14 04 2886   	jp c,ls_close_error
041396             2887   
041396 FE 41       2888   	cp MAX_COLORS + 1
041398 D2 25 14 04 2889   	jp nc,ls_close_error
04139C             2890   
04139C             2891   	; store colors count
04139C 21 57 1B 04 2892   	ld hl,colors_count
0413A0 77          2893   	ld (hl),a
0413A1             2894   
0413A1             2895   	; redraw palette
0413A1 C5          2896   	push bc
0413A2 CD 05 19 04 2897   	call fn_draw_the_palette
0413A6 C1          2898   	pop bc
0413A7             2899   
0413A7             2900   	; get frames count
0413A7             2901   	moscall mos_fgetc
0413A7 3E 0C       0001M  		LD	A, function
0413A9 49 CF       0002M  		RST.LIS	08h
0413AB DA 25 14 04 2902   	jp c,ls_close_error
0413AF             2903   
0413AF             2904   	; store frames count
0413AF 21 5E 1B 04 2905   	ld hl,frames_count
0413B3 77          2906   	ld (hl),a
0413B4             2907   
0413B4             2908   	; set last frame as current frame
0413B4 21 5D 1B 04 2909   	ld hl,current_frame
0413B8 3D          2910   	dec a
0413B9 77          2911   	ld (hl),a
0413BA             2912   
0413BA             2913   	; get sprite size
0413BA             2914   	moscall mos_fgetc
0413BA 3E 0C       0001M  		LD	A, function
0413BC 49 CF       0002M  		RST.LIS	08h
0413BE DA 25 14 04 2915   	jp c,ls_close_error
0413C2             2916   
0413C2             2917   	; store sprite size
0413C2 21 37 1A 04 2918   	ld hl,spr_size
0413C6 77          2919   	ld (hl),a
0413C7             2920   
0413C7             2921   	; set 4x4 pixel width
0413C7 FE 04       2922   	cp SPR44
0413C9 20 09       2923   	jr nz,ls_next1
0413CB             2924   
0413CB 21 36 1A 04 2925   	ld hl,pixel_width
0413CF 06 20       2926   	ld b,SPR44_width
0413D1 70          2927   	ld (hl),b
0413D2 18 21       2928   	jr ls_next4
0413D4             2929   
0413D4             2930   ls_next1:
0413D4             2931   	; set 8x8 pixel width
0413D4 FE 08       2932   	cp SPR88
0413D6 20 09       2933   	jr nz,ls_next2
0413D8             2934   
0413D8 21 36 1A 04 2935   	ld hl,pixel_width
0413DC 06 10       2936   	ld b,SPR88_width
0413DE 70          2937   	ld (hl),b
0413DF 18 14       2938   	jr ls_next4
0413E1             2939   
0413E1             2940   ls_next2:
0413E1             2941   
0413E1             2942   	; set 16x16 pixel width
0413E1 FE 10       2943   	cp SPR1616
0413E3 20 09       2944   	jr nz,ls_next3
0413E5             2945   
0413E5 21 36 1A 04 2946   	ld hl,pixel_width
0413E9 06 08       2947   	ld b,SPR1616_width
0413EB 70          2948   	ld (hl),b
0413EC 18 07       2949   	jr ls_next4
0413EE             2950   
0413EE             2951   ls_next3:
0413EE             2952   
0413EE 21 36 1A 04 2953   	ld hl,pixel_width
0413F2 06 04       2954   	ld b,SPR3232_width
0413F4 70          2955   	ld (hl),b
0413F5             2956   
0413F5             2957   ls_next4:
0413F5 21 00 00 00 2958   	ld hl,#000000
0413F9 6F          2959   	ld l,a
0413FA 67          2960   	ld h,a
0413FB ED 6C       2961   	mlt hl ; one frame sprite length
0413FD E5          2962   	push hl
0413FE             2963   
0413FE             2964   	; get frames count
0413FE 21 5E 1B 04 2965   	ld hl,frames_count
041402 46          2966   	ld b,(hl)
041403             2967   
041403 E1          2968   	pop hl
041404             2969   
041404 05          2970   	dec b
041405 78          2971   	ld a,b
041406 FE 00       2972   	cp 0
041408 28 05       2973   	jr z,ls_read_data
04140A             2974   
04140A             2975   	; de = one frame sprite length
04140A E5          2976   	push hl
04140B D1          2977   	pop de
04140C             2978   ls_add_length:
04140C 19          2979   	add hl,de
04140D 10 FD       2980   	djnz ls_add_length
04140F             2981   
04140F             2982   ls_read_data:
04140F E5          2983   	push hl ; all frames length
041410 E5          2984   	push hl
041411 D1          2985   	pop de
041412 21 66 1B 04 2986   	ld hl,sprite_buffer
041416             2987   	moscall mos_fread
041416 3E 1A       0001M  		LD	A, function
041418 49 CF       0002M  		RST.LIS	08h
04141A E1          2988   	pop hl ; frame length
04141B B7          2989   	or a
04141C ED 52       2990   	sbc hl,de
04141E 19          2991   	add hl,de ; compare frame length with loaded bytes
04141F 20 04       2992   	jr nz,ls_close_error
041421 C3 52 14 04 2993   	jp ls_close
041425             2994   
041425             2995   ls_close_error:
041425 C5          2996   	push bc
041426             2997   
041426             2998   	; read error
041426 CD E1 16 04 2999   	call fn_print_file_error
04142A             3000   
04142A C1          3001   	pop bc
04142B             3002   
04142B             3003   	; close the file
04142B             3004   	moscall mos_fclose
04142B 3E 0B       0001M  		LD	A, function
04142D 49 CF       0002M  		RST.LIS	08h
04142F             3005   
04142F             3006   	; set path to home
04142F 21 D0 1A 04 3007   	ld hl,back_path
041433             3008   	moscall mos_cd
041433 3E 03       0001M  		LD	A, function
041435 49 CF       0002M  		RST.LIS	08h
041437             3009   
041437             3010   	; exit on error
041437 FE 00       3011   	cp 0
041439 C2 4A 14 04 3012   	jp nz,ls_folder_error
04143D             3013   
04143D             3014   
04143D             3015   	; reset current frame and coordinates of the drawing pixel
04143D 21 32 1A 04 3016   	ld hl,xpix
041441 AF          3017   	xor a
041442 77          3018   	ld (hl),a
041443 21 33 1A 04 3019   	ld hl,ypix
041447 77          3020   	ld (hl),a
041448 18 25       3021   	jr ls_exit
04144A             3022   
04144A             3023   ls_folder_error:
04144A             3024   	; write error
04144A CD 18 17 04 3025   	call fn_print_folder_error
04144E C3 6F 14 04 3026   	jp ls_exit
041452             3027   
041452             3028   ls_close:
041452             3029   	; close the file
041452             3030   	moscall mos_fclose
041452 3E 0B       0001M  		LD	A, function
041454 49 CF       0002M  		RST.LIS	08h
041456             3031   
041456             3032   	; set path to home
041456 21 D0 1A 04 3033   	ld hl,back_path
04145A             3034   	moscall mos_cd
04145A 3E 03       0001M  		LD	A, function
04145C 49 CF       0002M  		RST.LIS	08h
04145E             3035   
04145E             3036   	; exit on error
04145E FE 00       3037   	cp 0
041460 C2 4A 14 04 3038   	jp nz,ls_folder_error
041464             3039   
041464             3040   	; reset current frame and coordinates of the drawing pixel
041464 21 32 1A 04 3041   	ld hl,xpix
041468 AF          3042   	xor a
041469 77          3043   	ld (hl),a
04146A 21 33 1A 04 3044   	ld hl,ypix
04146E 77          3045   	ld (hl),a
04146F             3046   
04146F             3047   ls_exit:
04146F CD 67 18 04 3048   	call fn_show_spr_descr
041473 CD FD 17 04 3049   	call fn_change_frame
041477 CD 22 18 04 3050   	call fn_change_frames_count
04147B C9          3051   	ret
04147C             3052   
04147C             3053   ls_file_error:
04147C CD E1 16 04 3054   	call fn_print_file_error
041480             3055   
041480             3056   	; set path to home
041480 21 D0 1A 04 3057   	ld hl,back_path
041484             3058   	moscall mos_cd
041484 3E 03       0001M  		LD	A, function
041486 49 CF       0002M  		RST.LIS	08h
041488             3059   
041488             3060   	; exit on error
041488 FE 00       3061   	cp 0
04148A C2 4A 14 04 3062   	jp nz,ls_folder_error
04148E             3063   
04148E C9          3064   	ret
04148F             3065   
04148F             3066   ; save a sprite, giving its name
04148F             3067   fn_save_sprite:
04148F             3068   	; clear filename on the screen
04148F 21 AE 1A 04 3069   	ld hl,filename
041493 06 10       3070   	ld b,FILENAME_LENGTH
041495 AF          3071   	xor a
041496             3072   
041496             3073   ss_clear_filename:
041496 77          3074   	ld (hl),a
041497 23          3075   	inc hl
041498 10 FC       3076   	djnz ss_clear_filename
04149A             3077   
04149A             3078   	; get filename
04149A CD 4A 0F 04 3079   	call fn_input_text8
04149E             3080   
04149E             3081   	; set path to sprite path
04149E 21 BF 1A 04 3082   	ld hl,sprite_path
0414A2             3083   	moscall mos_cd
0414A2 3E 03       0001M  		LD	A, function
0414A4 49 CF       0002M  		RST.LIS	08h
0414A6             3084   
0414A6             3085   	; create it on error
0414A6 FE 00       3086   	cp 0
0414A8 F5          3087   	push af
0414A9 C4 FC 18 04 3088   	call nz,fn_create_sprite_folder
0414AD F1          3089   	pop af
0414AE 28 08       3090   	jr z,ss_next
0414B0             3091   
0414B0             3092   	; set path to sprite path
0414B0 21 BF 1A 04 3093   	ld hl,sprite_path
0414B4             3094   	moscall mos_cd
0414B4 3E 03       0001M  		LD	A, function
0414B6 49 CF       0002M  		RST.LIS	08h
0414B8             3095   
0414B8             3096   ss_next:
0414B8             3097   	; exit on error
0414B8 FE 00       3098   	cp 0
0414BA C2 4A 15 04 3099   	jp nz,ss_folder_error
0414BE             3100   
0414BE             3101   	; open the file for write
0414BE 21 AE 1A 04 3102   	ld hl,filename
0414C2 0E 0A       3103   	ld c,fa_create_always|fa_write
0414C4             3104   	moscall mos_fopen
0414C4 3E 0A       0001M  		LD	A, function
0414C6 49 CF       0002M  		RST.LIS	08h
0414C8             3105   
0414C8             3106   	; exit on error
0414C8 FE 00       3107   	cp 0
0414CA CA 87 15 04 3108   	jp z,ss_file_error
0414CE             3109   
0414CE             3110   	; filehandle -> C
0414CE 4F          3111   	ld c,a
0414CF             3112   
0414CF             3113   	; store colors count in the file
0414CF 21 57 1B 04 3114   	ld hl,colors_count
0414D3 46          3115   	ld b,(hl)
0414D4             3116   	moscall mos_fputc
0414D4 3E 0D       0001M  		LD	A, function
0414D6 49 CF       0002M  		RST.LIS	08h
0414D8             3117   
0414D8             3118   	; store frames count in the file
0414D8 21 5E 1B 04 3119   	ld hl,frames_count
0414DC 46          3120   	ld b,(hl)
0414DD             3121   	moscall mos_fputc
0414DD 3E 0D       0001M  		LD	A, function
0414DF 49 CF       0002M  		RST.LIS	08h
0414E1             3122   
0414E1             3123   	; store sprite size in the file
0414E1 21 37 1A 04 3124   	ld hl,spr_size
0414E5 46          3125   	ld b,(hl)
0414E6             3126   	moscall mos_fputc
0414E6 3E 0D       0001M  		LD	A, function
0414E8 49 CF       0002M  		RST.LIS	08h
0414EA             3127   
0414EA             3128   	; de = size²
0414EA 21 00 00 00 3129   	ld hl,#000000
0414EE 68          3130   	ld l,b
0414EF 60          3131   	ld h,b
0414F0 ED 6C       3132   	mlt hl ; HL = sprite length
0414F2 E5          3133   	push hl
0414F3             3134   
0414F3             3135   	; get frames count
0414F3 21 5E 1B 04 3136   	ld hl,frames_count
0414F7 46          3137   	ld b,(hl)
0414F8             3138   
0414F8 E1          3139   	pop hl
0414F9             3140   
0414F9 05          3141   	dec b
0414FA 78          3142   	ld a,b
0414FB FE 00       3143   	cp 0
0414FD 28 05       3144   	jr z,ss_write_data
0414FF             3145   
0414FF E5          3146   	push hl
041500 D1          3147   	pop de
041501             3148   ss_add_length:
041501 19          3149   	add hl,de
041502 10 FD       3150   	djnz ss_add_length
041504             3151   
041504             3152   ss_write_data:
041504 E5          3153   	push hl
041505 E5          3154   	push hl
041506 D1          3155   	pop de
041507 21 66 1B 04 3156   	ld hl,sprite_buffer
04150B             3157   	moscall mos_fwrite
04150B 3E 1B       0001M  		LD	A, function
04150D 49 CF       0002M  		RST.LIS	08h
04150F E1          3158   	pop hl
041510 B7          3159   	or a
041511 ED 52       3160   	sbc hl,de
041513 19          3161   	add hl,de
041514 20 04       3162   	jr nz,ss_close_error
041516 C3 52 15 04 3163   	jp ss_close
04151A             3164   
04151A             3165   ss_close_error:
04151A C5          3166   	push bc
04151B             3167   
04151B             3168   	; write error
04151B CD E1 16 04 3169   	call fn_print_file_error
04151F             3170   
04151F C1          3171   	pop bc
041520             3172   
041520             3173   	; close the file
041520             3174   	moscall mos_fclose
041520 3E 0B       0001M  		LD	A, function
041522 49 CF       0002M  		RST.LIS	08h
041524             3175   
041524             3176   	; set path to home
041524 21 D0 1A 04 3177   	ld hl,back_path
041528             3178   	moscall mos_cd
041528 3E 03       0001M  		LD	A, function
04152A 49 CF       0002M  		RST.LIS	08h
04152C             3179   
04152C             3180   	; exit on error
04152C FE 00       3181   	cp 0
04152E C2 4A 15 04 3182   	jp nz,ss_folder_error
041532             3183   
041532             3184   	; reset current frame and coordinates of the drawing pixel
041532 21 5E 1B 04 3185   	ld hl,frames_count
041536 7E          3186   	ld a,(hl)
041537 3D          3187   	dec a
041538 21 5D 1B 04 3188   	ld hl,current_frame
04153C 77          3189   	ld (hl),a
04153D 21 32 1A 04 3190   	ld hl,xpix
041541 AF          3191   	xor a
041542 77          3192   	ld (hl),a
041543 21 33 1A 04 3193   	ld hl,ypix
041547 77          3194   	ld (hl),a
041548 18 30       3195   	jr ss_exit
04154A             3196   
04154A             3197   ss_folder_error:
04154A             3198   	; write error
04154A CD 18 17 04 3199   	call fn_print_folder_error
04154E C3 7A 15 04 3200   	jp ss_exit
041552             3201   
041552             3202   ss_close:
041552             3203   	; close the file
041552             3204   	moscall mos_fclose
041552 3E 0B       0001M  		LD	A, function
041554 49 CF       0002M  		RST.LIS	08h
041556             3205   
041556             3206   	; set path to home
041556 21 D0 1A 04 3207   	ld hl,back_path
04155A             3208   	moscall mos_cd
04155A 3E 03       0001M  		LD	A, function
04155C 49 CF       0002M  		RST.LIS	08h
04155E             3209   
04155E             3210   	; exit on error
04155E FE 00       3211   	cp 0
041560 C2 4A 15 04 3212   	jp nz,ss_folder_error
041564             3213   
041564             3214   	; reset current frame and coordinates of the drawing pixel
041564 21 5E 1B 04 3215   	ld hl,frames_count
041568 7E          3216   	ld a,(hl)
041569 3D          3217   	dec a
04156A 21 5D 1B 04 3218   	ld hl,current_frame
04156E 77          3219   	ld (hl),a
04156F 21 32 1A 04 3220   	ld hl,xpix
041573 AF          3221   	xor a
041574 77          3222   	ld (hl),a
041575 21 33 1A 04 3223   	ld hl,ypix
041579 77          3224   	ld (hl),a
04157A             3225   
04157A             3226   ss_exit:
04157A CD 67 18 04 3227   	call fn_show_spr_descr
04157E CD FD 17 04 3228   	call fn_change_frame
041582 CD 22 18 04 3229   	call fn_change_frames_count
041586 C9          3230   	ret
041587             3231   
041587             3232   ss_file_error:
041587 CD E1 16 04 3233   	call fn_print_file_error
04158B             3234   
04158B             3235   	; set path to home
04158B 21 D0 1A 04 3236   	ld hl,back_path
04158F             3237   	moscall mos_cd
04158F 3E 03       0001M  		LD	A, function
041591 49 CF       0002M  		RST.LIS	08h
041593             3238   
041593             3239   	; exit on error
041593 FE 00       3240   	cp 0
041595 C2 4A 15 04 3241   	jp nz,ss_folder_error
041599 C9          3242   	ret
04159A             3243   
04159A             3244   ; export sprite data in assembly language, giving its name
04159A             3245   fn_export_sprite:
04159A             3246   	; clear filename
04159A 21 AE 1A 04 3247   	ld hl,filename
04159E 06 10       3248   	ld b,FILENAME_LENGTH
0415A0 AF          3249   	xor a
0415A1             3250   
0415A1             3251   es_clear_filename:
0415A1 77          3252   	ld (hl),a
0415A2 23          3253   	inc hl
0415A3 10 FC       3254   	djnz es_clear_filename
0415A5             3255   
0415A5             3256   	; get filename
0415A5 CD 4A 0F 04 3257   	call fn_input_text8
0415A9             3258   
0415A9             3259   	; set path to sprite path
0415A9 21 BF 1A 04 3260   	ld hl,sprite_path
0415AD             3261   	moscall mos_cd
0415AD 3E 03       0001M  		LD	A, function
0415AF 49 CF       0002M  		RST.LIS	08h
0415B1             3262   
0415B1             3263   	; create it on error
0415B1 FE 00       3264   	cp 0
0415B3 F5          3265   	push af
0415B4 C4 FC 18 04 3266   	call nz,fn_create_sprite_folder
0415B8 F1          3267   	pop af
0415B9 28 0E       3268   	jr z,es_next
0415BB             3269   
0415BB             3270   	; set path to sprite path
0415BB 21 BF 1A 04 3271   	ld hl,sprite_path
0415BF             3272   	moscall mos_cd
0415BF 3E 03       0001M  		LD	A, function
0415C1 49 CF       0002M  		RST.LIS	08h
0415C3             3273   
0415C3             3274   	; exit on error
0415C3 FE 00       3275   	cp 0
0415C5 C2 C5 16 04 3276   	jp nz,es_folder_error
0415C9             3277   
0415C9             3278   es_next:
0415C9             3279   	; open the file for write
0415C9 21 AE 1A 04 3280   	ld hl,filename
0415CD 0E 0A       3281   	ld c,fa_create_always|fa_write
0415CF             3282   	moscall mos_fopen
0415CF 3E 0A       0001M  		LD	A, function
0415D1 49 CF       0002M  		RST.LIS	08h
0415D3             3283   
0415D3             3284   	; exit on error
0415D3 FE 00       3285   	cp 0
0415D5 CA CE 16 04 3286   	jp z,es_file_error
0415D9             3287   
0415D9             3288   	; filehandle -> C
0415D9 4F          3289   	ld c,a
0415DA             3290   
0415DA             3291   
0415DA             3292   	; L = first frame
0415DA 3E 00       3293   	ld a,0
0415DC 21 66 1B 04 3294   	ld hl,sprite_buffer
0415E0 11 00 00 00 3295   	ld de,$000000
0415E4             3296   
0415E4             3297   es_frames_repeat:
0415E4 F5          3298   	push af
0415E5 E5          3299   	push hl
0415E6             3300   
0415E6 F5          3301   	push af
0415E7             3302   
0415E7             3303   	; start to write...
0415E7 1E 00       3304   	ld e,0 ; rows
0415E9             3305   
0415E9 06 3B       3306   	ld b,';'
0415EB             3307   	moscall mos_fputc
0415EB 3E 0D       0001M  		LD	A, function
0415ED 49 CF       0002M  		RST.LIS	08h
0415EF             3308   
0415EF 06 20       3309   	ld b,' '
0415F1             3310   	moscall mos_fputc
0415F1 3E 0D       0001M  		LD	A, function
0415F3 49 CF       0002M  		RST.LIS	08h
0415F5             3311   
0415F5 06 46       3312   	ld b,'F'
0415F7             3313   	moscall mos_fputc
0415F7 3E 0D       0001M  		LD	A, function
0415F9 49 CF       0002M  		RST.LIS	08h
0415FB             3314   
0415FB 06 72       3315   	ld b,'r'
0415FD             3316   	moscall mos_fputc
0415FD 3E 0D       0001M  		LD	A, function
0415FF 49 CF       0002M  		RST.LIS	08h
041601             3317   
041601 06 6D       3318   	ld b,'m'
041603             3319   	moscall mos_fputc
041603 3E 0D       0001M  		LD	A, function
041605 49 CF       0002M  		RST.LIS	08h
041607             3320   
041607 06 20       3321   	ld b,' '
041609             3322   	moscall mos_fputc
041609 3E 0D       0001M  		LD	A, function
04160B 49 CF       0002M  		RST.LIS	08h
04160D             3323   
04160D F1          3324   	pop af
04160E C6 30       3325   	add a,'0'
041610 47          3326   	ld b,a
041611             3327   	moscall mos_fputc
041611 3E 0D       0001M  		LD	A, function
041613 49 CF       0002M  		RST.LIS	08h
041615             3328   
041615 06 0D       3329   	ld b,13
041617             3330   	moscall mos_fputc
041617 3E 0D       0001M  		LD	A, function
041619 49 CF       0002M  		RST.LIS	08h
04161B             3331   
04161B 06 0A       3332   	ld b,10
04161D             3333   	moscall mos_fputc
04161D 3E 0D       0001M  		LD	A, function
04161F 49 CF       0002M  		RST.LIS	08h
041621             3334   
041621             3335   es_repeat:
041621             3336   
041621 06 44       3337   	ld b,'D'
041623             3338   	moscall mos_fputc
041623 3E 0D       0001M  		LD	A, function
041625 49 CF       0002M  		RST.LIS	08h
041627             3339   
041627 06 42       3340   	ld b,'B'
041629             3341   	moscall mos_fputc
041629 3E 0D       0001M  		LD	A, function
04162B 49 CF       0002M  		RST.LIS	08h
04162D             3342   
04162D 06 20       3343   	ld b,' '
04162F             3344   	moscall mos_fputc
04162F 3E 0D       0001M  		LD	A, function
041631 49 CF       0002M  		RST.LIS	08h
041633             3345   
041633 16 00       3346   	ld d,0 ; columns
041635             3347   
041635             3348   es_repeat_line:
041635 D5          3349   	push de
041636             3350   
041636 7E          3351   	ld a,(hl)
041637 23          3352   	inc hl
041638             3353   
041638             3354   	; convert A to BCD
041638 CD 81 19 04 3355   	call fn_hex2bcd
04163C             3356   
04163C             3357   	; write two numbers (chars)
04163C 5F          3358   	ld e,a
04163D E6 F0       3359   	and $f0
04163F 0F          3360   	rrca
041640 0F          3361   	rrca
041641 0F          3362   	rrca
041642 0F          3363   	rrca
041643 C6 30       3364   	add '0'
041645             3365   
041645 47          3366   	ld b,a
041646             3367   	moscall mos_fputc
041646 3E 0D       0001M  		LD	A, function
041648 49 CF       0002M  		RST.LIS	08h
04164A             3368   
04164A 7B          3369   	ld a,e
04164B E6 0F       3370   	and $0f
04164D C6 30       3371   	add '0'
04164F             3372   
04164F 47          3373   	ld b,a
041650             3374   	moscall mos_fputc
041650 3E 0D       0001M  		LD	A, function
041652 49 CF       0002M  		RST.LIS	08h
041654             3375   
041654 D1          3376   	pop de
041655 14          3377   	inc d
041656 3A 37 1A 04 3378   	ld a,(spr_size)
04165A BA          3379   	cp d
04165B F5          3380   	push af
04165C C4 7A 19 04 3381   	call nz,fn_comma
041660 F1          3382   	pop af
041661 C2 35 16 04 3383   	jp nz,es_repeat_line
041665             3384   
041665 06 0D       3385   	ld b,13 ; CR
041667             3386   	moscall mos_fputc
041667 3E 0D       0001M  		LD	A, function
041669 49 CF       0002M  		RST.LIS	08h
04166B             3387   
04166B 06 0A       3388   	ld b,10 ; LF
04166D             3389   	moscall mos_fputc
04166D 3E 0D       0001M  		LD	A, function
04166F 49 CF       0002M  		RST.LIS	08h
041671             3390   
041671 1C          3391   	inc e
041672 3A 37 1A 04 3392   	ld a,(spr_size)
041676 BB          3393   	cp e
041677 C2 21 16 04 3394   	jp nz,es_repeat
04167B             3395   
04167B 06 0D       3396   	ld b,13 ; CR
04167D             3397   	moscall mos_fputc
04167D 3E 0D       0001M  		LD	A, function
04167F 49 CF       0002M  		RST.LIS	08h
041681             3398   
041681 06 0A       3399   	ld b,10 ; LF
041683             3400   	moscall mos_fputc
041683 3E 0D       0001M  		LD	A, function
041685 49 CF       0002M  		RST.LIS	08h
041687             3401   
041687 E1          3402   	pop hl
041688 D5          3403   	push de
041689 ED 5C       3404   	mlt de
04168B 19          3405   	add hl,de
04168C D1          3406   	pop de
04168D F1          3407   	pop af
04168E 3C          3408   	inc a
04168F DD 21 5E 1B 3409   	ld ix,frames_count
       04          
041694 DD BE 00    3410   	cp (ix+0)
041697 C2 E4 15 04 3411   	jp nz,es_frames_repeat
04169B             3412   
04169B             3413   	; close the file
04169B             3414   	moscall mos_fclose
04169B 3E 0B       0001M  		LD	A, function
04169D 49 CF       0002M  		RST.LIS	08h
04169F             3415   
04169F             3416   	; set path to home
04169F 21 D0 1A 04 3417   	ld hl,back_path
0416A3             3418   	moscall mos_cd
0416A3 3E 03       0001M  		LD	A, function
0416A5 49 CF       0002M  		RST.LIS	08h
0416A7             3419   
0416A7             3420   	; exit on error
0416A7 FE 00       3421   	cp 0
0416A9 C2 C5 16 04 3422   	jp nz,es_folder_error
0416AD             3423   
0416AD             3424   	; reset current frame and coordinates of the drawing pixel
0416AD 21 5E 1B 04 3425   	ld hl,frames_count
0416B1 7E          3426   	ld a,(hl)
0416B2 3D          3427   	dec a
0416B3 21 5D 1B 04 3428   	ld hl,current_frame
0416B7 77          3429   	ld (hl),a
0416B8 21 32 1A 04 3430   	ld hl,xpix
0416BC AF          3431   	xor a
0416BD 77          3432   	ld (hl),a
0416BE 21 33 1A 04 3433   	ld hl,ypix
0416C2 77          3434   	ld (hl),a
0416C3 18 08       3435   	jr es_exit
0416C5             3436   
0416C5             3437   es_folder_error:
0416C5             3438   	; write error
0416C5 CD 18 17 04 3439   	call fn_print_folder_error
0416C9 C3 CD 16 04 3440   	jp es_exit
0416CD             3441   
0416CD             3442   es_exit:
0416CD C9          3443   	ret
0416CE             3444   
0416CE             3445   es_file_error:
0416CE CD E1 16 04 3446   	call fn_print_file_error
0416D2             3447   
0416D2             3448   	; set path to home
0416D2 21 D0 1A 04 3449   	ld hl,back_path
0416D6             3450   	moscall mos_cd
0416D6 3E 03       0001M  		LD	A, function
0416D8 49 CF       0002M  		RST.LIS	08h
0416DA             3451   
0416DA             3452   	; exit on error
0416DA FE 00       3453   	cp 0
0416DC C2 C5 16 04 3454   	jp nz,es_folder_error
0416E0 C9          3455   	ret
0416E1             3456   
0416E1             3457   ; print 'file error'
0416E1             3458   fn_print_file_error:
0416E1             3459   	vdu 7
0416E1 3E 07       0001M  		LD	A, function
0416E3 49 D7       0002M  		RST.LIS	10h
0416E5             3460   
0416E5             3461   	; locate x,y
0416E5             3462   	vdu 31
0416E5 3E 1F       0001M  		LD	A, function
0416E7 49 D7       0002M  		RST.LIS	10h
0416E9             3463   	vdu FILENAME_X
0416E9 3E 07       0001M  		LD	A, function
0416EB 49 D7       0002M  		RST.LIS	10h
0416ED             3464   	vdu FILENAME_Y
0416ED 3E 18       0001M  		LD	A, function
0416EF 49 D7       0002M  		RST.LIS	10h
0416F1             3465   
0416F1             3466   	; print text
0416F1 21 EF 1A 04 3467   	ld hl,file_error
0416F5 01 00 00 00 3468   	ld bc,0
0416F9 AF          3469   	xor a
0416FA 49 DF       3470   	rst.lis $18
0416FC             3471   
0416FC CD 43 0F 04 3472   	call fn_input_key
041700             3473   
041700             3474   	; locate x,y
041700             3475   	vdu 31
041700 3E 1F       0001M  		LD	A, function
041702 49 D7       0002M  		RST.LIS	10h
041704             3476   	vdu FILENAME_X
041704 3E 07       0001M  		LD	A, function
041706 49 D7       0002M  		RST.LIS	10h
041708             3477   	vdu FILENAME_Y
041708 3E 18       0001M  		LD	A, function
04170A 49 D7       0002M  		RST.LIS	10h
04170C             3478   
04170C             3479   	; print text
04170C 21 D5 1A 04 3480   	ld hl,void_filename
041710 01 00 00 00 3481   	ld bc,0
041714 AF          3482   	xor a
041715 49 DF       3483   	rst.lis $18
041717             3484   
041717 C9          3485   	ret
041718             3486   
041718             3487   ; print 'folder error'
041718             3488   fn_print_folder_error:
041718             3489   	vdu 7
041718 3E 07       0001M  		LD	A, function
04171A 49 D7       0002M  		RST.LIS	10h
04171C             3490   
04171C             3491   	; locate x,y
04171C             3492   	vdu 31
04171C 3E 1F       0001M  		LD	A, function
04171E 49 D7       0002M  		RST.LIS	10h
041720             3493   	vdu FILENAME_X
041720 3E 07       0001M  		LD	A, function
041722 49 D7       0002M  		RST.LIS	10h
041724             3494   	vdu FILENAME_Y
041724 3E 18       0001M  		LD	A, function
041726 49 D7       0002M  		RST.LIS	10h
041728             3495   
041728             3496   	; print text
041728 21 09 1B 04 3497   	ld hl,folder_error
04172C 01 00 00 00 3498   	ld bc,0
041730 AF          3499   	xor a
041731 49 DF       3500   	rst.lis $18
041733             3501   
041733 CD 43 0F 04 3502   	call fn_input_key
041737             3503   
041737             3504   	; locate x,y
041737             3505   	vdu 31
041737 3E 1F       0001M  		LD	A, function
041739 49 D7       0002M  		RST.LIS	10h
04173B             3506   	vdu FILENAME_X
04173B 3E 07       0001M  		LD	A, function
04173D 49 D7       0002M  		RST.LIS	10h
04173F             3507   	vdu FILENAME_Y
04173F 3E 18       0001M  		LD	A, function
041741 49 D7       0002M  		RST.LIS	10h
041743             3508   
041743             3509   	; print text
041743 21 D5 1A 04 3510   	ld hl,void_filename
041747 01 00 00 00 3511   	ld bc,0
04174B AF          3512   	xor a
04174C 49 DF       3513   	rst.lis $18
04174E             3514   
04174E C9          3515   	ret
04174F             3516   
04174F             3517   ; print 'header error'
04174F             3518   fn_print_header_error:
04174F             3519   	vdu 7
04174F 3E 07       0001M  		LD	A, function
041751 49 D7       0002M  		RST.LIS	10h
041753             3520   
041753             3521   	; locate x,y
041753             3522   	vdu 31
041753 3E 1F       0001M  		LD	A, function
041755 49 D7       0002M  		RST.LIS	10h
041757             3523   	vdu FILENAME_X
041757 3E 07       0001M  		LD	A, function
041759 49 D7       0002M  		RST.LIS	10h
04175B             3524   	vdu FILENAME_Y
04175B 3E 18       0001M  		LD	A, function
04175D 49 D7       0002M  		RST.LIS	10h
04175F             3525   
04175F             3526   	; print text
04175F 21 23 1B 04 3527   	ld hl,header_error
041763 01 00 00 00 3528   	ld bc,0
041767 AF          3529   	xor a
041768 49 DF       3530   	rst.lis $18
04176A             3531   
04176A CD 43 0F 04 3532   	call fn_input_key
04176E             3533   
04176E             3534   	; locate x,y
04176E             3535   	vdu 31
04176E 3E 1F       0001M  		LD	A, function
041770 49 D7       0002M  		RST.LIS	10h
041772             3536   	vdu FILENAME_X
041772 3E 07       0001M  		LD	A, function
041774 49 D7       0002M  		RST.LIS	10h
041776             3537   	vdu FILENAME_Y
041776 3E 18       0001M  		LD	A, function
041778 49 D7       0002M  		RST.LIS	10h
04177A             3538   
04177A             3539   	; print text
04177A 21 D5 1A 04 3540   	ld hl,void_filename
04177E 01 00 00 00 3541   	ld bc,0
041782 AF          3542   	xor a
041783 49 DF       3543   	rst.lis $18
041785             3544   
041785 C9          3545   	ret
041786             3546   
041786             3547   ; print 'data error'
041786             3548   fn_print_data_error:
041786             3549   	vdu 7
041786 3E 07       0001M  		LD	A, function
041788 49 D7       0002M  		RST.LIS	10h
04178A             3550   
04178A             3551   	; locate x,y
04178A             3552   	vdu 31
04178A 3E 1F       0001M  		LD	A, function
04178C 49 D7       0002M  		RST.LIS	10h
04178E             3553   	vdu FILENAME_X
04178E 3E 07       0001M  		LD	A, function
041790 49 D7       0002M  		RST.LIS	10h
041792             3554   	vdu FILENAME_Y
041792 3E 18       0001M  		LD	A, function
041794 49 D7       0002M  		RST.LIS	10h
041796             3555   
041796             3556   	; print text
041796 21 3D 1B 04 3557   	ld hl,data_error
04179A 01 00 00 00 3558   	ld bc,0
04179E AF          3559   	xor a
04179F 49 DF       3560   	rst.lis $18
0417A1             3561   
0417A1 CD 43 0F 04 3562   	call fn_input_key
0417A5             3563   
0417A5             3564   	; locate x,y
0417A5             3565   	vdu 31
0417A5 3E 1F       0001M  		LD	A, function
0417A7 49 D7       0002M  		RST.LIS	10h
0417A9             3566   	vdu FILENAME_X
0417A9 3E 07       0001M  		LD	A, function
0417AB 49 D7       0002M  		RST.LIS	10h
0417AD             3567   	vdu FILENAME_Y
0417AD 3E 18       0001M  		LD	A, function
0417AF 49 D7       0002M  		RST.LIS	10h
0417B1             3568   
0417B1             3569   	; print text
0417B1 21 D5 1A 04 3570   	ld hl,void_filename
0417B5 01 00 00 00 3571   	ld bc,0
0417B9 AF          3572   	xor a
0417BA 49 DF       3573   	rst.lis $18
0417BC             3574   
0417BC C9          3575   	ret
0417BD             3576   
0417BD             3577   ; refresh all the current sprite frame
0417BD             3578   fn_refresh_sprite:
0417BD 06 00       3579   	ld b,0 ; B -> x cordinate
0417BF 0E 00       3580   	ld c,0 ; C -> y cordinate
0417C1             3581   
0417C1             3582   rs_loop:
0417C1 C5          3583   	push bc
0417C2             3584   
0417C2 21 32 1A 04 3585   	ld hl,xpix
0417C6 70          3586   	ld (hl),b
0417C7 21 33 1A 04 3587   	ld hl,ypix
0417CB 71          3588   	ld (hl),c
0417CC CD D5 0D 04 3589   	call fn_draw_pixel_without_border
0417D0             3590   
0417D0 C1          3591   	pop bc
0417D1             3592   
0417D1 04          3593   	inc b
0417D2 21 37 1A 04 3594   	ld hl,spr_size
0417D6 7E          3595   	ld a,(hl)
0417D7 B8          3596   	cp b
0417D8 28 04       3597   	jr z,rs_next_line
0417DA C3 C1 17 04 3598   	jp rs_loop
0417DE             3599   
0417DE             3600   rs_next_line:
0417DE 06 00       3601   	ld b,0
0417E0 0C          3602   	inc c
0417E1 21 37 1A 04 3603   	ld hl,spr_size
0417E5 7E          3604   	ld a,(hl)
0417E6 B9          3605   	cp c
0417E7 28 04       3606   	jr z,rs_end
0417E9 C3 C1 17 04 3607   	jp rs_loop
0417ED             3608   
0417ED             3609   rs_end:
0417ED AF          3610   	xor a
0417EE 21 32 1A 04 3611   	ld hl,xpix
0417F2 77          3612   	ld (hl),a
0417F3 21 33 1A 04 3613   	ld hl,ypix
0417F7 77          3614   	ld (hl),a
0417F8 CD C1 0D 04 3615   	call fn_draw_pixel_with_border
0417FC             3616   
0417FC C9          3617   	ret
0417FD             3618   
0417FD             3619   fn_change_frame:
0417FD 21 5D 1B 04 3620   	ld hl,current_frame
041801 7E          3621   	ld a,(hl)
041802 3C          3622   	inc a
041803 C6 30       3623   	add a,48
041805 21 5F 1B 04 3624   	ld hl,current_frame_ascii
041809 77          3625   	ld (hl),a
04180A             3626   
04180A             3627   	; locate 21,3
04180A             3628   	vdu 31
04180A 3E 1F       0001M  		LD	A, function
04180C 49 D7       0002M  		RST.LIS	10h
04180E             3629   	vdu 21
04180E 3E 15       0001M  		LD	A, function
041810 49 D7       0002M  		RST.LIS	10h
041812             3630   	vdu 3
041812 3E 03       0001M  		LD	A, function
041814 49 D7       0002M  		RST.LIS	10h
041816             3631   
041816             3632   	; print text
041816 21 5F 1B 04 3633   	ld hl,current_frame_ascii
04181A 01 00 00 00 3634   	ld bc,0
04181E AF          3635   	xor a
04181F 49 DF       3636   	rst.lis $18
041821             3637   
041821 C9          3638   	ret
041822             3639   
041822             3640   fn_change_frames_count:
041822 21 5E 1B 04 3641   	ld hl,frames_count
041826 7E          3642   	ld a,(hl)
041827 C6 30       3643   	add a,48
041829 21 61 1B 04 3644   	ld hl,frames_count_ascii
04182D 77          3645   	ld (hl),a
04182E             3646   
04182E             3647   	; locate 23,3
04182E             3648   	vdu 31
04182E 3E 1F       0001M  		LD	A, function
041830 49 D7       0002M  		RST.LIS	10h
041832             3649   	vdu 23
041832 3E 17       0001M  		LD	A, function
041834 49 D7       0002M  		RST.LIS	10h
041836             3650   	vdu 3
041836 3E 03       0001M  		LD	A, function
041838 49 D7       0002M  		RST.LIS	10h
04183A             3651   
04183A             3652   	; print text
04183A 21 61 1B 04 3653   	ld hl,frames_count_ascii
04183E 01 00 00 00 3654   	ld bc,0
041842 AF          3655   	xor a
041843 49 DF       3656   	rst.lis $18
041845             3657   
041845 C9          3658   	ret
041846             3659   
041846             3660   ; slowdown (wait delay)
041846             3661   fn_slowdown:
041846 DD 21 63 1B 3662   	ld ix,keydata
       04          
04184B DD 7E 02    3663   	ld a,(ix+2)
04184E E6 02       3664   	and 2
041850 FE 02       3665   	cp 2 ; shift key to disable delay
041852 C8          3666   	ret z
041853             3667   
041853             3668   	moscall mos_sysvars
041853 3E 08       0001M  		LD	A, function
041855 49 CF       0002M  		RST.LIS	08h
041857 DD 4E 00    3669   	ld c,(ix+sysvar_time)
04185A             3670   
04185A             3671   sd_loop:
04185A             3672   	moscall mos_sysvars
04185A 3E 08       0001M  		LD	A, function
04185C 49 CF       0002M  		RST.LIS	08h
04185E DD 7E 00    3673   	ld a,(ix+sysvar_time)
041861 91          3674   	sub c
041862 FE 14       3675   	cp SLOWDOWN_DELAY
041864 20 F4       3676   	jr nz,sd_loop
041866 C9          3677   	ret
041867             3678   
041867             3679   fn_show_spr_descr:
041867             3680   	; locate 15,3
041867             3681   	vdu 31
041867 3E 1F       0001M  		LD	A, function
041869 49 D7       0002M  		RST.LIS	10h
04186B             3682   	vdu 15
04186B 3E 0F       0001M  		LD	A, function
04186D 49 D7       0002M  		RST.LIS	10h
04186F             3683   	vdu 3
04186F 3E 03       0001M  		LD	A, function
041871 49 D7       0002M  		RST.LIS	10h
041873             3684   
041873             3685   	; print text
041873 21 82 1A 04 3686   	ld hl,spr_descr
041877 01 00 00 00 3687   	ld bc,0
04187B AF          3688   	xor a
04187C 49 DF       3689   	rst.lis $18
04187E             3690   
04187E             3691   	; locate 15,5
04187E             3692   	vdu 31
04187E 3E 1F       0001M  		LD	A, function
041880 49 D7       0002M  		RST.LIS	10h
041882             3693   	vdu 15
041882 3E 0F       0001M  		LD	A, function
041884 49 D7       0002M  		RST.LIS	10h
041886             3694   	vdu 5
041886 3E 05       0001M  		LD	A, function
041888 49 D7       0002M  		RST.LIS	10h
04188A             3695   
04188A             3696   	; check for sprite size...
04188A 21 37 1A 04 3697   	ld hl,spr_size
04188E 7E          3698   	ld a,(hl)
04188F             3699   
04188F FE 04       3700   	cp 4
041891 20 0C       3701   	jr nz,ssd_8x8
041893             3702   
041893             3703   	; print text 4x4
041893 21 8C 1A 04 3704   	ld hl,spr_descr1
041897 01 00 00 00 3705   	ld bc,0
04189B AF          3706   	xor a
04189C 49 DF       3707   	rst.lis $18
04189E C9          3708   	ret
04189F             3709   
04189F             3710   ssd_8x8:
04189F FE 08       3711   	cp 8
0418A1 20 0C       3712   	jr nz,ssd_16x16
0418A3             3713   
0418A3             3714   	; print text 8x8
0418A3 21 92 1A 04 3715   	ld hl,spr_descr2
0418A7 01 00 00 00 3716   	ld bc,0
0418AB AF          3717   	xor a
0418AC 49 DF       3718   	rst.lis $18
0418AE C9          3719   	ret
0418AF             3720   
0418AF             3721   ssd_16x16:
0418AF FE 10       3722   	cp 16
0418B1 20 0C       3723   	jr nz,ssd_32x32
0418B3             3724   
0418B3             3725   	; print text 16x16
0418B3 21 98 1A 04 3726   	ld hl,spr_descr3
0418B7 01 00 00 00 3727   	ld bc,0
0418BB AF          3728   	xor a
0418BC 49 DF       3729   	rst.lis $18
0418BE C9          3730   	ret
0418BF             3731   
0418BF             3732   ssd_32x32:
0418BF             3733   	; print text 32x32
0418BF 21 9E 1A 04 3734   	ld hl,spr_descr4
0418C3 01 00 00 00 3735   	ld bc,0
0418C7 AF          3736   	xor a
0418C8 49 DF       3737   	rst.lis $18
0418CA             3738   
0418CA C9          3739   	ret
0418CB             3740   
0418CB             3741   ; input: HL = negative key to check
0418CB             3742   fn_inkey:
0418CB             3743   	moscall mos_getkbmap
0418CB 3E 1E       0001M  		LD	A, function
0418CD 49 CF       0002M  		RST.LIS	08h
0418CF 23          3744   	INC	HL
0418D0 7D          3745   	LD	A, L
0418D1 ED 44       3746   	NEG
0418D3 4F          3747   	LD	C, A
0418D4 3E 01       3748   	LD	A, 1
0418D6 FA FA 18 04 3749   	JP	M,i_false ; < -128 ?
0418DA             3750   
0418DA 21 45 00 04 3751   	LD	HL,BITLOOKUP
0418DE 11 00 00 00 3752   	LD	DE,0
0418E2 79          3753   	LD	A,C
0418E3 E6 07       3754   	AND	00000111b
0418E5 5F          3755   	LD	E,A
0418E6 19          3756   	ADD	HL,DE
0418E7 46          3757   	LD	B,(HL)
0418E8             3758   
0418E8 79          3759   	LD	A,C
0418E9 E6 78       3760   	AND	01111000b
0418EB 0F          3761   	RRCA
0418EC 0F          3762   	RRCA
0418ED 0F          3763   	RRCA
0418EE 5F          3764   	LD	E, A
0418EF DD 19       3765   	ADD	IX,DE
0418F1 DD 7E 00    3766   	LD	A,(IX+0)
0418F4 A0          3767   	AND	B
0418F5 28 03       3768   	JR Z,i_false
0418F7 3E 01       3769   	LD A,1
0418F9 C9          3770   	RET
0418FA             3771   i_false:
0418FA AF          3772   	XOR A
0418FB C9          3773   	RET
0418FC             3774   
0418FC             3775   fn_create_sprite_folder:
0418FC 21 BF 1A 04 3776   	ld hl,sprite_path
041900             3777   	moscall mos_mkdir
041900 3E 07       0001M  		LD	A, function
041902 49 CF       0002M  		RST.LIS	08h
041904 C9          3778   	ret
041905             3779   
041905             3780   ; draw the palette
041905             3781   fn_draw_the_palette:
041905 0E 00       3782   	ld c,0
041907             3783   
041907             3784   fndtp_palette_loop:
041907 C5          3785   	push bc
041908             3786   
041908             3787   	; choose palette color
041908             3788   	vdu 18
041908 3E 12       0001M  		LD	A, function
04190A 49 D7       0002M  		RST.LIS	10h
04190C             3789   	vdu 0
04190C 3E 00       0001M  		LD	A, function
04190E 49 D7       0002M  		RST.LIS	10h
041910 C1          3790   	pop bc
041911 C5          3791   	push bc
041912 79          3792   	ld a,c
041913 F5          3793   	push af
041914             3794   	vdu_a
041914 49 D7       0001M  		RST.LIS	10h
041916 F1          3795   	pop af
041917 E5          3796   	push hl
041918 21 57 1B 04 3797   	ld hl,colors_count
04191C BE          3798   	cp (hl)
04191D E1          3799   	pop hl
04191E 38 0B       3800   	jr c,fndtppl_zap
041920             3801   
041920             3802   	; set 0 if color is out of palette
041920             3803   	vdu 18
041920 3E 12       0001M  		LD	A, function
041922 49 D7       0002M  		RST.LIS	10h
041924             3804   	vdu 0
041924 3E 00       0001M  		LD	A, function
041926 49 D7       0002M  		RST.LIS	10h
041928 AF          3805   	xor a
041929             3806   	vdu_a
041929 49 D7       0001M  		RST.LIS	10h
04192B             3807   
04192B             3808   fndtppl_zap:
04192B             3809   	; store coordinates for a palette square
04192B DD 21 22 1A 3810   	ld ix,x1
       04          
041930 E1          3811   	pop hl
041931 E5          3812   	push hl
041932 26 05       3813   	ld h,5
041934 ED 6C       3814   	mlt hl
041936 E5          3815   	push hl
041937 DD 75 00    3816   	ld (ix+0),l
04193A DD 74 01    3817   	ld (ix+1),h
04193D             3818   
04193D DD 21 24 1A 3819   	ld ix,y1
       04          
041942 21 00 00 00 3820   	ld hl,0
041946 DD 75 00    3821   	ld (ix+0),l
041949 DD 74 01    3822   	ld (ix+1),h
04194C             3823   
04194C DD 21 26 1A 3824   	ld ix,x2
       04          
041951 E1          3825   	pop hl
041952 11 04 00 00 3826   	ld de,4
041956 19          3827   	add hl,de
041957 DD 75 00    3828   	ld (ix+0),l
04195A DD 74 01    3829   	ld (ix+1),h
04195D             3830   
04195D DD 21 28 1A 3831   	ld ix,y2
       04          
041962 21 0A 00 00 3832   	ld hl,10
041966 DD 75 00    3833   	ld (ix+0),l
041969 DD 74 01    3834   	ld (ix+1),h
04196C             3835   
04196C             3836   	; draw the palette filled square
04196C CD F3 0C 04 3837   	call fn_rectf
041970             3838   
041970             3839   	; next color ?
041970 C1          3840   	pop bc
041971 0C          3841   	inc c
041972 79          3842   	ld a,c
041973 FE 40       3843   	cp MAX_COLORS
041975 C2 07 19 04 3844   	jp nz,fndtp_palette_loop
041979             3845   
041979 C9          3846   	ret
04197A             3847   
04197A             3848   fn_comma:
04197A 06 2C       3849   	ld b,','
04197C             3850   	moscall mos_fputc
04197C 3E 0D       0001M  		LD	A, function
04197E 49 CF       0002M  		RST.LIS	08h
041980 C9          3851   	ret
041981             3852   
041981             3853   ; Hex to BCD
041981             3854   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
041981             3855   ; Input: a = hex number
041981             3856   ; Output: a = BCD number
041981             3857   ; Clobbers: b,c
041981             3858   fn_hex2bcd:
041981 C5          3859   		push bc
041982 4F          3860   		ld c,a  ; Original (hex) number
041983 06 08       3861   		ld b,8  ; How many bits
041985 AF          3862   		xor a   ; Output (BCD) number, starts at 0
041986 CB 21       3863   htb:	sla c   ; shift c into carry
041988 8F          3864   		adc a,a
041989 27          3865   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
04198A 10 FA       3866   		djnz htb  ; Repeat for 8 bits
04198C C1          3867   		pop bc
04198D C9          3868   		ret
04198E             3869   
04198E             3870   ; set color RGB (b = c,e,l)
04198E             3871   fn_set_color:
04198E F5          3872   	push af
04198F C5          3873   	push bc
041990 D5          3874   	push de
041991 E5          3875   	push hl
041992             3876   
041992 C5          3877   	push bc
041993             3878   
041993             3879   	; store rgb tints
041993 7D          3880   	ld a,l
041994 21 59 1B 04 3881   	ld hl,red_tint
041998 71          3882   	ld (hl),c
041999 21 5A 1B 04 3883   	ld hl,green_tint
04199D 73          3884   	ld (hl),e
04199E 21 5B 1B 04 3885   	ld hl,blue_tint
0419A2 77          3886   	ld (hl),a
0419A3             3887   
0419A3 C1          3888   	pop bc
0419A4             3889   
0419A4             3890   	; point to palette rgb color
0419A4 21 D6 42 04 3891   	ld hl,rgb_palette
0419A8 11 00 00 00 3892   	ld de,#000000
0419AC 58          3893   	ld e,b
0419AD 16 03       3894   	ld d,3
0419AF ED 5C       3895   	mlt de
0419B1 19          3896   	add hl,de ; hl -> rgb colors
0419B2             3897   
0419B2             3898   	; store rgb tints into the palette
0419B2 11 59 1B 04 3899   	ld de,red_tint
0419B6 1A          3900   	ld a,(de)
0419B7 77          3901   	ld (hl),a
0419B8 23          3902   	inc hl
0419B9 11 5A 1B 04 3903   	ld de,green_tint
0419BD 1A          3904   	ld a,(de)
0419BE 77          3905   	ld (hl),a
0419BF 23          3906   	inc hl
0419C0 11 5B 1B 04 3907   	ld de,blue_tint
0419C4 1A          3908   	ld a,(de)
0419C5 77          3909   	ld (hl),a
0419C6             3910   
0419C6 C5          3911   	push bc
0419C7             3912   	vdu 19
0419C7 3E 13       0001M  		LD	A, function
0419C9 49 D7       0002M  		RST.LIS	10h
0419CB C1          3913   	pop bc
0419CC 78          3914   	ld a,b
0419CD             3915   	vdu_a
0419CD 49 D7       0001M  		RST.LIS	10h
0419CF             3916   	vdu 255
0419CF 3E FF       0001M  		LD	A, function
0419D1 49 D7       0002M  		RST.LIS	10h
0419D3             3917   
0419D3 21 59 1B 04 3918   	ld hl,red_tint
0419D7 7E          3919   	ld a,(hl)
0419D8             3920   	vdu_a
0419D8 49 D7       0001M  		RST.LIS	10h
0419DA             3921   
0419DA 21 5A 1B 04 3922   	ld hl,green_tint
0419DE 7E          3923   	ld a,(hl)
0419DF             3924   	vdu_a
0419DF 49 D7       0001M  		RST.LIS	10h
0419E1             3925   
0419E1 21 5B 1B 04 3926   	ld hl,blue_tint
0419E5 7E          3927   	ld a,(hl)
0419E6             3928   	vdu_a
0419E6 49 D7       0001M  		RST.LIS	10h
0419E8             3929   
0419E8 E1          3930   	pop hl
0419E9 D1          3931   	pop de
0419EA C1          3932   	pop bc
0419EB F1          3933   	pop af
0419EC C9          3934   	ret
0419ED             3935   
0419ED             3936   ; read rgb tints for the color in b
0419ED             3937   fn_get_color:
0419ED C5          3938   	push bc
0419EE             3939   
0419EE             3940   	; point to palette rgb color
0419EE 21 D6 42 04 3941   	ld hl,rgb_palette
0419F2 11 00 00 00 3942   	ld de,#000000
0419F6 58          3943   	ld e,b
0419F7 16 03       3944   	ld d,3
0419F9 ED 5C       3945   	mlt de
0419FB 19          3946   	add hl,de ; hl -> rgb colors
0419FC             3947   
0419FC             3948   	; store rgb tints
0419FC 11 59 1B 04 3949   	ld de,red_tint
041A00 7E          3950   	ld a,(hl)
041A01 12          3951   	ld (de),a
041A02 23          3952   	inc hl
041A03 11 5A 1B 04 3953   	ld de,green_tint
041A07 7E          3954   	ld a,(hl)
041A08 12          3955   	ld (de),a
041A09 23          3956   	inc hl
041A0A 11 5B 1B 04 3957   	ld de,blue_tint
041A0E 7E          3958   	ld a,(hl)
041A0F 12          3959   	ld (de),a
041A10             3960   
041A10 21 59 1B 04 3961   	ld hl,red_tint
041A14 4E          3962   	ld c,(hl)
041A15 21 5A 1B 04 3963   	ld hl,green_tint
041A19 5E          3964   	ld e,(hl)
041A1A 21 5B 1B 04 3965   	ld hl,blue_tint
041A1E 7E          3966   	ld a,(hl)
041A1F 6F          3967   	ld l,a
041A20             3968   
041A20 C1          3969   	pop bc
041A21 C9          3970   	ret
041A22             3971   
041A22             3972   ;======================================================================
041A22             3973   
041A22             3974   ; coordinates for rectangles
041A22             3975   x1:
041A22 00 00       3976   	dw $0000
041A24             3977   y1:
041A24 00 00       3978   	dw $0000
041A26             3979   x2:
041A26 00 00       3980   	dw $0000
041A28             3981   y2:
041A28 00 00       3982   	dw $0000
041A2A             3983   
041A2A             3984   ; coordinates of the edited sprite
041A2A             3985   xs1:
041A2A 5F 00       3986   	dw 95
041A2C             3987   ys1:
041A2C 37 00       3988   	dw 55
041A2E             3989   xs2:
041A2E E0 00       3990   	dw 224
041A30             3991   ys2:
041A30 B8 00       3992   	dw 184
041A32             3993   
041A32             3994   ; coordinates of active pixels to draw
041A32             3995   xpix:
041A32 00          3996   	db 0
041A33             3997   ypix:
041A33 00          3998   	db 0
041A34             3999   
041A34             4000   ; memorized coordinates of active pixels to draw
041A34             4001   memxpix:
041A34 00          4002   	db 0
041A35             4003   memypix:
041A35 00          4004   	db 0
041A36             4005   
041A36             4006   ; width of a pixel in the sprite
041A36             4007   pixel_width:
041A36 00          4008   	db 0
041A37             4009   
041A37             4010   ; sprite size, in resized pixels
041A37             4011   spr_size:
041A37 00          4012   	db 0
041A38             4013   
041A38             4014   ; pen color (0-63)
041A38             4015   current_pen:
041A38 00          4016   	db 0
041A39             4017   
041A39             4018   ; texts for 1st menu
041A39             4019   title:
041A39 53 50 52 2D 4020   	db "SPR-EDIT",0
       45 44 49 54 
       00          
041A42             4021   
041A42             4022   menu1:
041A42 46 31 2E 20 4023   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
041A51             4024   menu2:
041A51 46 32 2E 20 4025   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041A60             4026   menu3:
041A60 46 33 2E 20 4027   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
041A71             4028   menu4:
041A71 46 34 2E 20 4029   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
041A82             4030   
041A82             4031   ; descriptions of sprites
041A82             4032   spr_descr:
041A82 46 72 61 6D 4033   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041A8C             4034   spr_descr1:
041A8C 34 78 34 20 4035   	db "4x4  ",0
       20 00       
041A92             4036   spr_descr2:
041A92 38 78 38 20 4037   	db "8x8  ",0
       20 00       
041A98             4038   spr_descr3:
041A98 31 36 78 31 4039   	db "16x16",0
       36 00       
041A9E             4040   spr_descr4:
041A9E 33 32 78 33 4041   	db "32x32",0
       32 00       
041AA4             4042   
041AA4             4043   ; label before filename
041AA4             4044   filename_label:
041AA4 46 69 6C 65 4045   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041AAE             4046   
041AAE             4047   ; filename without extension
041AAE             4048   filename:
041AAE             4049   	ds 17
041ABF             4050   
041ABF             4051   sprite_path:
041ABF 73 70 72 69 4052   	db "sprites",0
       74 65 73 00 
041AC7             4053   
041AC7             4054   palette_path:
041AC7 70 61 6C 65 4055   	db "palettes",0
       74 74 65 73 
       00          
041AD0             4056   
041AD0             4057   back_path:
041AD0 2E 2E 00    4058   	db "..",0
041AD3             4059   
041AD3             4060   ; single space char to print
041AD3             4061   spacechar:
041AD3 20 00       4062   	db " ",0
041AD5             4063   
041AD5             4064   ; spaces to remove filename label
041AD5             4065   void_filename:
041AD5 20 20 20 20 4066   	db "                         ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041AEF             4067   
041AEF             4068   ; file error message
041AEF             4069   file_error:
041AEF 46 69 6C 65 4070   	db "File error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B09             4071   
041B09             4072   ; folder error message
041B09             4073   folder_error:
041B09 46 6F 6C 64 4074   	db "Folder error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B23             4075   
041B23             4076   ; header error message
041B23             4077   header_error:
041B23 48 65 61 64 4078   	db "Header error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B3D             4079   
041B3D             4080   ; data error message
041B3D             4081   data_error:
041B3D 44 61 74 61 4082   	db "Data error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B57             4083   
041B57             4084   ; number of colors
041B57             4085   colors_count:
041B57 00          4086   	db 0
041B58             4087   
041B58             4088   ; real number of colors
041B58             4089   new_colors_count:
041B58 00          4090   	db 0
041B59             4091   
041B59             4092   red_tint:
041B59 00          4093   	db 0
041B5A             4094   
041B5A             4095   green_tint:
041B5A 00          4096   	db 0
041B5B             4097   
041B5B             4098   blue_tint:
041B5B 00          4099   	db 0
041B5C             4100   
041B5C             4101   error_flag:
041B5C 00          4102   	db 0
041B5D             4103   
041B5D             4104   ; current frame
041B5D             4105   current_frame:
041B5D 00          4106   	db 0
041B5E             4107   
041B5E             4108   ; frames count
041B5E             4109   frames_count:
041B5E 00          4110   	db 0
041B5F             4111   
041B5F             4112   current_frame_ascii:
041B5F 30 00       4113   	db '0',0
041B61             4114   
041B61             4115   frames_count_ascii:
041B61 30 00       4116   	db '0',0
041B63             4117   
041B63             4118   ; keycode, keydown & keymods are stored here
041B63             4119   keydata:
041B63 00 00 00    4120   	db 0,0,0
041B66             4121   
041B66             4122   ; buffer for the current sprite
041B66             4123   sprite_buffer:
041B66             4124   	ds BUFFER_SIZE
043B66             4125   
043B66             4126   header_buffer:
043B66             4127   	ds HEADER_BUFFER_SIZE
043B76             4128   
043B76             4129   color_buffer:
043B76 00 00 00    4130   	db 0,0,0
043B79             4131   
043B79             4132   palette_buffer:
043B79             4133   	ds MAX_PAL_DATA + 1
043EBE             4134   
043EBE             4135   temp_chars_buffer:
043EBE 00 00 00 00 4136   	db 0,0,0,0
043EC2             4137   
043EC2             4138   header:
043EC2 4A 41 53 43 4139   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043ECC 30 31 30 30 4140   	db "0100",13,10
       0D 0A       
043ED2             4141   
043ED2             4142   ; buffer to perform some operations
043ED2             4143   swap_sprite_buffer:
043ED2             4144   	ds ONE_FRAME_BUFFER_SIZE
0442D2             4145   
0442D2             4146   asm_line:
0442D2 44 42 20    4147   	DB "DB "
0442D5             4148   
0442D5             4149   asm_line_length:
0442D5 03          4150   	DB 3
0442D6             4151   
0442D6             4152   rgb_palette:
0442D6 00 00 00    4153   	db $00,$00,$00
0442D9 AA 00 00    4154   	db $AA,$00,$00
0442DC 00 AA 00    4155   	db $00,$AA,$00
0442DF AA AA 00    4156   	db $AA,$AA,$00
0442E2 00 00 AA    4157   	db $00,$00,$AA
0442E5 AA 00 AA    4158   	db $AA,$00,$AA
0442E8 00 AA AA    4159   	db $00,$AA,$AA
0442EB AA AA AA    4160   	db $AA,$AA,$AA
0442EE             4161   
0442EE 55 55 55    4162   	db $55,$55,$55
0442F1 FF 00 00    4163   	db $FF,$00,$00
0442F4 00 FF 00    4164   	db $00,$FF,$00
0442F7 FF FF 00    4165   	db $FF,$FF,$00
0442FA 00 00 FF    4166   	db $00,$00,$FF
0442FD FF 00 FF    4167   	db $FF,$00,$FF
044300 00 FF FF    4168   	db $00,$FF,$FF
044303 FF FF FF    4169   	db $FF,$FF,$FF
044306             4170   
044306 00 00 55    4171   	db $00,$00,$55
044309 00 55 00    4172   	db $00,$55,$00
04430C 00 55 55    4173   	db $00,$55,$55
04430F 00 55 AA    4174   	db $00,$55,$AA
044312 00 55 FF    4175   	db $00,$55,$FF
044315 00 AA 55    4176   	db $00,$AA,$55
044318 00 AA FF    4177   	db $00,$AA,$FF
04431B 00 FF 55    4178   	db $00,$FF,$55
04431E             4179   
04431E 00 FF AA    4180   	db $00,$FF,$AA
044321 55 00 00    4181   	db $55,$00,$00
044324 55 00 55    4182   	db $55,$00,$55
044327 55 00 AA    4183   	db $55,$00,$AA
04432A 55 00 FF    4184   	db $55,$00,$FF
04432D 55 55 00    4185   	db $55,$55,$00
044330 55 55 AA    4186   	db $55,$55,$AA
044333 55 55 FF    4187   	db $55,$55,$FF
044336             4188   
044336 55 AA 00    4189   	db $55,$AA,$00
044339 55 AA 55    4190   	db $55,$AA,$55
04433C 55 AA AA    4191   	db $55,$AA,$AA
04433F 55 AA FF    4192   	db $55,$AA,$FF
044342 55 FF 00    4193   	db $55,$FF,$00
044345 55 FF 55    4194   	db $55,$FF,$55
044348 55 FF AA    4195   	db $55,$FF,$AA
04434B 55 FF FF    4196   	db $55,$FF,$FF
04434E             4197   
04434E AA 00 55    4198   	db $AA,$00,$55
044351 AA 00 FF    4199   	db $AA,$00,$FF
044354 AA 55 00    4200   	db $AA,$55,$00
044357 AA 55 55    4201   	db $AA,$55,$55
04435A AA 55 AA    4202   	db $AA,$55,$AA
04435D AA 55 FF    4203   	db $AA,$55,$FF
044360 AA AA 55    4204   	db $AA,$AA,$55
044363 AA AA FF    4205   	db $AA,$AA,$FF
044366             4206   
044366 AA FF 00    4207   	db $AA,$FF,$00
044369 AA FF 55    4208   	db $AA,$FF,$55
04436C AA FF AA    4209   	db $AA,$FF,$AA
04436F AA FF FF    4210   	db $AA,$FF,$FF
044372 FF 00 55    4211   	db $FF,$00,$55
044375 FF 00 AA    4212   	db $FF,$00,$AA
044378 FF 55 00    4213   	db $FF,$55,$00
04437B FF 55 55    4214   	db $FF,$55,$55
04437E             4215   
04437E FF 55 AA    4216   	db $FF,$55,$AA
044381 FF 55 FF    4217   	db $FF,$55,$FF
044384 FF AA 00    4218   	db $FF,$AA,$00
044387 FF AA 55    4219   	db $FF,$AA,$55
04438A FF AA AA    4220   	db $FF,$AA,$AA
04438D FF AA FF    4221   	db $FF,$AA,$FF
044390 FF FF 55    4222   	db $FF,$FF,$55
044393 FF FF AA    4223   	db $FF,$FF,$AA
044396             4224   
044396             4225   ; sprite structure:
044396             4226   ; =================
044396             4227   ; colors_count  :   byte
044396             4228   ; frames count	:	byte
044396             4229   ; spr size		:	byte
044396             4230   ; data			:   width x height bytes of colors
044396             4231   
044396             4232   ; ===============================================
044396             4233   
044396             4234   ;=================
044396             4235   ; Debug functions
044396             4236   ;=================
044396             4237   ; A = byte to debug
044396             4238   debug_byte:
044396 F5          4239   	PUSH AF
044397 C5          4240   	PUSH BC
044398 D5          4241   	PUSH DE
044399 E5          4242   	PUSH HL
04439A 21 00 00 00 4243   	LD HL,$000000
04439E 6F          4244   	LD L,A
04439F 11 DB 43 04 4245   	LD DE,debug_text
0443A3 D5          4246   	PUSH DE
0443A4 CD E1 43 04 4247   	CALL num2dec
0443A8 E1          4248   	POP HL
0443A9 23          4249   	INC HL
0443AA 23          4250   	INC HL
0443AB 01 03 00 00 4251   	LD BC,3
0443AF 3E 00       4252   	LD A,0
0443B1 49 DF       4253   	RST.LIS $18
0443B3 E1          4254   	POP HL
0443B4 D1          4255   	POP DE
0443B5 C1          4256   	POP BC
0443B6 F1          4257   	POP AF
0443B7 C9          4258   	RET
0443B8             4259   
0443B8             4260   ; HL = word to debug
0443B8             4261   debug_word:
0443B8 F5          4262   	PUSH AF
0443B9 C5          4263   	PUSH BC
0443BA D5          4264   	PUSH DE
0443BB E5          4265   	PUSH HL
0443BC 11 00 00 00 4266   	LD DE,$000000 ; remove HLU
0443C0 5D          4267   	LD E,L
0443C1 54          4268   	LD D,H
0443C2 D5          4269   	PUSH DE
0443C3 E1          4270   	POP HL
0443C4 11 DB 43 04 4271   	LD DE,debug_text
0443C8 D5          4272   	PUSH DE
0443C9 CD E1 43 04 4273   	CALL num2dec
0443CD E1          4274   	POP HL
0443CE 01 05 00 00 4275   	LD BC,5
0443D2 3E 00       4276   	LD A,0
0443D4 49 DF       4277   	RST.LIS $18
0443D6 E1          4278   	POP HL
0443D7 D1          4279   	POP DE
0443D8 C1          4280   	POP BC
0443D9 F1          4281   	POP AF
0443DA C9          4282   	RET
0443DB             4283   
0443DB             4284   debug_text:
0443DB             4285   	DS 6,0
0443E1             4286   
0443E1             4287   ; 16 bits number to string
0443E1             4288   num2dec:
0443E1 01 F0 D8 FF 4289   	LD BC,-10000
0443E5 CD 02 44 04 4290   	CALL num1
0443E9 01 18 FC FF 4291   	LD BC,-1000
0443ED CD 02 44 04 4292   	CALL num1
0443F1 01 9C FF FF 4293   	LD BC,-100
0443F5 CD 02 44 04 4294   	CALL num1
0443F9 01 F6 FF FF 4295   	LD BC,-10
0443FD CD 02 44 04 4296   	CALL num1
044401 48          4297   	LD C,B
044402             4298   
044402 3E 2F       4299   num1: LD A,'0'-1
044404 3C          4300   num2: INC A
044405 09          4301   	ADD HL,BC
044406 38 FC       4302   	JR C,num2
044408 ED 42       4303   	SBC HL,BC
04440A             4304   
04440A 12          4305   	LD (DE),A
04440B 13          4306   	INC DE
04440C C9          4307   	RET
