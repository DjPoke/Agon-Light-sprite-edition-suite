PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023-2024
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   
040045             0022   MAX_FRAMES:			equ 8
040045             0023   
040045             0024   COLOR_WHITE:		equ 15
040045             0025   COLOR_BLACK:		equ 0
040045             0026   
040045             0027   TITLE_X: 	equ 17
040045             0028   TITLE_Y: 	equ 2
040045             0029   MENU_X: 	equ 13
040045             0030   MENU1_Y: 	equ 8
040045             0031   MENU2_Y: 	equ 12
040045             0032   MENU3_Y: 	equ 16
040045             0033   MENU4_Y: 	equ 20
040045             0034   MENU5_Y: 	equ 24
040045             0035   FILENAME_X: equ 7
040045             0036   FILENAME_Y: equ 24
040045             0037   
040045             0038   SPR44: 		equ 4
040045             0039   SPR88: 		equ 8
040045             0040   SPR1616: 	equ 16
040045             0041   SPR3232: 	equ 32
040045             0042   
040045             0043   SPR44_width: 	equ 32
040045             0044   SPR88_width: 	equ 16
040045             0045   SPR1616_width: 	equ 8
040045             0046   SPR3232_width: 	equ 4
040045             0047   
040045             0048   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0049   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0050   
040045             0051   FILENAME_LENGTH:	equ 16
040045             0052   
040045             0053   HEADER_BUFFER_SIZE:		equ 16
040045             0054   
040045             0055   SLOWDOWN_DELAY:	equ 20
040045             0056   
040045             0057   KEY_SPACE: equ -99 ; draw with color
040045             0058   KEY_UP: equ -58 ; move
040045             0059   KEY_DOWN: equ -42
040045             0060   KEY_LEFT: equ -26
040045             0061   KEY_RIGHT: equ -122
040045             0062   KEY_DELETE: equ -90 ; remove color with black
040045             0063   KEY_N: equ -86 ; add a new void frame
040045             0064   KEY_C: equ -83 ; copy current frame to a new frame
040045             0065   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0066   KEY_PGUP: equ -64 ; select frame
040045             0067   KEY_PGDOWN: equ -79
040045             0068   KEY_L: equ -87 ; load sprite
040045             0069   KEY_S: equ -82 ; save sprite
040045             0070   KEY_E: equ -35 ; export sprite as assembler data
040045             0071   KEY_R: equ -52 ; rotate frame clockwise
040045             0072   KEY_F: equ -68 ; flip frame horizontally
040045             0073   KEY_M: equ -102 ; mirror frame vertically
040045             0074   KEY_ESCAPE: equ -113
040045             0075   KEY_F1: equ -114 ; select 4x4 sprite
040045             0076   KEY_F2: equ -115 ; select 8x8 sprite
040045             0077   KEY_F3: equ -116 ; select 16x16 sprite
040045             0078   KEY_F4: equ -21 ; select 32x32 sprite
040045             0079   KEY_RETURN: equ -74 ; floodfill
040045             0080   
040045             0081   ; play mode:
040045             0082   KEY_P:	equ -56 ; switch to play mode
040045             0083   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0084   
040045             0085   ; palette mode:
040045             0086   KEY_TAB: equ -97 ; switch to palette mode
040045             0087   KEY_1:	equ -49 ; red+
040045             0088   KEY_2:	equ -50 ; green+
040045             0089   KEY_3:	equ -18 ; blue+
040045             0090   KEY_4:	equ -19 ; red-
040045             0091   KEY_5:	equ -20 ; green-
040045             0092   KEY_6:	equ -53; blue-
040045             0093   KEY_7:	equ -37 ; reset color to black
040045             0094   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0095   ; KEY_S: save palette file
040045             0096   
040045             0097   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0098   MAX_PAL_DATA_HI: equ 03h
040045             0099   MAX_PAL_DATA_LO: equ 44h
040045             0100   
040045             0101   BITLOOKUP:
040045 01 02 04 08 0102   	DB 01h,02h,04h,08h
040049 10 20 40 80 0103   	DB 10h,20h,40h,80h
04004D             0104   
04004D             0105   ;======================================================================
04004D             0106   start:
04004D F5          0107   	push af
04004E C5          0108   	push bc
04004F D5          0109   	push de
040050 DD E5       0110   	push ix
040052 FD E5       0111   	push iy
040054             0112   
040054             0113   	; set mode 8 (320x240x64)
040054             0114   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0115   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0116   
04005C             0117   	; disable logical scale coordinates system
04005C             0118   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0119   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0120   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0121   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0122   
04006C             0123   	; set text colors
04006C             0124   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0125   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0126   
040074             0127   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0128   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0129   
04007C             0130   	; set graphics pen
04007C             0131   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0132   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0133   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0134   
040088             0135   	; hide cursor
040088             0136   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0137   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0138   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0139   
040094             0140   	; store coordinates
040094 DD 21 20 1A 0141   	ld ix,x1
       04          
040099 21 00 00 00 0142   	ld hl,0
04009D DD 75 00    0143   	ld (ix+0),l
0400A0 DD 74 01    0144   	ld (ix+1),h
0400A3             0145   
0400A3 DD 21 22 1A 0146   	ld ix,y1
       04          
0400A8 21 00 00 00 0147   	ld hl,0
0400AC DD 75 00    0148   	ld (ix+0),l
0400AF DD 74 01    0149   	ld (ix+1),h
0400B2             0150   
0400B2 DD 21 24 1A 0151   	ld ix,x2
       04          
0400B7 21 3F 01 00 0152   	ld hl,319
0400BB DD 75 00    0153   	ld (ix+0),l
0400BE DD 74 01    0154   	ld (ix+1),h
0400C1             0155   
0400C1 DD 21 26 1A 0156   	ld ix,y2
       04          
0400C6 21 EF 00 00 0157   	ld hl,239
0400CA DD 75 00    0158   	ld (ix+0),l
0400CD DD 74 01    0159   	ld (ix+1),h
0400D0             0160   
0400D0             0161   	; draw the border rectangle
0400D0 CD 2A 0C 04 0162   	call fn_rect
0400D4             0163   
0400D4             0164   	; locate x,y
0400D4             0165   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0166   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0167   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0168   
0400E0             0169   	; print text
0400E0 21 37 1A 04 0170   	ld hl,title
0400E4 01 00 00 00 0171   	ld bc,0
0400E8 AF          0172   	xor a
0400E9 49 DF       0173   	rst.lis $18
0400EB             0174   
0400EB             0175   	; locate x,y
0400EB             0176   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0177   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0178   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0179   
0400F7             0180   	; print text
0400F7 21 40 1A 04 0181   	ld hl,menu1
0400FB 01 00 00 00 0182   	ld bc,0
0400FF AF          0183   	xor a
040100 49 DF       0184   	rst.lis $18
040102             0185   
040102             0186   	; locate x,y
040102             0187   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0188   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0189   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0190   
04010E             0191   	; print text
04010E 21 4F 1A 04 0192   	ld hl,menu2
040112 01 00 00 00 0193   	ld bc,0
040116 AF          0194   	xor a
040117 49 DF       0195   	rst.lis $18
040119             0196   
040119             0197   	; locate x,y
040119             0198   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0199   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0200   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0201   
040125             0202   	; print text
040125 21 5E 1A 04 0203   	ld hl,menu3
040129 01 00 00 00 0204   	ld bc,0
04012D AF          0205   	xor a
04012E 49 DF       0206   	rst.lis $18
040130             0207   
040130             0208   	; locate x,y
040130             0209   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0210   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0211   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0212   
04013C             0213   	; print text
04013C 21 6F 1A 04 0214   	ld hl,menu4
040140 01 00 00 00 0215   	ld bc,0
040144 AF          0216   	xor a
040145 49 DF       0217   	rst.lis $18
040147             0218   
040147             0219   ; menu loop
040147             0220   menu_loop:
040147 21 8F FF FF 0221   	ld hl,KEY_ESCAPE
04014B CD C0 18 04 0222   	call fn_inkey
04014F FE 01       0223   	CP 1
040151 CA 06 0C 04 0224   	jp z,exit_program
040155             0225   
040155 21 8E FF FF 0226   	ld hl,KEY_F1
040159 CD C0 18 04 0227   	call fn_inkey
04015D FE 01       0228   	CP 1
04015F CA 91 01 04 0229   	jp z,ml_menu1
040163             0230   
040163 21 8D FF FF 0231   	ld hl,KEY_F2
040167 CD C0 18 04 0232   	call fn_inkey
04016B FE 01       0233   	CP 1
04016D CA 97 01 04 0234   	jp z,ml_menu2
040171             0235   
040171 21 8C FF FF 0236   	ld hl,KEY_F3
040175 CD C0 18 04 0237   	call fn_inkey
040179 FE 01       0238   	CP 1
04017B CA 9D 01 04 0239   	jp z,ml_menu3
04017F             0240   
04017F 21 EB FF FF 0241   	ld hl,KEY_F4
040183 CD C0 18 04 0242   	call fn_inkey
040187 FE 01       0243   	CP 1
040189 CA A3 01 04 0244   	jp z,ml_menu4
04018D             0245   
04018D C3 47 01 04 0246   	jp menu_loop
040191             0247   
040191             0248   ml_menu1:
040191 3E 04       0249   	ld a,SPR44
040193 16 20       0250   	ld d,SPR44_width
040195 18 10       0251   	jr exit_menu_loop
040197             0252   
040197             0253   ml_menu2:
040197 3E 08       0254   	ld a,SPR88
040199 16 10       0255   	ld d,SPR88_width
04019B 18 0A       0256   	jr exit_menu_loop
04019D             0257   
04019D             0258   ml_menu3:
04019D 3E 10       0259   	ld a,SPR1616
04019F 16 08       0260   	ld d,SPR1616_width
0401A1 18 04       0261   	jr exit_menu_loop
0401A3             0262   
0401A3             0263   ml_menu4:
0401A3 3E 20       0264   	ld a,SPR3232
0401A5 16 04       0265   	ld d,SPR3232_width
0401A7             0266   
0401A7             0267   exit_menu_loop:
0401A7             0268   	; store edited sprite size
0401A7 21 35 1A 04 0269   	ld hl,spr_size
0401AB 77          0270   	ld (hl),a
0401AC 21 34 1A 04 0271   	ld hl,pixel_width
0401B0 72          0272   	ld (hl),d
0401B1             0273   
0401B1             0274   	; clear the text screen
0401B1             0275   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0276   
0401B5             0277   	; set colors count to max colors
0401B5 21 55 1B 04 0278   	ld hl,colors_count
0401B9 3E 40       0279   	ld a,MAX_COLORS
0401BB 77          0280   	ld (hl),a
0401BC             0281   
0401BC CD 03 19 04 0282   	call fn_draw_the_palette
0401C0             0283   
0401C0             0284   	; store coordinates
0401C0 DD 21 20 1A 0285   	ld ix,x1
       04          
0401C5 21 00 00 00 0286   	ld hl,0
0401C9 DD 75 00    0287   	ld (ix+0),l
0401CC DD 74 01    0288   	ld (ix+1),h
0401CF             0289   
0401CF DD 21 22 1A 0290   	ld ix,y1
       04          
0401D4 21 0B 00 00 0291   	ld hl,11
0401D8 DD 75 00    0292   	ld (ix+0),l
0401DB DD 74 01    0293   	ld (ix+1),h
0401DE             0294   
0401DE DD 21 24 1A 0295   	ld ix,x2
       04          
0401E3 21 3F 01 00 0296   	ld hl,319
0401E7 DD 75 00    0297   	ld (ix+0),l
0401EA DD 74 01    0298   	ld (ix+1),h
0401ED             0299   
0401ED DD 21 26 1A 0300   	ld ix,y2
       04          
0401F2 21 EF 00 00 0301   	ld hl,239
0401F6 DD 75 00    0302   	ld (ix+0),l
0401F9 DD 74 01    0303   	ld (ix+1),h
0401FC             0304   
0401FC             0305   	; draw the border rectangle
0401FC CD 2A 0C 04 0306   	call fn_rect
040200             0307   
040200             0308   	; store edited sprite coordinates
040200 DD 21 28 1A 0309   	ld ix,xs1
       04          
040205 FD 21 20 1A 0310   	ld iy,x1
       04          
04020A DD 6E 00    0311   	ld l,(ix+0)
04020D DD 66 01    0312   	ld h,(ix+1)
040210 FD 75 00    0313   	ld (iy+0),l
040213 FD 74 01    0314   	ld (iy+1),h
040216             0315   
040216 DD 21 2A 1A 0316   	ld ix,ys1
       04          
04021B FD 21 22 1A 0317   	ld iy,y1
       04          
040220 DD 6E 00    0318   	ld l,(ix+0)
040223 DD 66 01    0319   	ld h,(ix+1)
040226 FD 75 00    0320   	ld (iy+0),l
040229 FD 74 01    0321   	ld (iy+1),h
04022C             0322   
04022C DD 21 2C 1A 0323   	ld ix,xs2
       04          
040231 FD 21 24 1A 0324   	ld iy,x2
       04          
040236 DD 6E 00    0325   	ld l,(ix+0)
040239 DD 66 01    0326   	ld h,(ix+1)
04023C FD 75 00    0327   	ld (iy+0),l
04023F FD 74 01    0328   	ld (iy+1),h
040242             0329   
040242 DD 21 2E 1A 0330   	ld ix,ys2
       04          
040247 FD 21 26 1A 0331   	ld iy,y2
       04          
04024C DD 6E 00    0332   	ld l,(ix+0)
04024F DD 66 01    0333   	ld h,(ix+1)
040252 FD 75 00    0334   	ld (iy+0),l
040255 FD 74 01    0335   	ld (iy+1),h
040258             0336   
040258             0337   	; draw the sprite's border rectangle
040258 CD 2A 0C 04 0338   	call fn_rect
04025C             0339   
04025C             0340   	; update sprite size descriptions
04025C CD 5C 18 04 0341   	call fn_show_spr_descr
040260             0342   
040260             0343   ; initialize sprite vars
040260             0344   init_sprite_vars:
040260             0345   	; initialize coordinates before drawing the sprite
040260 DD 21 30 1A 0346   	ld ix,xpix
       04          
040265 AF          0347   	xor a
040266 DD 77 00    0348   	ld (ix+0),a ; xpix = 0
040269 DD 77 01    0349   	ld (ix+1),a	; ypix = 0
04026C DD 21 36 1A 0350   	ld ix,current_pen
       04          
040271 3E 0F       0351   	ld a,COLOR_WHITE
040273 DD 77 00    0352   	ld (ix+0),a ; current pen -> white
040276             0353   
040276             0354   	; set vars
040276 21 5B 1B 04 0355   	ld hl,current_frame
04027A AF          0356   	xor a
04027B 77          0357   	ld (hl),a
04027C 3C          0358   	inc a
04027D 21 5C 1B 04 0359   	ld hl,frames_count
040281 77          0360   	ld (hl),a
040282             0361   
040282             0362   	; fill buffers with zeros
040282 01 00 20 00 0363   	ld bc,BUFFER_SIZE
040286 21 64 1B 04 0364   	ld hl,sprite_buffer
04028A             0365   
04028A             0366   isv_fill_loop:
04028A AF          0367   	xor a
04028B 77          0368   	ld (hl),a
04028C 0B          0369   	dec bc
04028D 23          0370   	inc hl
04028E 78          0371   	ld a,b
04028F B1          0372   	or c
040290 FE 00       0373   	cp 0
040292 20 F6       0374   	jr nz,isv_fill_loop
040294             0375   
040294             0376   ; draw the pixel with a border
040294 CD B7 0D 04 0377   	call fn_draw_pixel_with_border
040298             0378   
040298             0379   ; draw sprite loop
040298             0380   draw_sprite_loop:
040298 21 9D FF FF 0381   	ld hl,KEY_SPACE
04029C CD C0 18 04 0382   	call fn_inkey
0402A0 FE 01       0383   	cp 1
0402A2 CC B4 03 04 0384   	call z,dsl_set_pen
0402A6             0385   
0402A6 21 C6 FF FF 0386   	ld hl,KEY_UP
0402AA CD C0 18 04 0387   	call fn_inkey
0402AE FE 01       0388   	cp 1
0402B0 CC D9 03 04 0389   	call z,dsl_up
0402B4             0390   
0402B4 21 D6 FF FF 0391   	ld hl,KEY_DOWN
0402B8 CD C0 18 04 0392   	call fn_inkey
0402BC FE 01       0393   	cp 1
0402BE CC 00 04 04 0394   	call z,dsl_down
0402C2             0395   
0402C2 21 E6 FF FF 0396   	ld hl,KEY_LEFT
0402C6 CD C0 18 04 0397   	call fn_inkey
0402CA FE 01       0398   	cp 1
0402CC CC 2C 04 04 0399   	call z,dsl_left
0402D0             0400   
0402D0 21 86 FF FF 0401   	ld hl,KEY_RIGHT
0402D4 CD C0 18 04 0402   	call fn_inkey
0402D8 FE 01       0403   	cp 1
0402DA CC 53 04 04 0404   	call z,dsl_right
0402DE             0405   
0402DE 21 A6 FF FF 0406   	ld hl,KEY_DELETE
0402E2 CD C0 18 04 0407   	call fn_inkey
0402E6 FE 01       0408   	cp 1
0402E8 CC C8 03 04 0409   	call z,dsl_reset_pen
0402EC             0410   
0402EC 21 9F FF FF 0411   	ld hl,KEY_TAB
0402F0 CD C0 18 04 0412   	call fn_inkey
0402F4 FE 01       0413   	cp 1
0402F6 CA 27 09 04 0414   	jp z,dsl_palette_tool
0402FA             0415   
0402FA 21 AA FF FF 0416   	ld hl,KEY_N
0402FE CD C0 18 04 0417   	call fn_inkey
040302 FE 01       0418   	cp 1
040304 CC CE 04 04 0419   	call z,dsl_add_frame
040308             0420   
040308 21 AD FF FF 0421   	ld hl,KEY_C
04030C CD C0 18 04 0422   	call fn_inkey
040310 FE 01       0423   	cp 1
040312 CC 65 05 04 0424   	call z,dsl_add_and_copy_frame
040316             0425   
040316 21 D0 FF FF 0426   	ld hl,KEY_BACKSPACE
04031A CD C0 18 04 0427   	call fn_inkey
04031E FE 01       0428   	cp 1
040320 CC CC 05 04 0429   	call z,dsl_delete_frame
040324             0430   
040324 21 C0 FF FF 0431   	ld hl,KEY_PGUP
040328 CD C0 18 04 0432   	call fn_inkey
04032C FE 01       0433   	cp 1
04032E CC C5 06 04 0434   	call z,dsl_next_frame
040332             0435   
040332 21 B1 FF FF 0436   	ld hl,KEY_PGDOWN
040336 CD C0 18 04 0437   	call fn_inkey
04033A FE 01       0438   	cp 1
04033C CC A6 06 04 0439   	call z,dsl_previous_frame
040340             0440   
040340 21 A9 FF FF 0441   	ld hl,KEY_L
040344 CD C0 18 04 0442   	call fn_inkey
040348 FE 01       0443   	cp 1
04034A CC 7F 04 04 0444   	call z,dsl_load_sprite
04034E             0445   
04034E 21 AE FF FF 0446   	ld hl,KEY_S
040352 CD C0 18 04 0447   	call fn_inkey
040356 FE 01       0448   	cp 1
040358 CC 9C 04 04 0449   	call z,dsl_save_sprite
04035C             0450   
04035C 21 DD FF FF 0451   	ld hl,KEY_E
040360 CD C0 18 04 0452   	call fn_inkey
040364 FE 01       0453   	cp 1
040366 CC B5 04 04 0454   	call z,dsl_export_sprite
04036A             0455   
04036A 21 CC FF FF 0456   	ld hl,KEY_R
04036E CD C0 18 04 0457   	call fn_inkey
040372 FE 01       0458   	cp 1
040374 CC EB 06 04 0459   	call z,dsl_rotate_frame
040378             0460   
040378 21 BC FF FF 0461   	ld hl,KEY_F
04037C CD C0 18 04 0462   	call fn_inkey
040380 FE 01       0463   	cp 1
040382 CC A0 07 04 0464   	call z,dsl_flip_frame
040386             0465   
040386 21 9A FF FF 0466   	ld hl,KEY_M
04038A CD C0 18 04 0467   	call fn_inkey
04038E FE 01       0468   	cp 1
040390 CC 07 08 04 0469   	call z,dsl_mirror_frame
040394             0470   
040394 21 B6 FF FF 0471   	ld hl,KEY_RETURN
040398 CD C0 18 04 0472   	call fn_inkey
04039C FE 01       0473   	cp 1
04039E CC 87 08 04 0474   	call z,dsl_flood_fill
0403A2             0475   
0403A2 21 8F FF FF 0476   	ld hl,KEY_ESCAPE
0403A6 CD C0 18 04 0477   	call fn_inkey
0403AA FE 01       0478   	cp 1
0403AC CA 06 0C 04 0479   	jp z,exit_program
0403B0             0480   
0403B0 C3 98 02 04 0481   	jp draw_sprite_loop
0403B4             0482   
0403B4             0483   ; set the pen of the current pixel
0403B4             0484   dsl_set_pen:
0403B4 CD E1 0D 04 0485   	call fn_get_pixel_color
0403B8 21 36 1A 04 0486   	ld hl,current_pen
0403BC BE          0487   	cp (hl)
0403BD C8          0488   	ret z
0403BE 7E          0489   	ld a,(hl)
0403BF CD 23 0E 04 0490   	call fn_set_pixel_color
0403C3 CD B7 0D 04 0491   	call fn_draw_pixel_with_border
0403C7 C9          0492   	ret
0403C8             0493   
0403C8             0494   ; reset the pen of the current pixel
0403C8             0495   dsl_reset_pen:
0403C8 CD E1 0D 04 0496   	call fn_get_pixel_color
0403CC FE 00       0497   	cp 0
0403CE C8          0498   	ret z
0403CF AF          0499   	xor a
0403D0 CD 23 0E 04 0500   	call fn_set_pixel_color
0403D4 CD B7 0D 04 0501   	call fn_draw_pixel_with_border
0403D8 C9          0502   	ret
0403D9             0503   
0403D9             0504   ; move pixel up
0403D9             0505   dsl_up:
0403D9 21 31 1A 04 0506   	ld hl,ypix
0403DD 7E          0507   	ld a,(hl)
0403DE FE 00       0508   	cp 0
0403E0 C8          0509   	ret z
0403E1             0510   
0403E1 21 9D FF FF 0511   	ld hl,KEY_SPACE
0403E5 CD C0 18 04 0512   	call fn_inkey
0403E9 FE 01       0513   	cp 1
0403EB CC B4 03 04 0514   	call z,dsl_set_pen
0403EF             0515   
0403EF CD CB 0D 04 0516   	call fn_draw_pixel_without_border
0403F3 CD 67 0E 04 0517   	call fn_move_up
0403F7 CD B7 0D 04 0518   	call fn_draw_pixel_with_border
0403FB CD 3B 18 04 0519   	call fn_slowdown
0403FF C9          0520   	ret
040400             0521   
040400             0522   ; move pixel down
040400             0523   dsl_down:
040400 21 35 1A 04 0524   	ld hl,spr_size
040404 56          0525   	ld d,(hl)
040405 15          0526   	dec d
040406             0527   
040406 21 31 1A 04 0528   	ld hl,ypix
04040A 7E          0529   	ld a,(hl)
04040B BA          0530   	cp d
04040C C8          0531   	ret z
04040D             0532   
04040D 21 9D FF FF 0533   	ld hl,KEY_SPACE
040411 CD C0 18 04 0534   	call fn_inkey
040415 FE 01       0535   	cp 1
040417 CC B4 03 04 0536   	call z,dsl_set_pen
04041B             0537   
04041B CD CB 0D 04 0538   	call fn_draw_pixel_without_border
04041F CD 6D 0E 04 0539   	call fn_move_down
040423 CD B7 0D 04 0540   	call fn_draw_pixel_with_border
040427 CD 3B 18 04 0541   	call fn_slowdown
04042B C9          0542   	ret
04042C             0543   
04042C             0544   ; move pixel left
04042C             0545   dsl_left:
04042C 21 30 1A 04 0546   	ld hl,xpix
040430 7E          0547   	ld a,(hl)
040431 FE 00       0548   	cp 0
040433 C8          0549   	ret z
040434             0550   
040434 21 9D FF FF 0551   	ld hl,KEY_SPACE
040438 CD C0 18 04 0552   	call fn_inkey
04043C FE 01       0553   	cp 1
04043E CC B4 03 04 0554   	call z,dsl_set_pen
040442             0555   
040442 CD CB 0D 04 0556   	call fn_draw_pixel_without_border
040446 CD 73 0E 04 0557   	call fn_move_left
04044A CD B7 0D 04 0558   	call fn_draw_pixel_with_border
04044E CD 3B 18 04 0559   	call fn_slowdown
040452 C9          0560   	ret
040453             0561   
040453             0562   ; move pixel right
040453             0563   dsl_right:
040453 21 35 1A 04 0564   	ld hl,spr_size
040457 56          0565   	ld d,(hl)
040458 15          0566   	dec d
040459             0567   
040459 21 30 1A 04 0568   	ld hl,xpix
04045D 7E          0569   	ld a,(hl)
04045E BA          0570   	cp d
04045F C8          0571   	ret z
040460             0572   
040460 21 9D FF FF 0573   	ld hl,KEY_SPACE
040464 CD C0 18 04 0574   	call fn_inkey
040468 FE 01       0575   	cp 1
04046A CC B4 03 04 0576   	call z,dsl_set_pen
04046E             0577   
04046E CD CB 0D 04 0578   	call fn_draw_pixel_without_border
040472 CD 79 0E 04 0579   	call fn_move_right
040476 CD B7 0D 04 0580   	call fn_draw_pixel_with_border
04047A CD 3B 18 04 0581   	call fn_slowdown
04047E C9          0582   	ret
04047F             0583   
04047F             0584   ; load a sprite
04047F             0585   dsl_load_sprite:
04047F 21 A9 FF FF 0586   	ld hl,KEY_L
040483 CD C0 18 04 0587   	call fn_inkey
040487 FE 00       0588   	cp 0
040489 20 F4       0589   	jr nz,dsl_load_sprite
04048B             0590   
04048B CD CB 0D 04 0591   	call fn_draw_pixel_without_border
04048F CD 55 13 04 0592   	call fn_load_sprite
040493 CD B2 17 04 0593   	call fn_refresh_sprite
040497 CD B7 0D 04 0594   	call fn_draw_pixel_with_border
04049B C9          0595   	ret
04049C             0596   
04049C             0597   ; save a sprite
04049C             0598   dsl_save_sprite:
04049C 21 AE FF FF 0599   	ld hl,KEY_S
0404A0 CD C0 18 04 0600   	call fn_inkey
0404A4 FE 00       0601   	cp 0
0404A6 20 F4       0602   	jr nz,dsl_save_sprite
0404A8             0603   
0404A8 CD CB 0D 04 0604   	call fn_draw_pixel_without_border
0404AC CD 84 14 04 0605   	call fn_save_sprite
0404B0 CD B2 17 04 0606   	call fn_refresh_sprite
0404B4 C9          0607   	ret
0404B5             0608   
0404B5             0609   dsl_export_sprite:
0404B5 21 DD FF FF 0610   	ld hl,KEY_E
0404B9 CD C0 18 04 0611   	call fn_inkey
0404BD FE 00       0612   	cp 0
0404BF 20 F4       0613   	jr nz,dsl_export_sprite
0404C1             0614   
0404C1 CD CB 0D 04 0615   	call fn_draw_pixel_without_border
0404C5 CD 8F 15 04 0616   	call fn_export_sprite
0404C9 CD B2 17 04 0617   	call fn_refresh_sprite
0404CD C9          0618   	ret
0404CE             0619   
0404CE             0620   
0404CE             0621   ; add a frame to the animation
0404CE             0622   dsl_add_frame:
0404CE 21 AA FF FF 0623   	ld hl,KEY_N
0404D2 CD C0 18 04 0624   	call fn_inkey
0404D6 FE 00       0625   	cp 0
0404D8 20 F4       0626   	jr nz,dsl_add_frame
0404DA             0627   
0404DA             0628   	; frames limit reached ? exit
0404DA 21 5C 1B 04 0629   	ld hl,frames_count
0404DE 7E          0630   	ld a,(hl)
0404DF FE 08       0631   	cp MAX_FRAMES
0404E1 C8          0632   	ret z
0404E2             0633   
0404E2             0634   	; get the number of frames to copy
0404E2 21 5C 1B 04 0635   	ld hl,frames_count
0404E6 7E          0636   	ld a,(hl)
0404E7 21 5B 1B 04 0637   	ld hl,current_frame
0404EB 46          0638   	ld b,(hl)
0404EC 90          0639   	sub b
0404ED 3D          0640   	dec a
0404EE             0641   
0404EE             0642   	; get sprsize² (length of a sprite, in bytes)
0404EE 21 35 1A 04 0643   	ld hl,spr_size
0404F2 11 00 00 00 0644   	ld de,$000000
0404F6 5E          0645   	ld e,(hl)
0404F7 56          0646   	ld d,(hl)
0404F8 ED 5C       0647   	mlt de ; DE = sprsize²
0404FA             0648   
0404FA             0649   	; prepare for the case we goto af_zap...
0404FA 21 64 1B 04 0650   	ld hl,sprite_buffer
0404FE             0651   
0404FE F5          0652   	push af
0404FF E5          0653   	push hl
040500 21 5B 1B 04 0654   	ld hl,current_frame
040504 7E          0655   	ld a,(hl)
040505 3C          0656   	inc a
040506 47          0657   	ld b,a
040507 E1          0658   	pop hl
040508 F1          0659   	pop af
040509             0660   
040509             0661   af_loop0:
040509 19          0662   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050A 10 FD       0663   	djnz af_loop0
04050C             0664   
04050C E5          0665   	push hl ; store HL = sprite buffer + sprsize²
04050D FE 00       0666   	cp 0
04050F CA 37 05 04 0667   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040513 E1          0668   	pop hl ; HL unused in this case
040514             0669   
040514 21 00 00 00 0670   	ld hl,$000000 ; HL is 0 to store the result
040518 47          0671   	ld b,a ; B = frames to copy
040519             0672   
040519             0673   ; multiply number of frames to copy by sprsize²
040519             0674   af_loop1:
040519 19          0675   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051A 10 FD       0676   	djnz af_loop1
04051C             0677   
04051C E5          0678   	push hl
04051D C1          0679   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04051E             0680   
04051E 21 5B 1B 04 0681   	ld hl,current_frame
040522 7E          0682   	ld a,(hl)
040523 3C          0683   	inc a
040524 21 64 1B 04 0684   	ld hl,sprite_buffer
040528             0685   
040528 C5          0686   	push bc
040529 47          0687   	ld b,a
04052A             0688   
04052A             0689   af_loop2:
04052A 19          0690   	add hl,de ; HL = sprite buffer + length to copy
04052B 10 FD       0691   	djnz af_loop2
04052D             0692   
04052D C1          0693   	pop bc
04052E             0694   
04052E E5          0695   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04052F             0696   
04052F 09          0697   	add hl,bc
040530 2B          0698   	dec hl ; HL = end address to copy to end target address
040531             0699   
040531 E5          0700   	push hl
040532 19          0701   	add hl,de
040533 EB          0702   	ex de,hl ; DE = end target address
040534 E1          0703   	pop hl
040535             0704   
040535 ED B8       0705   	lddr
040537             0706   
040537             0707   af_zap:
040537             0708   	; multiply number of frames to copy by sprsize²
040537 21 35 1A 04 0709   	ld hl,spr_size
04053B 01 00 00 00 0710   	ld bc,$000000
04053F 4E          0711   	ld c,(hl)
040540 46          0712   	ld b,(hl)
040541 ED 4C       0713   	mlt bc ; BC = sprsize²
040543             0714   
040543 E1          0715   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040544             0716   
040544             0717   ; fill frame with 0 color
040544             0718   af_loop3:
040544 AF          0719   	xor a
040545 77          0720   	ld (hl),a
040546 23          0721   	inc hl
040547 0B          0722   	dec bc
040548 78          0723   	ld a,b
040549 B1          0724   	or c
04054A FE 00       0725   	cp 0
04054C 20 F6       0726   	jr nz,af_loop3
04054E             0727   
04054E             0728   	; increment the frames count and the current frame values
04054E 21 5C 1B 04 0729   	ld hl,frames_count
040552 34          0730   	inc (hl)
040553 21 5B 1B 04 0731   	ld hl,current_frame
040557 34          0732   	inc (hl)
040558             0733   
040558 CD F2 17 04 0734   	call fn_change_frame
04055C CD 17 18 04 0735   	call fn_change_frames_count
040560 CD B2 17 04 0736   	call fn_refresh_sprite
040564 C9          0737   	ret
040565             0738   
040565             0739   ; add a copy of the current frame to the animation
040565             0740   dsl_add_and_copy_frame:
040565 21 AD FF FF 0741   	ld hl,KEY_C
040569 CD C0 18 04 0742   	call fn_inkey
04056D FE 00       0743   	cp 0
04056F 20 F4       0744   	jr nz,dsl_add_and_copy_frame
040571             0745   
040571             0746   	; frames limit reached ? exit
040571 21 5C 1B 04 0747   	ld hl,frames_count
040575 7E          0748   	ld a,(hl)
040576 FE 08       0749   	cp MAX_FRAMES
040578 C8          0750   	ret z
040579             0751   
040579             0752   	; get the number of frames to copy
040579 21 5C 1B 04 0753   	ld hl,frames_count
04057D 7E          0754   	ld a,(hl)
04057E 21 5B 1B 04 0755   	ld hl,current_frame
040582 46          0756   	ld b,(hl)
040583 90          0757   	sub b
040584             0758   
040584             0759   	; get sprsize² (length of a sprite, in bytes)
040584 21 35 1A 04 0760   	ld hl,spr_size
040588 11 00 00 00 0761   	ld de,$000000
04058C 5E          0762   	ld e,(hl)
04058D 56          0763   	ld d,(hl)
04058E ED 5C       0764   	mlt de ; DE = sprsize²
040590             0765   
040590 21 00 00 00 0766   	ld hl,$000000 ; HL is 0 to store the result
040594 47          0767   	ld b,a ; B = frames to copy
040595             0768   
040595             0769   ; multiply number of frames to copy by sprsize²
040595             0770   aacf_loop1:
040595 19          0771   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040596 10 FD       0772   	djnz aacf_loop1
040598             0773   
040598 E5          0774   	push hl
040599 C1          0775   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059A             0776   
04059A 21 5B 1B 04 0777   	ld hl,current_frame
04059E 7E          0778   	ld a,(hl)
04059F 21 64 1B 04 0779   	ld hl,sprite_buffer
0405A3 FE 00       0780   	cp 0
0405A5 28 06       0781   	jr z,aacf_loop_end2
0405A7             0782   
0405A7 C5          0783   	push bc
0405A8 47          0784   	ld b,a
0405A9             0785   
0405A9             0786   aacf_loop2:
0405A9 19          0787   	add hl,de ; HL = sprite buffer + length to copy
0405AA 10 FD       0788   	djnz aacf_loop2
0405AC             0789   
0405AC C1          0790   	pop bc
0405AD             0791   
0405AD             0792   aacf_loop_end2:
0405AD 09          0793   	add hl,bc
0405AE 2B          0794   	dec hl ; HL = end address to copy to end target address
0405AF             0795   
0405AF E5          0796   	push hl
0405B0 19          0797   	add hl,de
0405B1 EB          0798   	ex de,hl ; DE = end target address
0405B2 E1          0799   	pop hl
0405B3             0800   
0405B3 ED B8       0801   	lddr
0405B5             0802   
0405B5             0803   	; increment the frames count and the current frame values
0405B5 21 5C 1B 04 0804   	ld hl,frames_count
0405B9 34          0805   	inc (hl)
0405BA 21 5B 1B 04 0806   	ld hl,current_frame
0405BE 34          0807   	inc (hl)
0405BF             0808   
0405BF CD F2 17 04 0809   	call fn_change_frame
0405C3 CD 17 18 04 0810   	call fn_change_frames_count
0405C7 CD B2 17 04 0811   	call fn_refresh_sprite
0405CB C9          0812   	ret
0405CC             0813   
0405CC             0814   ; delete last frame from animation
0405CC             0815   dsl_delete_frame:
0405CC 21 D0 FF FF 0816   	ld hl,KEY_BACKSPACE
0405D0 CD C0 18 04 0817   	call fn_inkey
0405D4 FE 00       0818   	cp 0
0405D6 20 F4       0819   	jr nz,dsl_delete_frame
0405D8             0820   
0405D8             0821   	; delete current selected frame
0405D8 21 35 1A 04 0822   	ld hl,spr_size
0405DC 01 00 00 00 0823   	ld bc,$000000
0405E0 4E          0824   	ld c,(hl)
0405E1 46          0825   	ld b,(hl)
0405E2 ED 4C       0826   	mlt bc ; BC = sprsize²
0405E4 21 5B 1B 04 0827   	ld hl,current_frame
0405E8 7E          0828   	ld a,(hl) ; A = current frame
0405E9 21 64 1B 04 0829   	ld hl,sprite_buffer ; HL = sprite buffer
0405ED C5          0830   	push bc
0405EE FE 00       0831   	cp 0
0405F0 28 06       0832   	jr z,df_loop2
0405F2             0833   
0405F2             0834   df_loop1:
0405F2 09          0835   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F3 3D          0836   	dec a
0405F4 FE 00       0837   	cp 0
0405F6 20 FA       0838   	jr nz,df_loop1
0405F8             0839   
0405F8             0840   ; clear the current frame
0405F8             0841   df_loop2:
0405F8 AF          0842   	xor a
0405F9 77          0843   	ld (hl),a
0405FA 23          0844   	inc hl
0405FB 0B          0845   	dec bc
0405FC 78          0846   	ld a,b
0405FD B1          0847   	or c
0405FE FE 00       0848   	cp 0
040600 20 F6       0849   	jr nz,df_loop2
040602             0850   
040602             0851   	; current frame + 1 = frames count ?
040602 E5          0852   	push hl
040603 21 5B 1B 04 0853   	ld hl,current_frame
040607 5E          0854   	ld e,(hl)
040608 1C          0855   	inc e
040609 21 5C 1B 04 0856   	ld hl,frames_count
04060D 7E          0857   	ld a,(hl)
04060E BB          0858   	cp e
04060F E1          0859   	pop hl
040610 C1          0860   	pop bc
040611 CA 8A 06 04 0861   	jp z,df_exit
040615             0862   
040615 11 5C 1B 04 0863   	ld de,frames_count
040619 1A          0864   	ld a,(de) ; A = frames count
04061A E5          0865   	push hl
04061B 21 5B 1B 04 0866   	ld hl,current_frame
04061F 5E          0867   	ld e,(hl) ; E = current frame
040620 E1          0868   	pop hl
040621 93          0869   	sub e
040622 3D          0870   	dec a ; A = number of frames to copy back
040623             0871   
040623 EB          0872   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040624 21 00 00 00 0873   	ld hl,$000000
040628 FE 00       0874   	cp 0 ; 0 frames to copy ?
04062A 28 06       0875   	jr z,df_exit_loop3
04062C             0876   
04062C             0877   df_loop3:
04062C 09          0878   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04062D 3D          0879   	dec a
04062E FE 00       0880   	cp 0
040630 20 FA       0881   	jr nz,df_loop3
040632             0882   
040632             0883   df_exit_loop3:
040632 E5          0884   	push hl
040633 C1          0885   	pop bc ; BC = total length of area to copy
040634 D5          0886   	push de
040635 E1          0887   	pop hl ; HL = DE = start of area to copy
040636             0888   
040636 C5          0889   	push bc
040637 D5          0890   	push de
040638 E5          0891   	push hl
040639 21 35 1A 04 0892   	ld hl,spr_size
04063D 11 00 00 00 0893   	ld de,$000000
040641 5E          0894   	ld e,(hl)
040642 56          0895   	ld d,(hl)
040643 ED 5C       0896   	mlt de ; DE = one sprite frame length
040645 E1          0897   	pop hl
040646 B7          0898   	or a
040647 ED 52       0899   	sbc hl,de ; HL = target area to copy
040649 D1          0900   	pop de
04064A EB          0901   	ex de,hl ; DE = target, HL = start
04064B C1          0902   	pop bc
04064C ED B0       0903   	ldir
04064E             0904   
04064E 21 35 1A 04 0905   	ld hl,spr_size
040652 01 00 00 00 0906   	ld bc,$000000
040656 4E          0907   	ld c,(hl)
040657 46          0908   	ld b,(hl)
040658 ED 4C       0909   	mlt bc ; DE = one sprite frame length
04065A             0910   
04065A             0911   	; delete last frame data
04065A 21 5C 1B 04 0912   	ld hl,frames_count
04065E 7E          0913   	ld a,(hl) ; A =frames count
04065F 3D          0914   	dec a ; A = last frame
040660 21 64 1B 04 0915   	ld hl,sprite_buffer ; HL = sprite buffer
040664 FE 00       0916   	cp 0
040666 28 06       0917   	jr z,df_loop5
040668             0918   
040668             0919   df_loop4:
040668 09          0920   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
040669 3D          0921   	dec a
04066A FE 00       0922   	cp 0
04066C 20 FA       0923   	jr nz,df_loop4
04066E             0924   
04066E             0925   ; clear the current frame
04066E             0926   df_loop5:
04066E AF          0927   	xor a
04066F 77          0928   	ld (hl),a
040670 23          0929   	inc hl
040671 0B          0930   	dec bc
040672 78          0931   	ld a,b
040673 B1          0932   	or c
040674 FE 00       0933   	cp 0
040676 20 F6       0934   	jr nz,df_loop5
040678             0935   
040678             0936   	; decrement frames count
040678 21 5C 1B 04 0937   	ld hl,frames_count
04067C 35          0938   	dec (hl)
04067D             0939   
04067D CD F2 17 04 0940   	call fn_change_frame
040681 CD 17 18 04 0941   	call fn_change_frames_count
040685 CD B2 17 04 0942   	call fn_refresh_sprite
040689 C9          0943   	ret
04068A             0944   
04068A             0945   df_exit:
04068A 21 5C 1B 04 0946   	ld hl,frames_count
04068E 7E          0947   	ld a,(hl)
04068F FE 01       0948   	cp 1
040691 28 06       0949   	jr z,df_exit_end
040693 35          0950   	dec (hl)
040694 21 5B 1B 04 0951   	ld hl,current_frame
040698 35          0952   	dec (hl)
040699             0953   
040699             0954   df_exit_end:
040699 CD F2 17 04 0955   	call fn_change_frame
04069D CD 17 18 04 0956   	call fn_change_frames_count
0406A1 CD B2 17 04 0957   	call fn_refresh_sprite
0406A5 C9          0958   	ret
0406A6             0959   
0406A6             0960   ; goto previous frame
0406A6             0961   dsl_previous_frame:
0406A6 21 B1 FF FF 0962   	ld hl,KEY_PGDOWN
0406AA CD C0 18 04 0963   	call fn_inkey
0406AE FE 00       0964   	cp 0
0406B0 20 F4       0965   	jr nz,dsl_previous_frame
0406B2             0966   
0406B2 21 5B 1B 04 0967   	ld hl,current_frame
0406B6 7E          0968   	ld a,(hl)
0406B7 FE 00       0969   	cp 0
0406B9 C8          0970   	ret z
0406BA             0971   
0406BA 3D          0972   	dec a
0406BB 77          0973   	ld (hl),a
0406BC CD F2 17 04 0974   	call fn_change_frame
0406C0 CD B2 17 04 0975   	call fn_refresh_sprite
0406C4 C9          0976   	ret
0406C5             0977   
0406C5             0978   ; goto next frame
0406C5             0979   dsl_next_frame:
0406C5 21 C0 FF FF 0980   	ld hl,KEY_PGUP
0406C9 CD C0 18 04 0981   	call fn_inkey
0406CD FE 00       0982   	cp 0
0406CF 20 F4       0983   	jr nz,dsl_next_frame
0406D1             0984   
0406D1 21 5B 1B 04 0985   	ld hl,current_frame
0406D5 7E          0986   	ld a,(hl)
0406D6 3C          0987   	inc a
0406D7 21 5C 1B 04 0988   	ld hl,frames_count
0406DB BE          0989   	cp (hl)
0406DC C8          0990   	ret z
0406DD             0991   
0406DD 21 5B 1B 04 0992   	ld hl,current_frame
0406E1 77          0993   	ld (hl),a
0406E2 CD F2 17 04 0994   	call fn_change_frame
0406E6 CD B2 17 04 0995   	call fn_refresh_sprite
0406EA C9          0996   	ret
0406EB             0997   
0406EB             0998   ; rotate a frame 90° clockwise
0406EB             0999   dsl_rotate_frame:
0406EB 21 CC FF FF 1000   	ld hl,KEY_R
0406EF CD C0 18 04 1001   	call fn_inkey
0406F3 FE 00       1002   	cp 0
0406F5 20 F4       1003   	jr nz,dsl_rotate_frame
0406F7             1004   
0406F7             1005   	; find HL as start of the first frame (buffer)
0406F7 21 35 1A 04 1006   	ld hl,spr_size
0406FB 01 00 00 00 1007   	ld bc,$000000
0406FF 11 00 00 00 1008   	ld de,$000000
040703 5E          1009   	ld e,(hl)
040704 56          1010   	ld d,(hl)
040705 4B          1011   	ld c,e
040706 ED 5C       1012   	mlt de ; DE = sprite length in bytes
040708 21 5B 1B 04 1013   	ld hl,current_frame
04070C 7E          1014   	ld a,(hl) ; A = current frame
04070D 21 64 1B 04 1015   	ld hl,sprite_buffer
040711 FE 00       1016   	cp 0
040713 28 04       1017   	jr z,rf_noloop1
040715 47          1018   	ld b,a
040716             1019   
040716             1020   rf_loop1:
040716 19          1021   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040717 10 FD       1022   	djnz rf_loop1
040719             1023   
040719             1024   rf_noloop1:
040719 C5          1025   	push bc
04071A E5          1026   	push hl
04071B             1027   
04071B             1028   	; copy current frame to swap sprite buffer
04071B 11 D0 3E 04 1029   	ld de,swap_sprite_buffer
04071F 41          1030   	ld b,c
040720 ED 4C       1031   	mlt bc
040722 ED B0       1032   	ldir
040724             1033   
040724 FD E1       1034   	pop iy ; IY: destination
040726 C1          1035   	pop bc
040727             1036   
040727 79          1037   	ld a,c
040728 01 00 00 00 1038   	ld bc,$000000
04072C 4F          1039   	ld c,a ; BC = sprite size
04072D             1040   
04072D             1041   	; turn and copy swap sprite buffer frame to sprite buffer
04072D DD 21 D0 3E 1042   	ld ix,swap_sprite_buffer ; IX: source
       04          
040732 11 00 00 00 1043   	ld de,0 ; x
040736 21 00 00 00 1044   	ld hl,0 ; y
04073A             1045   
04073A             1046   rf_loop2:
04073A DD E5       1047   	push ix
04073C FD E5       1048   	push iy
04073E             1049   
04073E D5          1050   	push de
04073F E5          1051   	push hl
040740             1052   
040740             1053   	; add x
040740 DD 19       1054   	add ix,de
040742             1055   
040742             1056   	; add y * width
040742 7C          1057   	ld a,h
040743 B5          1058   	or l
040744 FE 00       1059   	cp 0
040746 28 09       1060   	jr z,rf_done1
040748             1061   rf_loop3:
040748 DD 09       1062   	add ix,bc
04074A 2B          1063   	dec hl
04074B 7C          1064   	ld a,h
04074C B5          1065   	or l
04074D FE 00       1066   	cp 0
04074F 20 F7       1067   	jr nz,rf_loop3
040751             1068   
040751             1069   rf_done1:
040751             1070   	; found the pixel value
040751 DD 7E 00    1071   	ld a,(ix+0)
040754             1072   
040754 E1          1073   	pop hl
040755 D1          1074   	pop de
040756 D5          1075   	push de
040757 E5          1076   	push hl
040758             1077   
040758             1078   	; add y
040758 EB          1079   	ex de,hl
040759 FD 09       1080   	add iy,bc
04075B B7          1081   	or a
04075C E5          1082   	push hl
04075D FD E5       1083   	push iy
04075F E1          1084   	pop hl
040760 ED 52       1085   	sbc hl,de
040762 E5          1086   	push hl
040763 FD E1       1087   	pop iy
040765 FD 2B       1088   	dec iy
040767 E1          1089   	pop hl
040768 EB          1090   	ex de,hl
040769             1091   
040769             1092   	; add x * width
040769 F5          1093   	push af
04076A 7A          1094   	ld a,d
04076B B3          1095   	or e
04076C FE 00       1096   	cp 0
04076E 28 09       1097   	jr z,rf_done2
040770             1098   rf_loop5:
040770 FD 09       1099   	add iy,bc
040772 1B          1100   	dec de
040773 7A          1101   	ld a,d
040774 B3          1102   	or e
040775 FE 00       1103   	cp 0
040777 20 F7       1104   	jr nz,rf_loop5
040779             1105   
040779             1106   rf_done2:
040779 F1          1107   	pop af
04077A             1108   
04077A             1109   	; store the pixel value
04077A FD 77 00    1110   	ld (iy+0),a
04077D             1111   
04077D E1          1112   	pop hl
04077E D1          1113   	pop de
04077F             1114   
04077F FD E1       1115   	pop iy
040781 DD E1       1116   	pop ix
040783             1117   
040783 13          1118   	inc de
040784 EB          1119   	ex de,hl
040785 B7          1120   	or a
040786 ED 42       1121   	sbc hl,bc
040788 09          1122   	add hl,bc
040789 EB          1123   	ex de,hl
04078A DA 3A 07 04 1124   	jp c,rf_loop2
04078E             1125   
04078E 11 00 00 00 1126   	ld de,0
040792 23          1127   	inc hl
040793 B7          1128   	or a
040794 ED 42       1129   	sbc hl,bc
040796 09          1130   	add hl,bc
040797 DA 3A 07 04 1131   	jp c,rf_loop2
04079B             1132   
04079B CD B2 17 04 1133   	call fn_refresh_sprite
04079F C9          1134   	ret
0407A0             1135   
0407A0             1136   ; flip frame horizontally
0407A0             1137   dsl_flip_frame:
0407A0 21 BC FF FF 1138   	ld hl,KEY_F
0407A4 CD C0 18 04 1139   	call fn_inkey
0407A8 FE 00       1140   	cp 0
0407AA 20 F4       1141   	jr nz,dsl_flip_frame
0407AC             1142   
0407AC 21 35 1A 04 1143   	ld hl,spr_size
0407B0 11 00 00 00 1144   	ld de,$000000
0407B4 5E          1145   	ld e,(hl)
0407B5 56          1146   	ld d,(hl)
0407B6 4B          1147   	ld c,e
0407B7 ED 5C       1148   	mlt de ; DE = sprite length in bytes
0407B9 21 5B 1B 04 1149   	ld hl,current_frame
0407BD 7E          1150   	ld a,(hl) ; A = current frame
0407BE 21 64 1B 04 1151   	ld hl,sprite_buffer
0407C2 FE 00       1152   	cp 0
0407C4 28 04       1153   	jr z,ff_noloop1
0407C6 47          1154   	ld b,a
0407C7             1155   
0407C7             1156   ff_loop1:
0407C7 19          1157   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407C8 10 FD       1158   	djnz ff_loop1
0407CA             1159   
0407CA             1160   ff_noloop1:
0407CA 41          1161   	ld b,c ; B = sprite height
0407CB 11 00 00 00 1162   	ld de,$000000
0407CF 59          1163   	ld e,c ; DE = sprite width
0407D0 79          1164   	ld a,c ; A = sprite width
0407D1 CB 3F       1165   	srl a ; A = sprite height / 2
0407D3             1166   
0407D3 E5          1167   	push hl
0407D4 DD E1       1168   	pop ix ; IX = frame address
0407D6 19          1169   	add hl,de ; HL = frame address + sprite width - 1
0407D7 2B          1170   	dec hl
0407D8 E5          1171   	push hl
0407D9 FD E1       1172   	pop iy ; IY = IX + sprite width - 1
0407DB             1173   
0407DB             1174   ff_loop2:
0407DB F5          1175   	push af
0407DC D5          1176   	push de
0407DD DD E5       1177   	push ix
0407DF FD E5       1178   	push iy
0407E1             1179   ff_loop3:
0407E1 DD 5E 00    1180   	ld e,(ix+0)
0407E4 FD 56 00    1181   	ld d,(iy+0)
0407E7 DD 72 00    1182   	ld (ix+0),d
0407EA FD 73 00    1183   	ld (iy+0),e
0407ED DD 23       1184   	inc ix
0407EF FD 2B       1185   	dec iy
0407F1 3D          1186   	dec a
0407F2 FE 00       1187   	cp 0
0407F4 20 EB       1188   	jr nz,ff_loop3
0407F6 FD E1       1189   	pop iy
0407F8 DD E1       1190   	pop ix
0407FA D1          1191   	pop de
0407FB F1          1192   	pop af
0407FC DD 19       1193   	add ix,de
0407FE FD 19       1194   	add iy,de
040800 10 D9       1195   	djnz ff_loop2
040802             1196   
040802 CD B2 17 04 1197   	call fn_refresh_sprite
040806 C9          1198   	ret
040807             1199   
040807             1200   ; mirror frame vertically
040807             1201   dsl_mirror_frame:
040807 21 9A FF FF 1202   	ld hl,KEY_M
04080B CD C0 18 04 1203   	call fn_inkey
04080F FE 00       1204   	cp 0
040811 20 F4       1205   	jr nz,dsl_mirror_frame
040813             1206   
040813 21 35 1A 04 1207   	ld hl,spr_size
040817 01 00 00 00 1208   	ld bc,$000000
04081B 11 00 00 00 1209   	ld de,$000000
04081F 5E          1210   	ld e,(hl)
040820 56          1211   	ld d,(hl)
040821 4B          1212   	ld c,e
040822 ED 5C       1213   	mlt de ; DE = sprite length in bytes
040824 21 5B 1B 04 1214   	ld hl,current_frame
040828 7E          1215   	ld a,(hl) ; A = current frame
040829 21 64 1B 04 1216   	ld hl,sprite_buffer
04082D FE 00       1217   	cp 0
04082F 28 04       1218   	jr z,mf_noloop1
040831 47          1219   	ld b,a
040832             1220   
040832             1221   mf_loop1:
040832 19          1222   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040833 10 FD       1223   	djnz mf_loop1
040835             1224   
040835             1225   mf_noloop1:
040835 11 00 00 00 1226   	ld de,$000000
040839 59          1227   	ld e,c ; E = sprite height
04083A 79          1228   	ld a,c ; A = sprite width
04083B 41          1229   	ld b,c ; B = sprite height
04083C CB 38       1230   	srl b ; divide B by 2, so B = sprite height / 2
04083E             1231   
04083E E5          1232   	push hl
04083F DD E1       1233   	pop ix ; IX = frame address
040841 51          1234   	ld d,c
040842 15          1235   	dec d
040843 ED 5C       1236   	mlt de ; DE = sprite length - sprite width
040845 19          1237   	add hl,de ; HL = frame address + sprite length - sprite width
040846 E5          1238   	push hl
040847 FD E1       1239   	pop iy ; IY = IX + sprite length - sprite width
040849 21 00 00 00 1240   	ld hl,$000000
04084D 69          1241   	ld l,c ; HL = sprite width
04084E             1242   
04084E             1243   mf_loop2:
04084E F5          1244   	push af
04084F D5          1245   	push de
040850 DD E5       1246   	push ix
040852 FD E5       1247   	push iy
040854             1248   mf_loop3:
040854 DD 5E 00    1249   	ld e,(ix+0)
040857 FD 56 00    1250   	ld d,(iy+0)
04085A DD 72 00    1251   	ld (ix+0),d
04085D FD 73 00    1252   	ld (iy+0),e
040860 DD 23       1253   	inc ix
040862 FD 23       1254   	inc iy
040864 3D          1255   	dec a
040865 FE 00       1256   	cp 0
040867 20 EB       1257   	jr nz,mf_loop3
040869 FD E1       1258   	pop iy
04086B DD E1       1259   	pop ix
04086D D1          1260   	pop de
04086E F1          1261   	pop af
04086F EB          1262   	ex de,hl
040870 DD 19       1263   	add ix,de
040872 EB          1264   	ex de,hl
040873 E5          1265   	push hl
040874 FD E5       1266   	push iy
040876 E1          1267   	pop hl
040877 D1          1268   	pop de
040878 B7          1269   	or a
040879 ED 52       1270   	sbc hl,de
04087B E5          1271   	push hl
04087C D5          1272   	push de
04087D E1          1273   	pop hl
04087E FD E1       1274   	pop iy
040880 10 CC       1275   	djnz mf_loop2
040882             1276   
040882 CD B2 17 04 1277   	call fn_refresh_sprite
040886 C9          1278   	ret
040887             1279   
040887             1280   dsl_flood_fill:
040887 21 B6 FF FF 1281   	ld hl,KEY_RETURN
04088B CD C0 18 04 1282   	call fn_inkey
04088F FE 00       1283   	cp 0
040891 20 F4       1284   	jr nz,dsl_flood_fill
040893             1285   
040893             1286   	; hide the cursor
040893 CD CB 0D 04 1287   	call fn_draw_pixel_without_border
040897             1288   
040897             1289   	; memorize pixel coordinates
040897 3A 30 1A 04 1290   	ld a,(xpix)
04089B 32 32 1A 04 1291   	ld (memxpix),a
04089F 3A 31 1A 04 1292   	ld a,(ypix)
0408A3 32 33 1A 04 1293   	ld (memypix),a
0408A7             1294   
0408A7             1295   	; fill all recursively
0408A7 3A 30 1A 04 1296   	ld a,(xpix)
0408AB 5F          1297   	ld e,a
0408AC 3A 31 1A 04 1298   	ld a,(ypix)
0408B0 57          1299   	ld d,a
0408B1 CD D2 08 04 1300   	call dsl_flood_fill_loop
0408B5             1301   
0408B5             1302   	; refresh all the sprite
0408B5 CD B2 17 04 1303   	call fn_refresh_sprite
0408B9             1304   
0408B9             1305   	; hide the cursor again
0408B9 CD CB 0D 04 1306   	call fn_draw_pixel_without_border
0408BD             1307   
0408BD             1308   	; restore pixel coordinates
0408BD             1309   	; and cursor
0408BD 3A 32 1A 04 1310   	ld a,(memxpix)
0408C1 32 30 1A 04 1311   	ld (xpix),a
0408C5 3A 33 1A 04 1312   	ld a,(memypix)
0408C9 32 31 1A 04 1313   	ld (ypix),a
0408CD CD B7 0D 04 1314   	call fn_draw_pixel_with_border
0408D1 C9          1315   	ret
0408D2             1316   
0408D2             1317   dsl_flood_fill_loop:
0408D2 D5          1318   	push de
0408D3             1319   
0408D3 DD 21 35 1A 1320   	ld ix,spr_size
       04          
0408D8             1321   
0408D8             1322   	; out  of the sprite area ?
0408D8 7B          1323   	ld a,e
0408D9 DD BE 00    1324   	cp (ix+0)
0408DC D2 25 09 04 1325   	jp nc,ffl_exit
0408E0             1326   
0408E0             1327   	; out  of the sprite area ?
0408E0 7A          1328   	ld a,d
0408E1 DD BE 00    1329   	cp (ix+0)
0408E4 D2 25 09 04 1330   	jp nc,ffl_exit
0408E8             1331   
0408E8             1332   	; replace current pixel, if it is
0408E8             1333   	; inside the sprite area,
0408E8             1334   	; and has not the select palette color
0408E8 7B          1335   	ld a,e
0408E9 32 30 1A 04 1336   	ld (xpix),a
0408ED 7A          1337   	ld a,d
0408EE 32 31 1A 04 1338   	ld (ypix),a
0408F2 CD E1 0D 04 1339   	call fn_get_pixel_color
0408F6 21 36 1A 04 1340   	ld hl,current_pen
0408FA BE          1341   	cp (hl)
0408FB CA 25 09 04 1342   	jp z,ffl_exit
0408FF 7E          1343   	ld a,(hl)
040900 CD 23 0E 04 1344   	call fn_set_pixel_color
040904             1345   
040904             1346   	; restore coordinates
040904 3A 30 1A 04 1347   	ld a,(xpix)
040908 5F          1348   	ld e,a
040909 3A 31 1A 04 1349   	ld a,(ypix)
04090D 57          1350   	ld d,a
04090E             1351   
04090E             1352   	; draw pixel at right
04090E 1C          1353   	inc e
04090F CD D2 08 04 1354   	call dsl_flood_fill_loop
040913 1D          1355   	dec e
040914             1356   	; draw pixel at left
040914 1D          1357   	dec e
040915 CD D2 08 04 1358   	call dsl_flood_fill_loop
040919 1C          1359   	inc e
04091A             1360   	; draw pixel up
04091A 14          1361   	inc d
04091B CD D2 08 04 1362   	call dsl_flood_fill_loop
04091F 15          1363   	dec d
040920             1364   	; draw pixel down
040920 15          1365   	dec d
040921 CD D2 08 04 1366   	call dsl_flood_fill_loop
040925             1367   
040925             1368   ffl_exit:
040925 D1          1369   	pop de
040926 C9          1370   	ret
040927             1371   
040927             1372   ; change current tool to palette tool
040927             1373   dsl_palette_tool:
040927 21 9F FF FF 1374   	ld hl,KEY_TAB
04092B CD C0 18 04 1375   	call fn_inkey
04092F FE 00       1376   	cp 0
040931 20 F4       1377   	jr nz,dsl_palette_tool
040933             1378   
040933             1379   	; hide sprite drawing cursor
040933 CD CB 0D 04 1380   	call fn_draw_pixel_without_border
040937             1381   
040937             1382   	; draw selected palette color
040937 21 36 1A 04 1383   	ld hl,current_pen
04093B 4E          1384   	ld c,(hl)
04093C CD 7F 0E 04 1385   	call fn_draw_palette_with_border
040940             1386   
040940             1387   ; select palette color
040940             1388   dsl_palette_tool_loop:
040940             1389   	; move to left color in the palette
040940 21 E6 FF FF 1390   	ld hl,KEY_LEFT
040944 CD C0 18 04 1391   	call fn_inkey
040948 FE 01       1392   	cp 1
04094A CC B6 0B 04 1393   	call z,dsl_dec_pen
04094E             1394   
04094E             1395   	; move to right color in the palette
04094E 21 86 FF FF 1396   	ld hl,KEY_RIGHT
040952 CD C0 18 04 1397   	call fn_inkey
040956 FE 01       1398   	cp 1
040958 CC DD 0B 04 1399   	call z,dsl_inc_pen
04095C             1400   
04095C             1401   	; return to draw sprite tool
04095C 21 9F FF FF 1402   	ld hl,KEY_TAB
040960 CD C0 18 04 1403   	call fn_inkey
040964 FE 01       1404   	cp 1
040966 CA 99 0B 04 1405   	jp z,dsl_draw_sprite_tool
04096A             1406   
04096A             1407   	; load palette
04096A 21 A9 FF FF 1408   	ld hl,KEY_L
04096E CD C0 18 04 1409   	call fn_inkey
040972 FE 01       1410   	cp 1
040974 CC 67 0B 04 1411   	call z,dslp_load_palette
040978             1412   
040978             1413   	; red up
040978 21 CF FF FF 1414   	ld hl,KEY_1
04097C CD C0 18 04 1415   	call fn_inkey
040980 FE 01       1416   	cp 1
040982 CC EC 09 04 1417   	call z,dslp_red_up
040986             1418   
040986             1419   	; green up
040986 21 CE FF FF 1420   	ld hl,KEY_2
04098A CD C0 18 04 1421   	call fn_inkey
04098E FE 01       1422   	cp 1
040990 CC 23 0A 04 1423   	call z,dslp_green_up
040994             1424   
040994             1425   	; blue up
040994 21 EE FF FF 1426   	ld hl,KEY_3
040998 CD C0 18 04 1427   	call fn_inkey
04099C FE 01       1428   	cp 1
04099E CC 5A 0A 04 1429   	call z,dslp_blue_up
0409A2             1430   
0409A2             1431   	; red down
0409A2 21 ED FF FF 1432   	ld hl,KEY_4
0409A6 CD C0 18 04 1433   	call fn_inkey
0409AA FE 01       1434   	cp 1
0409AC CC 91 0A 04 1435   	call z,dslp_red_down
0409B0             1436   
0409B0             1437   	; green down
0409B0 21 EC FF FF 1438   	ld hl,KEY_5
0409B4 CD C0 18 04 1439   	call fn_inkey
0409B8 FE 01       1440   	cp 1
0409BA CC C8 0A 04 1441   	call z,dslp_green_down
0409BE             1442   
0409BE             1443   	; blue down
0409BE 21 CB FF FF 1444   	ld hl,KEY_6
0409C2 CD C0 18 04 1445   	call fn_inkey
0409C6 FE 01       1446   	cp 1
0409C8 CC FF 0A 04 1447   	call z,dslp_blue_down
0409CC             1448   
0409CC             1449   	; reset to black
0409CC 21 DB FF FF 1450   	ld hl,KEY_7
0409D0 CD C0 18 04 1451   	call fn_inkey
0409D4 FE 01       1452   	cp 1
0409D6 CC 36 0B 04 1453   	call z,dslp_reset_color
0409DA             1454   
0409DA             1455   	; exit program
0409DA 21 8F FF FF 1456   	ld hl,KEY_ESCAPE
0409DE CD C0 18 04 1457   	call fn_inkey
0409E2 FE 01       1458   	cp 1
0409E4 CA 06 0C 04 1459   	jp z,exit_program
0409E8             1460   
0409E8 C3 40 09 04 1461   	jp dsl_palette_tool_loop
0409EC             1462   
0409EC             1463   dslp_red_up:
0409EC 21 36 1A 04 1464   	ld hl,current_pen
0409F0 4E          1465   	ld c,(hl)
0409F1 CD E4 0E 04 1466   	call fn_draw_palette_without_border
0409F5 21 36 1A 04 1467   	ld hl,current_pen
0409F9 46          1468   	ld b,(hl)
0409FA CD E9 19 04 1469   	call fn_get_color
0409FE 79          1470   	ld a,c
0409FF FE FF       1471   	cp #ff
040A01 30 03       1472   	jr nc,dslp_not_inc1
040A03 C6 55       1473   	add a,#55
040A05 4F          1474   	ld c,a
040A06             1475   dslp_not_inc1:
040A06 CD 8C 19 04 1476   	call fn_set_color
040A0A CD 03 19 04 1477   	call fn_draw_the_palette
040A0E CD B2 17 04 1478   	call fn_refresh_sprite
040A12 21 36 1A 04 1479   	ld hl,current_pen
040A16 4E          1480   	ld c,(hl)
040A17 CD 7F 0E 04 1481   	call fn_draw_palette_with_border
040A1B CD 3B 18 04 1482   	call fn_slowdown
040A1F C3 40 09 04 1483   	jp dsl_palette_tool_loop
040A23             1484   
040A23             1485   dslp_green_up:
040A23 21 36 1A 04 1486   	ld hl,current_pen
040A27 4E          1487   	ld c,(hl)
040A28 CD E4 0E 04 1488   	call fn_draw_palette_without_border
040A2C 21 36 1A 04 1489   	ld hl,current_pen
040A30 46          1490   	ld b,(hl)
040A31 CD E9 19 04 1491   	call fn_get_color
040A35 7B          1492   	ld a,e
040A36 FE FF       1493   	cp #ff
040A38 30 03       1494   	jr nc,dslp_not_inc2
040A3A C6 55       1495   	add a,#55
040A3C 5F          1496   	ld e,a
040A3D             1497   dslp_not_inc2:
040A3D CD 8C 19 04 1498   	call fn_set_color
040A41 CD 03 19 04 1499   	call fn_draw_the_palette
040A45 CD B2 17 04 1500   	call fn_refresh_sprite
040A49 21 36 1A 04 1501   	ld hl,current_pen
040A4D 4E          1502   	ld c,(hl)
040A4E CD 7F 0E 04 1503   	call fn_draw_palette_with_border
040A52 CD 3B 18 04 1504   	call fn_slowdown
040A56 C3 40 09 04 1505   	jp dsl_palette_tool_loop
040A5A             1506   
040A5A             1507   dslp_blue_up:
040A5A 21 36 1A 04 1508   	ld hl,current_pen
040A5E 4E          1509   	ld c,(hl)
040A5F CD E4 0E 04 1510   	call fn_draw_palette_without_border
040A63 21 36 1A 04 1511   	ld hl,current_pen
040A67 46          1512   	ld b,(hl)
040A68 CD E9 19 04 1513   	call fn_get_color
040A6C 7D          1514   	ld a,l
040A6D FE FF       1515   	cp #ff
040A6F 30 03       1516   	jr nc,dslp_not_inc3
040A71 C6 55       1517   	add a,#55
040A73 6F          1518   	ld l,a
040A74             1519   dslp_not_inc3:
040A74 CD 8C 19 04 1520   	call fn_set_color
040A78 CD 03 19 04 1521   	call fn_draw_the_palette
040A7C CD B2 17 04 1522   	call fn_refresh_sprite
040A80 21 36 1A 04 1523   	ld hl,current_pen
040A84 4E          1524   	ld c,(hl)
040A85 CD 7F 0E 04 1525   	call fn_draw_palette_with_border
040A89 CD 3B 18 04 1526   	call fn_slowdown
040A8D C3 40 09 04 1527   	jp dsl_palette_tool_loop
040A91             1528   
040A91             1529   dslp_red_down:
040A91 21 36 1A 04 1530   	ld hl,current_pen
040A95 4E          1531   	ld c,(hl)
040A96 CD E4 0E 04 1532   	call fn_draw_palette_without_border
040A9A 21 36 1A 04 1533   	ld hl,current_pen
040A9E 46          1534   	ld b,(hl)
040A9F CD E9 19 04 1535   	call fn_get_color
040AA3 79          1536   	ld a,c
040AA4 FE 01       1537   	cp #01
040AA6 38 03       1538   	jr c,dslp_not_dec1
040AA8 D6 55       1539   	sub a,#55
040AAA 4F          1540   	ld c,a
040AAB             1541   dslp_not_dec1:
040AAB CD 8C 19 04 1542   	call fn_set_color
040AAF CD 03 19 04 1543   	call fn_draw_the_palette
040AB3 CD B2 17 04 1544   	call fn_refresh_sprite
040AB7 21 36 1A 04 1545   	ld hl,current_pen
040ABB 4E          1546   	ld c,(hl)
040ABC CD 7F 0E 04 1547   	call fn_draw_palette_with_border
040AC0 CD 3B 18 04 1548   	call fn_slowdown
040AC4 C3 40 09 04 1549   	jp dsl_palette_tool_loop
040AC8             1550   
040AC8             1551   dslp_green_down:
040AC8 21 36 1A 04 1552   	ld hl,current_pen
040ACC 4E          1553   	ld c,(hl)
040ACD CD E4 0E 04 1554   	call fn_draw_palette_without_border
040AD1 21 36 1A 04 1555   	ld hl,current_pen
040AD5 46          1556   	ld b,(hl)
040AD6 CD E9 19 04 1557   	call fn_get_color
040ADA 7B          1558   	ld a,e
040ADB FE 01       1559   	cp #01
040ADD 38 03       1560   	jr c,dslp_not_dec2
040ADF D6 55       1561   	sub a,#55
040AE1 5F          1562   	ld e,a
040AE2             1563   dslp_not_dec2:
040AE2 CD 8C 19 04 1564   	call fn_set_color
040AE6 CD 03 19 04 1565   	call fn_draw_the_palette
040AEA CD B2 17 04 1566   	call fn_refresh_sprite
040AEE 21 36 1A 04 1567   	ld hl,current_pen
040AF2 4E          1568   	ld c,(hl)
040AF3 CD 7F 0E 04 1569   	call fn_draw_palette_with_border
040AF7 CD 3B 18 04 1570   	call fn_slowdown
040AFB C3 40 09 04 1571   	jp dsl_palette_tool_loop
040AFF             1572   
040AFF             1573   dslp_blue_down:
040AFF 21 36 1A 04 1574   	ld hl,current_pen
040B03 4E          1575   	ld c,(hl)
040B04 CD E4 0E 04 1576   	call fn_draw_palette_without_border
040B08 21 36 1A 04 1577   	ld hl,current_pen
040B0C 46          1578   	ld b,(hl)
040B0D CD E9 19 04 1579   	call fn_get_color
040B11 7D          1580   	ld a,l
040B12 FE 01       1581   	cp #01
040B14 38 03       1582   	jr c,dslp_not_dec3
040B16 D6 55       1583   	sub a,#55
040B18 6F          1584   	ld l,a
040B19             1585   dslp_not_dec3:
040B19 CD 8C 19 04 1586   	call fn_set_color
040B1D CD 03 19 04 1587   	call fn_draw_the_palette
040B21 CD B2 17 04 1588   	call fn_refresh_sprite
040B25 21 36 1A 04 1589   	ld hl,current_pen
040B29 4E          1590   	ld c,(hl)
040B2A CD 7F 0E 04 1591   	call fn_draw_palette_with_border
040B2E CD 3B 18 04 1592   	call fn_slowdown
040B32 C3 40 09 04 1593   	jp dsl_palette_tool_loop
040B36             1594   
040B36             1595   dslp_reset_color:
040B36 21 36 1A 04 1596   	ld hl,current_pen
040B3A 4E          1597   	ld c,(hl)
040B3B CD E4 0E 04 1598   	call fn_draw_palette_without_border
040B3F 21 36 1A 04 1599   	ld hl,current_pen
040B43 46          1600   	ld b,(hl)
040B44 0E 00       1601   	ld c,0
040B46 1E 00       1602   	ld e,0
040B48 2E 00       1603   	ld l,0
040B4A CD 8C 19 04 1604   	call fn_set_color
040B4E CD 03 19 04 1605   	call fn_draw_the_palette
040B52 CD B2 17 04 1606   	call fn_refresh_sprite
040B56 21 36 1A 04 1607   	ld hl,current_pen
040B5A 4E          1608   	ld c,(hl)
040B5B CD 7F 0E 04 1609   	call fn_draw_palette_with_border
040B5F CD 3B 18 04 1610   	call fn_slowdown
040B63 C3 40 09 04 1611   	jp dsl_palette_tool_loop
040B67             1612   
040B67             1613   dslp_load_palette:
040B67 21 A9 FF FF 1614   	ld hl,KEY_L
040B6B CD C0 18 04 1615   	call fn_inkey
040B6F FE 00       1616   	cp 0
040B71 20 F4       1617   	jr nz,dslp_load_palette
040B73             1618   
040B73 21 36 1A 04 1619   	ld hl,current_pen
040B77 4E          1620   	ld c,(hl)
040B78 CD E4 0E 04 1621   	call fn_draw_palette_without_border
040B7C CD 5E 10 04 1622   	call fn_load_palette
040B80 CD 03 19 04 1623   	call fn_draw_the_palette
040B84 CD B2 17 04 1624   	call fn_refresh_sprite
040B88 21 36 1A 04 1625   	ld hl,current_pen
040B8C 4E          1626   	ld c,(hl)
040B8D CD 7F 0E 04 1627   	call fn_draw_palette_with_border
040B91 CD F2 17 04 1628   	call fn_change_frame
040B95 C3 40 09 04 1629   	jp dsl_palette_tool_loop
040B99             1630   
040B99             1631   dsl_draw_sprite_tool:
040B99 21 9F FF FF 1632   	ld hl,KEY_TAB
040B9D CD C0 18 04 1633   	call fn_inkey
040BA1 FE 00       1634   	cp 0
040BA3 20 F4       1635   	jr nz,dsl_draw_sprite_tool
040BA5             1636   
040BA5             1637   	; unselect palette color
040BA5 21 36 1A 04 1638   	ld hl,current_pen
040BA9 4E          1639   	ld c,(hl)
040BAA CD E4 0E 04 1640   	call fn_draw_palette_without_border
040BAE             1641   
040BAE             1642   	; draw the pixel with a border
040BAE CD B7 0D 04 1643   	call fn_draw_pixel_with_border
040BB2             1644   
040BB2 C3 98 02 04 1645   	jp draw_sprite_loop
040BB6             1646   
040BB6             1647   dsl_dec_pen:
040BB6 21 36 1A 04 1648   	ld hl,current_pen
040BBA 7E          1649   	ld a,(hl)
040BBB FE 00       1650   	cp 0
040BBD C8          1651   	ret z
040BBE FE 40       1652   	cp MAX_COLORS
040BC0 D0          1653   	ret nc
040BC1             1654   
040BC1 4F          1655   	ld c,a ; c is the old pen
040BC2 3D          1656   	dec a ; a is the new pen
040BC3             1657   
040BC3 F5          1658   	push af
040BC4 C5          1659   	push bc
040BC5             1660   
040BC5             1661   	; unselect palette color
040BC5 CD E4 0E 04 1662   	call fn_draw_palette_without_border
040BC9             1663   
040BC9 C1          1664   	pop bc
040BCA F1          1665   	pop af
040BCB             1666   
040BCB             1667   	; replace current pen value
040BCB 21 36 1A 04 1668   	ld hl,current_pen
040BCF 77          1669   	ld (hl),a
040BD0             1670   
040BD0             1671   	; select palette color
040BD0 4F          1672   	ld c,a
040BD1 CD 7F 0E 04 1673   	call fn_draw_palette_with_border
040BD5 CD 3B 18 04 1674   	call fn_slowdown
040BD9 C3 40 09 04 1675   	jp dsl_palette_tool_loop
040BDD             1676   
040BDD             1677   dsl_inc_pen:
040BDD 21 36 1A 04 1678   	ld hl,current_pen
040BE1 7E          1679   	ld a,(hl)
040BE2 21 55 1B 04 1680   	ld hl,colors_count
040BE6 4E          1681   	ld c,(hl)
040BE7 0D          1682   	dec c
040BE8 B9          1683   	cp c
040BE9 D0          1684   	ret nc
040BEA             1685   
040BEA 4F          1686   	ld c,a ; c is the old pen
040BEB 3C          1687   	inc a ; a is the new pen
040BEC             1688   
040BEC F5          1689   	push af
040BED C5          1690   	push bc
040BEE             1691   
040BEE             1692   	; unselect palette color
040BEE CD E4 0E 04 1693   	call fn_draw_palette_without_border
040BF2             1694   
040BF2 C1          1695   	pop bc
040BF3 F1          1696   	pop af
040BF4             1697   
040BF4             1698   	; replace current pen value
040BF4 21 36 1A 04 1699   	ld hl,current_pen
040BF8 77          1700   	ld (hl),a
040BF9             1701   
040BF9             1702   	; select palette color
040BF9 4F          1703   	ld c,a
040BFA CD 7F 0E 04 1704   	call fn_draw_palette_with_border
040BFE CD 3B 18 04 1705   	call fn_slowdown
040C02 C3 40 09 04 1706   	jp dsl_palette_tool_loop
040C06             1707   
040C06             1708   ; exit program
040C06             1709   exit_program:
040C06             1710   	; reset to mode 1
040C06             1711   	vdu 22
040C06 3E 16       0001M  		LD	A, function
040C08 49 D7       0002M  		RST.LIS	10h
040C0A             1712   	vdu 1
040C0A 3E 01       0001M  		LD	A, function
040C0C 49 D7       0002M  		RST.LIS	10h
040C0E             1713   
040C0E             1714   	; position the texte cursor at home
040C0E             1715   	vdu 30
040C0E 3E 1E       0001M  		LD	A, function
040C10 49 D7       0002M  		RST.LIS	10h
040C12             1716   
040C12             1717   	; show cursor
040C12             1718   	vdu 23
040C12 3E 17       0001M  		LD	A, function
040C14 49 D7       0002M  		RST.LIS	10h
040C16             1719   	vdu 1
040C16 3E 01       0001M  		LD	A, function
040C18 49 D7       0002M  		RST.LIS	10h
040C1A             1720   	vdu 1
040C1A 3E 01       0001M  		LD	A, function
040C1C 49 D7       0002M  		RST.LIS	10h
040C1E             1721   
040C1E FD E1       1722   	pop iy
040C20 DD E1       1723   	pop ix
040C22 D1          1724   	pop de
040C23 C1          1725   	pop bc
040C24 F1          1726   	pop af
040C25 21 00 00 00 1727   	ld hl,0
040C29             1728   
040C29 C9          1729   	ret
040C2A             1730   ;======================================================================
040C2A             1731   
040C2A             1732   ; draw a rectangle
040C2A             1733   fn_rect:
040C2A             1734   	vdu 25
040C2A 3E 19       0001M  		LD	A, function
040C2C 49 D7       0002M  		RST.LIS	10h
040C2E             1735   	vdu 4
040C2E 3E 04       0001M  		LD	A, function
040C30 49 D7       0002M  		RST.LIS	10h
040C32 DD 21 20 1A 1736   	ld ix,x1
       04          
040C37 DD 7E 00    1737   	ld a,(ix + 0)
040C3A             1738   	vdu_a
040C3A 49 D7       0001M  		RST.LIS	10h
040C3C DD 7E 01    1739   	ld a,(ix + 1)
040C3F             1740   	vdu_a
040C3F 49 D7       0001M  		RST.LIS	10h
040C41 FD 21 22 1A 1741   	ld iy,y1
       04          
040C46 FD 7E 00    1742   	ld a,(iy + 0)
040C49             1743   	vdu_a
040C49 49 D7       0001M  		RST.LIS	10h
040C4B FD 7E 01    1744   	ld a,(iy + 1)
040C4E             1745   	vdu_a
040C4E 49 D7       0001M  		RST.LIS	10h
040C50             1746   
040C50             1747   	vdu 25
040C50 3E 19       0001M  		LD	A, function
040C52 49 D7       0002M  		RST.LIS	10h
040C54             1748   	vdu 5
040C54 3E 05       0001M  		LD	A, function
040C56 49 D7       0002M  		RST.LIS	10h
040C58 DD 21 24 1A 1749   	ld ix,x2
       04          
040C5D DD 7E 00    1750   	ld a,(ix + 0)
040C60             1751   	vdu_a
040C60 49 D7       0001M  		RST.LIS	10h
040C62 DD 7E 01    1752   	ld a,(ix + 1)
040C65             1753   	vdu_a
040C65 49 D7       0001M  		RST.LIS	10h
040C67 FD 21 22 1A 1754   	ld iy,y1
       04          
040C6C FD 7E 00    1755   	ld a,(iy + 0)
040C6F             1756   	vdu_a
040C6F 49 D7       0001M  		RST.LIS	10h
040C71 FD 7E 01    1757   	ld a,(iy + 1)
040C74             1758   	vdu_a
040C74 49 D7       0001M  		RST.LIS	10h
040C76             1759   
040C76             1760   	vdu 25
040C76 3E 19       0001M  		LD	A, function
040C78 49 D7       0002M  		RST.LIS	10h
040C7A             1761   	vdu 5
040C7A 3E 05       0001M  		LD	A, function
040C7C 49 D7       0002M  		RST.LIS	10h
040C7E DD 21 24 1A 1762   	ld ix,x2
       04          
040C83 DD 7E 00    1763   	ld a,(ix + 0)
040C86             1764   	vdu_a
040C86 49 D7       0001M  		RST.LIS	10h
040C88 DD 7E 01    1765   	ld a,(ix + 1)
040C8B             1766   	vdu_a
040C8B 49 D7       0001M  		RST.LIS	10h
040C8D FD 21 26 1A 1767   	ld iy,y2
       04          
040C92 FD 7E 00    1768   	ld a,(iy + 0)
040C95             1769   	vdu_a
040C95 49 D7       0001M  		RST.LIS	10h
040C97 FD 7E 01    1770   	ld a,(iy + 1)
040C9A             1771   	vdu_a
040C9A 49 D7       0001M  		RST.LIS	10h
040C9C             1772   
040C9C             1773   	vdu 25
040C9C 3E 19       0001M  		LD	A, function
040C9E 49 D7       0002M  		RST.LIS	10h
040CA0             1774   	vdu 5
040CA0 3E 05       0001M  		LD	A, function
040CA2 49 D7       0002M  		RST.LIS	10h
040CA4 DD 21 20 1A 1775   	ld ix,x1
       04          
040CA9 DD 7E 00    1776   	ld a,(ix + 0)
040CAC             1777   	vdu_a
040CAC 49 D7       0001M  		RST.LIS	10h
040CAE DD 7E 01    1778   	ld a,(ix + 1)
040CB1             1779   	vdu_a
040CB1 49 D7       0001M  		RST.LIS	10h
040CB3 FD 21 26 1A 1780   	ld iy,y2
       04          
040CB8 FD 7E 00    1781   	ld a,(iy + 0)
040CBB             1782   	vdu_a
040CBB 49 D7       0001M  		RST.LIS	10h
040CBD FD 7E 01    1783   	ld a,(iy + 1)
040CC0             1784   	vdu_a
040CC0 49 D7       0001M  		RST.LIS	10h
040CC2             1785   
040CC2             1786   	vdu 25
040CC2 3E 19       0001M  		LD	A, function
040CC4 49 D7       0002M  		RST.LIS	10h
040CC6             1787   	vdu 5
040CC6 3E 05       0001M  		LD	A, function
040CC8 49 D7       0002M  		RST.LIS	10h
040CCA DD 21 20 1A 1788   	ld ix,x1
       04          
040CCF DD 7E 00    1789   	ld a,(ix + 0)
040CD2             1790   	vdu_a
040CD2 49 D7       0001M  		RST.LIS	10h
040CD4 DD 7E 01    1791   	ld a,(ix + 1)
040CD7             1792   	vdu_a
040CD7 49 D7       0001M  		RST.LIS	10h
040CD9 FD 21 22 1A 1793   	ld iy,y1
       04          
040CDE FD 7E 00    1794   	ld a,(iy + 0)
040CE1             1795   	vdu_a
040CE1 49 D7       0001M  		RST.LIS	10h
040CE3 FD 7E 01    1796   	ld a,(iy + 1)
040CE6             1797   	vdu_a
040CE6 49 D7       0001M  		RST.LIS	10h
040CE8             1798   
040CE8 C9          1799   	ret
040CE9             1800   
040CE9             1801   ; draw a filled rectangle
040CE9             1802   fn_rectf:
040CE9 DD 21 20 1A 1803   	ld ix,x1
       04          
040CEE FD 21 22 1A 1804   	ld iy,y1
       04          
040CF3             1805   
040CF3             1806   	vdu 25
040CF3 3E 19       0001M  		LD	A, function
040CF5 49 D7       0002M  		RST.LIS	10h
040CF7             1807   	vdu 4
040CF7 3E 04       0001M  		LD	A, function
040CF9 49 D7       0002M  		RST.LIS	10h
040CFB DD 7E 00    1808   	ld a,(ix+0)
040CFE             1809   	vdu_a
040CFE 49 D7       0001M  		RST.LIS	10h
040D00 DD 7E 01    1810   	ld a,(ix+1)
040D03             1811   	vdu_a
040D03 49 D7       0001M  		RST.LIS	10h
040D05 FD 7E 00    1812   	ld a,(iy+0)
040D08             1813   	vdu_a
040D08 49 D7       0001M  		RST.LIS	10h
040D0A FD 7E 01    1814   	ld a,(iy+1)
040D0D             1815   	vdu_a
040D0D 49 D7       0001M  		RST.LIS	10h
040D0F             1816   
040D0F DD 21 24 1A 1817   	ld ix,x2
       04          
040D14 FD 21 26 1A 1818   	ld iy,y2
       04          
040D19             1819   
040D19             1820   	vdu 25
040D19 3E 19       0001M  		LD	A, function
040D1B 49 D7       0002M  		RST.LIS	10h
040D1D             1821   	vdu 101
040D1D 3E 65       0001M  		LD	A, function
040D1F 49 D7       0002M  		RST.LIS	10h
040D21 DD 7E 00    1822   	ld a,(ix+0)
040D24             1823   	vdu_a
040D24 49 D7       0001M  		RST.LIS	10h
040D26 DD 7E 01    1824   	ld a,(ix+1)
040D29             1825   	vdu_a
040D29 49 D7       0001M  		RST.LIS	10h
040D2B FD 7E 00    1826   	ld a,(iy+0)
040D2E             1827   	vdu_a
040D2E 49 D7       0001M  		RST.LIS	10h
040D30 FD 7E 01    1828   	ld a,(iy+1)
040D33             1829   	vdu_a
040D33 49 D7       0001M  		RST.LIS	10h
040D35             1830   
040D35 C9          1831   	ret
040D36             1832   
040D36             1833   fn_calc_pixel_coords:
040D36 11 00 00 00 1834   	ld de,$000000 ; reset deu
040D3A             1835   
040D3A             1836   	; calculate coordinates x of the resized pixel
040D3A 21 30 1A 04 1837   	ld hl,xpix
040D3E 5E          1838   	ld e,(hl) ; E = xpix
040D3F 21 34 1A 04 1839   	ld hl,pixel_width
040D43 56          1840   	ld d,(hl) ; D = pixel_width
040D44 D5          1841   	push de
040D45 E1          1842   	pop hl ; HL = DE
040D46 ED 6C       1843   	mlt hl ; HL = xpix * pixel_width
040D48 DD 21 28 1A 1844   	ld ix,xs1
       04          
040D4D DD 5E 00    1845   	ld e,(ix+0)
040D50 DD 56 01    1846   	ld d,(ix+1)
040D53 13          1847   	inc de ; DE = xs1 + 1
040D54 19          1848   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040D55 FD 21 20 1A 1849   	ld iy,x1
       04          
040D5A FD 75 00    1850   	ld (iy+0),l
040D5D FD 74 01    1851   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040D60 E5          1852   	push hl
040D61 21 34 1A 04 1853   	ld hl,pixel_width
040D65 16 00       1854   	ld d,0
040D67 5E          1855   	ld e,(hl)
040D68 E1          1856   	pop hl
040D69 19          1857   	add hl,de
040D6A 2B          1858   	dec hl
040D6B FD 21 24 1A 1859   	ld iy,x2
       04          
040D70 FD 75 00    1860   	ld (iy+0),l
040D73 FD 74 01    1861   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040D76             1862   
040D76 11 00 00 00 1863   	ld de,$000000 ; reset deu
040D7A             1864   
040D7A             1865   	; calculate coordinates y of the resized pixel
040D7A 21 31 1A 04 1866   	ld hl,ypix
040D7E 5E          1867   	ld e,(hl) ; E = ypix
040D7F 21 34 1A 04 1868   	ld hl,pixel_width
040D83 56          1869   	ld d,(hl) ; D = pixel_width
040D84 D5          1870   	push de
040D85 E1          1871   	pop hl ; HL = DE
040D86 ED 6C       1872   	mlt hl ; HL = ypix * pixel_width
040D88 DD 21 2A 1A 1873   	ld ix,ys1
       04          
040D8D DD 5E 00    1874   	ld e,(ix+0)
040D90 DD 56 01    1875   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040D93 13          1876   	inc de ; DE = ys1 + 1
040D94 19          1877   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040D95 FD 21 22 1A 1878   	ld iy,y1
       04          
040D9A FD 75 00    1879   	ld (iy+0),l
040D9D FD 74 01    1880   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040DA0 E5          1881   	push hl
040DA1 21 34 1A 04 1882   	ld hl,pixel_width
040DA5 16 00       1883   	ld d,0
040DA7 5E          1884   	ld e,(hl)
040DA8 E1          1885   	pop hl
040DA9 19          1886   	add hl,de
040DAA 2B          1887   	dec hl
040DAB FD 21 26 1A 1888   	ld iy,y2
       04          
040DB0 FD 75 00    1889   	ld (iy+0),l
040DB3 FD 74 01    1890   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040DB6             1891   
040DB6 C9          1892   	ret
040DB7             1893   
040DB7             1894   ; draw the resized pixel border, with its color
040DB7             1895   fn_draw_pixel_with_border:
040DB7 CD CB 0D 04 1896   	call fn_draw_pixel_without_border
040DBB             1897   
040DBB             1898   	; set graphics pen
040DBB             1899   	vdu 18
040DBB 3E 12       0001M  		LD	A, function
040DBD 49 D7       0002M  		RST.LIS	10h
040DBF             1900   	vdu 0
040DBF 3E 00       0001M  		LD	A, function
040DC1 49 D7       0002M  		RST.LIS	10h
040DC3             1901   	vdu 1 ; pen 1
040DC3 3E 01       0001M  		LD	A, function
040DC5 49 D7       0002M  		RST.LIS	10h
040DC7             1902   
040DC7             1903   	; draw the sprite's border rectangle
040DC7 C3 2A 0C 04 1904   	jp fn_rect
040DCB             1905   
040DCB             1906   ; draw the resized pixel color
040DCB             1907   fn_draw_pixel_without_border:
040DCB CD 36 0D 04 1908   	call fn_calc_pixel_coords
040DCF             1909   
040DCF             1910   	; set graphics pen
040DCF             1911   	vdu 18
040DCF 3E 12       0001M  		LD	A, function
040DD1 49 D7       0002M  		RST.LIS	10h
040DD3             1912   	vdu 0
040DD3 3E 00       0001M  		LD	A, function
040DD5 49 D7       0002M  		RST.LIS	10h
040DD7 CD E1 0D 04 1913   	call fn_get_pixel_color
040DDB             1914   	vdu_a
040DDB 49 D7       0001M  		RST.LIS	10h
040DDD             1915   
040DDD             1916   	; draw the sprite's color rectangle
040DDD C3 E9 0C 04 1917   	jp fn_rectf
040DE1             1918   
040DE1             1919   ; get pixel color value in the sprite buffer
040DE1             1920   ; returns A: pixel color (0-63)
040DE1             1921   fn_get_pixel_color:
040DE1 11 00 00 00 1922   	ld de,$000000 ; reset deu
040DE5             1923   
040DE5             1924   	; calculate the offset to add to the address
040DE5 21 31 1A 04 1925   	ld hl,ypix
040DE9 5E          1926   	ld e,(hl) ; E = ypix
040DEA 21 35 1A 04 1927   	ld hl,spr_size
040DEE 56          1928   	ld d,(hl) ; D = sprsize
040DEF D5          1929   	push de
040DF0 E1          1930   	pop hl
040DF1 ED 6C       1931   	mlt hl ; HL = ypix * sprsize
040DF3 E5          1932   	push hl
040DF4 21 30 1A 04 1933   	ld hl,xpix
040DF8 5E          1934   	ld e,(hl)
040DF9 16 00       1935   	ld d,0
040DFB E1          1936   	pop hl
040DFC 19          1937   	add hl,de ; HL = (ypix * sprsize) + xpix
040DFD             1938   
040DFD 11 5B 1B 04 1939   	ld de,current_frame
040E01 1A          1940   	ld a,(de)
040E02 FE 00       1941   	cp 0
040E04 28 16       1942   	jr z,gpc_end_loop
040E06             1943   
040E06 47          1944   	ld b,a
040E07 E5          1945   	push hl
040E08 11 00 00 00 1946   	ld de,$000000
040E0C 21 35 1A 04 1947   	ld hl,spr_size
040E10 5E          1948   	ld e,(hl)
040E11 56          1949   	ld d,(hl)
040E12 D5          1950   	push de
040E13 E1          1951   	pop hl
040E14 ED 6C       1952   	mlt hl
040E16 E5          1953   	push hl
040E17 D1          1954   	pop de ; DE = sprsize²
040E18 E1          1955   	pop hl
040E19             1956   
040E19             1957   gpc_loop:
040E19 19          1958   	add hl,de
040E1A 10 FD       1959   	djnz gpc_loop
040E1C             1960   
040E1C             1961   gpc_end_loop:
040E1C             1962   	; add the offset to the address
040E1C 11 64 1B 04 1963   	ld de,sprite_buffer
040E20 19          1964   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040E21             1965   
040E21             1966   	; get pixel color value
040E21 7E          1967   	ld a,(hl)
040E22             1968   
040E22 C9          1969   	ret
040E23             1970   
040E23             1971   ; get pixel color value in the sprite buffer
040E23             1972   ; A: pixel color (0-63)
040E23             1973   fn_set_pixel_color:
040E23 11 00 00 00 1974   	ld de,$000000 ; reset deu
040E27             1975   
040E27             1976   	; calculate the offset to add to the address
040E27 21 31 1A 04 1977   	ld hl,ypix
040E2B 5E          1978   	ld e,(hl) ; E = ypix
040E2C 21 35 1A 04 1979   	ld hl,spr_size
040E30 56          1980   	ld d,(hl) ; D = sprsize
040E31 D5          1981   	push de
040E32 E1          1982   	pop hl
040E33 ED 6C       1983   	mlt hl ; HL = ypix * sprsize
040E35 E5          1984   	push hl
040E36 21 30 1A 04 1985   	ld hl,xpix
040E3A 5E          1986   	ld e,(hl)
040E3B 16 00       1987   	ld d,0
040E3D E1          1988   	pop hl
040E3E 19          1989   	add hl,de ; HL = (ypix * sprsize) + xpix
040E3F F5          1990   	push af
040E40             1991   
040E40 11 5B 1B 04 1992   	ld de,current_frame
040E44 1A          1993   	ld a,(de)
040E45 FE 00       1994   	cp 0
040E47 28 16       1995   	jr z,spc_end_loop
040E49             1996   
040E49 47          1997   	ld b,a
040E4A E5          1998   	push hl
040E4B 11 00 00 00 1999   	ld de,$000000
040E4F 21 35 1A 04 2000   	ld hl,spr_size
040E53 5E          2001   	ld e,(hl)
040E54 56          2002   	ld d,(hl)
040E55 D5          2003   	push de
040E56 E1          2004   	pop hl
040E57 ED 6C       2005   	mlt hl
040E59 E5          2006   	push hl
040E5A D1          2007   	pop de ; DE = sprsize²
040E5B E1          2008   	pop hl
040E5C             2009   
040E5C             2010   spc_loop:
040E5C 19          2011   	add hl,de
040E5D 10 FD       2012   	djnz spc_loop
040E5F             2013   
040E5F             2014   spc_end_loop:
040E5F             2015   
040E5F             2016   	; add the offset to the address
040E5F 11 64 1B 04 2017   	ld de,sprite_buffer
040E63 19          2018   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040E64             2019   
040E64             2020   	; set pixel color value
040E64 F1          2021   	pop af
040E65 77          2022   	ld (hl),a
040E66             2023   
040E66 C9          2024   	ret
040E67             2025   
040E67             2026   fn_move_up:
040E67 21 31 1A 04 2027   	ld hl,ypix
040E6B 35          2028   	dec (hl)
040E6C C9          2029   	ret
040E6D             2030   
040E6D             2031   fn_move_down:
040E6D 21 31 1A 04 2032   	ld hl,ypix
040E71 34          2033   	inc (hl)
040E72 C9          2034   	ret
040E73             2035   
040E73             2036   fn_move_left:
040E73 21 30 1A 04 2037   	ld hl,xpix
040E77 35          2038   	dec (hl)
040E78 C9          2039   	ret
040E79             2040   
040E79             2041   fn_move_right:
040E79 21 30 1A 04 2042   	ld hl,xpix
040E7D 34          2043   	inc (hl)
040E7E C9          2044   	ret
040E7F             2045   
040E7F             2046   ; draw palette color whit border and selection
040E7F             2047   ; C = color number (0-63)
040E7F             2048   fn_draw_palette_with_border:
040E7F C5          2049   	push bc
040E80             2050   
040E80             2051   	; choose palette color
040E80             2052   	vdu 18
040E80 3E 12       0001M  		LD	A, function
040E82 49 D7       0002M  		RST.LIS	10h
040E84             2053   	vdu 0
040E84 3E 00       0001M  		LD	A, function
040E86 49 D7       0002M  		RST.LIS	10h
040E88 C1          2054   	pop bc
040E89 C5          2055   	push bc
040E8A 79          2056   	ld a,c
040E8B             2057   	vdu_a
040E8B 49 D7       0001M  		RST.LIS	10h
040E8D             2058   
040E8D             2059   	; store coordinates for a palette square
040E8D DD 21 20 1A 2060   	ld ix,x1
       04          
040E92 E1          2061   	pop hl
040E93 E5          2062   	push hl
040E94 26 05       2063   	ld h,5
040E96 ED 6C       2064   	mlt hl
040E98 E5          2065   	push hl
040E99 DD 75 00    2066   	ld (ix+0),l
040E9C DD 74 01    2067   	ld (ix+1),h
040E9F             2068   
040E9F DD 21 22 1A 2069   	ld ix,y1
       04          
040EA4 21 00 00 00 2070   	ld hl,0
040EA8 DD 75 00    2071   	ld (ix+0),l
040EAB DD 74 01    2072   	ld (ix+1),h
040EAE             2073   
040EAE DD 21 24 1A 2074   	ld ix,x2
       04          
040EB3 E1          2075   	pop hl
040EB4 11 04 00 00 2076   	ld de,4
040EB8 19          2077   	add hl,de
040EB9 DD 75 00    2078   	ld (ix+0),l
040EBC DD 74 01    2079   	ld (ix+1),h
040EBF             2080   
040EBF DD 21 26 1A 2081   	ld ix,y2
       04          
040EC4 21 0A 00 00 2082   	ld hl,10
040EC8 DD 75 00    2083   	ld (ix+0),l
040ECB DD 74 01    2084   	ld (ix+1),h
040ECE             2085   
040ECE             2086   	; draw the palette filled square
040ECE CD E9 0C 04 2087   	call fn_rectf
040ED2             2088   
040ED2             2089   	; choose pen 1
040ED2             2090   	vdu 18
040ED2 3E 12       0001M  		LD	A, function
040ED4 49 D7       0002M  		RST.LIS	10h
040ED6             2091   	vdu 0
040ED6 3E 00       0001M  		LD	A, function
040ED8 49 D7       0002M  		RST.LIS	10h
040EDA 3E 01       2092   	ld a,1
040EDC             2093   	vdu_a
040EDC 49 D7       0001M  		RST.LIS	10h
040EDE             2094   
040EDE             2095   	; draw the palette square border
040EDE CD 2A 0C 04 2096   	call fn_rect
040EE2             2097   
040EE2             2098   	; next color ?
040EE2 C1          2099   	pop bc
040EE3             2100   
040EE3 C9          2101   	ret
040EE4             2102   
040EE4             2103   ; draw palette color whitout border and selection
040EE4             2104   ; C = color number (0-63)
040EE4             2105   fn_draw_palette_without_border:
040EE4 C5          2106   	push bc
040EE5             2107   
040EE5             2108   	; choose palette color
040EE5             2109   	vdu 18
040EE5 3E 12       0001M  		LD	A, function
040EE7 49 D7       0002M  		RST.LIS	10h
040EE9             2110   	vdu 0
040EE9 3E 00       0001M  		LD	A, function
040EEB 49 D7       0002M  		RST.LIS	10h
040EED C1          2111   	pop bc
040EEE C5          2112   	push bc
040EEF 79          2113   	ld a,c
040EF0             2114   	vdu_a
040EF0 49 D7       0001M  		RST.LIS	10h
040EF2             2115   
040EF2             2116   	; store coordinates for a palette square
040EF2 DD 21 20 1A 2117   	ld ix,x1
       04          
040EF7 E1          2118   	pop hl
040EF8 E5          2119   	push hl
040EF9 26 05       2120   	ld h,5
040EFB ED 6C       2121   	mlt hl
040EFD E5          2122   	push hl
040EFE DD 75 00    2123   	ld (ix+0),l
040F01 DD 74 01    2124   	ld (ix+1),h
040F04             2125   
040F04 DD 21 22 1A 2126   	ld ix,y1
       04          
040F09 21 00 00 00 2127   	ld hl,0
040F0D DD 75 00    2128   	ld (ix+0),l
040F10 DD 74 01    2129   	ld (ix+1),h
040F13             2130   
040F13 DD 21 24 1A 2131   	ld ix,x2
       04          
040F18 E1          2132   	pop hl
040F19 11 04 00 00 2133   	ld de,4
040F1D 19          2134   	add hl,de
040F1E DD 75 00    2135   	ld (ix+0),l
040F21 DD 74 01    2136   	ld (ix+1),h
040F24             2137   
040F24 DD 21 26 1A 2138   	ld ix,y2
       04          
040F29 21 0A 00 00 2139   	ld hl,10
040F2D DD 75 00    2140   	ld (ix+0),l
040F30 DD 74 01    2141   	ld (ix+1),h
040F33             2142   
040F33             2143   	; draw the palette filled square
040F33 CD E9 0C 04 2144   	call fn_rectf
040F37             2145   
040F37 C1          2146   	pop bc
040F38             2147   
040F38 C9          2148   	ret
040F39             2149   
040F39             2150   ; get an ascii key value
040F39             2151   fn_input_key:
040F39 C5          2152   	push bc
040F3A             2153   	moscall mos_getkey
040F3A 3E 00       0001M  		LD	A, function
040F3C 49 CF       0002M  		RST.LIS	08h
040F3E C1          2154   	pop bc
040F3F C9          2155   	ret
040F40             2156   
040F40             2157   ; input a text of 8 chars
040F40             2158   fn_input_text8:
040F40             2159   	; locate x,y
040F40             2160   	vdu 31
040F40 3E 1F       0001M  		LD	A, function
040F42 49 D7       0002M  		RST.LIS	10h
040F44             2161   	vdu FILENAME_X
040F44 3E 07       0001M  		LD	A, function
040F46 49 D7       0002M  		RST.LIS	10h
040F48             2162   	vdu FILENAME_Y
040F48 3E 18       0001M  		LD	A, function
040F4A 49 D7       0002M  		RST.LIS	10h
040F4C             2163   
040F4C             2164   	; print text
040F4C 21 A2 1A 04 2165   	ld hl,filename_label
040F50 01 00 00 00 2166   	ld bc,0
040F54 AF          2167   	xor a
040F55 49 DF       2168   	rst.lis $18
040F57             2169   
040F57             2170   	; show cursor
040F57             2171   	vdu 23
040F57 3E 17       0001M  		LD	A, function
040F59 49 D7       0002M  		RST.LIS	10h
040F5B             2172   	vdu 1
040F5B 3E 01       0001M  		LD	A, function
040F5D 49 D7       0002M  		RST.LIS	10h
040F5F             2173   	vdu 1
040F5F 3E 01       0001M  		LD	A, function
040F61 49 D7       0002M  		RST.LIS	10h
040F63             2174   
040F63 0E 00       2175   	ld c,0
040F65             2176   
040F65             2177   it8_loop:
040F65             2178   	; get ascii key
040F65 CD 39 0F 04 2179   	call fn_input_key
040F69 B7          2180   	or a
040F6A CA 65 0F 04 2181   	jp z,it8_loop
040F6E             2182   
040F6E FE 2E       2183   	cp '.'
040F70 CA BA 0F 04 2184   	jp z,it8l_add_char
040F74             2185   
040F74 FE 2D       2186   	cp '-'
040F76 CA BA 0F 04 2187   	jp z,it8l_add_char
040F7A             2188   
040F7A FE 5F       2189   	cp '_'
040F7C CA BA 0F 04 2190   	jp z,it8l_add_char
040F80             2191   
040F80 FE 7F       2192   	cp 127
040F82 CA EE 0F 04 2193   	jp z,it8l_backspace
040F86             2194   
040F86 FE 0D       2195   	cp 13
040F88 CA 2C 10 04 2196   	jp z,it8l_return
040F8C             2197   
040F8C FE 30       2198   	cp '0'
040F8E DA 65 0F 04 2199   	jp c,it8_loop
040F92             2200   
040F92 16 39       2201   	ld d,'9'
040F94 14          2202   	inc d
040F95 BA          2203   	cp d
040F96 DA BA 0F 04 2204   	jp c,it8l_add_char
040F9A             2205   
040F9A FE 41       2206   	cp 'A'
040F9C DA 65 0F 04 2207   	jp c,it8_loop
040FA0             2208   
040FA0 16 5A       2209   	ld d,'Z'
040FA2 14          2210   	inc d
040FA3 BA          2211   	cp d
040FA4 DA BA 0F 04 2212   	jp c,it8l_add_char
040FA8             2213   
040FA8 FE 61       2214   	cp 'a'
040FAA DA 65 0F 04 2215   	jp c,it8_loop
040FAE             2216   
040FAE 16 7A       2217   	ld d,'z'
040FB0 14          2218   	inc d
040FB1 BA          2219   	cp d
040FB2 DA BA 0F 04 2220   	jp c,it8l_add_char
040FB6             2221   
040FB6 C3 65 0F 04 2222   	jp it8_loop
040FBA             2223   
040FBA             2224   it8l_add_char:
040FBA F5          2225   	push af
040FBB 79          2226   	ld a,c
040FBC FE 10       2227   	cp 16
040FBE 38 05       2228   	jr c,it8l_poke_char
040FC0 F1          2229   	pop af
040FC1 C3 65 0F 04 2230   	jp it8_loop
040FC5             2231   
040FC5             2232   it8l_poke_char:
040FC5 F1          2233   	pop af
040FC6 21 AC 1A 04 2234   	ld hl,filename
040FCA 06 00       2235   	ld b,0
040FCC 09          2236   	add hl,bc
040FCD 77          2237   	ld (hl),a
040FCE 0C          2238   	inc c
040FCF F5          2239   	push af
040FD0 C5          2240   	push bc
040FD1             2241   
040FD1             2242   	; locate x,y
040FD1             2243   	vdu 31
040FD1 3E 1F       0001M  		LD	A, function
040FD3 49 D7       0002M  		RST.LIS	10h
040FD5             2244   	vdu FILENAME_X+9
040FD5 3E 10       0001M  		LD	A, function
040FD7 49 D7       0002M  		RST.LIS	10h
040FD9             2245   	vdu FILENAME_Y
040FD9 3E 18       0001M  		LD	A, function
040FDB 49 D7       0002M  		RST.LIS	10h
040FDD             2246   
040FDD             2247   	; print text
040FDD 21 AC 1A 04 2248   	ld hl,filename
040FE1 01 00 00 00 2249   	ld bc,0
040FE5 AF          2250   	xor a
040FE6 49 DF       2251   	rst.lis $18
040FE8             2252   
040FE8 C1          2253   	pop bc
040FE9 F1          2254   	pop af
040FEA             2255   
040FEA C3 65 0F 04 2256   	jp it8_loop
040FEE             2257   
040FEE             2258   it8l_backspace:
040FEE 79          2259   	ld a,c
040FEF FE 00       2260   	cp 0
040FF1 CA 65 0F 04 2261   	jp z,it8_loop
040FF5             2262   
040FF5             2263   	; delete a character of the filename
040FF5 21 AC 1A 04 2264   	ld hl,filename
040FF9 06 00       2265   	ld b,0
040FFB 09          2266   	add hl,bc
040FFC AF          2267   	xor a
040FFD 77          2268   	ld (hl),a
040FFE 0D          2269   	dec c
040FFF C5          2270   	push bc
041000             2271   
041000             2272   	; locate x,y
041000             2273   	vdu 31
041000 3E 1F       0001M  		LD	A, function
041002 49 D7       0002M  		RST.LIS	10h
041004 3E 10       2274   	ld a,FILENAME_X+9
041006 81          2275   	add a,c
041007             2276   	vdu_a
041007 49 D7       0001M  		RST.LIS	10h
041009             2277   	vdu FILENAME_Y
041009 3E 18       0001M  		LD	A, function
04100B 49 D7       0002M  		RST.LIS	10h
04100D             2278   
04100D C5          2279   	push bc
04100E             2280   
04100E             2281   	; print text
04100E 21 D1 1A 04 2282   	ld hl,spacechar
041012 01 00 00 00 2283   	ld bc,0
041016 AF          2284   	xor a
041017 49 DF       2285   	rst.lis $18
041019             2286   
041019 C1          2287   	pop bc
04101A             2288   
04101A             2289   	; locate x,y
04101A             2290   	vdu 31
04101A 3E 1F       0001M  		LD	A, function
04101C 49 D7       0002M  		RST.LIS	10h
04101E 3E 10       2291   	ld a,FILENAME_X+9
041020 81          2292   	add a,c
041021             2293   	vdu_a
041021 49 D7       0001M  		RST.LIS	10h
041023             2294   	vdu FILENAME_Y
041023 3E 18       0001M  		LD	A, function
041025 49 D7       0002M  		RST.LIS	10h
041027             2295   
041027 C1          2296   	pop bc
041028 C3 65 0F 04 2297   	jp it8_loop
04102C             2298   
04102C             2299   it8l_return:
04102C             2300   	; locate x,y
04102C             2301   	vdu 31
04102C 3E 1F       0001M  		LD	A, function
04102E 49 D7       0002M  		RST.LIS	10h
041030             2302   	vdu FILENAME_X
041030 3E 07       0001M  		LD	A, function
041032 49 D7       0002M  		RST.LIS	10h
041034             2303   	vdu FILENAME_Y
041034 3E 18       0001M  		LD	A, function
041036 49 D7       0002M  		RST.LIS	10h
041038             2304   
041038             2305   	; print text
041038 21 D3 1A 04 2306   	ld hl,void_filename
04103C 01 00 00 00 2307   	ld bc,0
041040 AF          2308   	xor a
041041 49 DF       2309   	rst.lis $18
041043             2310   
041043             2311   	; hide cursor
041043             2312   	vdu 23
041043 3E 17       0001M  		LD	A, function
041045 49 D7       0002M  		RST.LIS	10h
041047             2313   	vdu 1
041047 3E 01       0001M  		LD	A, function
041049 49 D7       0002M  		RST.LIS	10h
04104B             2314   	vdu 0
04104B 3E 00       0001M  		LD	A, function
04104D 49 D7       0002M  		RST.LIS	10h
04104F             2315   
04104F             2316   it8l_endloop:
04104F 21 B6 FF FF 2317   	ld hl,KEY_RETURN
041053 CD C0 18 04 2318   	call fn_inkey
041057 FE 01       2319   	CP 1
041059 CA 4F 10 04 2320   	jp z,it8l_endloop
04105D             2321   
04105D C9          2322   	ret
04105E             2323   
04105E             2324   ; load a palette
04105E             2325   fn_load_palette:
04105E             2326   	; clear the filename on the screen
04105E 21 AC 1A 04 2327   	ld hl,filename
041062 06 10       2328   	ld b,FILENAME_LENGTH
041064 AF          2329   	xor a
041065             2330   
041065             2331   lp_clear_filename:
041065 77          2332   	ld (hl),a
041066 23          2333   	inc hl
041067 10 FC       2334   	djnz lp_clear_filename
041069             2335   
041069             2336   	; get filename
041069 CD 40 0F 04 2337   	call fn_input_text8
04106D             2338   
04106D             2339   	; set path to 'palettes/'
04106D 21 C5 1A 04 2340   	ld hl,palette_path
041071             2341   	moscall mos_cd
041071 3E 03       0001M  		LD	A, function
041073 49 CF       0002M  		RST.LIS	08h
041075             2342   
041075             2343   	; exit on folder error
041075 FE 00       2344   	cp 0
041077 C2 39 11 04 2345   	jp nz,lp_folder_error
04107B             2346   
04107B             2347   	; open the file for read
04107B 21 AC 1A 04 2348   	ld hl,filename
04107F 0E 01       2349   	ld c,fa_open_existing|fa_read
041081             2350   	moscall mos_fopen
041081 3E 0A       0001M  		LD	A, function
041083 49 CF       0002M  		RST.LIS	08h
041085             2351   
041085             2352   	; exit on file error
041085 FE 00       2353   	cp 0
041087 CA 8B 12 04 2354   	jp z,lp_file_error
04108B             2355   
04108B             2356   	; filehandle -> C
04108B 4F          2357   	ld c,a
04108C             2358   
04108C             2359   	; get palette header
04108C 21 64 3B 04 2360   	ld hl,header_buffer
041090 11 10 00 00 2361   	ld de,16
041094 C5          2362   	push bc ; store filehandle
041095             2363   	moscall mos_fread
041095 3E 1A       0001M  		LD	A, function
041097 49 CF       0002M  		RST.LIS	08h
041099 C1          2364   	pop bc ; restore filehandle
04109A 3E 10       2365   	ld a,16
04109C BB          2366   	cp e
04109D C2 1D 11 04 2367   	jp nz,lp_close_error
0410A1             2368   
0410A1             2369   	; compare loaded header with needed header
0410A1 11 C0 3E 04 2370   	ld de,header
0410A5 21 64 3B 04 2371   	ld hl,header_buffer
0410A9 47          2372   	ld b,a
0410AA             2373   
0410AA             2374   lp_compare:
0410AA 1A          2375   	ld a,(de)
0410AB BE          2376   	cp (hl)
0410AC C2 41 11 04 2377   	jp nz,lp_header_error
0410B0             2378   
0410B0 13          2379   	inc de
0410B1 23          2380   	inc hl
0410B2 05          2381   	dec b
0410B3             2382   
0410B3 78          2383   	ld a,b
0410B4 FE 00       2384   	cp 0
0410B6 C2 AA 10 04 2385   	jp nz,lp_compare
0410BA             2386   
0410BA             2387   	; prepare to read the number of colors
0410BA 21 74 3B 04 2388   	ld hl,color_buffer
0410BE             2389   
0410BE             2390   lp_getcount:
0410BE             2391   	; read a string for colors count
0410BE C5          2392   	push bc
0410BF E5          2393   	push hl
0410C0             2394   
0410C0             2395   	; read colors data
0410C0             2396   	moscall mos_fgetc
0410C0 3E 0C       0001M  		LD	A, function
0410C2 49 CF       0002M  		RST.LIS	08h
0410C4             2397   
0410C4 E1          2398   	pop hl
0410C5 C1          2399   	pop bc
0410C6             2400   
0410C6             2401   	; exit if eof
0410C6 DA 1D 11 04 2402   	jp c,lp_close_error
0410CA             2403   
0410CA FE 30       2404   	cp 48 ; < 0
0410CC 38 0A       2405   	jr c,lpgc_next
0410CE FE 3A       2406   	cp 58 ; > 9
0410D0 D2 86 12 04 2407   	jp nc,lp_data_error
0410D4             2408   
0410D4 77          2409   	ld (hl),a
0410D5 23          2410   	inc hl
0410D6 18 E6       2411   	jr lp_getcount
0410D8             2412   
0410D8             2413   lpgc_next:
0410D8 F5          2414   	push af
0410D9 3E 0D       2415   	ld a,13
0410DB 77          2416   	ld (hl),a ; store CR
0410DC F1          2417   	pop af
0410DD             2418   
0410DD             2419   	; test CR
0410DD FE 0D       2420   	cp 13
0410DF C2 1D 11 04 2421   	jp nz,lp_close_error
0410E3             2422   
0410E3 C5          2423   	push bc
0410E4             2424   
0410E4             2425   	; read LF
0410E4             2426   	moscall mos_fgetc
0410E4 3E 0C       0001M  		LD	A, function
0410E6 49 CF       0002M  		RST.LIS	08h
0410E8             2427   
0410E8 C1          2428   	pop bc
0410E9             2429   
0410E9             2430   	; test LF
0410E9 FE 0A       2431   	cp 10
0410EB C2 1D 11 04 2432   	jp nz,lp_close_error
0410EF             2433   
0410EF             2434   	; prepare to read color strings
0410EF 11 00 00 00 2435   	ld de,#000000
0410F3 21 77 3B 04 2436   	ld hl,palette_buffer
0410F7             2437   
0410F7             2438   lp_load_pal_loop:
0410F7 C5          2439   	push bc
0410F8 D5          2440   	push de
0410F9 E5          2441   	push hl
0410FA             2442   
0410FA             2443   	; read colors data
0410FA             2444   	moscall mos_fgetc
0410FA 3E 0C       0001M  		LD	A, function
0410FC 49 CF       0002M  		RST.LIS	08h
0410FE             2445   
0410FE             2446   	; exit if eof
0410FE DA 16 11 04 2447   	jp c,lp_loaded
041102             2448   
041102 E1          2449   	pop hl
041103 D1          2450   	pop de
041104 C1          2451   	pop bc
041105             2452   
041105 77          2453   	ld (hl),a ; store loaded char in palette buffer
041106 23          2454   	inc hl
041107 13          2455   	inc de ; count chars
041108 7A          2456   	ld a,d
041109 FE 03       2457   	cp MAX_PAL_DATA_HI
04110B DA F7 10 04 2458   	jp c,lp_load_pal_loop
04110F 7B          2459   	ld a,e
041110 FE 44       2460   	cp MAX_PAL_DATA_LO
041112 DA F7 10 04 2461   	jp c,lp_load_pal_loop
041116             2462   
041116             2463   ; end of file
041116             2464   lp_loaded:
041116 E1          2465   	pop hl
041117 D1          2466   	pop de
041118 C1          2467   	pop bc
041119             2468   
041119 C3 49 11 04 2469   	jp lp_close
04111D             2470   
04111D             2471   lp_close_error:
04111D C5          2472   	push bc
04111E             2473   
04111E             2474   	; read error
04111E CD D6 16 04 2475   	call fn_print_file_error
041122             2476   
041122 C1          2477   	pop bc
041123             2478   
041123             2479   	; close the file
041123             2480   	moscall mos_fclose
041123 3E 0B       0001M  		LD	A, function
041125 49 CF       0002M  		RST.LIS	08h
041127             2481   
041127             2482   	; set path to home
041127 21 CE 1A 04 2483   	ld hl,back_path
04112B             2484   	moscall mos_cd
04112B 3E 03       0001M  		LD	A, function
04112D 49 CF       0002M  		RST.LIS	08h
04112F             2485   
04112F             2486   	; exit on error
04112F FE 00       2487   	cp 0
041131 C2 39 11 04 2488   	jp nz,lp_folder_error
041135             2489   
041135 C3 80 12 04 2490   	jp lp_exit
041139             2491   
041139             2492   lp_folder_error:
041139             2493   	; write error
041139 CD 0D 17 04 2494   	call fn_print_folder_error
04113D C3 80 12 04 2495   	jp lp_exit
041141             2496   
041141             2497   lp_header_error:
041141             2498   	; write error
041141 CD 44 17 04 2499   	call fn_print_header_error
041145 C3 80 12 04 2500   	jp lp_exit
041149             2501   
041149             2502   lp_close:
041149 C5          2503   	push bc
04114A             2504   
04114A             2505   	; close the file
04114A             2506   	moscall mos_fclose
04114A 3E 0B       0001M  		LD	A, function
04114C 49 CF       0002M  		RST.LIS	08h
04114E             2507   
04114E C1          2508   	pop bc
04114F             2509   
04114F             2510   	; set path to home
04114F 21 CE 1A 04 2511   	ld hl,back_path
041153             2512   	moscall mos_cd
041153 3E 03       0001M  		LD	A, function
041155 49 CF       0002M  		RST.LIS	08h
041157             2513   
041157             2514   	; exit on error
041157 FE 00       2515   	cp 0
041159 C2 39 11 04 2516   	jp nz,lp_folder_error
04115D             2517   
04115D             2518   	; read the number of colors we have in the palette
04115D 21 74 3B 04 2519   	ld hl,color_buffer
041161 7E          2520   	ld a,(hl)
041162 47          2521   	ld b,a
041163 23          2522   	inc hl
041164 7E          2523   	ld a,(hl)
041165 4F          2524   	ld c,a ; bc = 1st char, 2nd char or CR
041166             2525   
041166             2526   	; first is a char number ?
041166 78          2527   	ld a,b
041167 FE 30       2528   	cp 48
041169 DA 86 12 04 2529   	jp c,lp_data_error
04116D FE 3A       2530   	cp 58
04116F D2 86 12 04 2531   	jp nc,lp_data_error
041173             2532   
041173 79          2533   	ld a,c
041174 FE 0D       2534   	cp 13
041176 C2 98 11 04 2535   	jp nz,lp_two_numbers
04117A             2536   
04117A             2537   ; only one number
04117A 78          2538   	ld a,b
04117B D6 30       2539   	sub 48
04117D             2540   
04117D 21 56 1B 04 2541   	ld hl,new_colors_count
041181 77          2542   	ld (hl),a
041182             2543   
041182 FE 00       2544   	cp 0
041184 CA 86 12 04 2545   	jp z,lp_data_error
041188 FE 03       2546   	cp 3
04118A DA CD 11 04 2547   	jp c,lp_two_colors
04118E FE 05       2548   	cp 5
041190 DA EE 11 04 2549   	jp c,lp_four_colors
041194             2550   
041194 C3 0F 12 04 2551   	jp lp_sixteen_colors
041198             2552   
041198             2553   ; two numbers
041198             2554   lp_two_numbers:
041198 79          2555   	ld a,c
041199 FE 30       2556   	cp 48
04119B DA 86 12 04 2557   	jp c,lp_data_error
04119F FE 3A       2558   	cp 58
0411A1 D2 86 12 04 2559   	jp nc,lp_data_error
0411A5             2560   
0411A5 78          2561   	ld a,b
0411A6 D6 30       2562   	sub 48
0411A8 01 00 00 00 2563   	ld bc,#000000
0411AC 47          2564   	ld b,a
0411AD 0E 0A       2565   	ld c,10
0411AF ED 4C       2566   	mlt bc
0411B1 81          2567   	add a,c
0411B2             2568   
0411B2 21 56 1B 04 2569   	ld hl,new_colors_count
0411B6 77          2570   	ld (hl),a
0411B7             2571   
0411B7 FE 0A       2572   	cp 10
0411B9 DA 86 12 04 2573   	jp c,lp_data_error
0411BD FE 11       2574   	cp 17
0411BF DA 0F 12 04 2575   	jp c,lp_sixteen_colors
0411C3 FE 41       2576   	cp 65
0411C5 DA 30 12 04 2577   	jp c,lp_sixty_four_colors
0411C9             2578   
0411C9 C3 86 12 04 2579   	jp lp_data_error
0411CD             2580   
0411CD             2581   lp_two_colors:
0411CD 21 55 1B 04 2582   	ld hl,colors_count
0411D1 3E 02       2583   	ld a,2
0411D3 77          2584   	ld (hl),a
0411D4             2585   
0411D4 47          2586   	ld b,a
0411D5 21 36 1A 04 2587   	ld hl,current_pen
0411D9 7E          2588   	ld a,(hl)
0411DA B8          2589   	cp b
0411DB 38 02       2590   	jr c,lptc_done
0411DD 05          2591   	dec b
0411DE 70          2592   	ld (hl),b
0411DF             2593   
0411DF             2594   lptc_done:
0411DF 21 56 1B 04 2595   	ld hl,new_colors_count
0411E3 7E          2596   	ld a,(hl) ; real number of coulours
0411E4 06 00       2597   	ld b,0 ; start wit color 0
0411E6 21 77 3B 04 2598   	ld hl,palette_buffer ; palette will be got here
0411EA C3 51 12 04 2599   	jp lp_read_colors
0411EE             2600   
0411EE             2601   lp_four_colors:
0411EE 21 55 1B 04 2602   	ld hl,colors_count
0411F2 3E 04       2603   	ld a,4
0411F4 77          2604   	ld (hl),a
0411F5             2605   
0411F5 47          2606   	ld b,a
0411F6 21 36 1A 04 2607   	ld hl,current_pen
0411FA 7E          2608   	ld a,(hl)
0411FB B8          2609   	cp b
0411FC 38 02       2610   	jr c,lpfc_done
0411FE 05          2611   	dec b
0411FF 70          2612   	ld (hl),b
041200             2613   
041200             2614   lpfc_done:
041200 21 56 1B 04 2615   	ld hl,new_colors_count
041204 7E          2616   	ld a,(hl) ; real number of coulours
041205 06 00       2617   	ld b,0 ; start wit color 0
041207 21 77 3B 04 2618   	ld hl,palette_buffer ; palette will be got here
04120B C3 51 12 04 2619   	jp lp_read_colors
04120F             2620   
04120F             2621   lp_sixteen_colors:
04120F 21 55 1B 04 2622   	ld hl,colors_count
041213 3E 10       2623   	ld a,16
041215 77          2624   	ld (hl),a
041216             2625   
041216 47          2626   	ld b,a
041217 21 36 1A 04 2627   	ld hl,current_pen
04121B 7E          2628   	ld a,(hl)
04121C B8          2629   	cp b
04121D 38 02       2630   	jr c,lpsc_done
04121F 05          2631   	dec b
041220 70          2632   	ld (hl),b
041221             2633   
041221             2634   lpsc_done:
041221 21 56 1B 04 2635   	ld hl,new_colors_count
041225 7E          2636   	ld a,(hl) ; real number of coulours
041226 06 00       2637   	ld b,0 ; start wit color 0
041228 21 77 3B 04 2638   	ld hl,palette_buffer ; palette will be got here
04122C C3 51 12 04 2639   	jp lp_read_colors
041230             2640   
041230             2641   lp_sixty_four_colors:
041230 21 55 1B 04 2642   	ld hl,colors_count
041234 3E 40       2643   	ld a,64
041236 77          2644   	ld (hl),a
041237             2645   
041237 47          2646   	ld b,a
041238 21 36 1A 04 2647   	ld hl,current_pen
04123C 7E          2648   	ld a,(hl)
04123D B8          2649   	cp b
04123E 38 02       2650   	jr c,lpsfc_done
041240 05          2651   	dec b
041241 70          2652   	ld (hl),b
041242             2653   
041242             2654   lpsfc_done:
041242 21 56 1B 04 2655   	ld hl,new_colors_count
041246 7E          2656   	ld a,(hl) ; real number of coulours
041247 06 00       2657   	ld b,0 ; start wit color 0
041249 21 77 3B 04 2658   	ld hl,palette_buffer ; palette will be taken here
04124D C3 51 12 04 2659   	jp lp_read_colors
041251             2660   
041251             2661   lp_read_colors:
041251 F5          2662   	push af
041252             2663   
041252 CD 9E 12 04 2664   	call lp_read_tint ; read red tint
041256             2665   
041256 E5          2666   	push hl
041257 21 57 1B 04 2667   	ld hl,red_tint
04125B 77          2668   	ld (hl),a
04125C E1          2669   	pop hl
04125D             2670   
04125D CD 9E 12 04 2671   	call lp_read_tint ; read green tint
041261             2672   
041261 E5          2673   	push hl
041262 21 58 1B 04 2674   	ld hl,green_tint
041266 77          2675   	ld (hl),a
041267 E1          2676   	pop hl
041268             2677   
041268 CD 9E 12 04 2678   	call lp_read_tint ; read blue tint
04126C             2679   
04126C E5          2680   	push hl
04126D 21 59 1B 04 2681   	ld hl,blue_tint
041271 77          2682   	ld (hl),a
041272 E1          2683   	pop hl
041273             2684   
041273 CD 2A 13 04 2685   	call lp_set_tint
041277             2686   
041277 F1          2687   	pop af
041278             2688   
041278 04          2689   	inc b ; increment number of colors
041279 3D          2690   	dec a ; decrement real number of colors
04127A FE 00       2691   	cp 0
04127C C2 51 12 04 2692   	jp nz,lp_read_colors
041280             2693   
041280             2694   lp_exit:
041280 C9          2695   	ret
041281             2696   
041281             2697   lp_wrong_exit:
041281 F1          2698   	pop af
041282 C3 86 12 04 2699   	jp lp_data_error
041286             2700   
041286             2701   lp_data_error:
041286 CD 7B 17 04 2702   	call fn_print_data_error
04128A C9          2703   	ret
04128B             2704   
04128B             2705   lp_file_error:
04128B CD D6 16 04 2706   	call fn_print_file_error
04128F             2707   
04128F             2708   	; set path to home
04128F 21 CE 1A 04 2709   	ld hl,back_path
041293             2710   	moscall mos_cd
041293 3E 03       0001M  		LD	A, function
041295 49 CF       0002M  		RST.LIS	08h
041297             2711   
041297             2712   	; exit on error
041297 FE 00       2713   	cp 0
041299 C2 39 11 04 2714   	jp nz,lp_folder_error
04129D             2715   
04129D C9          2716   	ret
04129E             2717   
04129E             2718   lp_read_tint:
04129E 0E 00       2719   	ld c,0 ; number of chars readen for a single string number
0412A0 11 BC 3E 04 2720   	ld de,temp_chars_buffer ; temp buffer for a string number
0412A4             2721   
0412A4             2722   	; read next string number
0412A4 CD 0E 13 04 2723   	call lprt_read_chars
0412A8             2724   
0412A8 79          2725   	ld a,c
0412A9 FE 00       2726   	cp 0 ; no numbers
0412AB CA C5 12 04 2727   	jp z,lprt_wrong_exit
0412AF FE 04       2728   	cp 4 ; too many numbers
0412B1 D2 C5 12 04 2729   	jp nc,lprt_wrong_exit
0412B5             2730   
0412B5 FE 03       2731   	cp 3
0412B7 28 29       2732   	jr z,lprt_three_int
0412B9             2733   
0412B9 FE 02       2734   	cp 2
0412BB 28 0A       2735   	jr z,lprt_two_int
0412BD             2736   
0412BD             2737   	; one int only
0412BD 11 BC 3E 04 2738   	ld de,temp_chars_buffer
0412C1 1A          2739   	ld a,(de)
0412C2 D6 30       2740   	sub 48
0412C4 C9          2741   	ret
0412C5             2742   
0412C5             2743   lprt_wrong_exit:
0412C5 AF          2744   	xor a
0412C6 C9          2745   	ret
0412C7             2746   
0412C7             2747   ; two int
0412C7             2748   lprt_two_int:
0412C7 C5          2749   	push bc
0412C8 11 BC 3E 04 2750   	ld de,temp_chars_buffer
0412CC 1A          2751   	ld a,(de)
0412CD D6 30       2752   	sub 48
0412CF D5          2753   	push de
0412D0 11 00 00 00 2754   	ld de,#000000
0412D4 5F          2755   	ld e,a
0412D5 16 0A       2756   	ld d,10
0412D7 ED 5C       2757   	mlt de
0412D9 43          2758   	ld b,e
0412DA D1          2759   	pop de
0412DB 13          2760   	inc de
0412DC 1A          2761   	ld a,(de)
0412DD D6 30       2762   	sub 48
0412DF 80          2763   	add a,b ; full int value is here
0412E0 C1          2764   	pop bc
0412E1 C9          2765   	ret
0412E2             2766   
0412E2             2767   ; three int
0412E2             2768   lprt_three_int:
0412E2 C5          2769   	push bc
0412E3 11 BC 3E 04 2770   	ld de,temp_chars_buffer
0412E7 1A          2771   	ld a,(de)
0412E8 D6 30       2772   	sub 48
0412EA D5          2773   	push de
0412EB 11 00 00 00 2774   	ld de,#000000
0412EF 5F          2775   	ld e,a
0412F0 16 64       2776   	ld d,100
0412F2 ED 5C       2777   	mlt de
0412F4 43          2778   	ld b,e
0412F5 D1          2779   	pop de
0412F6 13          2780   	inc de
0412F7 1A          2781   	ld a,(de)
0412F8 D6 30       2782   	sub 48
0412FA D5          2783   	push de
0412FB 11 00 00 00 2784   	ld de,#000000
0412FF 5F          2785   	ld e,a
041300 16 0A       2786   	ld d,10
041302 ED 5C       2787   	mlt de
041304 4B          2788   	ld c,e
041305 D1          2789   	pop de
041306 13          2790   	inc de
041307 1A          2791   	ld a,(de)
041308 D6 30       2792   	sub 48
04130A 81          2793   	add a,c
04130B 80          2794   	add a,b ; full int value is here
04130C C1          2795   	pop bc
04130D C9          2796   	ret
04130E             2797   
04130E             2798   lprt_read_chars:
04130E 3E 0D       2799   	ld a,13
041310 12          2800   	ld (de),a ; store eol as next default temp char
041311             2801   
041311 7E          2802   	ld a,(hl) ; get the new char in the palette buffer
041312 23          2803   	inc hl
041313             2804   
041313 FE 20       2805   	cp 32
041315 C8          2806   	ret z ; ret if space
041316 FE 0D       2807   	cp 13
041318 28 F4       2808   	jr z,lprt_read_chars ; loop if CR
04131A FE 0A       2809   	cp 10
04131C C8          2810   	ret z ; ret if LF
04131D FE 30       2811   	cp 48
04131F D8          2812   	ret c ; ret if not number
041320 FE 3A       2813   	cp 58
041322 D0          2814   	ret nc ; ret if not number
041323             2815   
041323             2816   ; found a number, store it
041323 12          2817   	ld (de),a
041324 13          2818   	inc de
041325 0C          2819   	inc c
041326 C3 0E 13 04 2820   	jp lprt_read_chars
04132A             2821   
04132A             2822   ; set tint (RGB = c,e,l)
04132A             2823   lp_set_tint:
04132A F5          2824   	push af
04132B C5          2825   	push bc
04132C D5          2826   	push de
04132D E5          2827   	push hl
04132E             2828   
04132E C5          2829   	push bc
04132F             2830   	vdu 19
04132F 3E 13       0001M  		LD	A, function
041331 49 D7       0002M  		RST.LIS	10h
041333 C1          2831   	pop bc
041334 78          2832   	ld a,b
041335             2833   	vdu_a
041335 49 D7       0001M  		RST.LIS	10h
041337             2834   	vdu 255
041337 3E FF       0001M  		LD	A, function
041339 49 D7       0002M  		RST.LIS	10h
04133B             2835   
04133B 21 57 1B 04 2836   	ld hl,red_tint
04133F 7E          2837   	ld a,(hl)
041340             2838   	vdu_a
041340 49 D7       0001M  		RST.LIS	10h
041342             2839   
041342 21 58 1B 04 2840   	ld hl,green_tint
041346 7E          2841   	ld a,(hl)
041347             2842   	vdu_a
041347 49 D7       0001M  		RST.LIS	10h
041349             2843   
041349 21 59 1B 04 2844   	ld hl,blue_tint
04134D 7E          2845   	ld a,(hl)
04134E             2846   	vdu_a
04134E 49 D7       0001M  		RST.LIS	10h
041350             2847   
041350 E1          2848   	pop hl
041351 D1          2849   	pop de
041352 C1          2850   	pop bc
041353 F1          2851   	pop af
041354 C9          2852   	ret
041355             2853   
041355             2854   ; load a sprite, giving its full name, with extension
041355             2855   fn_load_sprite:
041355             2856   	; clear the filename on the screen
041355 21 AC 1A 04 2857   	ld hl,filename
041359 06 10       2858   	ld b,FILENAME_LENGTH
04135B AF          2859   	xor a
04135C             2860   
04135C             2861   ls_clear_filename:
04135C 77          2862   	ld (hl),a
04135D 23          2863   	inc hl
04135E 10 FC       2864   	djnz ls_clear_filename
041360             2865   
041360             2866   	; get filename
041360 CD 40 0F 04 2867   	call fn_input_text8
041364             2868   
041364             2869   	; set path to 'sprites/'
041364 21 BD 1A 04 2870   	ld hl,sprite_path
041368             2871   	moscall mos_cd
041368 3E 03       0001M  		LD	A, function
04136A 49 CF       0002M  		RST.LIS	08h
04136C             2872   
04136C             2873   	; exit on folder error
04136C FE 00       2874   	cp 0
04136E C2 3F 14 04 2875   	jp nz,ls_folder_error
041372             2876   
041372             2877   	; open the file for read
041372 21 AC 1A 04 2878   	ld hl,filename
041376 0E 01       2879   	ld c,fa_open_existing|fa_read
041378             2880   	moscall mos_fopen
041378 3E 0A       0001M  		LD	A, function
04137A 49 CF       0002M  		RST.LIS	08h
04137C             2881   
04137C             2882   	; exit on file error
04137C FE 00       2883   	cp 0
04137E CA 71 14 04 2884   	jp z,ls_file_error
041382             2885   
041382             2886   	; filehandle -> C
041382 4F          2887   	ld c,a
041383             2888   
041383             2889   	; get colors count
041383             2890   	moscall mos_fgetc
041383 3E 0C       0001M  		LD	A, function
041385 49 CF       0002M  		RST.LIS	08h
041387 DA 1A 14 04 2891   	jp c,ls_close_error
04138B             2892   
04138B FE 41       2893   	cp MAX_COLORS + 1
04138D D2 1A 14 04 2894   	jp nc,ls_close_error
041391             2895   
041391             2896   	; store colors count
041391 21 55 1B 04 2897   	ld hl,colors_count
041395 77          2898   	ld (hl),a
041396             2899   
041396             2900   	; redraw palette
041396 C5          2901   	push bc
041397 CD 03 19 04 2902   	call fn_draw_the_palette
04139B C1          2903   	pop bc
04139C             2904   
04139C             2905   	; get frames count
04139C             2906   	moscall mos_fgetc
04139C 3E 0C       0001M  		LD	A, function
04139E 49 CF       0002M  		RST.LIS	08h
0413A0 DA 1A 14 04 2907   	jp c,ls_close_error
0413A4             2908   
0413A4             2909   	; store frames count
0413A4 21 5C 1B 04 2910   	ld hl,frames_count
0413A8 77          2911   	ld (hl),a
0413A9             2912   
0413A9             2913   	; set last frame as current frame
0413A9 21 5B 1B 04 2914   	ld hl,current_frame
0413AD 3D          2915   	dec a
0413AE 77          2916   	ld (hl),a
0413AF             2917   
0413AF             2918   	; get sprite size
0413AF             2919   	moscall mos_fgetc
0413AF 3E 0C       0001M  		LD	A, function
0413B1 49 CF       0002M  		RST.LIS	08h
0413B3 DA 1A 14 04 2920   	jp c,ls_close_error
0413B7             2921   
0413B7             2922   	; store sprite size
0413B7 21 35 1A 04 2923   	ld hl,spr_size
0413BB 77          2924   	ld (hl),a
0413BC             2925   
0413BC             2926   	; set 4x4 pixel width
0413BC FE 04       2927   	cp SPR44
0413BE 20 09       2928   	jr nz,ls_next1
0413C0             2929   
0413C0 21 34 1A 04 2930   	ld hl,pixel_width
0413C4 06 20       2931   	ld b,SPR44_width
0413C6 70          2932   	ld (hl),b
0413C7 18 21       2933   	jr ls_next4
0413C9             2934   
0413C9             2935   ls_next1:
0413C9             2936   	; set 8x8 pixel width
0413C9 FE 08       2937   	cp SPR88
0413CB 20 09       2938   	jr nz,ls_next2
0413CD             2939   
0413CD 21 34 1A 04 2940   	ld hl,pixel_width
0413D1 06 10       2941   	ld b,SPR88_width
0413D3 70          2942   	ld (hl),b
0413D4 18 14       2943   	jr ls_next4
0413D6             2944   
0413D6             2945   ls_next2:
0413D6             2946   
0413D6             2947   	; set 16x16 pixel width
0413D6 FE 10       2948   	cp SPR1616
0413D8 20 09       2949   	jr nz,ls_next3
0413DA             2950   
0413DA 21 34 1A 04 2951   	ld hl,pixel_width
0413DE 06 08       2952   	ld b,SPR1616_width
0413E0 70          2953   	ld (hl),b
0413E1 18 07       2954   	jr ls_next4
0413E3             2955   
0413E3             2956   ls_next3:
0413E3             2957   
0413E3 21 34 1A 04 2958   	ld hl,pixel_width
0413E7 06 04       2959   	ld b,SPR3232_width
0413E9 70          2960   	ld (hl),b
0413EA             2961   
0413EA             2962   ls_next4:
0413EA 21 00 00 00 2963   	ld hl,#000000
0413EE 6F          2964   	ld l,a
0413EF 67          2965   	ld h,a
0413F0 ED 6C       2966   	mlt hl ; one frame sprite length
0413F2 E5          2967   	push hl
0413F3             2968   
0413F3             2969   	; get frames count
0413F3 21 5C 1B 04 2970   	ld hl,frames_count
0413F7 46          2971   	ld b,(hl)
0413F8             2972   
0413F8 E1          2973   	pop hl
0413F9             2974   
0413F9 05          2975   	dec b
0413FA 78          2976   	ld a,b
0413FB FE 00       2977   	cp 0
0413FD 28 05       2978   	jr z,ls_read_data
0413FF             2979   
0413FF             2980   	; de = one frame sprite length
0413FF E5          2981   	push hl
041400 D1          2982   	pop de
041401             2983   ls_add_length:
041401 19          2984   	add hl,de
041402 10 FD       2985   	djnz ls_add_length
041404             2986   
041404             2987   ls_read_data:
041404 E5          2988   	push hl ; all frames length
041405 E5          2989   	push hl
041406 D1          2990   	pop de
041407 21 64 1B 04 2991   	ld hl,sprite_buffer
04140B             2992   	moscall mos_fread
04140B 3E 1A       0001M  		LD	A, function
04140D 49 CF       0002M  		RST.LIS	08h
04140F E1          2993   	pop hl ; frame length
041410 B7          2994   	or a
041411 ED 52       2995   	sbc hl,de
041413 19          2996   	add hl,de ; compare frame length with loaded bytes
041414 20 04       2997   	jr nz,ls_close_error
041416 C3 47 14 04 2998   	jp ls_close
04141A             2999   
04141A             3000   ls_close_error:
04141A C5          3001   	push bc
04141B             3002   
04141B             3003   	; read error
04141B CD D6 16 04 3004   	call fn_print_file_error
04141F             3005   
04141F C1          3006   	pop bc
041420             3007   
041420             3008   	; close the file
041420             3009   	moscall mos_fclose
041420 3E 0B       0001M  		LD	A, function
041422 49 CF       0002M  		RST.LIS	08h
041424             3010   
041424             3011   	; set path to home
041424 21 CE 1A 04 3012   	ld hl,back_path
041428             3013   	moscall mos_cd
041428 3E 03       0001M  		LD	A, function
04142A 49 CF       0002M  		RST.LIS	08h
04142C             3014   
04142C             3015   	; exit on error
04142C FE 00       3016   	cp 0
04142E C2 3F 14 04 3017   	jp nz,ls_folder_error
041432             3018   
041432             3019   
041432             3020   	; reset current frame and coordinates of the drawing pixel
041432 21 30 1A 04 3021   	ld hl,xpix
041436 AF          3022   	xor a
041437 77          3023   	ld (hl),a
041438 21 31 1A 04 3024   	ld hl,ypix
04143C 77          3025   	ld (hl),a
04143D 18 25       3026   	jr ls_exit
04143F             3027   
04143F             3028   ls_folder_error:
04143F             3029   	; write error
04143F CD 0D 17 04 3030   	call fn_print_folder_error
041443 C3 64 14 04 3031   	jp ls_exit
041447             3032   
041447             3033   ls_close:
041447             3034   	; close the file
041447             3035   	moscall mos_fclose
041447 3E 0B       0001M  		LD	A, function
041449 49 CF       0002M  		RST.LIS	08h
04144B             3036   
04144B             3037   	; set path to home
04144B 21 CE 1A 04 3038   	ld hl,back_path
04144F             3039   	moscall mos_cd
04144F 3E 03       0001M  		LD	A, function
041451 49 CF       0002M  		RST.LIS	08h
041453             3040   
041453             3041   	; exit on error
041453 FE 00       3042   	cp 0
041455 C2 3F 14 04 3043   	jp nz,ls_folder_error
041459             3044   
041459             3045   	; reset current frame and coordinates of the drawing pixel
041459 21 30 1A 04 3046   	ld hl,xpix
04145D AF          3047   	xor a
04145E 77          3048   	ld (hl),a
04145F 21 31 1A 04 3049   	ld hl,ypix
041463 77          3050   	ld (hl),a
041464             3051   
041464             3052   ls_exit:
041464 CD 5C 18 04 3053   	call fn_show_spr_descr
041468 CD F2 17 04 3054   	call fn_change_frame
04146C CD 17 18 04 3055   	call fn_change_frames_count
041470 C9          3056   	ret
041471             3057   
041471             3058   ls_file_error:
041471 CD D6 16 04 3059   	call fn_print_file_error
041475             3060   
041475             3061   	; set path to home
041475 21 CE 1A 04 3062   	ld hl,back_path
041479             3063   	moscall mos_cd
041479 3E 03       0001M  		LD	A, function
04147B 49 CF       0002M  		RST.LIS	08h
04147D             3064   
04147D             3065   	; exit on error
04147D FE 00       3066   	cp 0
04147F C2 3F 14 04 3067   	jp nz,ls_folder_error
041483             3068   
041483 C9          3069   	ret
041484             3070   
041484             3071   ; save a sprite, giving its name
041484             3072   fn_save_sprite:
041484             3073   	; clear filename on the screen
041484 21 AC 1A 04 3074   	ld hl,filename
041488 06 10       3075   	ld b,FILENAME_LENGTH
04148A AF          3076   	xor a
04148B             3077   
04148B             3078   ss_clear_filename:
04148B 77          3079   	ld (hl),a
04148C 23          3080   	inc hl
04148D 10 FC       3081   	djnz ss_clear_filename
04148F             3082   
04148F             3083   	; get filename
04148F CD 40 0F 04 3084   	call fn_input_text8
041493             3085   
041493             3086   	; set path to sprite path
041493 21 BD 1A 04 3087   	ld hl,sprite_path
041497             3088   	moscall mos_cd
041497 3E 03       0001M  		LD	A, function
041499 49 CF       0002M  		RST.LIS	08h
04149B             3089   
04149B             3090   	; create it on error
04149B FE 00       3091   	cp 0
04149D F5          3092   	push af
04149E C4 F1 18 04 3093   	call nz,fn_create_sprite_folder
0414A2 F1          3094   	pop af
0414A3 28 08       3095   	jr z,ss_next
0414A5             3096   
0414A5             3097   	; set path to sprite path
0414A5 21 BD 1A 04 3098   	ld hl,sprite_path
0414A9             3099   	moscall mos_cd
0414A9 3E 03       0001M  		LD	A, function
0414AB 49 CF       0002M  		RST.LIS	08h
0414AD             3100   
0414AD             3101   ss_next:
0414AD             3102   	; exit on error
0414AD FE 00       3103   	cp 0
0414AF C2 3F 15 04 3104   	jp nz,ss_folder_error
0414B3             3105   
0414B3             3106   	; open the file for write
0414B3 21 AC 1A 04 3107   	ld hl,filename
0414B7 0E 0A       3108   	ld c,fa_create_always|fa_write
0414B9             3109   	moscall mos_fopen
0414B9 3E 0A       0001M  		LD	A, function
0414BB 49 CF       0002M  		RST.LIS	08h
0414BD             3110   
0414BD             3111   	; exit on error
0414BD FE 00       3112   	cp 0
0414BF CA 7C 15 04 3113   	jp z,ss_file_error
0414C3             3114   
0414C3             3115   	; filehandle -> C
0414C3 4F          3116   	ld c,a
0414C4             3117   
0414C4             3118   	; store colors count in the file
0414C4 21 55 1B 04 3119   	ld hl,colors_count
0414C8 46          3120   	ld b,(hl)
0414C9             3121   	moscall mos_fputc
0414C9 3E 0D       0001M  		LD	A, function
0414CB 49 CF       0002M  		RST.LIS	08h
0414CD             3122   
0414CD             3123   	; store frames count in the file
0414CD 21 5C 1B 04 3124   	ld hl,frames_count
0414D1 46          3125   	ld b,(hl)
0414D2             3126   	moscall mos_fputc
0414D2 3E 0D       0001M  		LD	A, function
0414D4 49 CF       0002M  		RST.LIS	08h
0414D6             3127   
0414D6             3128   	; store sprite size in the file
0414D6 21 35 1A 04 3129   	ld hl,spr_size
0414DA 46          3130   	ld b,(hl)
0414DB             3131   	moscall mos_fputc
0414DB 3E 0D       0001M  		LD	A, function
0414DD 49 CF       0002M  		RST.LIS	08h
0414DF             3132   
0414DF             3133   	; de = size²
0414DF 21 00 00 00 3134   	ld hl,#000000
0414E3 68          3135   	ld l,b
0414E4 60          3136   	ld h,b
0414E5 ED 6C       3137   	mlt hl ; HL = sprite length
0414E7 E5          3138   	push hl
0414E8             3139   
0414E8             3140   	; get frames count
0414E8 21 5C 1B 04 3141   	ld hl,frames_count
0414EC 46          3142   	ld b,(hl)
0414ED             3143   
0414ED E1          3144   	pop hl
0414EE             3145   
0414EE 05          3146   	dec b
0414EF 78          3147   	ld a,b
0414F0 FE 00       3148   	cp 0
0414F2 28 05       3149   	jr z,ss_write_data
0414F4             3150   
0414F4 E5          3151   	push hl
0414F5 D1          3152   	pop de
0414F6             3153   ss_add_length:
0414F6 19          3154   	add hl,de
0414F7 10 FD       3155   	djnz ss_add_length
0414F9             3156   
0414F9             3157   ss_write_data:
0414F9 E5          3158   	push hl
0414FA E5          3159   	push hl
0414FB D1          3160   	pop de
0414FC 21 64 1B 04 3161   	ld hl,sprite_buffer
041500             3162   	moscall mos_fwrite
041500 3E 1B       0001M  		LD	A, function
041502 49 CF       0002M  		RST.LIS	08h
041504 E1          3163   	pop hl
041505 B7          3164   	or a
041506 ED 52       3165   	sbc hl,de
041508 19          3166   	add hl,de
041509 20 04       3167   	jr nz,ss_close_error
04150B C3 47 15 04 3168   	jp ss_close
04150F             3169   
04150F             3170   ss_close_error:
04150F C5          3171   	push bc
041510             3172   
041510             3173   	; write error
041510 CD D6 16 04 3174   	call fn_print_file_error
041514             3175   
041514 C1          3176   	pop bc
041515             3177   
041515             3178   	; close the file
041515             3179   	moscall mos_fclose
041515 3E 0B       0001M  		LD	A, function
041517 49 CF       0002M  		RST.LIS	08h
041519             3180   
041519             3181   	; set path to home
041519 21 CE 1A 04 3182   	ld hl,back_path
04151D             3183   	moscall mos_cd
04151D 3E 03       0001M  		LD	A, function
04151F 49 CF       0002M  		RST.LIS	08h
041521             3184   
041521             3185   	; exit on error
041521 FE 00       3186   	cp 0
041523 C2 3F 15 04 3187   	jp nz,ss_folder_error
041527             3188   
041527             3189   	; reset current frame and coordinates of the drawing pixel
041527 21 5C 1B 04 3190   	ld hl,frames_count
04152B 7E          3191   	ld a,(hl)
04152C 3D          3192   	dec a
04152D 21 5B 1B 04 3193   	ld hl,current_frame
041531 77          3194   	ld (hl),a
041532 21 30 1A 04 3195   	ld hl,xpix
041536 AF          3196   	xor a
041537 77          3197   	ld (hl),a
041538 21 31 1A 04 3198   	ld hl,ypix
04153C 77          3199   	ld (hl),a
04153D 18 30       3200   	jr ss_exit
04153F             3201   
04153F             3202   ss_folder_error:
04153F             3203   	; write error
04153F CD 0D 17 04 3204   	call fn_print_folder_error
041543 C3 6F 15 04 3205   	jp ss_exit
041547             3206   
041547             3207   ss_close:
041547             3208   	; close the file
041547             3209   	moscall mos_fclose
041547 3E 0B       0001M  		LD	A, function
041549 49 CF       0002M  		RST.LIS	08h
04154B             3210   
04154B             3211   	; set path to home
04154B 21 CE 1A 04 3212   	ld hl,back_path
04154F             3213   	moscall mos_cd
04154F 3E 03       0001M  		LD	A, function
041551 49 CF       0002M  		RST.LIS	08h
041553             3214   
041553             3215   	; exit on error
041553 FE 00       3216   	cp 0
041555 C2 3F 15 04 3217   	jp nz,ss_folder_error
041559             3218   
041559             3219   	; reset current frame and coordinates of the drawing pixel
041559 21 5C 1B 04 3220   	ld hl,frames_count
04155D 7E          3221   	ld a,(hl)
04155E 3D          3222   	dec a
04155F 21 5B 1B 04 3223   	ld hl,current_frame
041563 77          3224   	ld (hl),a
041564 21 30 1A 04 3225   	ld hl,xpix
041568 AF          3226   	xor a
041569 77          3227   	ld (hl),a
04156A 21 31 1A 04 3228   	ld hl,ypix
04156E 77          3229   	ld (hl),a
04156F             3230   
04156F             3231   ss_exit:
04156F CD 5C 18 04 3232   	call fn_show_spr_descr
041573 CD F2 17 04 3233   	call fn_change_frame
041577 CD 17 18 04 3234   	call fn_change_frames_count
04157B C9          3235   	ret
04157C             3236   
04157C             3237   ss_file_error:
04157C CD D6 16 04 3238   	call fn_print_file_error
041580             3239   
041580             3240   	; set path to home
041580 21 CE 1A 04 3241   	ld hl,back_path
041584             3242   	moscall mos_cd
041584 3E 03       0001M  		LD	A, function
041586 49 CF       0002M  		RST.LIS	08h
041588             3243   
041588             3244   	; exit on error
041588 FE 00       3245   	cp 0
04158A C2 3F 15 04 3246   	jp nz,ss_folder_error
04158E C9          3247   	ret
04158F             3248   
04158F             3249   ; export sprite data in assembly language, giving its name
04158F             3250   fn_export_sprite:
04158F             3251   	; clear filename
04158F 21 AC 1A 04 3252   	ld hl,filename
041593 06 10       3253   	ld b,FILENAME_LENGTH
041595 AF          3254   	xor a
041596             3255   
041596             3256   es_clear_filename:
041596 77          3257   	ld (hl),a
041597 23          3258   	inc hl
041598 10 FC       3259   	djnz es_clear_filename
04159A             3260   
04159A             3261   	; get filename
04159A CD 40 0F 04 3262   	call fn_input_text8
04159E             3263   
04159E             3264   	; set path to sprite path
04159E 21 BD 1A 04 3265   	ld hl,sprite_path
0415A2             3266   	moscall mos_cd
0415A2 3E 03       0001M  		LD	A, function
0415A4 49 CF       0002M  		RST.LIS	08h
0415A6             3267   
0415A6             3268   	; create it on error
0415A6 FE 00       3269   	cp 0
0415A8 F5          3270   	push af
0415A9 C4 F1 18 04 3271   	call nz,fn_create_sprite_folder
0415AD F1          3272   	pop af
0415AE 28 0E       3273   	jr z,es_next
0415B0             3274   
0415B0             3275   	; set path to sprite path
0415B0 21 BD 1A 04 3276   	ld hl,sprite_path
0415B4             3277   	moscall mos_cd
0415B4 3E 03       0001M  		LD	A, function
0415B6 49 CF       0002M  		RST.LIS	08h
0415B8             3278   
0415B8             3279   	; exit on error
0415B8 FE 00       3280   	cp 0
0415BA C2 BA 16 04 3281   	jp nz,es_folder_error
0415BE             3282   
0415BE             3283   es_next:
0415BE             3284   	; open the file for write
0415BE 21 AC 1A 04 3285   	ld hl,filename
0415C2 0E 0A       3286   	ld c,fa_create_always|fa_write
0415C4             3287   	moscall mos_fopen
0415C4 3E 0A       0001M  		LD	A, function
0415C6 49 CF       0002M  		RST.LIS	08h
0415C8             3288   
0415C8             3289   	; exit on error
0415C8 FE 00       3290   	cp 0
0415CA CA C3 16 04 3291   	jp z,es_file_error
0415CE             3292   
0415CE             3293   	; filehandle -> C
0415CE 4F          3294   	ld c,a
0415CF             3295   
0415CF             3296   
0415CF             3297   	; L = first frame
0415CF 3E 00       3298   	ld a,0
0415D1 21 64 1B 04 3299   	ld hl,sprite_buffer
0415D5 11 00 00 00 3300   	ld de,$000000
0415D9             3301   
0415D9             3302   es_frames_repeat:
0415D9 F5          3303   	push af
0415DA E5          3304   	push hl
0415DB             3305   
0415DB F5          3306   	push af
0415DC             3307   
0415DC             3308   	; start to write...
0415DC 1E 00       3309   	ld e,0 ; rows
0415DE             3310   
0415DE 06 3B       3311   	ld b,';'
0415E0             3312   	moscall mos_fputc
0415E0 3E 0D       0001M  		LD	A, function
0415E2 49 CF       0002M  		RST.LIS	08h
0415E4             3313   
0415E4 06 20       3314   	ld b,' '
0415E6             3315   	moscall mos_fputc
0415E6 3E 0D       0001M  		LD	A, function
0415E8 49 CF       0002M  		RST.LIS	08h
0415EA             3316   
0415EA 06 46       3317   	ld b,'F'
0415EC             3318   	moscall mos_fputc
0415EC 3E 0D       0001M  		LD	A, function
0415EE 49 CF       0002M  		RST.LIS	08h
0415F0             3319   
0415F0 06 72       3320   	ld b,'r'
0415F2             3321   	moscall mos_fputc
0415F2 3E 0D       0001M  		LD	A, function
0415F4 49 CF       0002M  		RST.LIS	08h
0415F6             3322   
0415F6 06 6D       3323   	ld b,'m'
0415F8             3324   	moscall mos_fputc
0415F8 3E 0D       0001M  		LD	A, function
0415FA 49 CF       0002M  		RST.LIS	08h
0415FC             3325   
0415FC 06 20       3326   	ld b,' '
0415FE             3327   	moscall mos_fputc
0415FE 3E 0D       0001M  		LD	A, function
041600 49 CF       0002M  		RST.LIS	08h
041602             3328   
041602 F1          3329   	pop af
041603 C6 30       3330   	add a,'0'
041605 47          3331   	ld b,a
041606             3332   	moscall mos_fputc
041606 3E 0D       0001M  		LD	A, function
041608 49 CF       0002M  		RST.LIS	08h
04160A             3333   
04160A 06 0D       3334   	ld b,13
04160C             3335   	moscall mos_fputc
04160C 3E 0D       0001M  		LD	A, function
04160E 49 CF       0002M  		RST.LIS	08h
041610             3336   
041610 06 0A       3337   	ld b,10
041612             3338   	moscall mos_fputc
041612 3E 0D       0001M  		LD	A, function
041614 49 CF       0002M  		RST.LIS	08h
041616             3339   
041616             3340   es_repeat:
041616             3341   
041616 06 44       3342   	ld b,'D'
041618             3343   	moscall mos_fputc
041618 3E 0D       0001M  		LD	A, function
04161A 49 CF       0002M  		RST.LIS	08h
04161C             3344   
04161C 06 42       3345   	ld b,'B'
04161E             3346   	moscall mos_fputc
04161E 3E 0D       0001M  		LD	A, function
041620 49 CF       0002M  		RST.LIS	08h
041622             3347   
041622 06 20       3348   	ld b,' '
041624             3349   	moscall mos_fputc
041624 3E 0D       0001M  		LD	A, function
041626 49 CF       0002M  		RST.LIS	08h
041628             3350   
041628 16 00       3351   	ld d,0 ; columns
04162A             3352   
04162A             3353   es_repeat_line:
04162A D5          3354   	push de
04162B             3355   
04162B 7E          3356   	ld a,(hl)
04162C 23          3357   	inc hl
04162D             3358   
04162D             3359   	; convert A to BCD
04162D CD 7F 19 04 3360   	call fn_hex2bcd
041631             3361   
041631             3362   	; write two numbers (chars)
041631 5F          3363   	ld e,a
041632 E6 F0       3364   	and $f0
041634 0F          3365   	rrca
041635 0F          3366   	rrca
041636 0F          3367   	rrca
041637 0F          3368   	rrca
041638 C6 30       3369   	add '0'
04163A             3370   
04163A 47          3371   	ld b,a
04163B             3372   	moscall mos_fputc
04163B 3E 0D       0001M  		LD	A, function
04163D 49 CF       0002M  		RST.LIS	08h
04163F             3373   
04163F 7B          3374   	ld a,e
041640 E6 0F       3375   	and $0f
041642 C6 30       3376   	add '0'
041644             3377   
041644 47          3378   	ld b,a
041645             3379   	moscall mos_fputc
041645 3E 0D       0001M  		LD	A, function
041647 49 CF       0002M  		RST.LIS	08h
041649             3380   
041649 D1          3381   	pop de
04164A 14          3382   	inc d
04164B 3A 35 1A 04 3383   	ld a,(spr_size)
04164F BA          3384   	cp d
041650 F5          3385   	push af
041651 C4 78 19 04 3386   	call nz,fn_comma
041655 F1          3387   	pop af
041656 C2 2A 16 04 3388   	jp nz,es_repeat_line
04165A             3389   
04165A 06 0D       3390   	ld b,13 ; CR
04165C             3391   	moscall mos_fputc
04165C 3E 0D       0001M  		LD	A, function
04165E 49 CF       0002M  		RST.LIS	08h
041660             3392   
041660 06 0A       3393   	ld b,10 ; LF
041662             3394   	moscall mos_fputc
041662 3E 0D       0001M  		LD	A, function
041664 49 CF       0002M  		RST.LIS	08h
041666             3395   
041666 1C          3396   	inc e
041667 3A 35 1A 04 3397   	ld a,(spr_size)
04166B BB          3398   	cp e
04166C C2 16 16 04 3399   	jp nz,es_repeat
041670             3400   
041670 06 0D       3401   	ld b,13 ; CR
041672             3402   	moscall mos_fputc
041672 3E 0D       0001M  		LD	A, function
041674 49 CF       0002M  		RST.LIS	08h
041676             3403   
041676 06 0A       3404   	ld b,10 ; LF
041678             3405   	moscall mos_fputc
041678 3E 0D       0001M  		LD	A, function
04167A 49 CF       0002M  		RST.LIS	08h
04167C             3406   
04167C E1          3407   	pop hl
04167D D5          3408   	push de
04167E ED 5C       3409   	mlt de
041680 19          3410   	add hl,de
041681 D1          3411   	pop de
041682 F1          3412   	pop af
041683 3C          3413   	inc a
041684 DD 21 5C 1B 3414   	ld ix,frames_count
       04          
041689 DD BE 00    3415   	cp (ix+0)
04168C C2 D9 15 04 3416   	jp nz,es_frames_repeat
041690             3417   
041690             3418   	; close the file
041690             3419   	moscall mos_fclose
041690 3E 0B       0001M  		LD	A, function
041692 49 CF       0002M  		RST.LIS	08h
041694             3420   
041694             3421   	; set path to home
041694 21 CE 1A 04 3422   	ld hl,back_path
041698             3423   	moscall mos_cd
041698 3E 03       0001M  		LD	A, function
04169A 49 CF       0002M  		RST.LIS	08h
04169C             3424   
04169C             3425   	; exit on error
04169C FE 00       3426   	cp 0
04169E C2 BA 16 04 3427   	jp nz,es_folder_error
0416A2             3428   
0416A2             3429   	; reset current frame and coordinates of the drawing pixel
0416A2 21 5C 1B 04 3430   	ld hl,frames_count
0416A6 7E          3431   	ld a,(hl)
0416A7 3D          3432   	dec a
0416A8 21 5B 1B 04 3433   	ld hl,current_frame
0416AC 77          3434   	ld (hl),a
0416AD 21 30 1A 04 3435   	ld hl,xpix
0416B1 AF          3436   	xor a
0416B2 77          3437   	ld (hl),a
0416B3 21 31 1A 04 3438   	ld hl,ypix
0416B7 77          3439   	ld (hl),a
0416B8 18 08       3440   	jr es_exit
0416BA             3441   
0416BA             3442   es_folder_error:
0416BA             3443   	; write error
0416BA CD 0D 17 04 3444   	call fn_print_folder_error
0416BE C3 C2 16 04 3445   	jp es_exit
0416C2             3446   
0416C2             3447   es_exit:
0416C2 C9          3448   	ret
0416C3             3449   
0416C3             3450   es_file_error:
0416C3 CD D6 16 04 3451   	call fn_print_file_error
0416C7             3452   
0416C7             3453   	; set path to home
0416C7 21 CE 1A 04 3454   	ld hl,back_path
0416CB             3455   	moscall mos_cd
0416CB 3E 03       0001M  		LD	A, function
0416CD 49 CF       0002M  		RST.LIS	08h
0416CF             3456   
0416CF             3457   	; exit on error
0416CF FE 00       3458   	cp 0
0416D1 C2 BA 16 04 3459   	jp nz,es_folder_error
0416D5 C9          3460   	ret
0416D6             3461   
0416D6             3462   ; print 'file error'
0416D6             3463   fn_print_file_error:
0416D6             3464   	vdu 7
0416D6 3E 07       0001M  		LD	A, function
0416D8 49 D7       0002M  		RST.LIS	10h
0416DA             3465   
0416DA             3466   	; locate x,y
0416DA             3467   	vdu 31
0416DA 3E 1F       0001M  		LD	A, function
0416DC 49 D7       0002M  		RST.LIS	10h
0416DE             3468   	vdu FILENAME_X
0416DE 3E 07       0001M  		LD	A, function
0416E0 49 D7       0002M  		RST.LIS	10h
0416E2             3469   	vdu FILENAME_Y
0416E2 3E 18       0001M  		LD	A, function
0416E4 49 D7       0002M  		RST.LIS	10h
0416E6             3470   
0416E6             3471   	; print text
0416E6 21 ED 1A 04 3472   	ld hl,file_error
0416EA 01 00 00 00 3473   	ld bc,0
0416EE AF          3474   	xor a
0416EF 49 DF       3475   	rst.lis $18
0416F1             3476   
0416F1 CD 39 0F 04 3477   	call fn_input_key
0416F5             3478   
0416F5             3479   	; locate x,y
0416F5             3480   	vdu 31
0416F5 3E 1F       0001M  		LD	A, function
0416F7 49 D7       0002M  		RST.LIS	10h
0416F9             3481   	vdu FILENAME_X
0416F9 3E 07       0001M  		LD	A, function
0416FB 49 D7       0002M  		RST.LIS	10h
0416FD             3482   	vdu FILENAME_Y
0416FD 3E 18       0001M  		LD	A, function
0416FF 49 D7       0002M  		RST.LIS	10h
041701             3483   
041701             3484   	; print text
041701 21 D3 1A 04 3485   	ld hl,void_filename
041705 01 00 00 00 3486   	ld bc,0
041709 AF          3487   	xor a
04170A 49 DF       3488   	rst.lis $18
04170C             3489   
04170C C9          3490   	ret
04170D             3491   
04170D             3492   ; print 'folder error'
04170D             3493   fn_print_folder_error:
04170D             3494   	vdu 7
04170D 3E 07       0001M  		LD	A, function
04170F 49 D7       0002M  		RST.LIS	10h
041711             3495   
041711             3496   	; locate x,y
041711             3497   	vdu 31
041711 3E 1F       0001M  		LD	A, function
041713 49 D7       0002M  		RST.LIS	10h
041715             3498   	vdu FILENAME_X
041715 3E 07       0001M  		LD	A, function
041717 49 D7       0002M  		RST.LIS	10h
041719             3499   	vdu FILENAME_Y
041719 3E 18       0001M  		LD	A, function
04171B 49 D7       0002M  		RST.LIS	10h
04171D             3500   
04171D             3501   	; print text
04171D 21 07 1B 04 3502   	ld hl,folder_error
041721 01 00 00 00 3503   	ld bc,0
041725 AF          3504   	xor a
041726 49 DF       3505   	rst.lis $18
041728             3506   
041728 CD 39 0F 04 3507   	call fn_input_key
04172C             3508   
04172C             3509   	; locate x,y
04172C             3510   	vdu 31
04172C 3E 1F       0001M  		LD	A, function
04172E 49 D7       0002M  		RST.LIS	10h
041730             3511   	vdu FILENAME_X
041730 3E 07       0001M  		LD	A, function
041732 49 D7       0002M  		RST.LIS	10h
041734             3512   	vdu FILENAME_Y
041734 3E 18       0001M  		LD	A, function
041736 49 D7       0002M  		RST.LIS	10h
041738             3513   
041738             3514   	; print text
041738 21 D3 1A 04 3515   	ld hl,void_filename
04173C 01 00 00 00 3516   	ld bc,0
041740 AF          3517   	xor a
041741 49 DF       3518   	rst.lis $18
041743             3519   
041743 C9          3520   	ret
041744             3521   
041744             3522   ; print 'header error'
041744             3523   fn_print_header_error:
041744             3524   	vdu 7
041744 3E 07       0001M  		LD	A, function
041746 49 D7       0002M  		RST.LIS	10h
041748             3525   
041748             3526   	; locate x,y
041748             3527   	vdu 31
041748 3E 1F       0001M  		LD	A, function
04174A 49 D7       0002M  		RST.LIS	10h
04174C             3528   	vdu FILENAME_X
04174C 3E 07       0001M  		LD	A, function
04174E 49 D7       0002M  		RST.LIS	10h
041750             3529   	vdu FILENAME_Y
041750 3E 18       0001M  		LD	A, function
041752 49 D7       0002M  		RST.LIS	10h
041754             3530   
041754             3531   	; print text
041754 21 21 1B 04 3532   	ld hl,header_error
041758 01 00 00 00 3533   	ld bc,0
04175C AF          3534   	xor a
04175D 49 DF       3535   	rst.lis $18
04175F             3536   
04175F CD 39 0F 04 3537   	call fn_input_key
041763             3538   
041763             3539   	; locate x,y
041763             3540   	vdu 31
041763 3E 1F       0001M  		LD	A, function
041765 49 D7       0002M  		RST.LIS	10h
041767             3541   	vdu FILENAME_X
041767 3E 07       0001M  		LD	A, function
041769 49 D7       0002M  		RST.LIS	10h
04176B             3542   	vdu FILENAME_Y
04176B 3E 18       0001M  		LD	A, function
04176D 49 D7       0002M  		RST.LIS	10h
04176F             3543   
04176F             3544   	; print text
04176F 21 D3 1A 04 3545   	ld hl,void_filename
041773 01 00 00 00 3546   	ld bc,0
041777 AF          3547   	xor a
041778 49 DF       3548   	rst.lis $18
04177A             3549   
04177A C9          3550   	ret
04177B             3551   
04177B             3552   ; print 'data error'
04177B             3553   fn_print_data_error:
04177B             3554   	vdu 7
04177B 3E 07       0001M  		LD	A, function
04177D 49 D7       0002M  		RST.LIS	10h
04177F             3555   
04177F             3556   	; locate x,y
04177F             3557   	vdu 31
04177F 3E 1F       0001M  		LD	A, function
041781 49 D7       0002M  		RST.LIS	10h
041783             3558   	vdu FILENAME_X
041783 3E 07       0001M  		LD	A, function
041785 49 D7       0002M  		RST.LIS	10h
041787             3559   	vdu FILENAME_Y
041787 3E 18       0001M  		LD	A, function
041789 49 D7       0002M  		RST.LIS	10h
04178B             3560   
04178B             3561   	; print text
04178B 21 3B 1B 04 3562   	ld hl,data_error
04178F 01 00 00 00 3563   	ld bc,0
041793 AF          3564   	xor a
041794 49 DF       3565   	rst.lis $18
041796             3566   
041796 CD 39 0F 04 3567   	call fn_input_key
04179A             3568   
04179A             3569   	; locate x,y
04179A             3570   	vdu 31
04179A 3E 1F       0001M  		LD	A, function
04179C 49 D7       0002M  		RST.LIS	10h
04179E             3571   	vdu FILENAME_X
04179E 3E 07       0001M  		LD	A, function
0417A0 49 D7       0002M  		RST.LIS	10h
0417A2             3572   	vdu FILENAME_Y
0417A2 3E 18       0001M  		LD	A, function
0417A4 49 D7       0002M  		RST.LIS	10h
0417A6             3573   
0417A6             3574   	; print text
0417A6 21 D3 1A 04 3575   	ld hl,void_filename
0417AA 01 00 00 00 3576   	ld bc,0
0417AE AF          3577   	xor a
0417AF 49 DF       3578   	rst.lis $18
0417B1             3579   
0417B1 C9          3580   	ret
0417B2             3581   
0417B2             3582   ; refresh all the current sprite frame
0417B2             3583   fn_refresh_sprite:
0417B2 06 00       3584   	ld b,0 ; B -> x cordinate
0417B4 0E 00       3585   	ld c,0 ; C -> y cordinate
0417B6             3586   
0417B6             3587   rs_loop:
0417B6 C5          3588   	push bc
0417B7             3589   
0417B7 21 30 1A 04 3590   	ld hl,xpix
0417BB 70          3591   	ld (hl),b
0417BC 21 31 1A 04 3592   	ld hl,ypix
0417C0 71          3593   	ld (hl),c
0417C1 CD CB 0D 04 3594   	call fn_draw_pixel_without_border
0417C5             3595   
0417C5 C1          3596   	pop bc
0417C6             3597   
0417C6 04          3598   	inc b
0417C7 21 35 1A 04 3599   	ld hl,spr_size
0417CB 7E          3600   	ld a,(hl)
0417CC B8          3601   	cp b
0417CD 28 04       3602   	jr z,rs_next_line
0417CF C3 B6 17 04 3603   	jp rs_loop
0417D3             3604   
0417D3             3605   rs_next_line:
0417D3 06 00       3606   	ld b,0
0417D5 0C          3607   	inc c
0417D6 21 35 1A 04 3608   	ld hl,spr_size
0417DA 7E          3609   	ld a,(hl)
0417DB B9          3610   	cp c
0417DC 28 04       3611   	jr z,rs_end
0417DE C3 B6 17 04 3612   	jp rs_loop
0417E2             3613   
0417E2             3614   rs_end:
0417E2 AF          3615   	xor a
0417E3 21 30 1A 04 3616   	ld hl,xpix
0417E7 77          3617   	ld (hl),a
0417E8 21 31 1A 04 3618   	ld hl,ypix
0417EC 77          3619   	ld (hl),a
0417ED CD B7 0D 04 3620   	call fn_draw_pixel_with_border
0417F1             3621   
0417F1 C9          3622   	ret
0417F2             3623   
0417F2             3624   fn_change_frame:
0417F2 21 5B 1B 04 3625   	ld hl,current_frame
0417F6 7E          3626   	ld a,(hl)
0417F7 3C          3627   	inc a
0417F8 C6 30       3628   	add a,48
0417FA 21 5D 1B 04 3629   	ld hl,current_frame_ascii
0417FE 77          3630   	ld (hl),a
0417FF             3631   
0417FF             3632   	; locate 21,3
0417FF             3633   	vdu 31
0417FF 3E 1F       0001M  		LD	A, function
041801 49 D7       0002M  		RST.LIS	10h
041803             3634   	vdu 21
041803 3E 15       0001M  		LD	A, function
041805 49 D7       0002M  		RST.LIS	10h
041807             3635   	vdu 3
041807 3E 03       0001M  		LD	A, function
041809 49 D7       0002M  		RST.LIS	10h
04180B             3636   
04180B             3637   	; print text
04180B 21 5D 1B 04 3638   	ld hl,current_frame_ascii
04180F 01 00 00 00 3639   	ld bc,0
041813 AF          3640   	xor a
041814 49 DF       3641   	rst.lis $18
041816             3642   
041816 C9          3643   	ret
041817             3644   
041817             3645   fn_change_frames_count:
041817 21 5C 1B 04 3646   	ld hl,frames_count
04181B 7E          3647   	ld a,(hl)
04181C C6 30       3648   	add a,48
04181E 21 5F 1B 04 3649   	ld hl,frames_count_ascii
041822 77          3650   	ld (hl),a
041823             3651   
041823             3652   	; locate 23,3
041823             3653   	vdu 31
041823 3E 1F       0001M  		LD	A, function
041825 49 D7       0002M  		RST.LIS	10h
041827             3654   	vdu 23
041827 3E 17       0001M  		LD	A, function
041829 49 D7       0002M  		RST.LIS	10h
04182B             3655   	vdu 3
04182B 3E 03       0001M  		LD	A, function
04182D 49 D7       0002M  		RST.LIS	10h
04182F             3656   
04182F             3657   	; print text
04182F 21 5F 1B 04 3658   	ld hl,frames_count_ascii
041833 01 00 00 00 3659   	ld bc,0
041837 AF          3660   	xor a
041838 49 DF       3661   	rst.lis $18
04183A             3662   
04183A C9          3663   	ret
04183B             3664   
04183B             3665   ; slowdown (wait delay)
04183B             3666   fn_slowdown:
04183B DD 21 61 1B 3667   	ld ix,keydata
       04          
041840 DD 7E 02    3668   	ld a,(ix+2)
041843 E6 02       3669   	and 2
041845 FE 02       3670   	cp 2 ; shift key to disable delay
041847 C8          3671   	ret z
041848             3672   
041848             3673   	moscall mos_sysvars
041848 3E 08       0001M  		LD	A, function
04184A 49 CF       0002M  		RST.LIS	08h
04184C DD 4E 00    3674   	ld c,(ix+sysvar_time)
04184F             3675   
04184F             3676   sd_loop:
04184F             3677   	moscall mos_sysvars
04184F 3E 08       0001M  		LD	A, function
041851 49 CF       0002M  		RST.LIS	08h
041853 DD 7E 00    3678   	ld a,(ix+sysvar_time)
041856 91          3679   	sub c
041857 FE 14       3680   	cp SLOWDOWN_DELAY
041859 20 F4       3681   	jr nz,sd_loop
04185B C9          3682   	ret
04185C             3683   
04185C             3684   fn_show_spr_descr:
04185C             3685   	; locate 15,3
04185C             3686   	vdu 31
04185C 3E 1F       0001M  		LD	A, function
04185E 49 D7       0002M  		RST.LIS	10h
041860             3687   	vdu 15
041860 3E 0F       0001M  		LD	A, function
041862 49 D7       0002M  		RST.LIS	10h
041864             3688   	vdu 3
041864 3E 03       0001M  		LD	A, function
041866 49 D7       0002M  		RST.LIS	10h
041868             3689   
041868             3690   	; print text
041868 21 80 1A 04 3691   	ld hl,spr_descr
04186C 01 00 00 00 3692   	ld bc,0
041870 AF          3693   	xor a
041871 49 DF       3694   	rst.lis $18
041873             3695   
041873             3696   	; locate 15,5
041873             3697   	vdu 31
041873 3E 1F       0001M  		LD	A, function
041875 49 D7       0002M  		RST.LIS	10h
041877             3698   	vdu 15
041877 3E 0F       0001M  		LD	A, function
041879 49 D7       0002M  		RST.LIS	10h
04187B             3699   	vdu 5
04187B 3E 05       0001M  		LD	A, function
04187D 49 D7       0002M  		RST.LIS	10h
04187F             3700   
04187F             3701   	; check for sprite size...
04187F 21 35 1A 04 3702   	ld hl,spr_size
041883 7E          3703   	ld a,(hl)
041884             3704   
041884 FE 04       3705   	cp 4
041886 20 0C       3706   	jr nz,ssd_8x8
041888             3707   
041888             3708   	; print text 4x4
041888 21 8A 1A 04 3709   	ld hl,spr_descr1
04188C 01 00 00 00 3710   	ld bc,0
041890 AF          3711   	xor a
041891 49 DF       3712   	rst.lis $18
041893 C9          3713   	ret
041894             3714   
041894             3715   ssd_8x8:
041894 FE 08       3716   	cp 8
041896 20 0C       3717   	jr nz,ssd_16x16
041898             3718   
041898             3719   	; print text 8x8
041898 21 90 1A 04 3720   	ld hl,spr_descr2
04189C 01 00 00 00 3721   	ld bc,0
0418A0 AF          3722   	xor a
0418A1 49 DF       3723   	rst.lis $18
0418A3 C9          3724   	ret
0418A4             3725   
0418A4             3726   ssd_16x16:
0418A4 FE 10       3727   	cp 16
0418A6 20 0C       3728   	jr nz,ssd_32x32
0418A8             3729   
0418A8             3730   	; print text 16x16
0418A8 21 96 1A 04 3731   	ld hl,spr_descr3
0418AC 01 00 00 00 3732   	ld bc,0
0418B0 AF          3733   	xor a
0418B1 49 DF       3734   	rst.lis $18
0418B3 C9          3735   	ret
0418B4             3736   
0418B4             3737   ssd_32x32:
0418B4             3738   	; print text 32x32
0418B4 21 9C 1A 04 3739   	ld hl,spr_descr4
0418B8 01 00 00 00 3740   	ld bc,0
0418BC AF          3741   	xor a
0418BD 49 DF       3742   	rst.lis $18
0418BF             3743   
0418BF C9          3744   	ret
0418C0             3745   
0418C0             3746   ; input: HL = negative key to check
0418C0             3747   fn_inkey:
0418C0             3748   	moscall mos_getkbmap
0418C0 3E 1E       0001M  		LD	A, function
0418C2 49 CF       0002M  		RST.LIS	08h
0418C4 23          3749   	INC	HL
0418C5 7D          3750   	LD	A, L
0418C6 ED 44       3751   	NEG
0418C8 4F          3752   	LD	C, A
0418C9 3E 01       3753   	LD	A, 1
0418CB FA EF 18 04 3754   	JP	M,i_false ; < -128 ?
0418CF             3755   
0418CF 21 45 00 04 3756   	LD	HL,BITLOOKUP
0418D3 11 00 00 00 3757   	LD	DE,0
0418D7 79          3758   	LD	A,C
0418D8 E6 07       3759   	AND	00000111b
0418DA 5F          3760   	LD	E,A
0418DB 19          3761   	ADD	HL,DE
0418DC 46          3762   	LD	B,(HL)
0418DD             3763   
0418DD 79          3764   	LD	A,C
0418DE E6 78       3765   	AND	01111000b
0418E0 0F          3766   	RRCA
0418E1 0F          3767   	RRCA
0418E2 0F          3768   	RRCA
0418E3 5F          3769   	LD	E, A
0418E4 DD 19       3770   	ADD	IX,DE
0418E6 DD 7E 00    3771   	LD	A,(IX+0)
0418E9 A0          3772   	AND	B
0418EA 28 03       3773   	JR Z,i_false
0418EC 3E 01       3774   	LD A,1
0418EE C9          3775   	RET
0418EF             3776   i_false:
0418EF AF          3777   	XOR A
0418F0 C9          3778   	RET
0418F1             3779   
0418F1             3780   fn_create_sprite_folder:
0418F1 21 BD 1A 04 3781   	ld hl,sprite_path
0418F5             3782   	moscall mos_mkdir
0418F5 3E 07       0001M  		LD	A, function
0418F7 49 CF       0002M  		RST.LIS	08h
0418F9 C9          3783   	ret
0418FA             3784   
0418FA             3785   fn_create_palette_folder:
0418FA 21 C5 1A 04 3786   	ld hl,palette_path
0418FE             3787   	moscall mos_mkdir
0418FE 3E 07       0001M  		LD	A, function
041900 49 CF       0002M  		RST.LIS	08h
041902 C9          3788   	ret
041903             3789   
041903             3790   ; draw the palette
041903             3791   fn_draw_the_palette:
041903 0E 00       3792   	ld c,0
041905             3793   
041905             3794   fndtp_palette_loop:
041905 C5          3795   	push bc
041906             3796   
041906             3797   	; choose palette color
041906             3798   	vdu 18
041906 3E 12       0001M  		LD	A, function
041908 49 D7       0002M  		RST.LIS	10h
04190A             3799   	vdu 0
04190A 3E 00       0001M  		LD	A, function
04190C 49 D7       0002M  		RST.LIS	10h
04190E C1          3800   	pop bc
04190F C5          3801   	push bc
041910 79          3802   	ld a,c
041911 F5          3803   	push af
041912             3804   	vdu_a
041912 49 D7       0001M  		RST.LIS	10h
041914 F1          3805   	pop af
041915 E5          3806   	push hl
041916 21 55 1B 04 3807   	ld hl,colors_count
04191A BE          3808   	cp (hl)
04191B E1          3809   	pop hl
04191C 38 0B       3810   	jr c,fndtppl_zap
04191E             3811   
04191E             3812   	; set 0 if color is out of palette
04191E             3813   	vdu 18
04191E 3E 12       0001M  		LD	A, function
041920 49 D7       0002M  		RST.LIS	10h
041922             3814   	vdu 0
041922 3E 00       0001M  		LD	A, function
041924 49 D7       0002M  		RST.LIS	10h
041926 AF          3815   	xor a
041927             3816   	vdu_a
041927 49 D7       0001M  		RST.LIS	10h
041929             3817   
041929             3818   fndtppl_zap:
041929             3819   	; store coordinates for a palette square
041929 DD 21 20 1A 3820   	ld ix,x1
       04          
04192E E1          3821   	pop hl
04192F E5          3822   	push hl
041930 26 05       3823   	ld h,5
041932 ED 6C       3824   	mlt hl
041934 E5          3825   	push hl
041935 DD 75 00    3826   	ld (ix+0),l
041938 DD 74 01    3827   	ld (ix+1),h
04193B             3828   
04193B DD 21 22 1A 3829   	ld ix,y1
       04          
041940 21 00 00 00 3830   	ld hl,0
041944 DD 75 00    3831   	ld (ix+0),l
041947 DD 74 01    3832   	ld (ix+1),h
04194A             3833   
04194A DD 21 24 1A 3834   	ld ix,x2
       04          
04194F E1          3835   	pop hl
041950 11 04 00 00 3836   	ld de,4
041954 19          3837   	add hl,de
041955 DD 75 00    3838   	ld (ix+0),l
041958 DD 74 01    3839   	ld (ix+1),h
04195B             3840   
04195B DD 21 26 1A 3841   	ld ix,y2
       04          
041960 21 0A 00 00 3842   	ld hl,10
041964 DD 75 00    3843   	ld (ix+0),l
041967 DD 74 01    3844   	ld (ix+1),h
04196A             3845   
04196A             3846   	; draw the palette filled square
04196A CD E9 0C 04 3847   	call fn_rectf
04196E             3848   
04196E             3849   	; next color ?
04196E C1          3850   	pop bc
04196F 0C          3851   	inc c
041970 79          3852   	ld a,c
041971 FE 40       3853   	cp MAX_COLORS
041973 C2 05 19 04 3854   	jp nz,fndtp_palette_loop
041977             3855   
041977 C9          3856   	ret
041978             3857   
041978             3858   fn_comma:
041978 06 2C       3859   	ld b,','
04197A             3860   	moscall mos_fputc
04197A 3E 0D       0001M  		LD	A, function
04197C 49 CF       0002M  		RST.LIS	08h
04197E C9          3861   	ret
04197F             3862   
04197F             3863   ; Hex to BCD
04197F             3864   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
04197F             3865   ; Input: a = hex number
04197F             3866   ; Output: a = BCD number
04197F             3867   ; Clobbers: b,c
04197F             3868   fn_hex2bcd:
04197F C5          3869   		push bc
041980 4F          3870   		ld c,a  ; Original (hex) number
041981 06 08       3871   		ld b,8  ; How many bits
041983 AF          3872   		xor a   ; Output (BCD) number, starts at 0
041984 CB 21       3873   htb:	sla c   ; shift c into carry
041986 8F          3874   		adc a,a
041987 27          3875   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
041988 10 FA       3876   		djnz htb  ; Repeat for 8 bits
04198A C1          3877   		pop bc
04198B C9          3878   		ret
04198C             3879   
04198C             3880   ; set color RGB (b = c,e,l)
04198C             3881   fn_set_color:
04198C F5          3882   	push af
04198D C5          3883   	push bc
04198E D5          3884   	push de
04198F E5          3885   	push hl
041990             3886   
041990 78          3887   	ld a,b
041991 F5          3888   	push af
041992             3889   
041992             3890   	; store rgb tints
041992 7D          3891   	ld a,l
041993 21 57 1B 04 3892   	ld hl,red_tint
041997 71          3893   	ld (hl),c
041998 21 58 1B 04 3894   	ld hl,green_tint
04199C 73          3895   	ld (hl),e
04199D 21 59 1B 04 3896   	ld hl,blue_tint
0419A1 77          3897   	ld (hl),a
0419A2             3898   
0419A2             3899   	; point to palette rgb color
0419A2 21 D4 42 04 3900   	ld hl,rgb_palette
0419A6 11 00 00 00 3901   	ld de,#000000
0419AA 58          3902   	ld e,b
0419AB 16 03       3903   	ld d,3
0419AD ED 5C       3904   	mlt de
0419AF 19          3905   	add hl,de ; hl -> rgb colors
0419B0             3906   
0419B0             3907   	; store rgb tints into the rgb palette
0419B0 11 57 1B 04 3908   	ld de,red_tint
0419B4 1A          3909   	ld a,(de)
0419B5 77          3910   	ld (hl),a
0419B6 23          3911   	inc hl
0419B7 11 58 1B 04 3912   	ld de,green_tint
0419BB 1A          3913   	ld a,(de)
0419BC 77          3914   	ld (hl),a
0419BD 23          3915   	inc hl
0419BE 11 59 1B 04 3916   	ld de,blue_tint
0419C2 1A          3917   	ld a,(de)
0419C3 77          3918   	ld (hl),a
0419C4             3919   
0419C4             3920   	vdu 19
0419C4 3E 13       0001M  		LD	A, function
0419C6 49 D7       0002M  		RST.LIS	10h
0419C8 F1          3921   	pop af
0419C9             3922   	vdu_a
0419C9 49 D7       0001M  		RST.LIS	10h
0419CB             3923   	vdu 255
0419CB 3E FF       0001M  		LD	A, function
0419CD 49 D7       0002M  		RST.LIS	10h
0419CF             3924   
0419CF 21 57 1B 04 3925   	ld hl,red_tint
0419D3 7E          3926   	ld a,(hl)
0419D4             3927   	vdu_a
0419D4 49 D7       0001M  		RST.LIS	10h
0419D6             3928   
0419D6 21 58 1B 04 3929   	ld hl,green_tint
0419DA 7E          3930   	ld a,(hl)
0419DB             3931   	vdu_a
0419DB 49 D7       0001M  		RST.LIS	10h
0419DD             3932   
0419DD 21 59 1B 04 3933   	ld hl,blue_tint
0419E1 7E          3934   	ld a,(hl)
0419E2             3935   	vdu_a
0419E2 49 D7       0001M  		RST.LIS	10h
0419E4             3936   
0419E4 E1          3937   	pop hl
0419E5 D1          3938   	pop de
0419E6 C1          3939   	pop bc
0419E7 F1          3940   	pop af
0419E8 C9          3941   	ret
0419E9             3942   
0419E9             3943   ; read rgb tints for the color in b
0419E9             3944   fn_get_color:
0419E9 78          3945   	ld a,b
0419EA F5          3946   	push af
0419EB             3947   
0419EB             3948   	; point to palette rgb color
0419EB 21 D4 42 04 3949   	ld hl,rgb_palette
0419EF 11 00 00 00 3950   	ld de,#000000
0419F3 58          3951   	ld e,b
0419F4 16 03       3952   	ld d,3
0419F6 ED 5C       3953   	mlt de
0419F8 19          3954   	add hl,de ; hl -> rgb colors
0419F9             3955   
0419F9             3956   	; store rgb tints
0419F9 11 57 1B 04 3957   	ld de,red_tint
0419FD 7E          3958   	ld a,(hl)
0419FE 12          3959   	ld (de),a
0419FF 23          3960   	inc hl
041A00 11 58 1B 04 3961   	ld de,green_tint
041A04 7E          3962   	ld a,(hl)
041A05 12          3963   	ld (de),a
041A06 23          3964   	inc hl
041A07 11 59 1B 04 3965   	ld de,blue_tint
041A0B 7E          3966   	ld a,(hl)
041A0C 12          3967   	ld (de),a
041A0D             3968   
041A0D             3969   	; grab rgb tints in c,e,l
041A0D 21 57 1B 04 3970   	ld hl,red_tint
041A11 4E          3971   	ld c,(hl)
041A12 21 58 1B 04 3972   	ld hl,green_tint
041A16 5E          3973   	ld e,(hl)
041A17 21 59 1B 04 3974   	ld hl,blue_tint
041A1B 7E          3975   	ld a,(hl)
041A1C 6F          3976   	ld l,a
041A1D             3977   
041A1D F1          3978   	pop af
041A1E 47          3979   	ld b,a
041A1F C9          3980   	ret
041A20             3981   
041A20             3982   ;======================================================================
041A20             3983   
041A20             3984   ; coordinates for rectangles
041A20             3985   x1:
041A20 00 00       3986   	dw $0000
041A22             3987   y1:
041A22 00 00       3988   	dw $0000
041A24             3989   x2:
041A24 00 00       3990   	dw $0000
041A26             3991   y2:
041A26 00 00       3992   	dw $0000
041A28             3993   
041A28             3994   ; coordinates of the edited sprite
041A28             3995   xs1:
041A28 5F 00       3996   	dw 95
041A2A             3997   ys1:
041A2A 37 00       3998   	dw 55
041A2C             3999   xs2:
041A2C E0 00       4000   	dw 224
041A2E             4001   ys2:
041A2E B8 00       4002   	dw 184
041A30             4003   
041A30             4004   ; coordinates of active pixels to draw
041A30             4005   xpix:
041A30 00          4006   	db 0
041A31             4007   ypix:
041A31 00          4008   	db 0
041A32             4009   
041A32             4010   ; memorized coordinates of active pixels to draw
041A32             4011   memxpix:
041A32 00          4012   	db 0
041A33             4013   memypix:
041A33 00          4014   	db 0
041A34             4015   
041A34             4016   ; width of a pixel in the sprite
041A34             4017   pixel_width:
041A34 00          4018   	db 0
041A35             4019   
041A35             4020   ; sprite size, in resized pixels
041A35             4021   spr_size:
041A35 00          4022   	db 0
041A36             4023   
041A36             4024   ; pen color (0-63)
041A36             4025   current_pen:
041A36 00          4026   	db 0
041A37             4027   
041A37             4028   ; texts for 1st menu
041A37             4029   title:
041A37 53 50 52 2D 4030   	db "SPR-EDIT",0
       45 44 49 54 
       00          
041A40             4031   
041A40             4032   menu1:
041A40 46 31 2E 20 4033   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
041A4F             4034   menu2:
041A4F 46 32 2E 20 4035   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041A5E             4036   menu3:
041A5E 46 33 2E 20 4037   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
041A6F             4038   menu4:
041A6F 46 34 2E 20 4039   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
041A80             4040   
041A80             4041   ; descriptions of sprites
041A80             4042   spr_descr:
041A80 46 72 61 6D 4043   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041A8A             4044   spr_descr1:
041A8A 34 78 34 20 4045   	db "4x4  ",0
       20 00       
041A90             4046   spr_descr2:
041A90 38 78 38 20 4047   	db "8x8  ",0
       20 00       
041A96             4048   spr_descr3:
041A96 31 36 78 31 4049   	db "16x16",0
       36 00       
041A9C             4050   spr_descr4:
041A9C 33 32 78 33 4051   	db "32x32",0
       32 00       
041AA2             4052   
041AA2             4053   ; label before filename
041AA2             4054   filename_label:
041AA2 46 69 6C 65 4055   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041AAC             4056   
041AAC             4057   ; filename without extension
041AAC             4058   filename:
041AAC             4059   	ds 17
041ABD             4060   
041ABD             4061   sprite_path:
041ABD 73 70 72 69 4062   	db "sprites",0
       74 65 73 00 
041AC5             4063   
041AC5             4064   palette_path:
041AC5 70 61 6C 65 4065   	db "palettes",0
       74 74 65 73 
       00          
041ACE             4066   
041ACE             4067   back_path:
041ACE 2E 2E 00    4068   	db "..",0
041AD1             4069   
041AD1             4070   ; single space char to print
041AD1             4071   spacechar:
041AD1 20 00       4072   	db " ",0
041AD3             4073   
041AD3             4074   ; spaces to remove filename label
041AD3             4075   void_filename:
041AD3 20 20 20 20 4076   	db "                         ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041AED             4077   
041AED             4078   ; file error message
041AED             4079   file_error:
041AED 46 69 6C 65 4080   	db "File error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B07             4081   
041B07             4082   ; folder error message
041B07             4083   folder_error:
041B07 46 6F 6C 64 4084   	db "Folder error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B21             4085   
041B21             4086   ; header error message
041B21             4087   header_error:
041B21 48 65 61 64 4088   	db "Header error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B3B             4089   
041B3B             4090   ; data error message
041B3B             4091   data_error:
041B3B 44 61 74 61 4092   	db "Data error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B55             4093   
041B55             4094   ; number of colors
041B55             4095   colors_count:
041B55 00          4096   	db 0
041B56             4097   
041B56             4098   ; real number of colors
041B56             4099   new_colors_count:
041B56 00          4100   	db 0
041B57             4101   
041B57             4102   red_tint:
041B57 00          4103   	db 0
041B58             4104   
041B58             4105   green_tint:
041B58 00          4106   	db 0
041B59             4107   
041B59             4108   blue_tint:
041B59 00          4109   	db 0
041B5A             4110   
041B5A             4111   error_flag:
041B5A 00          4112   	db 0
041B5B             4113   
041B5B             4114   ; current frame
041B5B             4115   current_frame:
041B5B 00          4116   	db 0
041B5C             4117   
041B5C             4118   ; frames count
041B5C             4119   frames_count:
041B5C 00          4120   	db 0
041B5D             4121   
041B5D             4122   current_frame_ascii:
041B5D 30 00       4123   	db '0',0
041B5F             4124   
041B5F             4125   frames_count_ascii:
041B5F 30 00       4126   	db '0',0
041B61             4127   
041B61             4128   ; keycode, keydown & keymods are stored here
041B61             4129   keydata:
041B61 00 00 00    4130   	db 0,0,0
041B64             4131   
041B64             4132   ; buffer for the current sprite
041B64             4133   sprite_buffer:
041B64             4134   	ds BUFFER_SIZE
043B64             4135   
043B64             4136   header_buffer:
043B64             4137   	ds HEADER_BUFFER_SIZE
043B74             4138   
043B74             4139   color_buffer:
043B74 00 00 00    4140   	db 0,0,0
043B77             4141   
043B77             4142   palette_buffer:
043B77             4143   	ds MAX_PAL_DATA + 1
043EBC             4144   
043EBC             4145   temp_chars_buffer:
043EBC 00 00 00 00 4146   	db 0,0,0,0
043EC0             4147   
043EC0             4148   header:
043EC0 4A 41 53 43 4149   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043ECA 30 31 30 30 4150   	db "0100",13,10
       0D 0A       
043ED0             4151   
043ED0             4152   ; buffer to perform some operations
043ED0             4153   swap_sprite_buffer:
043ED0             4154   	ds ONE_FRAME_BUFFER_SIZE
0442D0             4155   
0442D0             4156   asm_line:
0442D0 44 42 20    4157   	DB "DB "
0442D3             4158   
0442D3             4159   asm_line_length:
0442D3 03          4160   	DB 3
0442D4             4161   
0442D4             4162   rgb_palette:
0442D4 00 00 00    4163   	db $00,$00,$00
0442D7 AA 00 00    4164   	db $AA,$00,$00
0442DA 00 AA 00    4165   	db $00,$AA,$00
0442DD AA AA 00    4166   	db $AA,$AA,$00
0442E0 00 00 AA    4167   	db $00,$00,$AA
0442E3 AA 00 AA    4168   	db $AA,$00,$AA
0442E6 00 AA AA    4169   	db $00,$AA,$AA
0442E9 AA AA AA    4170   	db $AA,$AA,$AA
0442EC             4171   
0442EC 55 55 55    4172   	db $55,$55,$55
0442EF FF 00 00    4173   	db $FF,$00,$00
0442F2 00 FF 00    4174   	db $00,$FF,$00
0442F5 FF FF 00    4175   	db $FF,$FF,$00
0442F8 00 00 FF    4176   	db $00,$00,$FF
0442FB FF 00 FF    4177   	db $FF,$00,$FF
0442FE 00 FF FF    4178   	db $00,$FF,$FF
044301 FF FF FF    4179   	db $FF,$FF,$FF
044304             4180   
044304 00 00 55    4181   	db $00,$00,$55
044307 00 55 00    4182   	db $00,$55,$00
04430A 00 55 55    4183   	db $00,$55,$55
04430D 00 55 AA    4184   	db $00,$55,$AA
044310 00 55 FF    4185   	db $00,$55,$FF
044313 00 AA 55    4186   	db $00,$AA,$55
044316 00 AA FF    4187   	db $00,$AA,$FF
044319 00 FF 55    4188   	db $00,$FF,$55
04431C             4189   
04431C 00 FF AA    4190   	db $00,$FF,$AA
04431F 55 00 00    4191   	db $55,$00,$00
044322 55 00 55    4192   	db $55,$00,$55
044325 55 00 AA    4193   	db $55,$00,$AA
044328 55 00 FF    4194   	db $55,$00,$FF
04432B 55 55 00    4195   	db $55,$55,$00
04432E 55 55 AA    4196   	db $55,$55,$AA
044331 55 55 FF    4197   	db $55,$55,$FF
044334             4198   
044334 55 AA 00    4199   	db $55,$AA,$00
044337 55 AA 55    4200   	db $55,$AA,$55
04433A 55 AA AA    4201   	db $55,$AA,$AA
04433D 55 AA FF    4202   	db $55,$AA,$FF
044340 55 FF 00    4203   	db $55,$FF,$00
044343 55 FF 55    4204   	db $55,$FF,$55
044346 55 FF AA    4205   	db $55,$FF,$AA
044349 55 FF FF    4206   	db $55,$FF,$FF
04434C             4207   
04434C AA 00 55    4208   	db $AA,$00,$55
04434F AA 00 FF    4209   	db $AA,$00,$FF
044352 AA 55 00    4210   	db $AA,$55,$00
044355 AA 55 55    4211   	db $AA,$55,$55
044358 AA 55 AA    4212   	db $AA,$55,$AA
04435B AA 55 FF    4213   	db $AA,$55,$FF
04435E AA AA 55    4214   	db $AA,$AA,$55
044361 AA AA FF    4215   	db $AA,$AA,$FF
044364             4216   
044364 AA FF 00    4217   	db $AA,$FF,$00
044367 AA FF 55    4218   	db $AA,$FF,$55
04436A AA FF AA    4219   	db $AA,$FF,$AA
04436D AA FF FF    4220   	db $AA,$FF,$FF
044370 FF 00 55    4221   	db $FF,$00,$55
044373 FF 00 AA    4222   	db $FF,$00,$AA
044376 FF 55 00    4223   	db $FF,$55,$00
044379 FF 55 55    4224   	db $FF,$55,$55
04437C             4225   
04437C FF 55 AA    4226   	db $FF,$55,$AA
04437F FF 55 FF    4227   	db $FF,$55,$FF
044382 FF AA 00    4228   	db $FF,$AA,$00
044385 FF AA 55    4229   	db $FF,$AA,$55
044388 FF AA AA    4230   	db $FF,$AA,$AA
04438B FF AA FF    4231   	db $FF,$AA,$FF
04438E FF FF 55    4232   	db $FF,$FF,$55
044391 FF FF AA    4233   	db $FF,$FF,$AA
044394             4234   
044394             4235   ; sprite structure:
044394             4236   ; =================
044394             4237   ; colors_count  :   byte
044394             4238   ; frames count	:	byte
044394             4239   ; spr size		:	byte
044394             4240   ; data			:   width x height bytes of colors
044394             4241   
044394             4242   ; ===============================================
