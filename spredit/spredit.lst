PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   COLOR_MIN:	 		equ 0
040045             0022   COLOR_MAX:	 		equ 63
040045             0023   
040045             0024   MAX_FRAMES:			equ 8
040045             0025   
040045             0026   COLOR_WHITE:		equ 15
040045             0027   COLOR_GREY:			equ 7
040045             0028   COLOR_BLACK:		equ 0
040045             0029   
040045             0030   TITLE_X: 	equ 17
040045             0031   TITLE_Y: 	equ 2
040045             0032   MENU_X: 	equ 13
040045             0033   MENU1_Y: 	equ 8
040045             0034   MENU2_Y: 	equ 12
040045             0035   MENU3_Y: 	equ 16
040045             0036   MENU4_Y: 	equ 20
040045             0037   MENU5_Y: 	equ 24
040045             0038   FILENAME_X: equ 7
040045             0039   FILENAME_Y: equ 24
040045             0040   
040045             0041   SPR44: 		equ 4
040045             0042   SPR88: 		equ 8
040045             0043   SPR1616: 	equ 16
040045             0044   SPR3232: 	equ 32
040045             0045   
040045             0046   SPR44_width: 	equ 32
040045             0047   SPR88_width: 	equ 16
040045             0048   SPR1616_width: 	equ 8
040045             0049   SPR3232_width: 	equ 4
040045             0050   
040045             0051   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0052   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0053   
040045             0054   HEADER_BUFFER_SIZE:		equ 16
040045             0055   
040045             0056   SLOWDOWN_DELAY:	equ 20
040045             0057   
040045             0058   KEY_SPACE: equ -99 ; draw with color
040045             0059   KEY_UP: equ -58 ; move
040045             0060   KEY_DOWN: equ -42
040045             0061   KEY_LEFT: equ -26
040045             0062   KEY_RIGHT: equ -122
040045             0063   KEY_DELETE: equ -90 ; remove color with black
040045             0064   KEY_N: equ -86 ; add a new void frame
040045             0065   KEY_C: equ -83 ; copy current frame to a new frame
040045             0066   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0067   KEY_PGUP: equ -64 ; select frame
040045             0068   KEY_PGDOWN: equ -79
040045             0069   KEY_L: equ -87 ; load sprite
040045             0070   KEY_S: equ -82 ; save sprite
040045             0071   KEY_E: equ -35 ; export sprite as assembler data
040045             0072   KEY_R: equ -52 ; rotate frame clockwise
040045             0073   KEY_F: equ -68 ; flip frame horizontally
040045             0074   KEY_M: equ -102 ; mirror frame vertically
040045             0075   KEY_ESCAPE: equ -113
040045             0076   KEY_F1: equ -114 ; select 4x4 sprite
040045             0077   KEY_F2: equ -115 ; select 8x8 sprite
040045             0078   KEY_F3: equ -116 ; select 16x16 sprite
040045             0079   KEY_F4: equ -21 ; select 32x32 sprite
040045             0080   KEY_RETURN: equ -74 ; floodfill
040045             0081   
040045             0082   ; play mode:
040045             0083   KEY_P:	equ -56 ; switch to play mode
040045             0084   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0085   
040045             0086   ; palette mode:
040045             0087   KEY_TAB: equ -97 ; switch to palette mode
040045             0088   KEY_1:	equ -49 ; red+
040045             0089   KEY_2:	equ -50 ; green+
040045             0090   KEY_3:	equ -18 ; blue+
040045             0091   KEY_4:	equ -19 ; red-
040045             0092   KEY_5:	equ -20 ; green-
040045             0093   KEY_6:	equ -53; blue-
040045             0094   KEY_7:	equ -37 ; reset color to black
040045             0095   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0096   ; KEY_S: save palette file
040045             0097   
040045             0098   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0099   
040045             0100   BITLOOKUP:
040045 01 02 04 08 0101   	DB 01h,02h,04h,08h
040049 10 20 40 80 0102   	DB 10h,20h,40h,80h
04004D             0103   
04004D             0104   ;======================================================================
04004D             0105   start:
04004D F5          0106   	push af
04004E C5          0107   	push bc
04004F D5          0108   	push de
040050 DD E5       0109   	push ix
040052 FD E5       0110   	push iy
040054             0111   
040054             0112   	; set mode 8 (320x240x64)
040054             0113   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0114   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0115   
04005C             0116   	; disable logical scale coordinates system
04005C             0117   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0118   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0119   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0120   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0121   
04006C             0122   	; set text colors
04006C             0123   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0124   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0125   
040074             0126   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0127   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0128   
04007C             0129   	; set graphics pen
04007C             0130   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0131   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0132   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0133   
040088             0134   	; hide cursor
040088             0135   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0136   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0137   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0138   
040094             0139   	; store coordinates
040094 DD 21 B2 16 0140   	ld ix,x1
       04          
040099 21 00 00 00 0141   	ld hl,0
04009D DD 75 00    0142   	ld (ix+0),l
0400A0 DD 74 01    0143   	ld (ix+1),h
0400A3             0144   
0400A3 DD 21 B4 16 0145   	ld ix,y1
       04          
0400A8 21 00 00 00 0146   	ld hl,0
0400AC DD 75 00    0147   	ld (ix+0),l
0400AF DD 74 01    0148   	ld (ix+1),h
0400B2             0149   
0400B2 DD 21 B6 16 0150   	ld ix,x2
       04          
0400B7 21 3F 01 00 0151   	ld hl,319
0400BB DD 75 00    0152   	ld (ix+0),l
0400BE DD 74 01    0153   	ld (ix+1),h
0400C1             0154   
0400C1 DD 21 B8 16 0155   	ld ix,y2
       04          
0400C6 21 EF 00 00 0156   	ld hl,239
0400CA DD 75 00    0157   	ld (ix+0),l
0400CD DD 74 01    0158   	ld (ix+1),h
0400D0             0159   
0400D0             0160   	; draw the border rectangle
0400D0 CD E1 0A 04 0161   	call fn_rect
0400D4             0162   
0400D4             0163   	; locate x,y
0400D4             0164   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0165   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0166   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0167   
0400E0             0168   	; print text
0400E0 21 C9 16 04 0169   	ld hl,title
0400E4 01 00 00 00 0170   	ld bc,0
0400E8 AF          0171   	xor a
0400E9 49 DF       0172   	rst.lis $18
0400EB             0173   
0400EB             0174   	; locate x,y
0400EB             0175   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0176   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0177   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0178   
0400F7             0179   	; print text
0400F7 21 D2 16 04 0180   	ld hl,menu1
0400FB 01 00 00 00 0181   	ld bc,0
0400FF AF          0182   	xor a
040100 49 DF       0183   	rst.lis $18
040102             0184   
040102             0185   	; locate x,y
040102             0186   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0187   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0188   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0189   
04010E             0190   	; print text
04010E 21 E1 16 04 0191   	ld hl,menu2
040112 01 00 00 00 0192   	ld bc,0
040116 AF          0193   	xor a
040117 49 DF       0194   	rst.lis $18
040119             0195   
040119             0196   	; locate x,y
040119             0197   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0198   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0199   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0200   
040125             0201   	; print text
040125 21 F0 16 04 0202   	ld hl,menu3
040129 01 00 00 00 0203   	ld bc,0
04012D AF          0204   	xor a
04012E 49 DF       0205   	rst.lis $18
040130             0206   
040130             0207   	; locate x,y
040130             0208   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0209   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0210   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0211   
04013C             0212   	; print text
04013C 21 01 17 04 0213   	ld hl,menu4
040140 01 00 00 00 0214   	ld bc,0
040144 AF          0215   	xor a
040145 49 DF       0216   	rst.lis $18
040147             0217   
040147             0218   ; menu loop
040147             0219   menu_loop:
040147 21 8F FF FF 0220   	ld hl,KEY_ESCAPE
04014B CD 5D 16 04 0221   	call fn_inkey
04014F FE 01       0222   	CP 1
040151 CA BD 0A 04 0223   	jp z,exit_program
040155             0224   
040155 21 8E FF FF 0225   	ld hl,KEY_F1
040159 CD 5D 16 04 0226   	call fn_inkey
04015D FE 01       0227   	CP 1
04015F CA 91 01 04 0228   	jp z,ml_menu1
040163             0229   
040163 21 8D FF FF 0230   	ld hl,KEY_F2
040167 CD 5D 16 04 0231   	call fn_inkey
04016B FE 01       0232   	CP 1
04016D CA 97 01 04 0233   	jp z,ml_menu2
040171             0234   
040171 21 8C FF FF 0235   	ld hl,KEY_F3
040175 CD 5D 16 04 0236   	call fn_inkey
040179 FE 01       0237   	CP 1
04017B CA 9D 01 04 0238   	jp z,ml_menu3
04017F             0239   
04017F 21 EB FF FF 0240   	ld hl,KEY_F4
040183 CD 5D 16 04 0241   	call fn_inkey
040187 FE 01       0242   	CP 1
040189 CA A3 01 04 0243   	jp z,ml_menu4
04018D             0244   
04018D C3 47 01 04 0245   	jp menu_loop
040191             0246   
040191             0247   ml_menu1:
040191 3E 04       0248   	ld a,SPR44
040193 16 20       0249   	ld d,SPR44_width
040195 18 10       0250   	jr exit_menu_loop
040197             0251   
040197             0252   ml_menu2:
040197 3E 08       0253   	ld a,SPR88
040199 16 10       0254   	ld d,SPR88_width
04019B 18 0A       0255   	jr exit_menu_loop
04019D             0256   
04019D             0257   ml_menu3:
04019D 3E 10       0258   	ld a,SPR1616
04019F 16 08       0259   	ld d,SPR1616_width
0401A1 18 04       0260   	jr exit_menu_loop
0401A3             0261   
0401A3             0262   ml_menu4:
0401A3 3E 20       0263   	ld a,SPR3232
0401A5 16 04       0264   	ld d,SPR3232_width
0401A7             0265   
0401A7             0266   exit_menu_loop:
0401A7             0267   	; store edited sprite size
0401A7 21 C7 16 04 0268   	ld hl,spr_size
0401AB 77          0269   	ld (hl),a
0401AC 21 C6 16 04 0270   	ld hl,pixel_width
0401B0 72          0271   	ld (hl),d
0401B1             0272   
0401B1             0273   	; clear the text screen
0401B1             0274   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0275   
0401B5             0276   	; draw the palette
0401B5 0E 00       0277   	ld c,0
0401B7             0278   
0401B7             0279   palette_loop:
0401B7 C5          0280   	push bc
0401B8             0281   
0401B8             0282   	; choose palette color
0401B8             0283   	vdu 18
0401B8 3E 12       0001M  		LD	A, function
0401BA 49 D7       0002M  		RST.LIS	10h
0401BC             0284   	vdu 0
0401BC 3E 00       0001M  		LD	A, function
0401BE 49 D7       0002M  		RST.LIS	10h
0401C0 C1          0285   	pop bc
0401C1 C5          0286   	push bc
0401C2 79          0287   	ld a,c
0401C3             0288   	vdu_a
0401C3 49 D7       0001M  		RST.LIS	10h
0401C5             0289   
0401C5             0290   	; store coordinates for a palette square
0401C5 DD 21 B2 16 0291   	ld ix,x1
       04          
0401CA E1          0292   	pop hl
0401CB E5          0293   	push hl
0401CC 26 05       0294   	ld h,5
0401CE ED 6C       0295   	mlt hl
0401D0 E5          0296   	push hl
0401D1 DD 75 00    0297   	ld (ix+0),l
0401D4 DD 74 01    0298   	ld (ix+1),h
0401D7             0299   
0401D7 DD 21 B4 16 0300   	ld ix,y1
       04          
0401DC 21 00 00 00 0301   	ld hl,0
0401E0 DD 75 00    0302   	ld (ix+0),l
0401E3 DD 74 01    0303   	ld (ix+1),h
0401E6             0304   
0401E6 DD 21 B6 16 0305   	ld ix,x2
       04          
0401EB E1          0306   	pop hl
0401EC 11 04 00 00 0307   	ld de,4
0401F0 19          0308   	add hl,de
0401F1 DD 75 00    0309   	ld (ix+0),l
0401F4 DD 74 01    0310   	ld (ix+1),h
0401F7             0311   
0401F7 DD 21 B8 16 0312   	ld ix,y2
       04          
0401FC 21 0A 00 00 0313   	ld hl,10
040200 DD 75 00    0314   	ld (ix+0),l
040203 DD 74 01    0315   	ld (ix+1),h
040206             0316   
040206             0317   	; draw the palette filled square
040206 CD A0 0B 04 0318   	call fn_rectf
04020A             0319   
04020A             0320   	; next color ?
04020A C1          0321   	pop bc
04020B 0C          0322   	inc c
04020C 79          0323   	ld a,c
04020D FE 40       0324   	cp MAX_COLORS
04020F C2 B7 01 04 0325   	jp nz,palette_loop
040213             0326   
040213             0327   	; store coordinates
040213 DD 21 B2 16 0328   	ld ix,x1
       04          
040218 21 00 00 00 0329   	ld hl,0
04021C DD 75 00    0330   	ld (ix+0),l
04021F DD 74 01    0331   	ld (ix+1),h
040222             0332   
040222 DD 21 B4 16 0333   	ld ix,y1
       04          
040227 21 0B 00 00 0334   	ld hl,11
04022B DD 75 00    0335   	ld (ix+0),l
04022E DD 74 01    0336   	ld (ix+1),h
040231             0337   
040231 DD 21 B6 16 0338   	ld ix,x2
       04          
040236 21 3F 01 00 0339   	ld hl,319
04023A DD 75 00    0340   	ld (ix+0),l
04023D DD 74 01    0341   	ld (ix+1),h
040240             0342   
040240 DD 21 B8 16 0343   	ld ix,y2
       04          
040245 21 EF 00 00 0344   	ld hl,239
040249 DD 75 00    0345   	ld (ix+0),l
04024C DD 74 01    0346   	ld (ix+1),h
04024F             0347   
04024F             0348   	; draw the border rectangle
04024F CD E1 0A 04 0349   	call fn_rect
040253             0350   
040253             0351   	; store edited sprite coordinates
040253 DD 21 BA 16 0352   	ld ix,xs1
       04          
040258 FD 21 B2 16 0353   	ld iy,x1
       04          
04025D DD 6E 00    0354   	ld l,(ix+0)
040260 DD 66 01    0355   	ld h,(ix+1)
040263 FD 75 00    0356   	ld (iy+0),l
040266 FD 74 01    0357   	ld (iy+1),h
040269             0358   
040269 DD 21 BC 16 0359   	ld ix,ys1
       04          
04026E FD 21 B4 16 0360   	ld iy,y1
       04          
040273 DD 6E 00    0361   	ld l,(ix+0)
040276 DD 66 01    0362   	ld h,(ix+1)
040279 FD 75 00    0363   	ld (iy+0),l
04027C FD 74 01    0364   	ld (iy+1),h
04027F             0365   
04027F DD 21 BE 16 0366   	ld ix,xs2
       04          
040284 FD 21 B6 16 0367   	ld iy,x2
       04          
040289 DD 6E 00    0368   	ld l,(ix+0)
04028C DD 66 01    0369   	ld h,(ix+1)
04028F FD 75 00    0370   	ld (iy+0),l
040292 FD 74 01    0371   	ld (iy+1),h
040295             0372   
040295 DD 21 C0 16 0373   	ld ix,ys2
       04          
04029A FD 21 B8 16 0374   	ld iy,y2
       04          
04029F DD 6E 00    0375   	ld l,(ix+0)
0402A2 DD 66 01    0376   	ld h,(ix+1)
0402A5 FD 75 00    0377   	ld (iy+0),l
0402A8 FD 74 01    0378   	ld (iy+1),h
0402AB             0379   
0402AB             0380   	; draw the sprite's border rectangle
0402AB CD E1 0A 04 0381   	call fn_rect
0402AF             0382   
0402AF             0383   	; update sprite size descriptions
0402AF CD F9 15 04 0384   	call fn_show_spr_descr
0402B3             0385   
0402B3             0386   ; initialize sprite vars
0402B3             0387   init_sprite_vars:
0402B3             0388   	; initialize coordinates before drawing the sprite
0402B3 DD 21 C2 16 0389   	ld ix,xpix
       04          
0402B8 AF          0390   	xor a
0402B9 DD 77 00    0391   	ld (ix+0),a ; xpix = 0
0402BC DD 77 01    0392   	ld (ix+1),a	; ypix = 0
0402BF DD 21 C8 16 0393   	ld ix,current_pen
       04          
0402C4 3E 0F       0394   	ld a,COLOR_WHITE
0402C6 DD 77 00    0395   	ld (ix+0),a ; current pen -> white
0402C9             0396   
0402C9             0397   	; set vars
0402C9 21 BD 17 04 0398   	ld hl,colors_count
0402CD 3E 40       0399   	ld a,MAX_COLORS
0402CF 77          0400   	ld (hl),a
0402D0 21 BE 17 04 0401   	ld hl,current_frame
0402D4 AF          0402   	xor a
0402D5 77          0403   	ld (hl),a
0402D6 3C          0404   	inc a
0402D7 21 BF 17 04 0405   	ld hl,frames_count
0402DB 77          0406   	ld (hl),a
0402DC             0407   
0402DC             0408   	; fill buffers with zeros
0402DC 01 00 20 00 0409   	ld bc,BUFFER_SIZE
0402E0 21 C7 17 04 0410   	ld hl,sprite_buffer
0402E4             0411   
0402E4             0412   isv_fill_loop:
0402E4 AF          0413   	xor a
0402E5 77          0414   	ld (hl),a
0402E6 0B          0415   	dec bc
0402E7 23          0416   	inc hl
0402E8 78          0417   	ld a,b
0402E9 B1          0418   	or c
0402EA FE 00       0419   	cp 0
0402EC 20 F6       0420   	jr nz,isv_fill_loop
0402EE             0421   
0402EE             0422   ; draw the pixel with a border
0402EE CD 6E 0C 04 0423   	call fn_draw_pixel_with_border
0402F2             0424   
0402F2             0425   ; draw sprite loop
0402F2             0426   draw_sprite_loop:
0402F2 21 9D FF FF 0427   	ld hl,KEY_SPACE
0402F6 CD 5D 16 04 0428   	call fn_inkey
0402FA FE 01       0429   	cp 1
0402FC CC 0E 04 04 0430   	call z,dsl_set_pen
040300             0431   
040300 21 C6 FF FF 0432   	ld hl,KEY_UP
040304 CD 5D 16 04 0433   	call fn_inkey
040308 FE 01       0434   	cp 1
04030A CC 33 04 04 0435   	call z,dsl_up
04030E             0436   
04030E 21 D6 FF FF 0437   	ld hl,KEY_DOWN
040312 CD 5D 16 04 0438   	call fn_inkey
040316 FE 01       0439   	cp 1
040318 CC 5A 04 04 0440   	call z,dsl_down
04031C             0441   
04031C 21 E6 FF FF 0442   	ld hl,KEY_LEFT
040320 CD 5D 16 04 0443   	call fn_inkey
040324 FE 01       0444   	cp 1
040326 CC 86 04 04 0445   	call z,dsl_left
04032A             0446   
04032A 21 86 FF FF 0447   	ld hl,KEY_RIGHT
04032E CD 5D 16 04 0448   	call fn_inkey
040332 FE 01       0449   	cp 1
040334 CC AD 04 04 0450   	call z,dsl_right
040338             0451   
040338 21 A6 FF FF 0452   	ld hl,KEY_DELETE
04033C CD 5D 16 04 0453   	call fn_inkey
040340 FE 01       0454   	cp 1
040342 CC 22 04 04 0455   	call z,dsl_reset_pen
040346             0456   
040346 21 9F FF FF 0457   	ld hl,KEY_TAB
04034A CD 5D 16 04 0458   	call fn_inkey
04034E FE 01       0459   	cp 1
040350 CA 85 09 04 0460   	jp z,dsl_palette_tool
040354             0461   
040354 21 AA FF FF 0462   	ld hl,KEY_N
040358 CD 5D 16 04 0463   	call fn_inkey
04035C FE 01       0464   	cp 1
04035E CC 2C 05 04 0465   	call z,dsl_add_frame
040362             0466   
040362 21 AD FF FF 0467   	ld hl,KEY_C
040366 CD 5D 16 04 0468   	call fn_inkey
04036A FE 01       0469   	cp 1
04036C CC C3 05 04 0470   	call z,dsl_add_and_copy_frame
040370             0471   
040370 21 D0 FF FF 0472   	ld hl,KEY_BACKSPACE
040374 CD 5D 16 04 0473   	call fn_inkey
040378 FE 01       0474   	cp 1
04037A CC 2A 06 04 0475   	call z,dsl_delete_frame
04037E             0476   
04037E 21 C0 FF FF 0477   	ld hl,KEY_PGUP
040382 CD 5D 16 04 0478   	call fn_inkey
040386 FE 01       0479   	cp 1
040388 CC 23 07 04 0480   	call z,dsl_next_frame
04038C             0481   
04038C 21 B1 FF FF 0482   	ld hl,KEY_PGDOWN
040390 CD 5D 16 04 0483   	call fn_inkey
040394 FE 01       0484   	cp 1
040396 CC 04 07 04 0485   	call z,dsl_previous_frame
04039A             0486   
04039A 21 A9 FF FF 0487   	ld hl,KEY_L
04039E CD 5D 16 04 0488   	call fn_inkey
0403A2 FE 01       0489   	cp 1
0403A4 CC D9 04 04 0490   	call z,dsl_load_sprite
0403A8             0491   
0403A8 21 AE FF FF 0492   	ld hl,KEY_S
0403AC CD 5D 16 04 0493   	call fn_inkey
0403B0 FE 01       0494   	cp 1
0403B2 CC FA 04 04 0495   	call z,dsl_save_sprite
0403B6             0496   
0403B6 21 DD FF FF 0497   	ld hl,KEY_E
0403BA CD 5D 16 04 0498   	call fn_inkey
0403BE FE 01       0499   	cp 1
0403C0 CC 13 05 04 0500   	call z,dsl_export_sprite
0403C4             0501   
0403C4 21 CC FF FF 0502   	ld hl,KEY_R
0403C8 CD 5D 16 04 0503   	call fn_inkey
0403CC FE 01       0504   	cp 1
0403CE CC 49 07 04 0505   	call z,dsl_rotate_frame
0403D2             0506   
0403D2 21 BC FF FF 0507   	ld hl,KEY_F
0403D6 CD 5D 16 04 0508   	call fn_inkey
0403DA FE 01       0509   	cp 1
0403DC CC FE 07 04 0510   	call z,dsl_flip_frame
0403E0             0511   
0403E0 21 9A FF FF 0512   	ld hl,KEY_M
0403E4 CD 5D 16 04 0513   	call fn_inkey
0403E8 FE 01       0514   	cp 1
0403EA CC 65 08 04 0515   	call z,dsl_mirror_frame
0403EE             0516   
0403EE 21 B6 FF FF 0517   	ld hl,KEY_RETURN
0403F2 CD 5D 16 04 0518   	call fn_inkey
0403F6 FE 01       0519   	cp 1
0403F8 CC E5 08 04 0520   	call z,dsl_flood_fill
0403FC             0521   
0403FC 21 8F FF FF 0522   	ld hl,KEY_ESCAPE
040400 CD 5D 16 04 0523   	call fn_inkey
040404 FE 01       0524   	cp 1
040406 CA BD 0A 04 0525   	jp z,exit_program
04040A             0526   
04040A C3 F2 02 04 0527   	jp draw_sprite_loop
04040E             0528   
04040E             0529   ; set the pen of the current pixel
04040E             0530   dsl_set_pen:
04040E CD 98 0C 04 0531   	call fn_get_pixel_color
040412 21 C8 16 04 0532   	ld hl,current_pen
040416 BE          0533   	cp (hl)
040417 C8          0534   	ret z
040418 7E          0535   	ld a,(hl)
040419 CD DA 0C 04 0536   	call fn_set_pixel_color
04041D CD 6E 0C 04 0537   	call fn_draw_pixel_with_border
040421 C9          0538   	ret
040422             0539   
040422             0540   ; reset the pen of the current pixel
040422             0541   dsl_reset_pen:
040422 CD 98 0C 04 0542   	call fn_get_pixel_color
040426 FE 00       0543   	cp 0
040428 C8          0544   	ret z
040429 AF          0545   	xor a
04042A CD DA 0C 04 0546   	call fn_set_pixel_color
04042E CD 6E 0C 04 0547   	call fn_draw_pixel_with_border
040432 C9          0548   	ret
040433             0549   
040433             0550   ; move pixel up
040433             0551   dsl_up:
040433 21 C3 16 04 0552   	ld hl,ypix
040437 7E          0553   	ld a,(hl)
040438 FE 00       0554   	cp 0
04043A C8          0555   	ret z
04043B             0556   
04043B 21 9D FF FF 0557   	ld hl,KEY_SPACE
04043F CD 5D 16 04 0558   	call fn_inkey
040443 FE 01       0559   	cp 1
040445 CC 0E 04 04 0560   	call z,dsl_set_pen
040449             0561   
040449 CD 82 0C 04 0562   	call fn_draw_pixel_without_border
04044D CD 1E 0D 04 0563   	call fn_move_up
040451 CD 6E 0C 04 0564   	call fn_draw_pixel_with_border
040455 CD D8 15 04 0565   	call fn_slowdown
040459 C9          0566   	ret
04045A             0567   
04045A             0568   ; move pixel down
04045A             0569   dsl_down:
04045A 21 C7 16 04 0570   	ld hl,spr_size
04045E 56          0571   	ld d,(hl)
04045F 15          0572   	dec d
040460             0573   
040460 21 C3 16 04 0574   	ld hl,ypix
040464 7E          0575   	ld a,(hl)
040465 BA          0576   	cp d
040466 C8          0577   	ret z
040467             0578   
040467 21 9D FF FF 0579   	ld hl,KEY_SPACE
04046B CD 5D 16 04 0580   	call fn_inkey
04046F FE 01       0581   	cp 1
040471 CC 0E 04 04 0582   	call z,dsl_set_pen
040475             0583   
040475 CD 82 0C 04 0584   	call fn_draw_pixel_without_border
040479 CD 24 0D 04 0585   	call fn_move_down
04047D CD 6E 0C 04 0586   	call fn_draw_pixel_with_border
040481 CD D8 15 04 0587   	call fn_slowdown
040485 C9          0588   	ret
040486             0589   
040486             0590   ; move pixel left
040486             0591   dsl_left:
040486 21 C2 16 04 0592   	ld hl,xpix
04048A 7E          0593   	ld a,(hl)
04048B FE 00       0594   	cp 0
04048D C8          0595   	ret z
04048E             0596   
04048E 21 9D FF FF 0597   	ld hl,KEY_SPACE
040492 CD 5D 16 04 0598   	call fn_inkey
040496 FE 01       0599   	cp 1
040498 CC 0E 04 04 0600   	call z,dsl_set_pen
04049C             0601   
04049C CD 82 0C 04 0602   	call fn_draw_pixel_without_border
0404A0 CD 2A 0D 04 0603   	call fn_move_left
0404A4 CD 6E 0C 04 0604   	call fn_draw_pixel_with_border
0404A8 CD D8 15 04 0605   	call fn_slowdown
0404AC C9          0606   	ret
0404AD             0607   
0404AD             0608   ; move pixel right
0404AD             0609   dsl_right:
0404AD 21 C7 16 04 0610   	ld hl,spr_size
0404B1 56          0611   	ld d,(hl)
0404B2 15          0612   	dec d
0404B3             0613   
0404B3 21 C2 16 04 0614   	ld hl,xpix
0404B7 7E          0615   	ld a,(hl)
0404B8 BA          0616   	cp d
0404B9 C8          0617   	ret z
0404BA             0618   
0404BA 21 9D FF FF 0619   	ld hl,KEY_SPACE
0404BE CD 5D 16 04 0620   	call fn_inkey
0404C2 FE 01       0621   	cp 1
0404C4 CC 0E 04 04 0622   	call z,dsl_set_pen
0404C8             0623   
0404C8 CD 82 0C 04 0624   	call fn_draw_pixel_without_border
0404CC CD 30 0D 04 0625   	call fn_move_right
0404D0 CD 6E 0C 04 0626   	call fn_draw_pixel_with_border
0404D4 CD D8 15 04 0627   	call fn_slowdown
0404D8 C9          0628   	ret
0404D9             0629   
0404D9             0630   ; load a sprite
0404D9             0631   dsl_load_sprite:
0404D9 21 A9 FF FF 0632   	ld hl,KEY_L
0404DD CD 5D 16 04 0633   	call fn_inkey
0404E1 FE 00       0634   	cp 0
0404E3 20 F4       0635   	jr nz,dsl_load_sprite
0404E5             0636   
0404E5 CD 82 0C 04 0637   	call fn_draw_pixel_without_border
0404E9 CD 3B 11 04 0638   	call fn_load_sprite
0404ED CD 4F 15 04 0639   	call fn_refresh_sprite
0404F1 CD 6E 0C 04 0640   	call fn_draw_pixel_with_border
0404F5 CD 8F 15 04 0641   	call fn_change_frame
0404F9 C9          0642   	ret
0404FA             0643   
0404FA             0644   ; save a sprite
0404FA             0645   dsl_save_sprite:
0404FA 21 AE FF FF 0646   	ld hl,KEY_S
0404FE CD 5D 16 04 0647   	call fn_inkey
040502 FE 00       0648   	cp 0
040504 20 F4       0649   	jr nz,dsl_save_sprite
040506             0650   
040506 CD 82 0C 04 0651   	call fn_draw_pixel_without_border
04050A CD 64 12 04 0652   	call fn_save_sprite
04050E CD 4F 15 04 0653   	call fn_refresh_sprite
040512 C9          0654   	ret
040513             0655   
040513             0656   dsl_export_sprite:
040513 21 DD FF FF 0657   	ld hl,KEY_E
040517 CD 5D 16 04 0658   	call fn_inkey
04051B FE 00       0659   	cp 0
04051D 20 F4       0660   	jr nz,dsl_export_sprite
04051F             0661   
04051F CD 82 0C 04 0662   	call fn_draw_pixel_without_border
040523 CD 63 13 04 0663   	call fn_export_sprite
040527 CD 4F 15 04 0664   	call fn_refresh_sprite
04052B C9          0665   	ret
04052C             0666   
04052C             0667   
04052C             0668   ; add a frame to the animation
04052C             0669   dsl_add_frame:
04052C 21 AA FF FF 0670   	ld hl,KEY_N
040530 CD 5D 16 04 0671   	call fn_inkey
040534 FE 00       0672   	cp 0
040536 20 F4       0673   	jr nz,dsl_add_frame
040538             0674   
040538             0675   	; frames limit reached ? exit
040538 21 BF 17 04 0676   	ld hl,frames_count
04053C 7E          0677   	ld a,(hl)
04053D FE 08       0678   	cp MAX_FRAMES
04053F C8          0679   	ret z
040540             0680   
040540             0681   	; get the number of frames to copy
040540 21 BF 17 04 0682   	ld hl,frames_count
040544 7E          0683   	ld a,(hl)
040545 21 BE 17 04 0684   	ld hl,current_frame
040549 46          0685   	ld b,(hl)
04054A 90          0686   	sub b
04054B 3D          0687   	dec a
04054C             0688   
04054C             0689   	; get sprsize² (length of a sprite, in bytes)
04054C 21 C7 16 04 0690   	ld hl,spr_size
040550 11 00 00 00 0691   	ld de,$000000
040554 5E          0692   	ld e,(hl)
040555 56          0693   	ld d,(hl)
040556 ED 5C       0694   	mlt de ; DE = sprsize²
040558             0695   
040558             0696   	; prepare for the case we goto af_zap...
040558 21 C7 17 04 0697   	ld hl,sprite_buffer
04055C             0698   
04055C F5          0699   	push af
04055D E5          0700   	push hl
04055E 21 BE 17 04 0701   	ld hl,current_frame
040562 7E          0702   	ld a,(hl)
040563 3C          0703   	inc a
040564 47          0704   	ld b,a
040565 E1          0705   	pop hl
040566 F1          0706   	pop af
040567             0707   
040567             0708   af_loop0:
040567 19          0709   	add hl,de ; for if current frame = 0 (prepare to zap!)
040568 10 FD       0710   	djnz af_loop0
04056A             0711   
04056A E5          0712   	push hl ; store HL = sprite buffer + sprsize²
04056B FE 00       0713   	cp 0
04056D CA 95 05 04 0714   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040571 E1          0715   	pop hl ; HL unused in this case
040572             0716   
040572 21 00 00 00 0717   	ld hl,$000000 ; HL is 0 to store the result
040576 47          0718   	ld b,a ; B = frames to copy
040577             0719   
040577             0720   ; multiply number of frames to copy by sprsize²
040577             0721   af_loop1:
040577 19          0722   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040578 10 FD       0723   	djnz af_loop1
04057A             0724   
04057A E5          0725   	push hl
04057B C1          0726   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04057C             0727   
04057C 21 BE 17 04 0728   	ld hl,current_frame
040580 7E          0729   	ld a,(hl)
040581 3C          0730   	inc a
040582 21 C7 17 04 0731   	ld hl,sprite_buffer
040586             0732   
040586 C5          0733   	push bc
040587 47          0734   	ld b,a
040588             0735   
040588             0736   af_loop2:
040588 19          0737   	add hl,de ; HL = sprite buffer + length to copy
040589 10 FD       0738   	djnz af_loop2
04058B             0739   
04058B C1          0740   	pop bc
04058C             0741   
04058C E5          0742   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04058D             0743   
04058D 09          0744   	add hl,bc
04058E 2B          0745   	dec hl ; HL = end address to copy to end target address
04058F             0746   
04058F E5          0747   	push hl
040590 19          0748   	add hl,de
040591 EB          0749   	ex de,hl ; DE = end target address
040592 E1          0750   	pop hl
040593             0751   
040593 ED B8       0752   	lddr
040595             0753   
040595             0754   af_zap:
040595             0755   	; multiply number of frames to copy by sprsize²
040595 21 C7 16 04 0756   	ld hl,spr_size
040599 01 00 00 00 0757   	ld bc,$000000
04059D 4E          0758   	ld c,(hl)
04059E 46          0759   	ld b,(hl)
04059F ED 4C       0760   	mlt bc ; BC = sprsize²
0405A1             0761   
0405A1 E1          0762   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
0405A2             0763   
0405A2             0764   ; fill frame with 0 color
0405A2             0765   af_loop3:
0405A2 AF          0766   	xor a
0405A3 77          0767   	ld (hl),a
0405A4 23          0768   	inc hl
0405A5 0B          0769   	dec bc
0405A6 78          0770   	ld a,b
0405A7 B1          0771   	or c
0405A8 FE 00       0772   	cp 0
0405AA 20 F6       0773   	jr nz,af_loop3
0405AC             0774   
0405AC             0775   	; increment the frames count and the current frame values
0405AC 21 BF 17 04 0776   	ld hl,frames_count
0405B0 34          0777   	inc (hl)
0405B1 21 BE 17 04 0778   	ld hl,current_frame
0405B5 34          0779   	inc (hl)
0405B6             0780   
0405B6 CD 8F 15 04 0781   	call fn_change_frame
0405BA CD B4 15 04 0782   	call fn_change_frames_count
0405BE CD 4F 15 04 0783   	call fn_refresh_sprite
0405C2 C9          0784   	ret
0405C3             0785   
0405C3             0786   ; add a copy of the current frame to the animation
0405C3             0787   dsl_add_and_copy_frame: ; TODO! debug me!
0405C3 21 AD FF FF 0788   	ld hl,KEY_C
0405C7 CD 5D 16 04 0789   	call fn_inkey
0405CB FE 00       0790   	cp 0
0405CD 20 F4       0791   	jr nz,dsl_add_and_copy_frame
0405CF             0792   
0405CF             0793   	; frames limit reached ? exit
0405CF 21 BF 17 04 0794   	ld hl,frames_count
0405D3 7E          0795   	ld a,(hl)
0405D4 FE 08       0796   	cp MAX_FRAMES
0405D6 C8          0797   	ret z
0405D7             0798   
0405D7             0799   	; get the number of frames to copy
0405D7 21 BF 17 04 0800   	ld hl,frames_count
0405DB 7E          0801   	ld a,(hl)
0405DC 21 BE 17 04 0802   	ld hl,current_frame
0405E0 46          0803   	ld b,(hl)
0405E1 90          0804   	sub b
0405E2             0805   
0405E2             0806   	; get sprsize² (length of a sprite, in bytes)
0405E2 21 C7 16 04 0807   	ld hl,spr_size
0405E6 11 00 00 00 0808   	ld de,$000000
0405EA 5E          0809   	ld e,(hl)
0405EB 56          0810   	ld d,(hl)
0405EC ED 5C       0811   	mlt de ; DE = sprsize²
0405EE             0812   
0405EE 21 00 00 00 0813   	ld hl,$000000 ; HL is 0 to store the result
0405F2 47          0814   	ld b,a ; B = frames to copy
0405F3             0815   
0405F3             0816   ; multiply number of frames to copy by sprsize²
0405F3             0817   aacf_loop1:
0405F3 19          0818   	add hl,de ; HL = length (in bytes) to copy (a few frames)
0405F4 10 FD       0819   	djnz aacf_loop1
0405F6             0820   
0405F6 E5          0821   	push hl
0405F7 C1          0822   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
0405F8             0823   
0405F8 21 BE 17 04 0824   	ld hl,current_frame
0405FC 7E          0825   	ld a,(hl)
0405FD 21 C7 17 04 0826   	ld hl,sprite_buffer
040601 FE 00       0827   	cp 0
040603 28 06       0828   	jr z,aacf_loop_end2
040605             0829   
040605 C5          0830   	push bc
040606 47          0831   	ld b,a
040607             0832   
040607             0833   aacf_loop2:
040607 19          0834   	add hl,de ; HL = sprite buffer + length to copy
040608 10 FD       0835   	djnz aacf_loop2
04060A             0836   
04060A C1          0837   	pop bc
04060B             0838   
04060B             0839   aacf_loop_end2:
04060B 09          0840   	add hl,bc
04060C 2B          0841   	dec hl ; HL = end address to copy to end target address
04060D             0842   
04060D E5          0843   	push hl
04060E 19          0844   	add hl,de
04060F EB          0845   	ex de,hl ; DE = end target address
040610 E1          0846   	pop hl
040611             0847   
040611 ED B8       0848   	lddr
040613             0849   
040613             0850   	; increment the frames count and the current frame values
040613 21 BF 17 04 0851   	ld hl,frames_count
040617 34          0852   	inc (hl)
040618 21 BE 17 04 0853   	ld hl,current_frame
04061C 34          0854   	inc (hl)
04061D             0855   
04061D CD 8F 15 04 0856   	call fn_change_frame
040621 CD B4 15 04 0857   	call fn_change_frames_count
040625 CD 4F 15 04 0858   	call fn_refresh_sprite
040629 C9          0859   	ret
04062A             0860   
04062A             0861   ; delete last frame from animation
04062A             0862   dsl_delete_frame:
04062A 21 D0 FF FF 0863   	ld hl,KEY_BACKSPACE
04062E CD 5D 16 04 0864   	call fn_inkey
040632 FE 00       0865   	cp 0
040634 20 F4       0866   	jr nz,dsl_delete_frame
040636             0867   
040636             0868   	; delete current selected frame
040636 21 C7 16 04 0869   	ld hl,spr_size
04063A 01 00 00 00 0870   	ld bc,$000000
04063E 4E          0871   	ld c,(hl)
04063F 46          0872   	ld b,(hl)
040640 ED 4C       0873   	mlt bc ; BC = sprsize²
040642 21 BE 17 04 0874   	ld hl,current_frame
040646 7E          0875   	ld a,(hl) ; A = current frame
040647 21 C7 17 04 0876   	ld hl,sprite_buffer ; HL = sprite buffer
04064B C5          0877   	push bc
04064C FE 00       0878   	cp 0
04064E 28 06       0879   	jr z,df_loop2
040650             0880   
040650             0881   df_loop1:
040650 09          0882   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
040651 3D          0883   	dec a
040652 FE 00       0884   	cp 0
040654 20 FA       0885   	jr nz,df_loop1
040656             0886   
040656             0887   ; clear the current frame
040656             0888   df_loop2:
040656 AF          0889   	xor a
040657 77          0890   	ld (hl),a
040658 23          0891   	inc hl
040659 0B          0892   	dec bc
04065A 78          0893   	ld a,b
04065B B1          0894   	or c
04065C FE 00       0895   	cp 0
04065E 20 F6       0896   	jr nz,df_loop2
040660             0897   
040660             0898   	; current frame + 1 = frames count ?
040660 E5          0899   	push hl
040661 21 BE 17 04 0900   	ld hl,current_frame
040665 5E          0901   	ld e,(hl)
040666 1C          0902   	inc e
040667 21 BF 17 04 0903   	ld hl,frames_count
04066B 7E          0904   	ld a,(hl)
04066C BB          0905   	cp e
04066D E1          0906   	pop hl
04066E C1          0907   	pop bc
04066F CA E8 06 04 0908   	jp z,df_exit
040673             0909   
040673 11 BF 17 04 0910   	ld de,frames_count
040677 1A          0911   	ld a,(de) ; A = frames count
040678 E5          0912   	push hl
040679 21 BE 17 04 0913   	ld hl,current_frame
04067D 5E          0914   	ld e,(hl) ; E = current frame
04067E E1          0915   	pop hl
04067F 93          0916   	sub e
040680 3D          0917   	dec a ; A = number of frames to copy back
040681             0918   
040681 EB          0919   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040682 21 00 00 00 0920   	ld hl,$000000
040686 FE 00       0921   	cp 0 ; 0 frames to copy ?
040688 28 06       0922   	jr z,df_exit_loop3
04068A             0923   
04068A             0924   df_loop3:
04068A 09          0925   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04068B 3D          0926   	dec a
04068C FE 00       0927   	cp 0
04068E 20 FA       0928   	jr nz,df_loop3
040690             0929   
040690             0930   df_exit_loop3:
040690 E5          0931   	push hl
040691 C1          0932   	pop bc ; BC = total length of area to copy
040692 D5          0933   	push de
040693 E1          0934   	pop hl ; HL = DE = start of area to copy
040694             0935   
040694 C5          0936   	push bc
040695 D5          0937   	push de
040696 E5          0938   	push hl
040697 21 C7 16 04 0939   	ld hl,spr_size
04069B 11 00 00 00 0940   	ld de,$000000
04069F 5E          0941   	ld e,(hl)
0406A0 56          0942   	ld d,(hl)
0406A1 ED 5C       0943   	mlt de ; DE = one sprite frame length
0406A3 E1          0944   	pop hl
0406A4 B7          0945   	or a
0406A5 ED 52       0946   	sbc hl,de ; HL = target area to copy
0406A7 D1          0947   	pop de
0406A8 EB          0948   	ex de,hl ; DE = target, HL = start
0406A9 C1          0949   	pop bc
0406AA ED B0       0950   	ldir
0406AC             0951   
0406AC 21 C7 16 04 0952   	ld hl,spr_size
0406B0 01 00 00 00 0953   	ld bc,$000000
0406B4 4E          0954   	ld c,(hl)
0406B5 46          0955   	ld b,(hl)
0406B6 ED 4C       0956   	mlt bc ; DE = one sprite frame length
0406B8             0957   
0406B8             0958   	; delete last frame data
0406B8 21 BF 17 04 0959   	ld hl,frames_count
0406BC 7E          0960   	ld a,(hl) ; A =frames count
0406BD 3D          0961   	dec a ; A = last frame
0406BE 21 C7 17 04 0962   	ld hl,sprite_buffer ; HL = sprite buffer
0406C2 FE 00       0963   	cp 0
0406C4 28 06       0964   	jr z,df_loop5
0406C6             0965   
0406C6             0966   df_loop4:
0406C6 09          0967   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
0406C7 3D          0968   	dec a
0406C8 FE 00       0969   	cp 0
0406CA 20 FA       0970   	jr nz,df_loop4
0406CC             0971   
0406CC             0972   ; clear the current frame
0406CC             0973   df_loop5:
0406CC AF          0974   	xor a
0406CD 77          0975   	ld (hl),a
0406CE 23          0976   	inc hl
0406CF 0B          0977   	dec bc
0406D0 78          0978   	ld a,b
0406D1 B1          0979   	or c
0406D2 FE 00       0980   	cp 0
0406D4 20 F6       0981   	jr nz,df_loop5
0406D6             0982   
0406D6             0983   	; decrement frames count
0406D6 21 BF 17 04 0984   	ld hl,frames_count
0406DA 35          0985   	dec (hl)
0406DB             0986   
0406DB CD 8F 15 04 0987   	call fn_change_frame
0406DF CD B4 15 04 0988   	call fn_change_frames_count
0406E3 CD 4F 15 04 0989   	call fn_refresh_sprite
0406E7 C9          0990   	ret
0406E8             0991   
0406E8             0992   df_exit:
0406E8 21 BF 17 04 0993   	ld hl,frames_count
0406EC 7E          0994   	ld a,(hl)
0406ED FE 01       0995   	cp 1
0406EF 28 06       0996   	jr z,df_exit_end
0406F1 35          0997   	dec (hl)
0406F2 21 BE 17 04 0998   	ld hl,current_frame
0406F6 35          0999   	dec (hl)
0406F7             1000   
0406F7             1001   df_exit_end:
0406F7 CD 8F 15 04 1002   	call fn_change_frame
0406FB CD B4 15 04 1003   	call fn_change_frames_count
0406FF CD 4F 15 04 1004   	call fn_refresh_sprite
040703 C9          1005   	ret
040704             1006   
040704             1007   ; goto previous frame
040704             1008   dsl_previous_frame:
040704 21 B1 FF FF 1009   	ld hl,KEY_PGDOWN
040708 CD 5D 16 04 1010   	call fn_inkey
04070C FE 00       1011   	cp 0
04070E 20 F4       1012   	jr nz,dsl_previous_frame
040710             1013   
040710 21 BE 17 04 1014   	ld hl,current_frame
040714 7E          1015   	ld a,(hl)
040715 FE 00       1016   	cp 0
040717 C8          1017   	ret z
040718             1018   
040718 3D          1019   	dec a
040719 77          1020   	ld (hl),a
04071A CD 8F 15 04 1021   	call fn_change_frame
04071E CD 4F 15 04 1022   	call fn_refresh_sprite
040722 C9          1023   	ret
040723             1024   
040723             1025   ; goto next frame
040723             1026   dsl_next_frame:
040723 21 C0 FF FF 1027   	ld hl,KEY_PGUP
040727 CD 5D 16 04 1028   	call fn_inkey
04072B FE 00       1029   	cp 0
04072D 20 F4       1030   	jr nz,dsl_next_frame
04072F             1031   
04072F 21 BE 17 04 1032   	ld hl,current_frame
040733 7E          1033   	ld a,(hl)
040734 3C          1034   	inc a
040735 21 BF 17 04 1035   	ld hl,frames_count
040739 BE          1036   	cp (hl)
04073A C8          1037   	ret z
04073B             1038   
04073B 21 BE 17 04 1039   	ld hl,current_frame
04073F 77          1040   	ld (hl),a
040740 CD 8F 15 04 1041   	call fn_change_frame
040744 CD 4F 15 04 1042   	call fn_refresh_sprite
040748 C9          1043   	ret
040749             1044   
040749             1045   ; rotate a frame 90° clockwise
040749             1046   dsl_rotate_frame:
040749 21 CC FF FF 1047   	ld hl,KEY_R
04074D CD 5D 16 04 1048   	call fn_inkey
040751 FE 00       1049   	cp 0
040753 20 F4       1050   	jr nz,dsl_rotate_frame
040755             1051   
040755             1052   	; find HL as start of the first frame (buffer)
040755 21 C7 16 04 1053   	ld hl,spr_size
040759 01 00 00 00 1054   	ld bc,$000000
04075D 11 00 00 00 1055   	ld de,$000000
040761 5E          1056   	ld e,(hl)
040762 56          1057   	ld d,(hl)
040763 4B          1058   	ld c,e
040764 ED 5C       1059   	mlt de ; DE = sprite length in bytes
040766 21 BE 17 04 1060   	ld hl,current_frame
04076A 7E          1061   	ld a,(hl) ; A = current frame
04076B 21 C7 17 04 1062   	ld hl,sprite_buffer
04076F FE 00       1063   	cp 0
040771 28 04       1064   	jr z,rf_noloop1
040773 47          1065   	ld b,a
040774             1066   
040774             1067   rf_loop1:
040774 19          1068   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040775 10 FD       1069   	djnz rf_loop1
040777             1070   
040777             1071   rf_noloop1:
040777 C5          1072   	push bc
040778 E5          1073   	push hl
040779             1074   
040779             1075   	; copy current frame to swap sprite buffer
040779 11 31 3B 04 1076   	ld de,swap_sprite_buffer
04077D 41          1077   	ld b,c
04077E ED 4C       1078   	mlt bc
040780 ED B0       1079   	ldir
040782             1080   
040782 FD E1       1081   	pop iy ; IY: destination
040784 C1          1082   	pop bc
040785             1083   
040785 79          1084   	ld a,c
040786 01 00 00 00 1085   	ld bc,$000000
04078A 4F          1086   	ld c,a ; BC = sprite size
04078B             1087   
04078B             1088   	; turn and copy swap sprite buffer frame to sprite buffer
04078B DD 21 31 3B 1089   	ld ix,swap_sprite_buffer ; IX: source
       04          
040790 11 00 00 00 1090   	ld de,0 ; x
040794 21 00 00 00 1091   	ld hl,0 ; y
040798             1092   
040798             1093   rf_loop2:
040798 DD E5       1094   	push ix
04079A FD E5       1095   	push iy
04079C             1096   
04079C D5          1097   	push de
04079D E5          1098   	push hl
04079E             1099   
04079E             1100   	; add x
04079E DD 19       1101   	add ix,de
0407A0             1102   
0407A0             1103   	; add y * width
0407A0 7C          1104   	ld a,h
0407A1 B5          1105   	or l
0407A2 FE 00       1106   	cp 0
0407A4 28 09       1107   	jr z,rf_done1
0407A6             1108   rf_loop3:
0407A6 DD 09       1109   	add ix,bc
0407A8 2B          1110   	dec hl
0407A9 7C          1111   	ld a,h
0407AA B5          1112   	or l
0407AB FE 00       1113   	cp 0
0407AD 20 F7       1114   	jr nz,rf_loop3
0407AF             1115   
0407AF             1116   rf_done1:
0407AF             1117   	; found the pixel value
0407AF DD 7E 00    1118   	ld a,(ix+0)
0407B2             1119   
0407B2 E1          1120   	pop hl
0407B3 D1          1121   	pop de
0407B4 D5          1122   	push de
0407B5 E5          1123   	push hl
0407B6             1124   
0407B6             1125   	; add y
0407B6 EB          1126   	ex de,hl
0407B7 FD 09       1127   	add iy,bc
0407B9 B7          1128   	or a
0407BA E5          1129   	push hl
0407BB FD E5       1130   	push iy
0407BD E1          1131   	pop hl
0407BE ED 52       1132   	sbc hl,de
0407C0 E5          1133   	push hl
0407C1 FD E1       1134   	pop iy
0407C3 FD 2B       1135   	dec iy
0407C5 E1          1136   	pop hl
0407C6 EB          1137   	ex de,hl
0407C7             1138   
0407C7             1139   	; add x * width
0407C7 F5          1140   	push af
0407C8 7A          1141   	ld a,d
0407C9 B3          1142   	or e
0407CA FE 00       1143   	cp 0
0407CC 28 09       1144   	jr z,rf_done2
0407CE             1145   rf_loop5:
0407CE FD 09       1146   	add iy,bc
0407D0 1B          1147   	dec de
0407D1 7A          1148   	ld a,d
0407D2 B3          1149   	or e
0407D3 FE 00       1150   	cp 0
0407D5 20 F7       1151   	jr nz,rf_loop5
0407D7             1152   
0407D7             1153   rf_done2:
0407D7 F1          1154   	pop af
0407D8             1155   
0407D8             1156   	; store the pixel value
0407D8 FD 77 00    1157   	ld (iy+0),a
0407DB             1158   
0407DB E1          1159   	pop hl
0407DC D1          1160   	pop de
0407DD             1161   
0407DD FD E1       1162   	pop iy
0407DF DD E1       1163   	pop ix
0407E1             1164   
0407E1 13          1165   	inc de
0407E2 EB          1166   	ex de,hl
0407E3 B7          1167   	or a
0407E4 ED 42       1168   	sbc hl,bc
0407E6 09          1169   	add hl,bc
0407E7 EB          1170   	ex de,hl
0407E8 DA 98 07 04 1171   	jp c,rf_loop2
0407EC             1172   
0407EC 11 00 00 00 1173   	ld de,0
0407F0 23          1174   	inc hl
0407F1 B7          1175   	or a
0407F2 ED 42       1176   	sbc hl,bc
0407F4 09          1177   	add hl,bc
0407F5 DA 98 07 04 1178   	jp c,rf_loop2
0407F9             1179   
0407F9 CD 4F 15 04 1180   	call fn_refresh_sprite
0407FD C9          1181   	ret
0407FE             1182   
0407FE             1183   ; flip frame horizontally
0407FE             1184   dsl_flip_frame:
0407FE 21 BC FF FF 1185   	ld hl,KEY_F
040802 CD 5D 16 04 1186   	call fn_inkey
040806 FE 00       1187   	cp 0
040808 20 F4       1188   	jr nz,dsl_flip_frame
04080A             1189   
04080A 21 C7 16 04 1190   	ld hl,spr_size
04080E 11 00 00 00 1191   	ld de,$000000
040812 5E          1192   	ld e,(hl)
040813 56          1193   	ld d,(hl)
040814 4B          1194   	ld c,e
040815 ED 5C       1195   	mlt de ; DE = sprite length in bytes
040817 21 BE 17 04 1196   	ld hl,current_frame
04081B 7E          1197   	ld a,(hl) ; A = current frame
04081C 21 C7 17 04 1198   	ld hl,sprite_buffer
040820 FE 00       1199   	cp 0
040822 28 04       1200   	jr z,ff_noloop1
040824 47          1201   	ld b,a
040825             1202   
040825             1203   ff_loop1:
040825 19          1204   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040826 10 FD       1205   	djnz ff_loop1
040828             1206   
040828             1207   ff_noloop1:
040828 41          1208   	ld b,c ; B = sprite height
040829 11 00 00 00 1209   	ld de,$000000
04082D 59          1210   	ld e,c ; DE = sprite width
04082E 79          1211   	ld a,c ; A = sprite width
04082F CB 3F       1212   	srl a ; A = sprite height / 2
040831             1213   
040831 E5          1214   	push hl
040832 DD E1       1215   	pop ix ; IX = frame address
040834 19          1216   	add hl,de ; HL = frame address + sprite width - 1
040835 2B          1217   	dec hl
040836 E5          1218   	push hl
040837 FD E1       1219   	pop iy ; IY = IX + sprite width - 1
040839             1220   
040839             1221   ff_loop2:
040839 F5          1222   	push af
04083A D5          1223   	push de
04083B DD E5       1224   	push ix
04083D FD E5       1225   	push iy
04083F             1226   ff_loop3:
04083F DD 5E 00    1227   	ld e,(ix+0)
040842 FD 56 00    1228   	ld d,(iy+0)
040845 DD 72 00    1229   	ld (ix+0),d
040848 FD 73 00    1230   	ld (iy+0),e
04084B DD 23       1231   	inc ix
04084D FD 2B       1232   	dec iy
04084F 3D          1233   	dec a
040850 FE 00       1234   	cp 0
040852 20 EB       1235   	jr nz,ff_loop3
040854 FD E1       1236   	pop iy
040856 DD E1       1237   	pop ix
040858 D1          1238   	pop de
040859 F1          1239   	pop af
04085A DD 19       1240   	add ix,de
04085C FD 19       1241   	add iy,de
04085E 10 D9       1242   	djnz ff_loop2
040860             1243   
040860 CD 4F 15 04 1244   	call fn_refresh_sprite
040864 C9          1245   	ret
040865             1246   
040865             1247   ; mirror frame vertically
040865             1248   dsl_mirror_frame:
040865 21 9A FF FF 1249   	ld hl,KEY_M
040869 CD 5D 16 04 1250   	call fn_inkey
04086D FE 00       1251   	cp 0
04086F 20 F4       1252   	jr nz,dsl_mirror_frame
040871             1253   
040871 21 C7 16 04 1254   	ld hl,spr_size
040875 01 00 00 00 1255   	ld bc,$000000
040879 11 00 00 00 1256   	ld de,$000000
04087D 5E          1257   	ld e,(hl)
04087E 56          1258   	ld d,(hl)
04087F 4B          1259   	ld c,e
040880 ED 5C       1260   	mlt de ; DE = sprite length in bytes
040882 21 BE 17 04 1261   	ld hl,current_frame
040886 7E          1262   	ld a,(hl) ; A = current frame
040887 21 C7 17 04 1263   	ld hl,sprite_buffer
04088B FE 00       1264   	cp 0
04088D 28 04       1265   	jr z,mf_noloop1
04088F 47          1266   	ld b,a
040890             1267   
040890             1268   mf_loop1:
040890 19          1269   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040891 10 FD       1270   	djnz mf_loop1
040893             1271   
040893             1272   mf_noloop1:
040893 11 00 00 00 1273   	ld de,$000000
040897 59          1274   	ld e,c ; E = sprite height
040898 79          1275   	ld a,c ; A = sprite width
040899 41          1276   	ld b,c ; B = sprite height
04089A CB 38       1277   	srl b ; divide B by 2, so B = sprite height / 2
04089C             1278   
04089C E5          1279   	push hl
04089D DD E1       1280   	pop ix ; IX = frame address
04089F 51          1281   	ld d,c
0408A0 15          1282   	dec d
0408A1 ED 5C       1283   	mlt de ; DE = sprite length - sprite width
0408A3 19          1284   	add hl,de ; HL = frame address + sprite length - sprite width
0408A4 E5          1285   	push hl
0408A5 FD E1       1286   	pop iy ; IY = IX + sprite length - sprite width
0408A7 21 00 00 00 1287   	ld hl,$000000
0408AB 69          1288   	ld l,c ; HL = sprite width
0408AC             1289   
0408AC             1290   mf_loop2:
0408AC F5          1291   	push af
0408AD D5          1292   	push de
0408AE DD E5       1293   	push ix
0408B0 FD E5       1294   	push iy
0408B2             1295   mf_loop3:
0408B2 DD 5E 00    1296   	ld e,(ix+0)
0408B5 FD 56 00    1297   	ld d,(iy+0)
0408B8 DD 72 00    1298   	ld (ix+0),d
0408BB FD 73 00    1299   	ld (iy+0),e
0408BE DD 23       1300   	inc ix
0408C0 FD 23       1301   	inc iy
0408C2 3D          1302   	dec a
0408C3 FE 00       1303   	cp 0
0408C5 20 EB       1304   	jr nz,mf_loop3
0408C7 FD E1       1305   	pop iy
0408C9 DD E1       1306   	pop ix
0408CB D1          1307   	pop de
0408CC F1          1308   	pop af
0408CD EB          1309   	ex de,hl
0408CE DD 19       1310   	add ix,de
0408D0 EB          1311   	ex de,hl
0408D1 E5          1312   	push hl
0408D2 FD E5       1313   	push iy
0408D4 E1          1314   	pop hl
0408D5 D1          1315   	pop de
0408D6 B7          1316   	or a
0408D7 ED 52       1317   	sbc hl,de
0408D9 E5          1318   	push hl
0408DA D5          1319   	push de
0408DB E1          1320   	pop hl
0408DC FD E1       1321   	pop iy
0408DE 10 CC       1322   	djnz mf_loop2
0408E0             1323   
0408E0 CD 4F 15 04 1324   	call fn_refresh_sprite
0408E4 C9          1325   	ret
0408E5             1326   
0408E5             1327   dsl_flood_fill:
0408E5 21 B6 FF FF 1328   	ld hl,KEY_RETURN
0408E9 CD 5D 16 04 1329   	call fn_inkey
0408ED FE 00       1330   	cp 0
0408EF 20 F4       1331   	jr nz,dsl_flood_fill
0408F1             1332   
0408F1             1333   	; hide the cursor
0408F1 CD 82 0C 04 1334   	call fn_draw_pixel_without_border
0408F5             1335   
0408F5             1336   	; memorize pixel coordinates
0408F5 3A C2 16 04 1337   	ld a,(xpix)
0408F9 32 C4 16 04 1338   	ld (memxpix),a
0408FD 3A C3 16 04 1339   	ld a,(ypix)
040901 32 C5 16 04 1340   	ld (memypix),a
040905             1341   
040905             1342   	; fill all recursively
040905 3A C2 16 04 1343   	ld a,(xpix)
040909 5F          1344   	ld e,a
04090A 3A C3 16 04 1345   	ld a,(ypix)
04090E 57          1346   	ld d,a
04090F CD 30 09 04 1347   	call dsl_flood_fill_loop
040913             1348   
040913             1349   	; refresh all the sprite
040913 CD 4F 15 04 1350   	call fn_refresh_sprite
040917             1351   
040917             1352   	; hide the cursor again
040917 CD 82 0C 04 1353   	call fn_draw_pixel_without_border
04091B             1354   
04091B             1355   	; restore pixel coordinates
04091B             1356   	; and cursor
04091B 3A C4 16 04 1357   	ld a,(memxpix)
04091F 32 C2 16 04 1358   	ld (xpix),a
040923 3A C5 16 04 1359   	ld a,(memypix)
040927 32 C3 16 04 1360   	ld (ypix),a
04092B CD 6E 0C 04 1361   	call fn_draw_pixel_with_border
04092F C9          1362   	ret
040930             1363   
040930             1364   dsl_flood_fill_loop:
040930 D5          1365   	push de
040931             1366   
040931 DD 21 C7 16 1367   	ld ix,spr_size
       04          
040936             1368   
040936             1369   	; out  of the sprite area ?
040936 7B          1370   	ld a,e
040937 DD BE 00    1371   	cp (ix+0)
04093A D2 83 09 04 1372   	jp nc,ffl_exit
04093E             1373   
04093E             1374   	; out  of the sprite area ?
04093E 7A          1375   	ld a,d
04093F DD BE 00    1376   	cp (ix+0)
040942 D2 83 09 04 1377   	jp nc,ffl_exit
040946             1378   
040946             1379   	; replace current pixel, if it is
040946             1380   	; inside the sprite area,
040946             1381   	; and has not the select palette color
040946 7B          1382   	ld a,e
040947 32 C2 16 04 1383   	ld (xpix),a
04094B 7A          1384   	ld a,d
04094C 32 C3 16 04 1385   	ld (ypix),a
040950 CD 98 0C 04 1386   	call fn_get_pixel_color
040954 21 C8 16 04 1387   	ld hl,current_pen
040958 BE          1388   	cp (hl)
040959 CA 83 09 04 1389   	jp z,ffl_exit
04095D 7E          1390   	ld a,(hl)
04095E CD DA 0C 04 1391   	call fn_set_pixel_color
040962             1392   
040962             1393   	; restore coordinates
040962 3A C2 16 04 1394   	ld a,(xpix)
040966 5F          1395   	ld e,a
040967 3A C3 16 04 1396   	ld a,(ypix)
04096B 57          1397   	ld d,a
04096C             1398   
04096C             1399   	; draw pixel at right
04096C 1C          1400   	inc e
04096D CD 30 09 04 1401   	call dsl_flood_fill_loop
040971 1D          1402   	dec e
040972             1403   	; draw pixel at left
040972 1D          1404   	dec e
040973 CD 30 09 04 1405   	call dsl_flood_fill_loop
040977 1C          1406   	inc e
040978             1407   	; draw pixel up
040978 14          1408   	inc d
040979 CD 30 09 04 1409   	call dsl_flood_fill_loop
04097D 15          1410   	dec d
04097E             1411   	; draw pixel down
04097E 15          1412   	dec d
04097F CD 30 09 04 1413   	call dsl_flood_fill_loop
040983             1414   
040983             1415   ffl_exit:
040983 D1          1416   	pop de
040984 C9          1417   	ret
040985             1418   
040985             1419   ; change current tool to palette tool
040985             1420   dsl_palette_tool:
040985 21 9F FF FF 1421   	ld hl,KEY_TAB
040989 CD 5D 16 04 1422   	call fn_inkey
04098D FE 00       1423   	cp 0
04098F 20 F4       1424   	jr nz,dsl_palette_tool
040991             1425   
040991             1426   	; hide sprite drawing cursor
040991 CD 82 0C 04 1427   	call fn_draw_pixel_without_border
040995             1428   
040995             1429   	; draw selected palette color
040995 21 C8 16 04 1430   	ld hl,current_pen
040999 4E          1431   	ld c,(hl)
04099A CD 36 0D 04 1432   	call fn_draw_palette_with_border
04099E             1433   
04099E             1434   ; select palette color
04099E             1435   dsl_palette_tool_loop:
04099E             1436   	; move to left color in the palette
04099E 21 E6 FF FF 1437   	ld hl,KEY_LEFT
0409A2 CD 5D 16 04 1438   	call fn_inkey
0409A6 FE 01       1439   	cp 1
0409A8 CC 67 0A 04 1440   	call z,dsl_dec_pen
0409AC             1441   
0409AC             1442   	; move to right color in the palette
0409AC 21 86 FF FF 1443   	ld hl,KEY_RIGHT
0409B0 CD 5D 16 04 1444   	call fn_inkey
0409B4 FE 01       1445   	cp 1
0409B6 CC 92 0A 04 1446   	call z,dsl_inc_pen
0409BA             1447   
0409BA             1448   	; return to draw sprite tool
0409BA 21 9F FF FF 1449   	ld hl,KEY_TAB
0409BE CD 5D 16 04 1450   	call fn_inkey
0409C2 FE 01       1451   	cp 1
0409C4 CA 4A 0A 04 1452   	jp z,dsl_draw_sprite_tool
0409C8             1453   
0409C8             1454   	; load palette
0409C8 21 A9 FF FF 1455   	ld hl,KEY_L
0409CC CD 5D 16 04 1456   	call fn_inkey
0409D0 FE 01       1457   	cp 1
0409D2 CC F6 09 04 1458   	call z,dslp_load_palette
0409D6             1459   
0409D6             1460   	; save palette
0409D6 21 AE FF FF 1461   	ld hl,KEY_S
0409DA CD 5D 16 04 1462   	call fn_inkey
0409DE FE 01       1463   	cp 1
0409E0 CC 24 0A 04 1464   	call z,dslp_save_palette
0409E4             1465   
0409E4             1466   	; exit program
0409E4 21 8F FF FF 1467   	ld hl,KEY_ESCAPE
0409E8 CD 5D 16 04 1468   	call fn_inkey
0409EC FE 01       1469   	cp 1
0409EE CA BD 0A 04 1470   	jp z,exit_program
0409F2             1471   
0409F2 C3 9E 09 04 1472   	jp dsl_palette_tool_loop
0409F6             1473   
0409F6             1474   dslp_load_palette:
0409F6 21 A9 FF FF 1475   	ld hl,KEY_L
0409FA CD 5D 16 04 1476   	call fn_inkey
0409FE FE 00       1477   	cp 0
040A00 20 F4       1478   	jr nz,dslp_load_palette
040A02             1479   
040A02 21 C8 16 04 1480   	ld hl,current_pen
040A06 4E          1481   	ld c,(hl)
040A07 CD 9B 0D 04 1482   	call fn_draw_palette_without_border
040A0B CD 06 0F 04 1483   	call fn_load_palette
040A0F 21 C8 16 04 1484   	ld hl,current_pen
040A13 4E          1485   	ld c,(hl)
040A14 CD 4F 15 04 1486   	call fn_refresh_sprite
040A18 CD 36 0D 04 1487   	call fn_draw_palette_with_border
040A1C CD 8F 15 04 1488   	call fn_change_frame
040A20 C3 9E 09 04 1489   	jp dsl_palette_tool_loop
040A24             1490   
040A24             1491   dslp_save_palette:
040A24 21 AE FF FF 1492   	ld hl,KEY_S
040A28 CD 5D 16 04 1493   	call fn_inkey
040A2C FE 00       1494   	cp 0
040A2E 20 F4       1495   	jr nz,dslp_save_palette
040A30             1496   
040A30 21 C8 16 04 1497   	ld hl,current_pen
040A34 4E          1498   	ld c,(hl)
040A35 CD 9B 0D 04 1499   	call fn_draw_palette_without_border
040A39 CD 3A 11 04 1500   	call fn_save_palette
040A3D 21 C8 16 04 1501   	ld hl,current_pen
040A41 4E          1502   	ld c,(hl)
040A42 CD 36 0D 04 1503   	call fn_draw_palette_with_border
040A46 C3 9E 09 04 1504   	jp dsl_palette_tool_loop
040A4A             1505   
040A4A             1506   dsl_draw_sprite_tool:
040A4A 21 9F FF FF 1507   	ld hl,KEY_TAB
040A4E CD 5D 16 04 1508   	call fn_inkey
040A52 FE 00       1509   	cp 0
040A54 20 F4       1510   	jr nz,dsl_draw_sprite_tool
040A56             1511   
040A56             1512   	; unselect palette color
040A56 21 C8 16 04 1513   	ld hl,current_pen
040A5A 4E          1514   	ld c,(hl)
040A5B CD 9B 0D 04 1515   	call fn_draw_palette_without_border
040A5F             1516   
040A5F             1517   	; draw the pixel with a border
040A5F CD 6E 0C 04 1518   	call fn_draw_pixel_with_border
040A63             1519   
040A63 C3 F2 02 04 1520   	jp draw_sprite_loop
040A67             1521   
040A67             1522   dsl_dec_pen:
040A67 21 C8 16 04 1523   	ld hl,current_pen
040A6B 7E          1524   	ld a,(hl)
040A6C FE 00       1525   	cp COLOR_MIN
040A6E CA 9E 09 04 1526   	jp z,dsl_palette_tool_loop
040A72             1527   
040A72 F5          1528   	push af
040A73 E5          1529   	push hl
040A74             1530   
040A74             1531   	; unselect palette color
040A74 21 C8 16 04 1532   	ld hl,current_pen
040A78 4E          1533   	ld c,(hl)
040A79 CD 9B 0D 04 1534   	call fn_draw_palette_without_border
040A7D             1535   
040A7D E1          1536   	pop hl
040A7E F1          1537   	pop af
040A7F             1538   
040A7F             1539   	; dec the pen
040A7F 3D          1540   	dec a
040A80 77          1541   	ld (hl),a
040A81             1542   
040A81             1543   	; select palette color
040A81 21 C8 16 04 1544   	ld hl,current_pen
040A85 4E          1545   	ld c,(hl)
040A86 CD 36 0D 04 1546   	call fn_draw_palette_with_border
040A8A CD D8 15 04 1547   	call fn_slowdown
040A8E C3 9E 09 04 1548   	jp dsl_palette_tool_loop
040A92             1549   
040A92             1550   dsl_inc_pen:
040A92 21 C8 16 04 1551   	ld hl,current_pen
040A96 7E          1552   	ld a,(hl)
040A97 FE 3F       1553   	cp COLOR_MAX
040A99 CA 9E 09 04 1554   	jp z,dsl_palette_tool_loop
040A9D             1555   
040A9D F5          1556   	push af
040A9E E5          1557   	push hl
040A9F             1558   
040A9F             1559   	; unselect palette color
040A9F 21 C8 16 04 1560   	ld hl,current_pen
040AA3 4E          1561   	ld c,(hl)
040AA4 CD 9B 0D 04 1562   	call fn_draw_palette_without_border
040AA8             1563   
040AA8 E1          1564   	pop hl
040AA9 F1          1565   	pop af
040AAA             1566   
040AAA             1567   	; inc the pen
040AAA 3C          1568   	inc a
040AAB 77          1569   	ld (hl),a
040AAC             1570   
040AAC             1571   	; select palette color
040AAC 21 C8 16 04 1572   	ld hl,current_pen
040AB0 4E          1573   	ld c,(hl)
040AB1 CD 36 0D 04 1574   	call fn_draw_palette_with_border
040AB5 CD D8 15 04 1575   	call fn_slowdown
040AB9 C3 9E 09 04 1576   	jp dsl_palette_tool_loop
040ABD             1577   
040ABD             1578   ; exit program
040ABD             1579   exit_program:
040ABD             1580   	; reset to mode 1
040ABD             1581   	vdu 22
040ABD 3E 16       0001M  		LD	A, function
040ABF 49 D7       0002M  		RST.LIS	10h
040AC1             1582   	vdu 1
040AC1 3E 01       0001M  		LD	A, function
040AC3 49 D7       0002M  		RST.LIS	10h
040AC5             1583   
040AC5             1584   	; position the texte cursor at home
040AC5             1585   	vdu 30
040AC5 3E 1E       0001M  		LD	A, function
040AC7 49 D7       0002M  		RST.LIS	10h
040AC9             1586   
040AC9             1587   	; show cursor
040AC9             1588   	vdu 23
040AC9 3E 17       0001M  		LD	A, function
040ACB 49 D7       0002M  		RST.LIS	10h
040ACD             1589   	vdu 1
040ACD 3E 01       0001M  		LD	A, function
040ACF 49 D7       0002M  		RST.LIS	10h
040AD1             1590   	vdu 1
040AD1 3E 01       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5             1591   
040AD5 FD E1       1592   	pop iy
040AD7 DD E1       1593   	pop ix
040AD9 D1          1594   	pop de
040ADA C1          1595   	pop bc
040ADB F1          1596   	pop af
040ADC 21 00 00 00 1597   	ld hl,0
040AE0             1598   
040AE0 C9          1599   	ret
040AE1             1600   ;======================================================================
040AE1             1601   
040AE1             1602   ; draw a rectangle
040AE1             1603   fn_rect:
040AE1             1604   	vdu 25
040AE1 3E 19       0001M  		LD	A, function
040AE3 49 D7       0002M  		RST.LIS	10h
040AE5             1605   	vdu 4
040AE5 3E 04       0001M  		LD	A, function
040AE7 49 D7       0002M  		RST.LIS	10h
040AE9 DD 21 B2 16 1606   	ld ix,x1
       04          
040AEE DD 7E 00    1607   	ld a,(ix + 0)
040AF1             1608   	vdu_a
040AF1 49 D7       0001M  		RST.LIS	10h
040AF3 DD 7E 01    1609   	ld a,(ix + 1)
040AF6             1610   	vdu_a
040AF6 49 D7       0001M  		RST.LIS	10h
040AF8 FD 21 B4 16 1611   	ld iy,y1
       04          
040AFD FD 7E 00    1612   	ld a,(iy + 0)
040B00             1613   	vdu_a
040B00 49 D7       0001M  		RST.LIS	10h
040B02 FD 7E 01    1614   	ld a,(iy + 1)
040B05             1615   	vdu_a
040B05 49 D7       0001M  		RST.LIS	10h
040B07             1616   
040B07             1617   	vdu 25
040B07 3E 19       0001M  		LD	A, function
040B09 49 D7       0002M  		RST.LIS	10h
040B0B             1618   	vdu 5
040B0B 3E 05       0001M  		LD	A, function
040B0D 49 D7       0002M  		RST.LIS	10h
040B0F DD 21 B6 16 1619   	ld ix,x2
       04          
040B14 DD 7E 00    1620   	ld a,(ix + 0)
040B17             1621   	vdu_a
040B17 49 D7       0001M  		RST.LIS	10h
040B19 DD 7E 01    1622   	ld a,(ix + 1)
040B1C             1623   	vdu_a
040B1C 49 D7       0001M  		RST.LIS	10h
040B1E FD 21 B4 16 1624   	ld iy,y1
       04          
040B23 FD 7E 00    1625   	ld a,(iy + 0)
040B26             1626   	vdu_a
040B26 49 D7       0001M  		RST.LIS	10h
040B28 FD 7E 01    1627   	ld a,(iy + 1)
040B2B             1628   	vdu_a
040B2B 49 D7       0001M  		RST.LIS	10h
040B2D             1629   
040B2D             1630   	vdu 25
040B2D 3E 19       0001M  		LD	A, function
040B2F 49 D7       0002M  		RST.LIS	10h
040B31             1631   	vdu 5
040B31 3E 05       0001M  		LD	A, function
040B33 49 D7       0002M  		RST.LIS	10h
040B35 DD 21 B6 16 1632   	ld ix,x2
       04          
040B3A DD 7E 00    1633   	ld a,(ix + 0)
040B3D             1634   	vdu_a
040B3D 49 D7       0001M  		RST.LIS	10h
040B3F DD 7E 01    1635   	ld a,(ix + 1)
040B42             1636   	vdu_a
040B42 49 D7       0001M  		RST.LIS	10h
040B44 FD 21 B8 16 1637   	ld iy,y2
       04          
040B49 FD 7E 00    1638   	ld a,(iy + 0)
040B4C             1639   	vdu_a
040B4C 49 D7       0001M  		RST.LIS	10h
040B4E FD 7E 01    1640   	ld a,(iy + 1)
040B51             1641   	vdu_a
040B51 49 D7       0001M  		RST.LIS	10h
040B53             1642   
040B53             1643   	vdu 25
040B53 3E 19       0001M  		LD	A, function
040B55 49 D7       0002M  		RST.LIS	10h
040B57             1644   	vdu 5
040B57 3E 05       0001M  		LD	A, function
040B59 49 D7       0002M  		RST.LIS	10h
040B5B DD 21 B2 16 1645   	ld ix,x1
       04          
040B60 DD 7E 00    1646   	ld a,(ix + 0)
040B63             1647   	vdu_a
040B63 49 D7       0001M  		RST.LIS	10h
040B65 DD 7E 01    1648   	ld a,(ix + 1)
040B68             1649   	vdu_a
040B68 49 D7       0001M  		RST.LIS	10h
040B6A FD 21 B8 16 1650   	ld iy,y2
       04          
040B6F FD 7E 00    1651   	ld a,(iy + 0)
040B72             1652   	vdu_a
040B72 49 D7       0001M  		RST.LIS	10h
040B74 FD 7E 01    1653   	ld a,(iy + 1)
040B77             1654   	vdu_a
040B77 49 D7       0001M  		RST.LIS	10h
040B79             1655   
040B79             1656   	vdu 25
040B79 3E 19       0001M  		LD	A, function
040B7B 49 D7       0002M  		RST.LIS	10h
040B7D             1657   	vdu 5
040B7D 3E 05       0001M  		LD	A, function
040B7F 49 D7       0002M  		RST.LIS	10h
040B81 DD 21 B2 16 1658   	ld ix,x1
       04          
040B86 DD 7E 00    1659   	ld a,(ix + 0)
040B89             1660   	vdu_a
040B89 49 D7       0001M  		RST.LIS	10h
040B8B DD 7E 01    1661   	ld a,(ix + 1)
040B8E             1662   	vdu_a
040B8E 49 D7       0001M  		RST.LIS	10h
040B90 FD 21 B4 16 1663   	ld iy,y1
       04          
040B95 FD 7E 00    1664   	ld a,(iy + 0)
040B98             1665   	vdu_a
040B98 49 D7       0001M  		RST.LIS	10h
040B9A FD 7E 01    1666   	ld a,(iy + 1)
040B9D             1667   	vdu_a
040B9D 49 D7       0001M  		RST.LIS	10h
040B9F             1668   
040B9F C9          1669   	ret
040BA0             1670   
040BA0             1671   ; draw a filled rectangle
040BA0             1672   fn_rectf:
040BA0 DD 21 B2 16 1673   	ld ix,x1
       04          
040BA5 FD 21 B4 16 1674   	ld iy,y1
       04          
040BAA             1675   
040BAA             1676   	vdu 25
040BAA 3E 19       0001M  		LD	A, function
040BAC 49 D7       0002M  		RST.LIS	10h
040BAE             1677   	vdu 4
040BAE 3E 04       0001M  		LD	A, function
040BB0 49 D7       0002M  		RST.LIS	10h
040BB2 DD 7E 00    1678   	ld a,(ix+0)
040BB5             1679   	vdu_a
040BB5 49 D7       0001M  		RST.LIS	10h
040BB7 DD 7E 01    1680   	ld a,(ix+1)
040BBA             1681   	vdu_a
040BBA 49 D7       0001M  		RST.LIS	10h
040BBC FD 7E 00    1682   	ld a,(iy+0)
040BBF             1683   	vdu_a
040BBF 49 D7       0001M  		RST.LIS	10h
040BC1 FD 7E 01    1684   	ld a,(iy+1)
040BC4             1685   	vdu_a
040BC4 49 D7       0001M  		RST.LIS	10h
040BC6             1686   
040BC6 DD 21 B6 16 1687   	ld ix,x2
       04          
040BCB FD 21 B8 16 1688   	ld iy,y2
       04          
040BD0             1689   
040BD0             1690   	vdu 25
040BD0 3E 19       0001M  		LD	A, function
040BD2 49 D7       0002M  		RST.LIS	10h
040BD4             1691   	vdu 101
040BD4 3E 65       0001M  		LD	A, function
040BD6 49 D7       0002M  		RST.LIS	10h
040BD8 DD 7E 00    1692   	ld a,(ix+0)
040BDB             1693   	vdu_a
040BDB 49 D7       0001M  		RST.LIS	10h
040BDD DD 7E 01    1694   	ld a,(ix+1)
040BE0             1695   	vdu_a
040BE0 49 D7       0001M  		RST.LIS	10h
040BE2 FD 7E 00    1696   	ld a,(iy+0)
040BE5             1697   	vdu_a
040BE5 49 D7       0001M  		RST.LIS	10h
040BE7 FD 7E 01    1698   	ld a,(iy+1)
040BEA             1699   	vdu_a
040BEA 49 D7       0001M  		RST.LIS	10h
040BEC             1700   
040BEC C9          1701   	ret
040BED             1702   
040BED             1703   fn_calc_pixel_coords:
040BED 11 00 00 00 1704   	ld de,$000000 ; reset deu
040BF1             1705   
040BF1             1706   	; calculate coordinates x of the resized pixel
040BF1 21 C2 16 04 1707   	ld hl,xpix
040BF5 5E          1708   	ld e,(hl) ; E = xpix
040BF6 21 C6 16 04 1709   	ld hl,pixel_width
040BFA 56          1710   	ld d,(hl) ; D = pixel_width
040BFB D5          1711   	push de
040BFC E1          1712   	pop hl ; HL = DE
040BFD ED 6C       1713   	mlt hl ; HL = xpix * pixel_width
040BFF DD 21 BA 16 1714   	ld ix,xs1
       04          
040C04 DD 5E 00    1715   	ld e,(ix+0)
040C07 DD 56 01    1716   	ld d,(ix+1)
040C0A 13          1717   	inc de ; DE = xs1 + 1
040C0B 19          1718   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040C0C FD 21 B2 16 1719   	ld iy,x1
       04          
040C11 FD 75 00    1720   	ld (iy+0),l
040C14 FD 74 01    1721   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040C17 E5          1722   	push hl
040C18 21 C6 16 04 1723   	ld hl,pixel_width
040C1C 16 00       1724   	ld d,0
040C1E 5E          1725   	ld e,(hl)
040C1F E1          1726   	pop hl
040C20 19          1727   	add hl,de
040C21 2B          1728   	dec hl
040C22 FD 21 B6 16 1729   	ld iy,x2
       04          
040C27 FD 75 00    1730   	ld (iy+0),l
040C2A FD 74 01    1731   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040C2D             1732   
040C2D 11 00 00 00 1733   	ld de,$000000 ; reset deu
040C31             1734   
040C31             1735   	; calculate coordinates y of the resized pixel
040C31 21 C3 16 04 1736   	ld hl,ypix
040C35 5E          1737   	ld e,(hl) ; E = ypix
040C36 21 C6 16 04 1738   	ld hl,pixel_width
040C3A 56          1739   	ld d,(hl) ; D = pixel_width
040C3B D5          1740   	push de
040C3C E1          1741   	pop hl ; HL = DE
040C3D ED 6C       1742   	mlt hl ; HL = ypix * pixel_width
040C3F DD 21 BC 16 1743   	ld ix,ys1
       04          
040C44 DD 5E 00    1744   	ld e,(ix+0)
040C47 DD 56 01    1745   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040C4A 13          1746   	inc de ; DE = ys1 + 1
040C4B 19          1747   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040C4C FD 21 B4 16 1748   	ld iy,y1
       04          
040C51 FD 75 00    1749   	ld (iy+0),l
040C54 FD 74 01    1750   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040C57 E5          1751   	push hl
040C58 21 C6 16 04 1752   	ld hl,pixel_width
040C5C 16 00       1753   	ld d,0
040C5E 5E          1754   	ld e,(hl)
040C5F E1          1755   	pop hl
040C60 19          1756   	add hl,de
040C61 2B          1757   	dec hl
040C62 FD 21 B8 16 1758   	ld iy,y2
       04          
040C67 FD 75 00    1759   	ld (iy+0),l
040C6A FD 74 01    1760   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C6D             1761   
040C6D C9          1762   	ret
040C6E             1763   
040C6E             1764   ; draw the resized pixel border, with its color
040C6E             1765   fn_draw_pixel_with_border:
040C6E CD 82 0C 04 1766   	call fn_draw_pixel_without_border
040C72             1767   
040C72             1768   	; set graphics pen
040C72             1769   	vdu 18
040C72 3E 12       0001M  		LD	A, function
040C74 49 D7       0002M  		RST.LIS	10h
040C76             1770   	vdu 0
040C76 3E 00       0001M  		LD	A, function
040C78 49 D7       0002M  		RST.LIS	10h
040C7A             1771   	vdu COLOR_GREY ; grey pen
040C7A 3E 07       0001M  		LD	A, function
040C7C 49 D7       0002M  		RST.LIS	10h
040C7E             1772   
040C7E             1773   	; draw the sprite's border rectangle
040C7E C3 E1 0A 04 1774   	jp fn_rect
040C82             1775   
040C82             1776   ; draw the resized pixel color
040C82             1777   fn_draw_pixel_without_border:
040C82 CD ED 0B 04 1778   	call fn_calc_pixel_coords
040C86             1779   
040C86             1780   	; set graphics pen
040C86             1781   	vdu 18
040C86 3E 12       0001M  		LD	A, function
040C88 49 D7       0002M  		RST.LIS	10h
040C8A             1782   	vdu 0
040C8A 3E 00       0001M  		LD	A, function
040C8C 49 D7       0002M  		RST.LIS	10h
040C8E CD 98 0C 04 1783   	call fn_get_pixel_color
040C92             1784   	vdu_a
040C92 49 D7       0001M  		RST.LIS	10h
040C94             1785   
040C94             1786   	; draw the sprite's color rectangle
040C94 C3 A0 0B 04 1787   	jp fn_rectf
040C98             1788   
040C98             1789   ; get pixel color value in the sprite buffer
040C98             1790   ; returns A: pixel color (0-63)
040C98             1791   fn_get_pixel_color:
040C98 11 00 00 00 1792   	ld de,$000000 ; reset deu
040C9C             1793   
040C9C             1794   	; calculate the offset to add to the address
040C9C 21 C3 16 04 1795   	ld hl,ypix
040CA0 5E          1796   	ld e,(hl) ; E = ypix
040CA1 21 C7 16 04 1797   	ld hl,spr_size
040CA5 56          1798   	ld d,(hl) ; D = sprsize
040CA6 D5          1799   	push de
040CA7 E1          1800   	pop hl
040CA8 ED 6C       1801   	mlt hl ; HL = ypix * sprsize
040CAA E5          1802   	push hl
040CAB 21 C2 16 04 1803   	ld hl,xpix
040CAF 5E          1804   	ld e,(hl)
040CB0 16 00       1805   	ld d,0
040CB2 E1          1806   	pop hl
040CB3 19          1807   	add hl,de ; HL = (ypix * sprsize) + xpix
040CB4             1808   
040CB4 11 BE 17 04 1809   	ld de,current_frame
040CB8 1A          1810   	ld a,(de)
040CB9 FE 00       1811   	cp 0
040CBB 28 16       1812   	jr z,gpc_end_loop
040CBD             1813   
040CBD 47          1814   	ld b,a
040CBE E5          1815   	push hl
040CBF 11 00 00 00 1816   	ld de,$000000
040CC3 21 C7 16 04 1817   	ld hl,spr_size
040CC7 5E          1818   	ld e,(hl)
040CC8 56          1819   	ld d,(hl)
040CC9 D5          1820   	push de
040CCA E1          1821   	pop hl
040CCB ED 6C       1822   	mlt hl
040CCD E5          1823   	push hl
040CCE D1          1824   	pop de ; DE = sprsize²
040CCF E1          1825   	pop hl
040CD0             1826   
040CD0             1827   gpc_loop:
040CD0 19          1828   	add hl,de
040CD1 10 FD       1829   	djnz gpc_loop
040CD3             1830   
040CD3             1831   gpc_end_loop:
040CD3             1832   	; add the offset to the address
040CD3 11 C7 17 04 1833   	ld de,sprite_buffer
040CD7 19          1834   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CD8             1835   
040CD8             1836   	; get pixel color value
040CD8 7E          1837   	ld a,(hl)
040CD9             1838   
040CD9 C9          1839   	ret
040CDA             1840   
040CDA             1841   ; get pixel color value in the sprite buffer
040CDA             1842   ; A: pixel color (0-63)
040CDA             1843   fn_set_pixel_color:
040CDA 11 00 00 00 1844   	ld de,$000000 ; reset deu
040CDE             1845   
040CDE             1846   	; calculate the offset to add to the address
040CDE 21 C3 16 04 1847   	ld hl,ypix
040CE2 5E          1848   	ld e,(hl) ; E = ypix
040CE3 21 C7 16 04 1849   	ld hl,spr_size
040CE7 56          1850   	ld d,(hl) ; D = sprsize
040CE8 D5          1851   	push de
040CE9 E1          1852   	pop hl
040CEA ED 6C       1853   	mlt hl ; HL = ypix * sprsize
040CEC E5          1854   	push hl
040CED 21 C2 16 04 1855   	ld hl,xpix
040CF1 5E          1856   	ld e,(hl)
040CF2 16 00       1857   	ld d,0
040CF4 E1          1858   	pop hl
040CF5 19          1859   	add hl,de ; HL = (ypix * sprsize) + xpix
040CF6 F5          1860   	push af
040CF7             1861   
040CF7 11 BE 17 04 1862   	ld de,current_frame
040CFB 1A          1863   	ld a,(de)
040CFC FE 00       1864   	cp 0
040CFE 28 16       1865   	jr z,spc_end_loop
040D00             1866   
040D00 47          1867   	ld b,a
040D01 E5          1868   	push hl
040D02 11 00 00 00 1869   	ld de,$000000
040D06 21 C7 16 04 1870   	ld hl,spr_size
040D0A 5E          1871   	ld e,(hl)
040D0B 56          1872   	ld d,(hl)
040D0C D5          1873   	push de
040D0D E1          1874   	pop hl
040D0E ED 6C       1875   	mlt hl
040D10 E5          1876   	push hl
040D11 D1          1877   	pop de ; DE = sprsize²
040D12 E1          1878   	pop hl
040D13             1879   
040D13             1880   spc_loop:
040D13 19          1881   	add hl,de
040D14 10 FD       1882   	djnz spc_loop
040D16             1883   
040D16             1884   spc_end_loop:
040D16             1885   
040D16             1886   	; add the offset to the address
040D16 11 C7 17 04 1887   	ld de,sprite_buffer
040D1A 19          1888   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040D1B             1889   
040D1B             1890   	; set pixel color value
040D1B F1          1891   	pop af
040D1C 77          1892   	ld (hl),a
040D1D             1893   
040D1D C9          1894   	ret
040D1E             1895   
040D1E             1896   fn_move_up:
040D1E 21 C3 16 04 1897   	ld hl,ypix
040D22 35          1898   	dec (hl)
040D23 C9          1899   	ret
040D24             1900   
040D24             1901   fn_move_down:
040D24 21 C3 16 04 1902   	ld hl,ypix
040D28 34          1903   	inc (hl)
040D29 C9          1904   	ret
040D2A             1905   
040D2A             1906   fn_move_left:
040D2A 21 C2 16 04 1907   	ld hl,xpix
040D2E 35          1908   	dec (hl)
040D2F C9          1909   	ret
040D30             1910   
040D30             1911   fn_move_right:
040D30 21 C2 16 04 1912   	ld hl,xpix
040D34 34          1913   	inc (hl)
040D35 C9          1914   	ret
040D36             1915   
040D36             1916   ; draw palette color whit border and selection
040D36             1917   ; C = color number (0-63)
040D36             1918   fn_draw_palette_with_border:
040D36 C5          1919   	push bc
040D37             1920   
040D37             1921   	; choose palette color
040D37             1922   	vdu 18
040D37 3E 12       0001M  		LD	A, function
040D39 49 D7       0002M  		RST.LIS	10h
040D3B             1923   	vdu 0
040D3B 3E 00       0001M  		LD	A, function
040D3D 49 D7       0002M  		RST.LIS	10h
040D3F C1          1924   	pop bc
040D40 C5          1925   	push bc
040D41 79          1926   	ld a,c
040D42             1927   	vdu_a
040D42 49 D7       0001M  		RST.LIS	10h
040D44             1928   
040D44             1929   	; store coordinates for a palette square
040D44 DD 21 B2 16 1930   	ld ix,x1
       04          
040D49 E1          1931   	pop hl
040D4A E5          1932   	push hl
040D4B 26 05       1933   	ld h,5
040D4D ED 6C       1934   	mlt hl
040D4F E5          1935   	push hl
040D50 DD 75 00    1936   	ld (ix+0),l
040D53 DD 74 01    1937   	ld (ix+1),h
040D56             1938   
040D56 DD 21 B4 16 1939   	ld ix,y1
       04          
040D5B 21 00 00 00 1940   	ld hl,0
040D5F DD 75 00    1941   	ld (ix+0),l
040D62 DD 74 01    1942   	ld (ix+1),h
040D65             1943   
040D65 DD 21 B6 16 1944   	ld ix,x2
       04          
040D6A E1          1945   	pop hl
040D6B 11 04 00 00 1946   	ld de,4
040D6F 19          1947   	add hl,de
040D70 DD 75 00    1948   	ld (ix+0),l
040D73 DD 74 01    1949   	ld (ix+1),h
040D76             1950   
040D76 DD 21 B8 16 1951   	ld ix,y2
       04          
040D7B 21 0A 00 00 1952   	ld hl,10
040D7F DD 75 00    1953   	ld (ix+0),l
040D82 DD 74 01    1954   	ld (ix+1),h
040D85             1955   
040D85             1956   	; draw the palette filled square
040D85 CD A0 0B 04 1957   	call fn_rectf
040D89             1958   
040D89             1959   	; choose grey color
040D89             1960   	vdu 18
040D89 3E 12       0001M  		LD	A, function
040D8B 49 D7       0002M  		RST.LIS	10h
040D8D             1961   	vdu 0
040D8D 3E 00       0001M  		LD	A, function
040D8F 49 D7       0002M  		RST.LIS	10h
040D91 3E 07       1962   	ld a,COLOR_GREY
040D93             1963   	vdu_a
040D93 49 D7       0001M  		RST.LIS	10h
040D95             1964   
040D95             1965   	; draw the palette square border
040D95 CD E1 0A 04 1966   	call fn_rect
040D99             1967   
040D99             1968   	; next color ?
040D99 C1          1969   	pop bc
040D9A             1970   
040D9A C9          1971   	ret
040D9B             1972   
040D9B             1973   ; draw palette color whitout border and selection
040D9B             1974   ; C = color number (0-63)
040D9B             1975   fn_draw_palette_without_border:
040D9B C5          1976   	push bc
040D9C             1977   
040D9C             1978   	; choose palette color
040D9C             1979   	vdu 18
040D9C 3E 12       0001M  		LD	A, function
040D9E 49 D7       0002M  		RST.LIS	10h
040DA0             1980   	vdu 0
040DA0 3E 00       0001M  		LD	A, function
040DA2 49 D7       0002M  		RST.LIS	10h
040DA4 C1          1981   	pop bc
040DA5 C5          1982   	push bc
040DA6 79          1983   	ld a,c
040DA7             1984   	vdu_a
040DA7 49 D7       0001M  		RST.LIS	10h
040DA9             1985   
040DA9             1986   	; store coordinates for a palette square
040DA9 DD 21 B2 16 1987   	ld ix,x1
       04          
040DAE E1          1988   	pop hl
040DAF E5          1989   	push hl
040DB0 26 05       1990   	ld h,5
040DB2 ED 6C       1991   	mlt hl
040DB4 E5          1992   	push hl
040DB5 DD 75 00    1993   	ld (ix+0),l
040DB8 DD 74 01    1994   	ld (ix+1),h
040DBB             1995   
040DBB DD 21 B4 16 1996   	ld ix,y1
       04          
040DC0 21 00 00 00 1997   	ld hl,0
040DC4 DD 75 00    1998   	ld (ix+0),l
040DC7 DD 74 01    1999   	ld (ix+1),h
040DCA             2000   
040DCA DD 21 B6 16 2001   	ld ix,x2
       04          
040DCF E1          2002   	pop hl
040DD0 11 04 00 00 2003   	ld de,4
040DD4 19          2004   	add hl,de
040DD5 DD 75 00    2005   	ld (ix+0),l
040DD8 DD 74 01    2006   	ld (ix+1),h
040DDB             2007   
040DDB DD 21 B8 16 2008   	ld ix,y2
       04          
040DE0 21 0A 00 00 2009   	ld hl,10
040DE4 DD 75 00    2010   	ld (ix+0),l
040DE7 DD 74 01    2011   	ld (ix+1),h
040DEA             2012   
040DEA             2013   	; draw the palette filled square
040DEA CD A0 0B 04 2014   	call fn_rectf
040DEE             2015   
040DEE C1          2016   	pop bc
040DEF             2017   
040DEF C9          2018   	ret
040DF0             2019   
040DF0             2020   ; get an ascii key value
040DF0             2021   fn_input_key:
040DF0 C5          2022   	push bc
040DF1             2023   	moscall mos_getkey
040DF1 3E 00       0001M  		LD	A, function
040DF3 49 CF       0002M  		RST.LIS	08h
040DF5 C1          2024   	pop bc
040DF6 C9          2025   	ret
040DF7             2026   
040DF7             2027   ; input a text of 8 chars
040DF7             2028   fn_input_text8:
040DF7             2029   	; locate x,y
040DF7             2030   	vdu 31
040DF7 3E 1F       0001M  		LD	A, function
040DF9 49 D7       0002M  		RST.LIS	10h
040DFB             2031   	vdu FILENAME_X
040DFB 3E 07       0001M  		LD	A, function
040DFD 49 D7       0002M  		RST.LIS	10h
040DFF             2032   	vdu FILENAME_Y
040DFF 3E 18       0001M  		LD	A, function
040E01 49 D7       0002M  		RST.LIS	10h
040E03             2033   
040E03             2034   	; print text
040E03 21 34 17 04 2035   	ld hl,filename_label
040E07 01 00 00 00 2036   	ld bc,0
040E0B AF          2037   	xor a
040E0C 49 DF       2038   	rst.lis $18
040E0E             2039   
040E0E             2040   	; show cursor
040E0E             2041   	vdu 23
040E0E 3E 17       0001M  		LD	A, function
040E10 49 D7       0002M  		RST.LIS	10h
040E12             2042   	vdu 1
040E12 3E 01       0001M  		LD	A, function
040E14 49 D7       0002M  		RST.LIS	10h
040E16             2043   	vdu 1
040E16 3E 01       0001M  		LD	A, function
040E18 49 D7       0002M  		RST.LIS	10h
040E1A             2044   
040E1A 0E 00       2045   	ld c,0
040E1C             2046   
040E1C             2047   it8_loop:
040E1C             2048   	; get ascii key
040E1C CD F0 0D 04 2049   	call fn_input_key
040E20 B7          2050   	or a
040E21 CA 1C 0E 04 2051   	jp z,it8_loop
040E25             2052   
040E25 FE 2E       2053   	cp '.'
040E27 CA 71 0E 04 2054   	jp z,it8l_add_char
040E2B             2055   
040E2B FE 2D       2056   	cp '-'
040E2D CA 71 0E 04 2057   	jp z,it8l_add_char
040E31             2058   
040E31 FE 5F       2059   	cp '_'
040E33 CA 71 0E 04 2060   	jp z,it8l_add_char
040E37             2061   
040E37 FE 7F       2062   	cp 127
040E39 CA A5 0E 04 2063   	jp z,it8l_backspace
040E3D             2064   
040E3D FE 0D       2065   	cp 13
040E3F CA D4 0E 04 2066   	jp z,it8l_return
040E43             2067   
040E43 FE 30       2068   	cp '0'
040E45 DA 1C 0E 04 2069   	jp c,it8_loop
040E49             2070   
040E49 16 39       2071   	ld d,'9'
040E4B 14          2072   	inc d
040E4C BA          2073   	cp d
040E4D DA 71 0E 04 2074   	jp c,it8l_add_char
040E51             2075   
040E51 FE 41       2076   	cp 'A'
040E53 DA 1C 0E 04 2077   	jp c,it8_loop
040E57             2078   
040E57 16 5A       2079   	ld d,'Z'
040E59 14          2080   	inc d
040E5A BA          2081   	cp d
040E5B DA 71 0E 04 2082   	jp c,it8l_add_char
040E5F             2083   
040E5F FE 61       2084   	cp 'a'
040E61 DA 1C 0E 04 2085   	jp c,it8_loop
040E65             2086   
040E65 16 7A       2087   	ld d,'z'
040E67 14          2088   	inc d
040E68 BA          2089   	cp d
040E69 DA 71 0E 04 2090   	jp c,it8l_add_char
040E6D             2091   
040E6D C3 1C 0E 04 2092   	jp it8_loop
040E71             2093   
040E71             2094   it8l_add_char:
040E71 F5          2095   	push af
040E72 79          2096   	ld a,c
040E73 FE 0C       2097   	cp 12
040E75 38 05       2098   	jr c,it8l_poke_char
040E77 F1          2099   	pop af
040E78 C3 1C 0E 04 2100   	jp it8_loop
040E7C             2101   
040E7C             2102   it8l_poke_char:
040E7C F1          2103   	pop af
040E7D 21 3E 17 04 2104   	ld hl,filename
040E81 06 00       2105   	ld b,0
040E83 09          2106   	add hl,bc
040E84 77          2107   	ld (hl),a
040E85 0C          2108   	inc c
040E86 F5          2109   	push af
040E87 C5          2110   	push bc
040E88             2111   
040E88             2112   	; locate x,y
040E88             2113   	vdu 31
040E88 3E 1F       0001M  		LD	A, function
040E8A 49 D7       0002M  		RST.LIS	10h
040E8C             2114   	vdu FILENAME_X+10
040E8C 3E 11       0001M  		LD	A, function
040E8E 49 D7       0002M  		RST.LIS	10h
040E90             2115   	vdu FILENAME_Y
040E90 3E 18       0001M  		LD	A, function
040E92 49 D7       0002M  		RST.LIS	10h
040E94             2116   
040E94             2117   	; print text
040E94 21 3E 17 04 2118   	ld hl,filename
040E98 01 00 00 00 2119   	ld bc,0
040E9C AF          2120   	xor a
040E9D 49 DF       2121   	rst.lis $18
040E9F             2122   
040E9F C1          2123   	pop bc
040EA0 F1          2124   	pop af
040EA1             2125   
040EA1 C3 1C 0E 04 2126   	jp it8_loop
040EA5             2127   
040EA5             2128   it8l_backspace:
040EA5 79          2129   	ld a,c
040EA6 FE 00       2130   	cp 0
040EA8 CA 1C 0E 04 2131   	jp z,it8_loop
040EAC             2132   
040EAC             2133   	; delete a character of the filename
040EAC 21 3E 17 04 2134   	ld hl,filename
040EB0 06 00       2135   	ld b,0
040EB2 09          2136   	add hl,bc
040EB3 AF          2137   	xor a
040EB4 77          2138   	ld (hl),a
040EB5 0D          2139   	dec c
040EB6 C5          2140   	push bc
040EB7             2141   
040EB7             2142   	; locate x,y
040EB7             2143   	vdu 31
040EB7 3E 1F       0001M  		LD	A, function
040EB9 49 D7       0002M  		RST.LIS	10h
040EBB 3E 11       2144   	ld a,FILENAME_X+10
040EBD 81          2145   	add a,c
040EBE             2146   	vdu_a
040EBE 49 D7       0001M  		RST.LIS	10h
040EC0             2147   	vdu FILENAME_Y
040EC0 3E 18       0001M  		LD	A, function
040EC2 49 D7       0002M  		RST.LIS	10h
040EC4             2148   
040EC4             2149   	; print text
040EC4 21 5F 17 04 2150   	ld hl,spacechar
040EC8 01 00 00 00 2151   	ld bc,0
040ECC AF          2152   	xor a
040ECD 49 DF       2153   	rst.lis $18
040ECF             2154   
040ECF C1          2155   	pop bc
040ED0 C3 1C 0E 04 2156   	jp it8_loop
040ED4             2157   
040ED4             2158   it8l_return:
040ED4             2159   	; locate x,y
040ED4             2160   	vdu 31
040ED4 3E 1F       0001M  		LD	A, function
040ED6 49 D7       0002M  		RST.LIS	10h
040ED8             2161   	vdu FILENAME_X
040ED8 3E 07       0001M  		LD	A, function
040EDA 49 D7       0002M  		RST.LIS	10h
040EDC             2162   	vdu FILENAME_Y
040EDC 3E 18       0001M  		LD	A, function
040EDE 49 D7       0002M  		RST.LIS	10h
040EE0             2163   
040EE0             2164   	; print text
040EE0 21 61 17 04 2165   	ld hl,void_filename
040EE4 01 00 00 00 2166   	ld bc,0
040EE8 AF          2167   	xor a
040EE9 49 DF       2168   	rst.lis $18
040EEB             2169   
040EEB             2170   	; hide cursor
040EEB             2171   	vdu 23
040EEB 3E 17       0001M  		LD	A, function
040EED 49 D7       0002M  		RST.LIS	10h
040EEF             2172   	vdu 1
040EEF 3E 01       0001M  		LD	A, function
040EF1 49 D7       0002M  		RST.LIS	10h
040EF3             2173   	vdu 0
040EF3 3E 00       0001M  		LD	A, function
040EF5 49 D7       0002M  		RST.LIS	10h
040EF7             2174   
040EF7             2175   it8l_endloop:
040EF7 21 B6 FF FF 2176   	ld hl,KEY_RETURN
040EFB CD 5D 16 04 2177   	call fn_inkey
040EFF FE 01       2178   	CP 1
040F01 CA F7 0E 04 2179   	jp z,it8l_endloop
040F05             2180   
040F05 C9          2181   	ret
040F06             2182   
040F06             2183   ; load a palette
040F06             2184   fn_load_palette:
040F06             2185   	; clear the filename on the screen
040F06 21 3E 17 04 2186   	ld hl,filename
040F0A 06 0C       2187   	ld b,12
040F0C AF          2188   	xor a
040F0D             2189   
040F0D             2190   lp_clear_filename:
040F0D 77          2191   	ld (hl),a
040F0E 23          2192   	inc hl
040F0F 10 FC       2193   	djnz lp_clear_filename
040F11             2194   
040F11             2195   	; get filename
040F11 CD F7 0D 04 2196   	call fn_input_text8
040F15             2197   
040F15             2198   	; set path to 'palettes/'
040F15 21 53 17 04 2199   	ld hl,palette_path
040F19             2200   	moscall mos_cd
040F19 3E 03       0001M  		LD	A, function
040F1B 49 CF       0002M  		RST.LIS	08h
040F1D             2201   
040F1D             2202   	; exit on folder error
040F1D FE 00       2203   	cp 0
040F1F C2 9E 0F 04 2204   	jp nz,lp_folder_error
040F23             2205   
040F23             2206   	; open the file for read
040F23 21 3E 17 04 2207   	ld hl,filename
040F27 0E 01       2208   	ld c,fa_open_existing|fa_read
040F29             2209   	moscall mos_fopen
040F29 3E 0A       0001M  		LD	A, function
040F2B 49 CF       0002M  		RST.LIS	08h
040F2D             2210   
040F2D             2211   	; exit on file error
040F2D FE 00       2212   	cp 0
040F2F CA 92 10 04 2213   	jp z,lp_file_error
040F33             2214   
040F33             2215   	; filehandle -> C
040F33 4F          2216   	ld c,a
040F34             2217   
040F34             2218   	; get palette header
040F34 21 C7 37 04 2219   	ld hl,header_buffer
040F38 11 10 00 00 2220   	ld de,16
040F3C             2221   	moscall mos_fread
040F3C 3E 1A       0001M  		LD	A, function
040F3E 49 CF       0002M  		RST.LIS	08h
040F40 3E 10       2222   	ld a,16
040F42 BB          2223   	cp e
040F43 C2 82 0F 04 2224   	jp nz,lp_close_error
040F47             2225   
040F47             2226   	; compare headers
040F47 11 21 3B 04 2227   	ld de,header
040F4B 21 C7 37 04 2228   	ld hl,header_buffer
040F4F 47          2229   	ld b,a
040F50             2230   
040F50             2231   lp_compare:
040F50 1A          2232   	ld a,(de)
040F51 BE          2233   	cp (hl)
040F52 C2 A6 0F 04 2234   	jp nz,lp_header_error
040F56             2235   
040F56             2236   	; read number of colors
040F56 11 00 00 00 2237   	ld de,#000000
040F5A 21 D7 37 04 2238   	ld hl,palette_buffer
040F5E             2239   
040F5E             2240   lp_load_pal_loop:
040F5E D5          2241   	push de
040F5F E5          2242   	push hl
040F60             2243   
040F60             2244   	; read colors data
040F60             2245   	moscall mos_fgetc
040F60 3E 0C       0001M  		LD	A, function
040F62 49 CF       0002M  		RST.LIS	08h
040F64             2246   
040F64             2247   	; exit if file end
040F64 DA 7C 0F 04 2248   	jp c,lp_loaded
040F68             2249   
040F68 E1          2250   	pop hl
040F69 D1          2251   	pop de
040F6A 77          2252   	ld (hl),a ; store char
040F6B 13          2253   	inc de ; count chars
040F6C 01 44 03 00 2254   	ld bc,MAX_PAL_DATA
040F70 78          2255   	ld a,b
040F71 BA          2256   	cp d
040F72 C2 5E 0F 04 2257   	jp nz,lp_load_pal_loop
040F76 78          2258   	ld a,b
040F77 BB          2259   	cp e
040F78 C2 5E 0F 04 2260   	jp nz,lp_load_pal_loop
040F7C             2261   
040F7C             2262   ; end of file
040F7C             2263   lp_loaded:
040F7C E1          2264   	pop hl
040F7D D1          2265   	pop de
040F7E             2266   
040F7E C3 AE 0F 04 2267   	jp lp_close
040F82             2268   
040F82             2269   lp_close_error:
040F82 C5          2270   	push bc
040F83             2271   
040F83             2272   	; read error
040F83 CD AA 14 04 2273   	call fn_print_file_error
040F87             2274   
040F87 C1          2275   	pop bc
040F88             2276   
040F88             2277   	; close the file
040F88             2278   	moscall mos_fclose
040F88 3E 0B       0001M  		LD	A, function
040F8A 49 CF       0002M  		RST.LIS	08h
040F8C             2279   
040F8C             2280   	; set path to home
040F8C 21 5C 17 04 2281   	ld hl,back_path
040F90             2282   	moscall mos_cd
040F90 3E 03       0001M  		LD	A, function
040F92 49 CF       0002M  		RST.LIS	08h
040F94             2283   
040F94             2284   	; exit on error
040F94 FE 00       2285   	cp 0
040F96 C2 9E 0F 04 2286   	jp nz,lp_folder_error
040F9A             2287   
040F9A C3 90 10 04 2288   	jp lp_exit
040F9E             2289   
040F9E             2290   lp_folder_error:
040F9E             2291   	; write error
040F9E CD E1 14 04 2292   	call fn_print_folder_error
040FA2 C3 90 10 04 2293   	jp lp_exit
040FA6             2294   
040FA6             2295   lp_header_error:
040FA6             2296   	; write error
040FA6 CD 18 15 04 2297   	call fn_print_header_error
040FAA C3 90 10 04 2298   	jp lp_exit
040FAE             2299   
040FAE             2300   lp_close:
040FAE             2301   	; close the file
040FAE             2302   	moscall mos_fclose
040FAE 3E 0B       0001M  		LD	A, function
040FB0 49 CF       0002M  		RST.LIS	08h
040FB2             2303   
040FB2             2304   	; set path to home
040FB2 21 5C 17 04 2305   	ld hl,back_path
040FB6             2306   	moscall mos_cd
040FB6 3E 03       0001M  		LD	A, function
040FB8 49 CF       0002M  		RST.LIS	08h
040FBA             2307   
040FBA             2308   	; exit on error
040FBA FE 00       2309   	cp 0
040FBC C2 9E 0F 04 2310   	jp nz,lp_folder_error
040FC0             2311   
040FC0             2312   	; store first color 0
040FC0 AF          2313   	xor a
040FC1 21 20 3B 04 2314   	ld hl,color_byte
040FC5 77          2315   	ld (hl),a
040FC6             2316   
040FC6             2317   	; read number of colors in the palette
040FC6 21 D7 37 04 2318   	ld hl,palette_buffer
040FCA 7E          2319   	ld a,(hl)
040FCB FE 32       2320   	cp '2'
040FCD CA E7 0F 04 2321   	jp z,lp_two_colors
040FD1 FE 34       2322   	cp '4'
040FD3 CA 04 10 04 2323   	jp z,lp_four_colors
040FD7 FE 31       2324   	cp '1'
040FD9 CA 21 10 04 2325   	jp z,lp_sixteen_colors
040FDD FE 36       2326   	cp '6'
040FDF CA 46 10 04 2327   	jp z,lp_sixty_four_colors
040FE3             2328   
040FE3 C3 91 10 04 2329   	jp lp_data_error
040FE7             2330   
040FE7             2331   lp_two_colors:
040FE7 23          2332   	inc hl
040FE8 7E          2333   	ld a,(hl)
040FE9 FE 0D       2334   	cp 13
040FEB C2 91 10 04 2335   	jp nz,lp_data_error
040FEF 23          2336   	inc hl
040FF0 7E          2337   	ld a,(hl)
040FF1 FE 0A       2338   	cp 10
040FF3 C2 91 10 04 2339   	jp nz,lp_data_error
040FF7             2340   
040FF7 E5          2341   	push hl
040FF8 21 BD 17 04 2342   	ld hl,colors_count
040FFC 3E 02       2343   	ld a,2
040FFE 77          2344   	ld (hl),a
040FFF E1          2345   	pop hl
041000 C3 6B 10 04 2346   	jp lp_read_colors
041004             2347   
041004             2348   lp_four_colors:
041004 23          2349   	inc hl
041005 7E          2350   	ld a,(hl)
041006 FE 0D       2351   	cp 13
041008 C2 91 10 04 2352   	jp nz,lp_data_error
04100C 23          2353   	inc hl
04100D 7E          2354   	ld a,(hl)
04100E FE 0A       2355   	cp 10
041010 C2 91 10 04 2356   	jp nz,lp_data_error
041014             2357   
041014 E5          2358   	push hl
041015 21 BD 17 04 2359   	ld hl,colors_count
041019 3E 04       2360   	ld a,4
04101B 77          2361   	ld (hl),a
04101C E1          2362   	pop hl
04101D C3 6B 10 04 2363   	jp lp_read_colors
041021             2364   
041021             2365   lp_sixteen_colors:
041021 23          2366   	inc hl
041022 7E          2367   	ld a,(hl)
041023 FE 36       2368   	cp '6'
041025 C2 91 10 04 2369   	jp nz,lp_data_error
041029 23          2370   	inc hl
04102A 7E          2371   	ld a,(hl)
04102B FE 0D       2372   	cp 13
04102D C2 91 10 04 2373   	jp nz,lp_data_error
041031 23          2374   	inc hl
041032 7E          2375   	ld a,(hl)
041033 FE 0A       2376   	cp 10
041035 C2 91 10 04 2377   	jp nz,lp_data_error
041039             2378   
041039 E5          2379   	push hl
04103A 21 BD 17 04 2380   	ld hl,colors_count
04103E 3E 10       2381   	ld a,16
041040 77          2382   	ld (hl),a
041041 E1          2383   	pop hl
041042 C3 6B 10 04 2384   	jp lp_read_colors
041046             2385   
041046             2386   lp_sixty_four_colors:
041046 23          2387   	inc hl
041047 7E          2388   	ld a,(hl)
041048 FE 34       2389   	cp '4'
04104A C2 91 10 04 2390   	jp nz,lp_data_error
04104E 23          2391   	inc hl
04104F 7E          2392   	ld a,(hl)
041050 FE 0D       2393   	cp 13
041052 C2 91 10 04 2394   	jp nz,lp_data_error
041056 23          2395   	inc hl
041057 7E          2396   	ld a,(hl)
041058 FE 0A       2397   	cp 10
04105A C2 91 10 04 2398   	jp nz,lp_data_error
04105E             2399   
04105E E5          2400   	push hl
04105F 21 BD 17 04 2401   	ld hl,colors_count
041063 3E 40       2402   	ld a,64
041065 77          2403   	ld (hl),a
041066 E1          2404   	pop hl
041067 C3 6B 10 04 2405   	jp lp_read_colors
04106B             2406   
04106B             2407   lp_read_colors:
04106B F5          2408   	push af
04106C C5          2409   	push bc
04106D E5          2410   	push hl
04106E CD A5 10 04 2411   	call lp_read_tint ; read red
041072 4F          2412   	ld c,a
041073 C5          2413   	push bc
041074 CD A5 10 04 2414   	call lp_read_tint ; green red
041078 5F          2415   	ld e,a
041079 D5          2416   	push de
04107A CD A5 10 04 2417   	call lp_read_tint ; blue red
04107E 6F          2418   	ld l,a
04107F D1          2419   	pop de
041080 C1          2420   	pop bc ; RGB = c,e,l
041081 CD 19 11 04 2421   	call lp_set_tint
041085 E1          2422   	pop hl
041086 C1          2423   	pop bc
041087 F1          2424   	pop af
041088             2425   
041088 04          2426   	inc b
041089 3D          2427   	dec a
04108A FE 00       2428   	cp 0
04108C C2 6B 10 04 2429   	jp nz,lp_read_colors
041090             2430   
041090             2431   lp_exit:
041090 C9          2432   	ret
041091             2433   
041091             2434   lp_data_error:
041091 C9          2435   	ret
041092             2436   
041092             2437   lp_file_error:
041092 CD AA 14 04 2438   	call fn_print_file_error
041096             2439   
041096             2440   	; set path to home
041096 21 5C 17 04 2441   	ld hl,back_path
04109A             2442   	moscall mos_cd
04109A 3E 03       0001M  		LD	A, function
04109C 49 CF       0002M  		RST.LIS	08h
04109E             2443   
04109E             2444   	; exit on error
04109E FE 00       2445   	cp 0
0410A0 C2 9E 0F 04 2446   	jp nz,lp_folder_error
0410A4             2447   
0410A4 C9          2448   	ret
0410A5             2449   
0410A5             2450   lp_read_tint:
0410A5 0E 00       2451   	ld c,0 ; number of chars readen
0410A7 11 1C 3B 04 2452   	ld de,temp_chars_buffer
0410AB             2453   
0410AB D5          2454   	push de
0410AC             2455   
0410AC             2456   	; read chars
0410AC CD F9 10 04 2457   	call lprt_read_chars
0410B0             2458   
0410B0 D1          2459   	pop de
0410B1             2460   
0410B1 79          2461   	ld a,c
0410B2 FE 00       2462   	cp 0 ; no numbers
0410B4 CA 91 10 04 2463   	jp z,lp_data_error
0410B8 FE 04       2464   	cp 4 ; to many numbers
0410BA D2 91 10 04 2465   	jp nc,lp_data_error
0410BE             2466   
0410BE FE 03       2467   	cp 3
0410C0 28 17       2468   	jr z,lprt_three_int
0410C2             2469   
0410C2 FE 02       2470   	cp 2
0410C4 28 02       2471   	jr z,lprt_two_int
0410C6             2472   
0410C6             2473   	; one int only
0410C6 1A          2474   	ld a,(de)
0410C7 C9          2475   	ret
0410C8             2476   
0410C8             2477   ; two int
0410C8             2478   lprt_two_int:
0410C8 1A          2479   	ld a,(de)
0410C9 D5          2480   	push de
0410CA 11 00 00 00 2481   	ld de,#000000
0410CE 5F          2482   	ld e,a
0410CF 16 0A       2483   	ld d,10
0410D1 ED 5C       2484   	mlt de
0410D3 43          2485   	ld b,e
0410D4 D1          2486   	pop de
0410D5 13          2487   	inc de
0410D6 1A          2488   	ld a,(de)
0410D7 80          2489   	add a,b ; full int value is here
0410D8 C9          2490   	ret
0410D9             2491   
0410D9             2492   ; three int
0410D9             2493   lprt_three_int:
0410D9 1A          2494   	ld a,(de)
0410DA D5          2495   	push de
0410DB 11 00 00 00 2496   	ld de,#000000
0410DF 5F          2497   	ld e,a
0410E0 16 64       2498   	ld d,100
0410E2 ED 5C       2499   	mlt de
0410E4 43          2500   	ld b,e
0410E5 D1          2501   	pop de
0410E6 13          2502   	inc de
0410E7 1A          2503   	ld a,(de)
0410E8 D5          2504   	push de
0410E9 11 00 00 00 2505   	ld de,#000000
0410ED 5F          2506   	ld e,a
0410EE 16 0A       2507   	ld d,10
0410F0 ED 5C       2508   	mlt de
0410F2 4B          2509   	ld c,e
0410F3 D1          2510   	pop de
0410F4 13          2511   	inc de
0410F5 1A          2512   	ld a,(de)
0410F6 81          2513   	add a,c
0410F7 80          2514   	add a,b ; full int value is here
0410F8 C9          2515   	ret
0410F9             2516   
0410F9             2517   lprt_read_chars:
0410F9 3E 0D       2518   	ld a,13
0410FB 12          2519   	ld (de),a ; store eol as default char
0410FC             2520   
0410FC 7E          2521   	ld a,(hl)
0410FD FE 20       2522   	cp ' '
0410FF C8          2523   	ret z ; ret if space
041100 FE 0D       2524   	cp 13
041102 C8          2525   	ret z ; ret if cr
041103 FE 0A       2526   	cp 10
041105 C8          2527   	ret z ; ret if lf
041106 FE 30       2528   	cp '0'
041108 D8          2529   	ret c ; ret if not number
041109 FE 39       2530   	cp '9'
04110B 38 03       2531   	jr c,lprt_store
04110D 28 01       2532   	jr z,lprt_store
04110F C9          2533   	ret
041110             2534   
041110             2535   ; found a number, store it
041110             2536   lprt_store:
041110 D6 30       2537   	sub 48 ; convert char to byte integer
041112 12          2538   	ld (de),a ; store value
041113 13          2539   	inc de
041114 0C          2540   	inc c
041115 C3 F9 10 04 2541   	jp lprt_read_chars
041119             2542   
041119             2543   ; set tint (RGB = c,e,l)
041119             2544   lp_set_tint:
041119 C5          2545   	push bc
04111A D5          2546   	push de
04111B E5          2547   	push hl
04111C             2548   
04111C             2549   	vdu 19
04111C 3E 13       0001M  		LD	A, function
04111E 49 D7       0002M  		RST.LIS	10h
041120 E5          2550   	push hl
041121 21 20 3B 04 2551   	ld hl,color_byte
041125 7E          2552   	ld a,(hl)
041126 E1          2553   	pop hl
041127             2554   	vdu_a
041127 49 D7       0001M  		RST.LIS	10h
041129             2555   	vdu 255
041129 3E FF       0001M  		LD	A, function
04112B 49 D7       0002M  		RST.LIS	10h
04112D             2556   
04112D E1          2557   	pop hl
04112E 7D          2558   	ld a,l
04112F             2559   	vdu_a
04112F 49 D7       0001M  		RST.LIS	10h
041131 D1          2560   	pop de
041132 7B          2561   	ld a,e
041133             2562   	vdu_a
041133 49 D7       0001M  		RST.LIS	10h
041135 C1          2563   	pop bc
041136 79          2564   	ld a,c
041137             2565   	vdu_a
041137 49 D7       0001M  		RST.LIS	10h
041139             2566   
041139 C9          2567   	ret
04113A             2568   
04113A             2569   ; save the palette
04113A             2570   fn_save_palette:
04113A C9          2571   	ret
04113B             2572   
04113B             2573   ; load a sprite, giving its full name, with extension
04113B             2574   fn_load_sprite:
04113B             2575   	; clear the filename on the screen
04113B 21 3E 17 04 2576   	ld hl,filename
04113F 06 0C       2577   	ld b,12
041141 AF          2578   	xor a
041142             2579   
041142             2580   ls_clear_filename:
041142 77          2581   	ld (hl),a
041143 23          2582   	inc hl
041144 10 FC       2583   	djnz ls_clear_filename
041146             2584   
041146             2585   	; get filename
041146 CD F7 0D 04 2586   	call fn_input_text8
04114A             2587   
04114A             2588   	; set path to 'sprites/'
04114A 21 4B 17 04 2589   	ld hl,sprite_path
04114E             2590   	moscall mos_cd
04114E 3E 03       0001M  		LD	A, function
041150 49 CF       0002M  		RST.LIS	08h
041152             2591   
041152             2592   	; exit on folder error
041152 FE 00       2593   	cp 0
041154 C2 23 12 04 2594   	jp nz,ls_folder_error
041158             2595   
041158             2596   	; open the file for read
041158 21 3E 17 04 2597   	ld hl,filename
04115C 0E 01       2598   	ld c,fa_open_existing|fa_read
04115E             2599   	moscall mos_fopen
04115E 3E 0A       0001M  		LD	A, function
041160 49 CF       0002M  		RST.LIS	08h
041162             2600   
041162             2601   	; exit on file error
041162 FE 00       2602   	cp 0
041164 CA 51 12 04 2603   	jp z,ls_file_error
041168             2604   
041168             2605   	; filehandle -> C
041168 4F          2606   	ld c,a
041169             2607   
041169             2608   	; get colors count
041169             2609   	moscall mos_fgetc
041169 3E 0C       0001M  		LD	A, function
04116B 49 CF       0002M  		RST.LIS	08h
04116D DA FE 11 04 2610   	jp c,ls_close_error
041171             2611   
041171 FE 41       2612   	cp MAX_COLORS + 1
041173 D2 FE 11 04 2613   	jp nc,ls_close_error
041177             2614   
041177             2615   	; store colors count
041177 21 BD 17 04 2616   	ld hl,colors_count
04117B 77          2617   	ld (hl),a
04117C             2618   
04117C             2619   	; get frames count
04117C             2620   	moscall mos_fgetc
04117C 3E 0C       0001M  		LD	A, function
04117E 49 CF       0002M  		RST.LIS	08h
041180 DA FE 11 04 2621   	jp c,ls_close_error
041184             2622   
041184             2623   	; store frames count
041184 21 BF 17 04 2624   	ld hl,frames_count
041188 77          2625   	ld (hl),a
041189             2626   
041189             2627   	; set last frame as current frame
041189 21 BE 17 04 2628   	ld hl,current_frame
04118D 3D          2629   	dec a
04118E 77          2630   	ld (hl),a
04118F             2631   
04118F             2632   	; get sprite size
04118F             2633   	moscall mos_fgetc
04118F 3E 0C       0001M  		LD	A, function
041191 49 CF       0002M  		RST.LIS	08h
041193 DA FE 11 04 2634   	jp c,ls_close_error
041197             2635   
041197             2636   	; store sprite size
041197 21 C7 16 04 2637   	ld hl,spr_size
04119B 77          2638   	ld (hl),a
04119C             2639   
04119C             2640   	; set 4x4 pixel width
04119C FE 04       2641   	cp SPR44
04119E 20 09       2642   	jr nz,ls_next1
0411A0             2643   
0411A0 21 C6 16 04 2644   	ld hl,pixel_width
0411A4 06 20       2645   	ld b,SPR44_width
0411A6 70          2646   	ld (hl),b
0411A7 18 21       2647   	jr ls_next4
0411A9             2648   
0411A9             2649   ls_next1:
0411A9             2650   	; set 8x8 pixel width
0411A9 FE 08       2651   	cp SPR88
0411AB 20 09       2652   	jr nz,ls_next2
0411AD             2653   
0411AD 21 C6 16 04 2654   	ld hl,pixel_width
0411B1 06 10       2655   	ld b,SPR88_width
0411B3 70          2656   	ld (hl),b
0411B4 18 14       2657   	jr ls_next4
0411B6             2658   
0411B6             2659   ls_next2:
0411B6             2660   
0411B6             2661   	; set 16x16 pixel width
0411B6 FE 10       2662   	cp SPR1616
0411B8 20 09       2663   	jr nz,ls_next3
0411BA             2664   
0411BA 21 C6 16 04 2665   	ld hl,pixel_width
0411BE 06 08       2666   	ld b,SPR1616_width
0411C0 70          2667   	ld (hl),b
0411C1 18 07       2668   	jr ls_next4
0411C3             2669   
0411C3             2670   ls_next3:
0411C3             2671   
0411C3 21 C6 16 04 2672   	ld hl,pixel_width
0411C7 06 04       2673   	ld b,SPR3232_width
0411C9 70          2674   	ld (hl),b
0411CA             2675   
0411CA             2676   ls_next4:
0411CA 21 00 00 00 2677   	ld hl,#000000
0411CE 6F          2678   	ld l,a
0411CF 67          2679   	ld h,a
0411D0 ED 6C       2680   	mlt hl ; HL = sprite length
0411D2 E5          2681   	push hl
0411D3             2682   
0411D3             2683   	; get frames count
0411D3 21 BE 17 04 2684   	ld hl,current_frame
0411D7 46          2685   	ld b,(hl)
0411D8             2686   
0411D8 E1          2687   	pop hl
0411D9             2688   
0411D9 78          2689   	ld a,b
0411DA FE 00       2690   	cp 0
0411DC 28 07       2691   	jr z,ls_read_data
0411DE             2692   
0411DE             2693   	; de = size²
0411DE 11 00 04 00 2694   	ld de,ONE_FRAME_BUFFER_SIZE
0411E2             2695   ls_add_length:
0411E2 19          2696   	add hl,de
0411E3 10 FD       2697   	djnz ls_add_length
0411E5             2698   
0411E5             2699   ls_read_data:
0411E5 E5          2700   	push hl
0411E6 E5          2701   	push hl
0411E7 D1          2702   	pop de
0411E8 7B          2703   	ld a,e
0411E9 21 C7 17 04 2704   	ld hl,sprite_buffer
0411ED             2705   	moscall mos_fread
0411ED 3E 1A       0001M  		LD	A, function
0411EF 49 CF       0002M  		RST.LIS	08h
0411F1 E1          2706   	pop hl
0411F2 7C          2707   	ld a,h
0411F3 BA          2708   	cp d
0411F4 20 08       2709   	jr nz,ls_close_error
0411F6 7D          2710   	ld a,l
0411F7 BB          2711   	cp e
0411F8 20 04       2712   	jr nz,ls_close_error
0411FA C3 2B 12 04 2713   	jp ls_close
0411FE             2714   
0411FE             2715   ls_close_error:
0411FE C5          2716   	push bc
0411FF             2717   
0411FF             2718   	; read error
0411FF CD AA 14 04 2719   	call fn_print_file_error
041203             2720   
041203 C1          2721   	pop bc
041204             2722   
041204             2723   	; close the file
041204             2724   	moscall mos_fclose
041204 3E 0B       0001M  		LD	A, function
041206 49 CF       0002M  		RST.LIS	08h
041208             2725   
041208             2726   	; set path to home
041208 21 5C 17 04 2727   	ld hl,back_path
04120C             2728   	moscall mos_cd
04120C 3E 03       0001M  		LD	A, function
04120E 49 CF       0002M  		RST.LIS	08h
041210             2729   
041210             2730   	; exit on error
041210 FE 00       2731   	cp 0
041212 C2 23 12 04 2732   	jp nz,ls_folder_error
041216             2733   
041216             2734   
041216             2735   	; reset current frame and coordinates of the drawing pixel
041216 21 C2 16 04 2736   	ld hl,xpix
04121A AF          2737   	xor a
04121B 77          2738   	ld (hl),a
04121C 21 C3 16 04 2739   	ld hl,ypix
041220 77          2740   	ld (hl),a
041221 18 25       2741   	jr ls_exit
041223             2742   
041223             2743   ls_folder_error:
041223             2744   	; write error
041223 CD E1 14 04 2745   	call fn_print_folder_error
041227 C3 48 12 04 2746   	jp ls_exit
04122B             2747   
04122B             2748   ls_close:
04122B             2749   	; close the file
04122B             2750   	moscall mos_fclose
04122B 3E 0B       0001M  		LD	A, function
04122D 49 CF       0002M  		RST.LIS	08h
04122F             2751   
04122F             2752   	; set path to home
04122F 21 5C 17 04 2753   	ld hl,back_path
041233             2754   	moscall mos_cd
041233 3E 03       0001M  		LD	A, function
041235 49 CF       0002M  		RST.LIS	08h
041237             2755   
041237             2756   	; exit on error
041237 FE 00       2757   	cp 0
041239 C2 23 12 04 2758   	jp nz,ls_folder_error
04123D             2759   
04123D             2760   	; reset current frame and coordinates of the drawing pixel
04123D 21 C2 16 04 2761   	ld hl,xpix
041241 AF          2762   	xor a
041242 77          2763   	ld (hl),a
041243 21 C3 16 04 2764   	ld hl,ypix
041247 77          2765   	ld (hl),a
041248             2766   
041248             2767   ls_exit:
041248 CD F9 15 04 2768   	call fn_show_spr_descr
04124C CD B4 15 04 2769   	call fn_change_frames_count
041250 C9          2770   	ret
041251             2771   
041251             2772   ls_file_error:
041251 CD AA 14 04 2773   	call fn_print_file_error
041255             2774   
041255             2775   	; set path to home
041255 21 5C 17 04 2776   	ld hl,back_path
041259             2777   	moscall mos_cd
041259 3E 03       0001M  		LD	A, function
04125B 49 CF       0002M  		RST.LIS	08h
04125D             2778   
04125D             2779   	; exit on error
04125D FE 00       2780   	cp 0
04125F C2 23 12 04 2781   	jp nz,ls_folder_error
041263             2782   
041263 C9          2783   	ret
041264             2784   
041264             2785   ; save a sprite, giving its name
041264             2786   fn_save_sprite:
041264             2787   	; clear filename on the screen
041264 21 3E 17 04 2788   	ld hl,filename
041268 06 0C       2789   	ld b,12
04126A AF          2790   	xor a
04126B             2791   
04126B             2792   ss_clear_filename:
04126B 77          2793   	ld (hl),a
04126C 23          2794   	inc hl
04126D 10 FC       2795   	djnz ss_clear_filename
04126F             2796   
04126F             2797   	; get filename
04126F CD F7 0D 04 2798   	call fn_input_text8
041273             2799   
041273             2800   	; set path to sprite path
041273 21 4B 17 04 2801   	ld hl,sprite_path
041277             2802   	moscall mos_cd
041277 3E 03       0001M  		LD	A, function
041279 49 CF       0002M  		RST.LIS	08h
04127B             2803   
04127B             2804   	; create it on error
04127B FE 00       2805   	cp 0
04127D F5          2806   	push af
04127E C4 8E 16 04 2807   	call nz,fn_create_sprite_folder
041282 F1          2808   	pop af
041283 28 08       2809   	jr z,ss_next
041285             2810   
041285             2811   	; set path to sprite path
041285 21 4B 17 04 2812   	ld hl,sprite_path
041289             2813   	moscall mos_cd
041289 3E 03       0001M  		LD	A, function
04128B 49 CF       0002M  		RST.LIS	08h
04128D             2814   
04128D             2815   ss_next:
04128D             2816   
04128D             2817   	; exit on error
04128D FE 00       2818   	cp 0
04128F C2 1F 13 04 2819   	jp nz,ss_folder_error
041293             2820   
041293             2821   	; open the file for write
041293 21 3E 17 04 2822   	ld hl,filename
041297 0E 0A       2823   	ld c,fa_create_always|fa_write
041299             2824   	moscall mos_fopen
041299 3E 0A       0001M  		LD	A, function
04129B 49 CF       0002M  		RST.LIS	08h
04129D             2825   
04129D             2826   	; exit on error
04129D FE 00       2827   	cp 0
04129F CA 50 13 04 2828   	jp z,ss_file_error
0412A3             2829   
0412A3             2830   	; filehandle -> C
0412A3 4F          2831   	ld c,a
0412A4             2832   
0412A4             2833   	; store colors count in the file
0412A4 06 40       2834   	ld b,MAX_COLORS
0412A6             2835   	moscall mos_fputc
0412A6 3E 0D       0001M  		LD	A, function
0412A8 49 CF       0002M  		RST.LIS	08h
0412AA             2836   
0412AA             2837   	; store frames count in the file
0412AA 21 BF 17 04 2838   	ld hl,frames_count
0412AE 46          2839   	ld b,(hl)
0412AF             2840   	moscall mos_fputc
0412AF 3E 0D       0001M  		LD	A, function
0412B1 49 CF       0002M  		RST.LIS	08h
0412B3             2841   
0412B3             2842   	; store sprite size in the file
0412B3 21 C7 16 04 2843   	ld hl,spr_size
0412B7 46          2844   	ld b,(hl)
0412B8             2845   	moscall mos_fputc
0412B8 3E 0D       0001M  		LD	A, function
0412BA 49 CF       0002M  		RST.LIS	08h
0412BC             2846   
0412BC             2847   	; de = size²
0412BC 21 00 00 00 2848   	ld hl,#000000
0412C0 68          2849   	ld l,b
0412C1 60          2850   	ld h,b
0412C2 ED 6C       2851   	mlt hl ; HL = sprite length
0412C4 E5          2852   	push hl
0412C5             2853   
0412C5             2854   	; get frames count
0412C5 21 BE 17 04 2855   	ld hl,current_frame
0412C9 46          2856   	ld b,(hl)
0412CA             2857   
0412CA E1          2858   	pop hl
0412CB             2859   
0412CB 78          2860   	ld a,b
0412CC FE 00       2861   	cp 0
0412CE 28 07       2862   	jr z,ss_write_data
0412D0             2863   
0412D0 11 00 04 00 2864   	ld de,ONE_FRAME_BUFFER_SIZE
0412D4             2865   ss_add_length:
0412D4 19          2866   	add hl,de
0412D5 10 FD       2867   	djnz ss_add_length
0412D7             2868   
0412D7             2869   ss_write_data:
0412D7 E5          2870   	push hl
0412D8 E5          2871   	push hl
0412D9 D1          2872   	pop de
0412DA 21 C7 17 04 2873   	ld hl,sprite_buffer
0412DE             2874   	moscall mos_fwrite
0412DE 3E 1B       0001M  		LD	A, function
0412E0 49 CF       0002M  		RST.LIS	08h
0412E2 E1          2875   	pop hl
0412E3 7C          2876   	ld a,h
0412E4 BA          2877   	cp d
0412E5 20 08       2878   	jr nz,ss_close_error
0412E7 7D          2879   	ld a,l
0412E8 BB          2880   	cp e
0412E9 20 04       2881   	jr nz,ss_close_error
0412EB C3 27 13 04 2882   	jp ss_close
0412EF             2883   
0412EF             2884   ss_close_error:
0412EF C5          2885   	push bc
0412F0             2886   
0412F0             2887   	; write error
0412F0 CD AA 14 04 2888   	call fn_print_file_error
0412F4             2889   
0412F4 C1          2890   	pop bc
0412F5             2891   
0412F5             2892   	; close the file
0412F5             2893   	moscall mos_fclose
0412F5 3E 0B       0001M  		LD	A, function
0412F7 49 CF       0002M  		RST.LIS	08h
0412F9             2894   
0412F9             2895   	; set path to home
0412F9 21 5C 17 04 2896   	ld hl,back_path
0412FD             2897   	moscall mos_cd
0412FD 3E 03       0001M  		LD	A, function
0412FF 49 CF       0002M  		RST.LIS	08h
041301             2898   
041301             2899   	; exit on error
041301 FE 00       2900   	cp 0
041303 C2 1F 13 04 2901   	jp nz,ss_folder_error
041307             2902   
041307             2903   	; reset current frame and coordinates of the drawing pixel
041307 21 BF 17 04 2904   	ld hl,frames_count
04130B 7E          2905   	ld a,(hl)
04130C 3D          2906   	dec a
04130D 21 BE 17 04 2907   	ld hl,current_frame
041311 77          2908   	ld (hl),a
041312 21 C2 16 04 2909   	ld hl,xpix
041316 AF          2910   	xor a
041317 77          2911   	ld (hl),a
041318 21 C3 16 04 2912   	ld hl,ypix
04131C 77          2913   	ld (hl),a
04131D 18 30       2914   	jr ss_exit
04131F             2915   
04131F             2916   ss_folder_error:
04131F             2917   	; write error
04131F CD E1 14 04 2918   	call fn_print_folder_error
041323 C3 4F 13 04 2919   	jp ss_exit
041327             2920   
041327             2921   ss_close:
041327             2922   	; close the file
041327             2923   	moscall mos_fclose
041327 3E 0B       0001M  		LD	A, function
041329 49 CF       0002M  		RST.LIS	08h
04132B             2924   
04132B             2925   	; set path to home
04132B 21 5C 17 04 2926   	ld hl,back_path
04132F             2927   	moscall mos_cd
04132F 3E 03       0001M  		LD	A, function
041331 49 CF       0002M  		RST.LIS	08h
041333             2928   
041333             2929   	; exit on error
041333 FE 00       2930   	cp 0
041335 C2 1F 13 04 2931   	jp nz,ss_folder_error
041339             2932   
041339             2933   	; reset current frame and coordinates of the drawing pixel
041339 21 BF 17 04 2934   	ld hl,frames_count
04133D 7E          2935   	ld a,(hl)
04133E 3D          2936   	dec a
04133F 21 BE 17 04 2937   	ld hl,current_frame
041343 77          2938   	ld (hl),a
041344 21 C2 16 04 2939   	ld hl,xpix
041348 AF          2940   	xor a
041349 77          2941   	ld (hl),a
04134A 21 C3 16 04 2942   	ld hl,ypix
04134E 77          2943   	ld (hl),a
04134F             2944   
04134F             2945   ss_exit:
04134F C9          2946   	ret
041350             2947   
041350             2948   ss_file_error:
041350 CD AA 14 04 2949   	call fn_print_file_error
041354             2950   
041354             2951   	; set path to home
041354 21 5C 17 04 2952   	ld hl,back_path
041358             2953   	moscall mos_cd
041358 3E 03       0001M  		LD	A, function
04135A 49 CF       0002M  		RST.LIS	08h
04135C             2954   
04135C             2955   	; exit on error
04135C FE 00       2956   	cp 0
04135E C2 1F 13 04 2957   	jp nz,ss_folder_error
041362 C9          2958   	ret
041363             2959   
041363             2960   ; export sprite data in assembly language, giving its name
041363             2961   fn_export_sprite:
041363             2962   	; clear filename
041363 21 3E 17 04 2963   	ld hl,filename
041367 06 0C       2964   	ld b,12
041369 AF          2965   	xor a
04136A             2966   
04136A             2967   es_clear_filename:
04136A 77          2968   	ld (hl),a
04136B 23          2969   	inc hl
04136C 10 FC       2970   	djnz es_clear_filename
04136E             2971   
04136E             2972   	; get filename
04136E CD F7 0D 04 2973   	call fn_input_text8
041372             2974   
041372             2975   	; set path to sprite path
041372 21 4B 17 04 2976   	ld hl,sprite_path
041376             2977   	moscall mos_cd
041376 3E 03       0001M  		LD	A, function
041378 49 CF       0002M  		RST.LIS	08h
04137A             2978   
04137A             2979   	; create it on error
04137A FE 00       2980   	cp 0
04137C F5          2981   	push af
04137D C4 8E 16 04 2982   	call nz,fn_create_sprite_folder
041381 F1          2983   	pop af
041382 28 0E       2984   	jr z,es_next
041384             2985   
041384             2986   	; set path to sprite path
041384 21 4B 17 04 2987   	ld hl,sprite_path
041388             2988   	moscall mos_cd
041388 3E 03       0001M  		LD	A, function
04138A 49 CF       0002M  		RST.LIS	08h
04138C             2989   
04138C             2990   	; exit on error
04138C FE 00       2991   	cp 0
04138E C2 8E 14 04 2992   	jp nz,es_folder_error
041392             2993   
041392             2994   es_next:
041392             2995   	; open the file for write
041392 21 3E 17 04 2996   	ld hl,filename
041396 0E 0A       2997   	ld c,fa_create_always|fa_write
041398             2998   	moscall mos_fopen
041398 3E 0A       0001M  		LD	A, function
04139A 49 CF       0002M  		RST.LIS	08h
04139C             2999   
04139C             3000   	; exit on error
04139C FE 00       3001   	cp 0
04139E CA 97 14 04 3002   	jp z,es_file_error
0413A2             3003   
0413A2             3004   	; filehandle -> C
0413A2 4F          3005   	ld c,a
0413A3             3006   
0413A3             3007   
0413A3             3008   	; L = first frame
0413A3 3E 00       3009   	ld a,0
0413A5 21 C7 17 04 3010   	ld hl,sprite_buffer
0413A9 11 00 00 00 3011   	ld de,$000000
0413AD             3012   
0413AD             3013   es_frames_repeat:
0413AD F5          3014   	push af
0413AE E5          3015   	push hl
0413AF             3016   
0413AF F5          3017   	push af
0413B0             3018   
0413B0             3019   	; start to write...
0413B0 1E 00       3020   	ld e,0 ; rows
0413B2             3021   
0413B2 06 3B       3022   	ld b,';'
0413B4             3023   	moscall mos_fputc
0413B4 3E 0D       0001M  		LD	A, function
0413B6 49 CF       0002M  		RST.LIS	08h
0413B8             3024   
0413B8 06 20       3025   	ld b,' '
0413BA             3026   	moscall mos_fputc
0413BA 3E 0D       0001M  		LD	A, function
0413BC 49 CF       0002M  		RST.LIS	08h
0413BE             3027   
0413BE 06 46       3028   	ld b,'F'
0413C0             3029   	moscall mos_fputc
0413C0 3E 0D       0001M  		LD	A, function
0413C2 49 CF       0002M  		RST.LIS	08h
0413C4             3030   
0413C4 06 72       3031   	ld b,'r'
0413C6             3032   	moscall mos_fputc
0413C6 3E 0D       0001M  		LD	A, function
0413C8 49 CF       0002M  		RST.LIS	08h
0413CA             3033   
0413CA 06 6D       3034   	ld b,'m'
0413CC             3035   	moscall mos_fputc
0413CC 3E 0D       0001M  		LD	A, function
0413CE 49 CF       0002M  		RST.LIS	08h
0413D0             3036   
0413D0 06 20       3037   	ld b,' '
0413D2             3038   	moscall mos_fputc
0413D2 3E 0D       0001M  		LD	A, function
0413D4 49 CF       0002M  		RST.LIS	08h
0413D6             3039   
0413D6 F1          3040   	pop af
0413D7 C6 30       3041   	add a,'0'
0413D9 47          3042   	ld b,a
0413DA             3043   	moscall mos_fputc
0413DA 3E 0D       0001M  		LD	A, function
0413DC 49 CF       0002M  		RST.LIS	08h
0413DE             3044   
0413DE 06 0D       3045   	ld b,13
0413E0             3046   	moscall mos_fputc
0413E0 3E 0D       0001M  		LD	A, function
0413E2 49 CF       0002M  		RST.LIS	08h
0413E4             3047   
0413E4 06 0A       3048   	ld b,10
0413E6             3049   	moscall mos_fputc
0413E6 3E 0D       0001M  		LD	A, function
0413E8 49 CF       0002M  		RST.LIS	08h
0413EA             3050   
0413EA             3051   es_repeat:
0413EA             3052   
0413EA 06 44       3053   	ld b,'D'
0413EC             3054   	moscall mos_fputc
0413EC 3E 0D       0001M  		LD	A, function
0413EE 49 CF       0002M  		RST.LIS	08h
0413F0             3055   
0413F0 06 42       3056   	ld b,'B'
0413F2             3057   	moscall mos_fputc
0413F2 3E 0D       0001M  		LD	A, function
0413F4 49 CF       0002M  		RST.LIS	08h
0413F6             3058   
0413F6 06 20       3059   	ld b,' '
0413F8             3060   	moscall mos_fputc
0413F8 3E 0D       0001M  		LD	A, function
0413FA 49 CF       0002M  		RST.LIS	08h
0413FC             3061   
0413FC 16 00       3062   	ld d,0 ; columns
0413FE             3063   
0413FE             3064   es_repeat_line:
0413FE D5          3065   	push de
0413FF             3066   
0413FF 7E          3067   	ld a,(hl)
041400 23          3068   	inc hl
041401             3069   
041401             3070   	; convert A to BCD
041401 CD 9E 16 04 3071   	call fn_hex2bcd
041405             3072   
041405             3073   	; write two numbers (chars)
041405 5F          3074   	ld e,a
041406 E6 F0       3075   	and $f0
041408 0F          3076   	rrca
041409 0F          3077   	rrca
04140A 0F          3078   	rrca
04140B 0F          3079   	rrca
04140C C6 30       3080   	add '0'
04140E             3081   
04140E 47          3082   	ld b,a
04140F             3083   	moscall mos_fputc
04140F 3E 0D       0001M  		LD	A, function
041411 49 CF       0002M  		RST.LIS	08h
041413             3084   
041413 7B          3085   	ld a,e
041414 E6 0F       3086   	and $0f
041416 C6 30       3087   	add '0'
041418             3088   
041418 47          3089   	ld b,a
041419             3090   	moscall mos_fputc
041419 3E 0D       0001M  		LD	A, function
04141B 49 CF       0002M  		RST.LIS	08h
04141D             3091   
04141D D1          3092   	pop de
04141E 14          3093   	inc d
04141F 3A C7 16 04 3094   	ld a,(spr_size)
041423 BA          3095   	cp d
041424 F5          3096   	push af
041425 C4 97 16 04 3097   	call nz,fn_comma
041429 F1          3098   	pop af
04142A C2 FE 13 04 3099   	jp nz,es_repeat_line
04142E             3100   
04142E 06 0D       3101   	ld b,13 ; CR
041430             3102   	moscall mos_fputc
041430 3E 0D       0001M  		LD	A, function
041432 49 CF       0002M  		RST.LIS	08h
041434             3103   
041434 06 0A       3104   	ld b,10 ; LF
041436             3105   	moscall mos_fputc
041436 3E 0D       0001M  		LD	A, function
041438 49 CF       0002M  		RST.LIS	08h
04143A             3106   
04143A 1C          3107   	inc e
04143B 3A C7 16 04 3108   	ld a,(spr_size)
04143F BB          3109   	cp e
041440 C2 EA 13 04 3110   	jp nz,es_repeat
041444             3111   
041444 06 0D       3112   	ld b,13 ; CR
041446             3113   	moscall mos_fputc
041446 3E 0D       0001M  		LD	A, function
041448 49 CF       0002M  		RST.LIS	08h
04144A             3114   
04144A 06 0A       3115   	ld b,10 ; LF
04144C             3116   	moscall mos_fputc
04144C 3E 0D       0001M  		LD	A, function
04144E 49 CF       0002M  		RST.LIS	08h
041450             3117   
041450 E1          3118   	pop hl
041451 D5          3119   	push de
041452 ED 5C       3120   	mlt de
041454 19          3121   	add hl,de
041455 D1          3122   	pop de
041456 F1          3123   	pop af
041457 3C          3124   	inc a
041458 DD 21 BF 17 3125   	ld ix,frames_count
       04          
04145D DD BE 00    3126   	cp (ix+0)
041460 C2 AD 13 04 3127   	jp nz,es_frames_repeat
041464             3128   
041464             3129   	; close the file
041464             3130   	moscall mos_fclose
041464 3E 0B       0001M  		LD	A, function
041466 49 CF       0002M  		RST.LIS	08h
041468             3131   
041468             3132   	; set path to home
041468 21 5C 17 04 3133   	ld hl,back_path
04146C             3134   	moscall mos_cd
04146C 3E 03       0001M  		LD	A, function
04146E 49 CF       0002M  		RST.LIS	08h
041470             3135   
041470             3136   	; exit on error
041470 FE 00       3137   	cp 0
041472 C2 8E 14 04 3138   	jp nz,es_folder_error
041476             3139   
041476             3140   	; reset current frame and coordinates of the drawing pixel
041476 21 BF 17 04 3141   	ld hl,frames_count
04147A 7E          3142   	ld a,(hl)
04147B 3D          3143   	dec a
04147C 21 BE 17 04 3144   	ld hl,current_frame
041480 77          3145   	ld (hl),a
041481 21 C2 16 04 3146   	ld hl,xpix
041485 AF          3147   	xor a
041486 77          3148   	ld (hl),a
041487 21 C3 16 04 3149   	ld hl,ypix
04148B 77          3150   	ld (hl),a
04148C 18 08       3151   	jr es_exit
04148E             3152   
04148E             3153   es_folder_error:
04148E             3154   	; write error
04148E CD E1 14 04 3155   	call fn_print_folder_error
041492 C3 96 14 04 3156   	jp es_exit
041496             3157   
041496             3158   es_exit:
041496 C9          3159   	ret
041497             3160   
041497             3161   es_file_error:
041497 CD AA 14 04 3162   	call fn_print_file_error
04149B             3163   
04149B             3164   	; set path to home
04149B 21 5C 17 04 3165   	ld hl,back_path
04149F             3166   	moscall mos_cd
04149F 3E 03       0001M  		LD	A, function
0414A1 49 CF       0002M  		RST.LIS	08h
0414A3             3167   
0414A3             3168   	; exit on error
0414A3 FE 00       3169   	cp 0
0414A5 C2 8E 14 04 3170   	jp nz,es_folder_error
0414A9 C9          3171   	ret
0414AA             3172   
0414AA             3173   ; print 'file error'
0414AA             3174   fn_print_file_error:
0414AA             3175   	vdu 7
0414AA 3E 07       0001M  		LD	A, function
0414AC 49 D7       0002M  		RST.LIS	10h
0414AE             3176   
0414AE             3177   	; locate x,y
0414AE             3178   	vdu 31
0414AE 3E 1F       0001M  		LD	A, function
0414B0 49 D7       0002M  		RST.LIS	10h
0414B2             3179   	vdu FILENAME_X
0414B2 3E 07       0001M  		LD	A, function
0414B4 49 D7       0002M  		RST.LIS	10h
0414B6             3180   	vdu FILENAME_Y
0414B6 3E 18       0001M  		LD	A, function
0414B8 49 D7       0002M  		RST.LIS	10h
0414BA             3181   
0414BA             3182   	; print text
0414BA 21 78 17 04 3183   	ld hl,file_error
0414BE 01 00 00 00 3184   	ld bc,0
0414C2 AF          3185   	xor a
0414C3 49 DF       3186   	rst.lis $18
0414C5             3187   
0414C5 CD F0 0D 04 3188   	call fn_input_key
0414C9             3189   
0414C9             3190   	; locate x,y
0414C9             3191   	vdu 31
0414C9 3E 1F       0001M  		LD	A, function
0414CB 49 D7       0002M  		RST.LIS	10h
0414CD             3192   	vdu FILENAME_X
0414CD 3E 07       0001M  		LD	A, function
0414CF 49 D7       0002M  		RST.LIS	10h
0414D1             3193   	vdu FILENAME_Y
0414D1 3E 18       0001M  		LD	A, function
0414D3 49 D7       0002M  		RST.LIS	10h
0414D5             3194   
0414D5             3195   	; print text
0414D5 21 61 17 04 3196   	ld hl,void_filename
0414D9 01 00 00 00 3197   	ld bc,0
0414DD AF          3198   	xor a
0414DE 49 DF       3199   	rst.lis $18
0414E0             3200   
0414E0 C9          3201   	ret
0414E1             3202   
0414E1             3203   ; print 'folder error'
0414E1             3204   fn_print_folder_error:
0414E1             3205   	vdu 7
0414E1 3E 07       0001M  		LD	A, function
0414E3 49 D7       0002M  		RST.LIS	10h
0414E5             3206   
0414E5             3207   	; locate x,y
0414E5             3208   	vdu 31
0414E5 3E 1F       0001M  		LD	A, function
0414E7 49 D7       0002M  		RST.LIS	10h
0414E9             3209   	vdu FILENAME_X
0414E9 3E 07       0001M  		LD	A, function
0414EB 49 D7       0002M  		RST.LIS	10h
0414ED             3210   	vdu FILENAME_Y
0414ED 3E 18       0001M  		LD	A, function
0414EF 49 D7       0002M  		RST.LIS	10h
0414F1             3211   
0414F1             3212   	; print text
0414F1 21 8F 17 04 3213   	ld hl,folder_error
0414F5 01 00 00 00 3214   	ld bc,0
0414F9 AF          3215   	xor a
0414FA 49 DF       3216   	rst.lis $18
0414FC             3217   
0414FC CD F0 0D 04 3218   	call fn_input_key
041500             3219   
041500             3220   	; locate x,y
041500             3221   	vdu 31
041500 3E 1F       0001M  		LD	A, function
041502 49 D7       0002M  		RST.LIS	10h
041504             3222   	vdu FILENAME_X
041504 3E 07       0001M  		LD	A, function
041506 49 D7       0002M  		RST.LIS	10h
041508             3223   	vdu FILENAME_Y
041508 3E 18       0001M  		LD	A, function
04150A 49 D7       0002M  		RST.LIS	10h
04150C             3224   
04150C             3225   	; print text
04150C 21 61 17 04 3226   	ld hl,void_filename
041510 01 00 00 00 3227   	ld bc,0
041514 AF          3228   	xor a
041515 49 DF       3229   	rst.lis $18
041517             3230   
041517 C9          3231   	ret
041518             3232   
041518             3233   ; print 'header error'
041518             3234   fn_print_header_error:
041518             3235   	vdu 7
041518 3E 07       0001M  		LD	A, function
04151A 49 D7       0002M  		RST.LIS	10h
04151C             3236   
04151C             3237   	; locate x,y
04151C             3238   	vdu 31
04151C 3E 1F       0001M  		LD	A, function
04151E 49 D7       0002M  		RST.LIS	10h
041520             3239   	vdu FILENAME_X
041520 3E 07       0001M  		LD	A, function
041522 49 D7       0002M  		RST.LIS	10h
041524             3240   	vdu FILENAME_Y
041524 3E 18       0001M  		LD	A, function
041526 49 D7       0002M  		RST.LIS	10h
041528             3241   
041528             3242   	; print text
041528 21 A6 17 04 3243   	ld hl,header_error
04152C 01 00 00 00 3244   	ld bc,0
041530 AF          3245   	xor a
041531 49 DF       3246   	rst.lis $18
041533             3247   
041533 CD F0 0D 04 3248   	call fn_input_key
041537             3249   
041537             3250   	; locate x,y
041537             3251   	vdu 31
041537 3E 1F       0001M  		LD	A, function
041539 49 D7       0002M  		RST.LIS	10h
04153B             3252   	vdu FILENAME_X
04153B 3E 07       0001M  		LD	A, function
04153D 49 D7       0002M  		RST.LIS	10h
04153F             3253   	vdu FILENAME_Y
04153F 3E 18       0001M  		LD	A, function
041541 49 D7       0002M  		RST.LIS	10h
041543             3254   
041543             3255   	; print text
041543 21 61 17 04 3256   	ld hl,void_filename
041547 01 00 00 00 3257   	ld bc,0
04154B AF          3258   	xor a
04154C 49 DF       3259   	rst.lis $18
04154E             3260   
04154E C9          3261   	ret
04154F             3262   
04154F             3263   ; refresh all the current sprite frame
04154F             3264   fn_refresh_sprite:
04154F 06 00       3265   	ld b,0 ; B -> x cordinate
041551 0E 00       3266   	ld c,0 ; C -> y cordinate
041553             3267   
041553             3268   rs_loop:
041553 C5          3269   	push bc
041554             3270   
041554 21 C2 16 04 3271   	ld hl,xpix
041558 70          3272   	ld (hl),b
041559 21 C3 16 04 3273   	ld hl,ypix
04155D 71          3274   	ld (hl),c
04155E CD 82 0C 04 3275   	call fn_draw_pixel_without_border
041562             3276   
041562 C1          3277   	pop bc
041563             3278   
041563 04          3279   	inc b
041564 21 C7 16 04 3280   	ld hl,spr_size
041568 7E          3281   	ld a,(hl)
041569 B8          3282   	cp b
04156A 28 04       3283   	jr z,rs_next_line
04156C C3 53 15 04 3284   	jp rs_loop
041570             3285   
041570             3286   rs_next_line:
041570 06 00       3287   	ld b,0
041572 0C          3288   	inc c
041573 21 C7 16 04 3289   	ld hl,spr_size
041577 7E          3290   	ld a,(hl)
041578 B9          3291   	cp c
041579 28 04       3292   	jr z,rs_end
04157B C3 53 15 04 3293   	jp rs_loop
04157F             3294   
04157F             3295   rs_end:
04157F AF          3296   	xor a
041580 21 C2 16 04 3297   	ld hl,xpix
041584 77          3298   	ld (hl),a
041585 21 C3 16 04 3299   	ld hl,ypix
041589 77          3300   	ld (hl),a
04158A CD 6E 0C 04 3301   	call fn_draw_pixel_with_border
04158E             3302   
04158E C9          3303   	ret
04158F             3304   
04158F             3305   fn_change_frame:
04158F 21 BE 17 04 3306   	ld hl,current_frame
041593 7E          3307   	ld a,(hl)
041594 3C          3308   	inc a
041595 C6 30       3309   	add a,48
041597 21 C0 17 04 3310   	ld hl,current_frame_ascii
04159B 77          3311   	ld (hl),a
04159C             3312   
04159C             3313   	; locate 21,3
04159C             3314   	vdu 31
04159C 3E 1F       0001M  		LD	A, function
04159E 49 D7       0002M  		RST.LIS	10h
0415A0             3315   	vdu 21
0415A0 3E 15       0001M  		LD	A, function
0415A2 49 D7       0002M  		RST.LIS	10h
0415A4             3316   	vdu 3
0415A4 3E 03       0001M  		LD	A, function
0415A6 49 D7       0002M  		RST.LIS	10h
0415A8             3317   
0415A8             3318   	; print text
0415A8 21 C0 17 04 3319   	ld hl,current_frame_ascii
0415AC 01 00 00 00 3320   	ld bc,0
0415B0 AF          3321   	xor a
0415B1 49 DF       3322   	rst.lis $18
0415B3             3323   
0415B3 C9          3324   	ret
0415B4             3325   
0415B4             3326   fn_change_frames_count:
0415B4 21 BF 17 04 3327   	ld hl,frames_count
0415B8 7E          3328   	ld a,(hl)
0415B9 C6 30       3329   	add a,48
0415BB 21 C2 17 04 3330   	ld hl,frames_count_ascii
0415BF 77          3331   	ld (hl),a
0415C0             3332   
0415C0             3333   	; locate 23,3
0415C0             3334   	vdu 31
0415C0 3E 1F       0001M  		LD	A, function
0415C2 49 D7       0002M  		RST.LIS	10h
0415C4             3335   	vdu 23
0415C4 3E 17       0001M  		LD	A, function
0415C6 49 D7       0002M  		RST.LIS	10h
0415C8             3336   	vdu 3
0415C8 3E 03       0001M  		LD	A, function
0415CA 49 D7       0002M  		RST.LIS	10h
0415CC             3337   
0415CC             3338   	; print text
0415CC 21 C2 17 04 3339   	ld hl,frames_count_ascii
0415D0 01 00 00 00 3340   	ld bc,0
0415D4 AF          3341   	xor a
0415D5 49 DF       3342   	rst.lis $18
0415D7             3343   
0415D7 C9          3344   	ret
0415D8             3345   
0415D8             3346   ; slowdown (wait delay)
0415D8             3347   fn_slowdown:
0415D8 DD 21 C4 17 3348   	ld ix,keydata
       04          
0415DD DD 7E 02    3349   	ld a,(ix+2)
0415E0 E6 02       3350   	and 2
0415E2 FE 02       3351   	cp 2 ; shift key to disable delay
0415E4 C8          3352   	ret z
0415E5             3353   
0415E5             3354   	moscall mos_sysvars
0415E5 3E 08       0001M  		LD	A, function
0415E7 49 CF       0002M  		RST.LIS	08h
0415E9 DD 4E 00    3355   	ld c,(ix+sysvar_time)
0415EC             3356   
0415EC             3357   sd_loop:
0415EC             3358   	moscall mos_sysvars
0415EC 3E 08       0001M  		LD	A, function
0415EE 49 CF       0002M  		RST.LIS	08h
0415F0 DD 7E 00    3359   	ld a,(ix+sysvar_time)
0415F3 91          3360   	sub c
0415F4 FE 14       3361   	cp SLOWDOWN_DELAY
0415F6 20 F4       3362   	jr nz,sd_loop
0415F8 C9          3363   	ret
0415F9             3364   
0415F9             3365   fn_show_spr_descr:
0415F9             3366   	; locate 15,3
0415F9             3367   	vdu 31
0415F9 3E 1F       0001M  		LD	A, function
0415FB 49 D7       0002M  		RST.LIS	10h
0415FD             3368   	vdu 15
0415FD 3E 0F       0001M  		LD	A, function
0415FF 49 D7       0002M  		RST.LIS	10h
041601             3369   	vdu 3
041601 3E 03       0001M  		LD	A, function
041603 49 D7       0002M  		RST.LIS	10h
041605             3370   
041605             3371   	; print text
041605 21 12 17 04 3372   	ld hl,spr_descr
041609 01 00 00 00 3373   	ld bc,0
04160D AF          3374   	xor a
04160E 49 DF       3375   	rst.lis $18
041610             3376   
041610             3377   	; locate 15,5
041610             3378   	vdu 31
041610 3E 1F       0001M  		LD	A, function
041612 49 D7       0002M  		RST.LIS	10h
041614             3379   	vdu 15
041614 3E 0F       0001M  		LD	A, function
041616 49 D7       0002M  		RST.LIS	10h
041618             3380   	vdu 5
041618 3E 05       0001M  		LD	A, function
04161A 49 D7       0002M  		RST.LIS	10h
04161C             3381   
04161C             3382   	; check for sprite size...
04161C 21 C7 16 04 3383   	ld hl,spr_size
041620 7E          3384   	ld a,(hl)
041621             3385   
041621 FE 04       3386   	cp 4
041623 20 0C       3387   	jr nz,ssd_8x8
041625             3388   
041625             3389   	; print text 4x4
041625 21 1C 17 04 3390   	ld hl,spr_descr1
041629 01 00 00 00 3391   	ld bc,0
04162D AF          3392   	xor a
04162E 49 DF       3393   	rst.lis $18
041630 C9          3394   	ret
041631             3395   
041631             3396   ssd_8x8:
041631 FE 08       3397   	cp 8
041633 20 0C       3398   	jr nz,ssd_16x16
041635             3399   
041635             3400   	; print text 8x8
041635 21 22 17 04 3401   	ld hl,spr_descr2
041639 01 00 00 00 3402   	ld bc,0
04163D AF          3403   	xor a
04163E 49 DF       3404   	rst.lis $18
041640 C9          3405   	ret
041641             3406   
041641             3407   ssd_16x16:
041641 FE 10       3408   	cp 16
041643 20 0C       3409   	jr nz,ssd_32x32
041645             3410   
041645             3411   	; print text 16x16
041645 21 28 17 04 3412   	ld hl,spr_descr3
041649 01 00 00 00 3413   	ld bc,0
04164D AF          3414   	xor a
04164E 49 DF       3415   	rst.lis $18
041650 C9          3416   	ret
041651             3417   
041651             3418   ssd_32x32:
041651             3419   	; print text 32x32
041651 21 2E 17 04 3420   	ld hl,spr_descr4
041655 01 00 00 00 3421   	ld bc,0
041659 AF          3422   	xor a
04165A 49 DF       3423   	rst.lis $18
04165C             3424   
04165C C9          3425   	ret
04165D             3426   
04165D             3427   ; input: HL = negative key to check
04165D             3428   fn_inkey:
04165D             3429   	moscall mos_getkbmap
04165D 3E 1E       0001M  		LD	A, function
04165F 49 CF       0002M  		RST.LIS	08h
041661 23          3430   	INC	HL
041662 7D          3431   	LD	A, L
041663 ED 44       3432   	NEG
041665 4F          3433   	LD	C, A
041666 3E 01       3434   	LD	A, 1
041668 FA 8C 16 04 3435   	JP	M,i_false ; < -128 ?
04166C             3436   
04166C 21 45 00 04 3437   	LD	HL,BITLOOKUP
041670 11 00 00 00 3438   	LD	DE,0
041674 79          3439   	LD	A,C
041675 E6 07       3440   	AND	00000111b
041677 5F          3441   	LD	E,A
041678 19          3442   	ADD	HL,DE
041679 46          3443   	LD	B,(HL)
04167A             3444   
04167A 79          3445   	LD	A,C
04167B E6 78       3446   	AND	01111000b
04167D 0F          3447   	RRCA
04167E 0F          3448   	RRCA
04167F 0F          3449   	RRCA
041680 5F          3450   	LD	E, A
041681 DD 19       3451   	ADD	IX,DE
041683 DD 7E 00    3452   	LD	A,(IX+0)
041686 A0          3453   	AND	B
041687 28 03       3454   	JR Z,i_false
041689 3E 01       3455   	LD A,1
04168B C9          3456   	RET
04168C             3457   i_false:
04168C AF          3458   	XOR A
04168D C9          3459   	RET
04168E             3460   
04168E             3461   fn_create_sprite_folder:
04168E 21 4B 17 04 3462   	ld hl,sprite_path
041692             3463   	moscall mos_mkdir
041692 3E 07       0001M  		LD	A, function
041694 49 CF       0002M  		RST.LIS	08h
041696 C9          3464   	ret
041697             3465   
041697             3466   fn_comma:
041697 06 2C       3467   	ld b,','
041699             3468   	moscall mos_fputc
041699 3E 0D       0001M  		LD	A, function
04169B 49 CF       0002M  		RST.LIS	08h
04169D C9          3469   	ret
04169E             3470   
04169E             3471   ; Hex to BCD
04169E             3472   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
04169E             3473   ; Input: a = hex number
04169E             3474   ; Output: a = BCD number
04169E             3475   ; Clobbers: b,c
04169E             3476   fn_hex2bcd:
04169E C5          3477   		push bc
04169F 4F          3478   		ld c,a  ; Original (hex) number
0416A0 06 08       3479   		ld b,8  ; How many bits
0416A2 AF          3480   		xor a   ; Output (BCD) number, starts at 0
0416A3 CB 21       3481   htb:	sla c   ; shift c into carry
0416A5 8F          3482   		adc a,a
0416A6 27          3483   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
0416A7 10 FA       3484   		djnz htb  ; Repeat for 8 bits
0416A9 C1          3485   		pop bc
0416AA C9          3486   		ret
0416AB             3487   
0416AB             3488   fnin_found:
0416AB 3E 01       3489   	ld a,1
0416AD C9          3490   	ret
0416AE             3491   
0416AE             3492   fnin_nine:
0416AE 28 FB       3493   	jr z,fnin_found
0416B0             3494   
0416B0             3495   fnin_not_number:
0416B0 AF          3496   	xor a
0416B1 C9          3497   	ret
0416B2             3498   
0416B2             3499   
0416B2             3500   ;======================================================================
0416B2             3501   
0416B2             3502   ; coordinates for rectangles
0416B2             3503   x1:
0416B2 00 00       3504   	dw $0000
0416B4             3505   y1:
0416B4 00 00       3506   	dw $0000
0416B6             3507   x2:
0416B6 00 00       3508   	dw $0000
0416B8             3509   y2:
0416B8 00 00       3510   	dw $0000
0416BA             3511   
0416BA             3512   ; coordinates of the edited sprite
0416BA             3513   xs1:
0416BA 5F 00       3514   	dw 95
0416BC             3515   ys1:
0416BC 37 00       3516   	dw 55
0416BE             3517   xs2:
0416BE E0 00       3518   	dw 224
0416C0             3519   ys2:
0416C0 B8 00       3520   	dw 184
0416C2             3521   
0416C2             3522   ; coordinates of active pixels to draw
0416C2             3523   xpix:
0416C2 00          3524   	db 0
0416C3             3525   ypix:
0416C3 00          3526   	db 0
0416C4             3527   
0416C4             3528   ; memorized coordinates of active pixels to draw
0416C4             3529   memxpix:
0416C4 00          3530   	db 0
0416C5             3531   memypix:
0416C5 00          3532   	db 0
0416C6             3533   
0416C6             3534   ; width of a pixel in the sprite
0416C6             3535   pixel_width:
0416C6 00          3536   	db 0
0416C7             3537   
0416C7             3538   ; sprite size, in resized pixels
0416C7             3539   spr_size:
0416C7 00          3540   	db 0
0416C8             3541   
0416C8             3542   ; pen color (0-63)
0416C8             3543   current_pen:
0416C8 00          3544   	db 0
0416C9             3545   
0416C9             3546   ; texts for 1st menu
0416C9             3547   title:
0416C9 53 50 52 2D 3548   	db "SPR-EDIT",0
       45 44 49 54 
       00          
0416D2             3549   
0416D2             3550   menu1:
0416D2 46 31 2E 20 3551   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
0416E1             3552   menu2:
0416E1 46 32 2E 20 3553   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
0416F0             3554   menu3:
0416F0 46 33 2E 20 3555   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
041701             3556   menu4:
041701 46 34 2E 20 3557   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
041712             3558   
041712             3559   ; descriptions of sprites
041712             3560   spr_descr:
041712 46 72 61 6D 3561   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
04171C             3562   spr_descr1:
04171C 34 78 34 20 3563   	db "4x4  ",0
       20 00       
041722             3564   spr_descr2:
041722 38 78 38 20 3565   	db "8x8  ",0
       20 00       
041728             3566   spr_descr3:
041728 31 36 78 31 3567   	db "16x16",0
       36 00       
04172E             3568   spr_descr4:
04172E 33 32 78 33 3569   	db "32x32",0
       32 00       
041734             3570   
041734             3571   ; label before filename
041734             3572   filename_label:
041734 46 69 6C 65 3573   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
04173E             3574   
04173E             3575   ; filename without extension
04173E             3576   filename:
04173E 00 00 00 00 3577   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
04174B             3578   
04174B             3579   sprite_path:
04174B 73 70 72 69 3580   	db "sprites",0
       74 65 73 00 
041753             3581   
041753             3582   palette_path:
041753 70 61 6C 65 3583   	db "palettes",0
       74 74 65 73 
       00          
04175C             3584   
04175C             3585   back_path:
04175C 2E 2E 00    3586   	db "..",0
04175F             3587   
04175F             3588   ; single space char to print
04175F             3589   spacechar:
04175F 20 00       3590   	db " ",0
041761             3591   
041761             3592   ; spaces to remove filename label
041761             3593   void_filename:
041761 20 20 20 20 3594   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
041778             3595   
041778             3596   ; file error message
041778             3597   file_error:
041778 46 69 6C 65 3598   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
04178F             3599   
04178F             3600   ; folder error message
04178F             3601   folder_error:
04178F 46 6F 6C 64 3602   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0417A6             3603   
0417A6             3604   ; header error message
0417A6             3605   header_error:
0417A6 48 65 61 64 3606   	db "Header error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0417BD             3607   
0417BD             3608   ; number of colors
0417BD             3609   colors_count:
0417BD 00          3610   	db 0
0417BE             3611   
0417BE             3612   ; current frame
0417BE             3613   current_frame:
0417BE 00          3614   	db 0
0417BF             3615   
0417BF             3616   ; frames count
0417BF             3617   frames_count:
0417BF 00          3618   	db 0
0417C0             3619   
0417C0             3620   current_frame_ascii:
0417C0 30 00       3621   	db '0',0
0417C2             3622   
0417C2             3623   frames_count_ascii:
0417C2 30 00       3624   	db '0',0
0417C4             3625   
0417C4             3626   ; keycode, keydown & keymods are stored here
0417C4             3627   keydata:
0417C4 00 00 00    3628   	db 0,0,0
0417C7             3629   
0417C7             3630   ; buffer for the current sprite
0417C7             3631   sprite_buffer:
0417C7             3632   	ds BUFFER_SIZE
0437C7             3633   
0437C7             3634   header_buffer:
0437C7             3635   	ds HEADER_BUFFER_SIZE
0437D7             3636   
0437D7             3637   palette_buffer:
0437D7             3638   	ds MAX_PAL_DATA + 1
043B1C             3639   
043B1C             3640   temp_chars_buffer:
043B1C 00 00 00 00 3641   	db 0,0,0,0
043B20             3642   
043B20             3643   color_byte:
043B20 00          3644   	db 0
043B21             3645   
043B21             3646   header:
043B21 4A 41 53 43 3647   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043B2B 30 31 30 30 3648   	db "0100",13,10
       0D 0A       
043B31             3649   
043B31             3650   ; buffer to perform some operations
043B31             3651   swap_sprite_buffer:
043B31             3652   	ds ONE_FRAME_BUFFER_SIZE
043F31             3653   
043F31             3654   asm_line:
043F31 44 42 20    3655   	DB "DB "
043F34             3656   
043F34             3657   asm_line_length:
043F34 03          3658   	DB 3
043F35             3659   
043F35             3660   rgb_palette:
043F35 00 00 00    3661   	db $00,$00,$00
043F38 AA 00 00    3662   	db $AA,$00,$00
043F3B 00 AA 00    3663   	db $00,$AA,$00
043F3E AA AA 00    3664   	db $AA,$AA,$00
043F41 00 00 AA    3665   	db $00,$00,$AA
043F44 AA 00 AA    3666   	db $AA,$00,$AA
043F47 00 AA AA    3667   	db $00,$AA,$AA
043F4A AA AA AA    3668   	db $AA,$AA,$AA
043F4D             3669   
043F4D 55 55 55    3670   	db $55,$55,$55
043F50 FF 00 00    3671   	db $FF,$00,$00
043F53 00 FF 00    3672   	db $00,$FF,$00
043F56 FF FF 00    3673   	db $FF,$FF,$00
043F59 00 00 FF    3674   	db $00,$00,$FF
043F5C FF 00 FF    3675   	db $FF,$00,$FF
043F5F 00 FF FF    3676   	db $00,$FF,$FF
043F62 FF FF FF    3677   	db $FF,$FF,$FF
043F65             3678   
043F65 00 00 55    3679   	db $00,$00,$55
043F68 00 55 00    3680   	db $00,$55,$00
043F6B 00 55 55    3681   	db $00,$55,$55
043F6E 00 55 AA    3682   	db $00,$55,$AA
043F71 00 55 FF    3683   	db $00,$55,$FF
043F74 00 AA 55    3684   	db $00,$AA,$55
043F77 00 AA FF    3685   	db $00,$AA,$FF
043F7A 00 FF 55    3686   	db $00,$FF,$55
043F7D             3687   
043F7D 00 FF AA    3688   	db $00,$FF,$AA
043F80 55 00 00    3689   	db $55,$00,$00
043F83 55 00 55    3690   	db $55,$00,$55
043F86 55 00 AA    3691   	db $55,$00,$AA
043F89 55 00 FF    3692   	db $55,$00,$FF
043F8C 55 55 00    3693   	db $55,$55,$00
043F8F 55 55 AA    3694   	db $55,$55,$AA
043F92 55 55 FF    3695   	db $55,$55,$FF
043F95             3696   
043F95 55 AA 00    3697   	db $55,$AA,$00
043F98 55 AA 55    3698   	db $55,$AA,$55
043F9B 55 AA AA    3699   	db $55,$AA,$AA
043F9E 55 AA FF    3700   	db $55,$AA,$FF
043FA1 55 FF 00    3701   	db $55,$FF,$00
043FA4 55 FF 55    3702   	db $55,$FF,$55
043FA7 55 FF AA    3703   	db $55,$FF,$AA
043FAA 55 FF FF    3704   	db $55,$FF,$FF
043FAD             3705   
043FAD AA 00 55    3706   	db $AA,$00,$55
043FB0 AA 00 FF    3707   	db $AA,$00,$FF
043FB3 AA 55 00    3708   	db $AA,$55,$00
043FB6 AA 55 55    3709   	db $AA,$55,$55
043FB9 AA 55 AA    3710   	db $AA,$55,$AA
043FBC AA 55 FF    3711   	db $AA,$55,$FF
043FBF AA AA 55    3712   	db $AA,$AA,$55
043FC2 AA AA FF    3713   	db $AA,$AA,$FF
043FC5             3714   
043FC5 AA FF 00    3715   	db $AA,$FF,$00
043FC8 AA FF 55    3716   	db $AA,$FF,$55
043FCB AA FF AA    3717   	db $AA,$FF,$AA
043FCE AA FF FF    3718   	db $AA,$FF,$FF
043FD1 FF 00 55    3719   	db $FF,$00,$55
043FD4 FF 00 AA    3720   	db $FF,$00,$AA
043FD7 FF 55 00    3721   	db $FF,$55,$00
043FDA FF 55 55    3722   	db $FF,$55,$55
043FDD             3723   
043FDD FF 55 AA    3724   	db $FF,$55,$AA
043FE0 FF 55 FF    3725   	db $FF,$55,$FF
043FE3 FF AA 00    3726   	db $FF,$AA,$00
043FE6 FF AA 55    3727   	db $FF,$AA,$55
043FE9 FF AA AA    3728   	db $FF,$AA,$AA
043FEC FF AA FF    3729   	db $FF,$AA,$FF
043FEF FF FF 55    3730   	db $FF,$FF,$55
043FF2 FF FF AA    3731   	db $FF,$FF,$AA
043FF5             3732   
043FF5             3733   ; sprite structure:
043FF5             3734   ; =================
043FF5             3735   ; colors_count  :   byte
043FF5             3736   ; frames count	:	byte
043FF5             3737   ; spr size		:	byte
043FF5             3738   ; data			:   width x height bytes of colors
