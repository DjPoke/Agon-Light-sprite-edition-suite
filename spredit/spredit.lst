PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   COLOR_MIN:	 		equ 0
040045             0022   COLOR_MAX:	 		equ 63
040045             0023   
040045             0024   MAX_FRAMES:			equ 8
040045             0025   
040045             0026   COLOR_WHITE:		equ 15
040045             0027   COLOR_GREY:			equ 7
040045             0028   COLOR_BLACK:		equ 0
040045             0029   
040045             0030   TITLE_X: 	equ 17
040045             0031   TITLE_Y: 	equ 2
040045             0032   MENU_X: 	equ 13
040045             0033   MENU1_Y: 	equ 8
040045             0034   MENU2_Y: 	equ 12
040045             0035   MENU3_Y: 	equ 16
040045             0036   MENU4_Y: 	equ 20
040045             0037   MENU5_Y: 	equ 24
040045             0038   FILENAME_X: equ 7
040045             0039   FILENAME_Y: equ 24
040045             0040   
040045             0041   SPR44: 		equ 4
040045             0042   SPR88: 		equ 8
040045             0043   SPR1616: 	equ 16
040045             0044   SPR3232: 	equ 32
040045             0045   
040045             0046   SPR44_width: 	equ 32
040045             0047   SPR88_width: 	equ 16
040045             0048   SPR1616_width: 	equ 8
040045             0049   SPR3232_width: 	equ 4
040045             0050   
040045             0051   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0052   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0053   
040045             0054   HEADER_BUFFER_SIZE:		equ 16
040045             0055   
040045             0056   SLOWDOWN_DELAY:	equ 20
040045             0057   
040045             0058   KEY_SPACE: equ -99 ; draw with color
040045             0059   KEY_UP: equ -58 ; move
040045             0060   KEY_DOWN: equ -42
040045             0061   KEY_LEFT: equ -26
040045             0062   KEY_RIGHT: equ -122
040045             0063   KEY_DELETE: equ -90 ; remove color with black
040045             0064   KEY_N: equ -86 ; add a new void frame
040045             0065   KEY_C: equ -83 ; copy current frame to a new frame
040045             0066   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0067   KEY_PGUP: equ -64 ; select frame
040045             0068   KEY_PGDOWN: equ -79
040045             0069   KEY_L: equ -87 ; load sprite
040045             0070   KEY_S: equ -82 ; save sprite
040045             0071   KEY_E: equ -35 ; export sprite as assembler data
040045             0072   KEY_R: equ -52 ; rotate frame clockwise
040045             0073   KEY_F: equ -68 ; flip frame horizontally
040045             0074   KEY_M: equ -102 ; mirror frame vertically
040045             0075   KEY_ESCAPE: equ -113
040045             0076   KEY_F1: equ -114 ; select 4x4 sprite
040045             0077   KEY_F2: equ -115 ; select 8x8 sprite
040045             0078   KEY_F3: equ -116 ; select 16x16 sprite
040045             0079   KEY_F4: equ -21 ; select 32x32 sprite
040045             0080   KEY_RETURN: equ -74 ; floodfill
040045             0081   
040045             0082   ; play mode:
040045             0083   KEY_P:	equ -56 ; switch to play mode
040045             0084   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0085   
040045             0086   ; palette mode:
040045             0087   KEY_TAB: equ -97 ; switch to palette mode
040045             0088   KEY_1:	equ -49 ; red+
040045             0089   KEY_2:	equ -50 ; green+
040045             0090   KEY_3:	equ -18 ; blue+
040045             0091   KEY_4:	equ -19 ; red-
040045             0092   KEY_5:	equ -20 ; green-
040045             0093   KEY_6:	equ -53; blue-
040045             0094   KEY_7:	equ -37 ; reset color to black
040045             0095   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0096   ; KEY_S: save palette file
040045             0097   
040045             0098   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0099   MAX_PAL_DATA_HI: equ 03h
040045             0100   MAX_PAL_DATA_LO: equ 44h
040045             0101   
040045             0102   BITLOOKUP:
040045 01 02 04 08 0103   	DB 01h,02h,04h,08h
040049 10 20 40 80 0104   	DB 10h,20h,40h,80h
04004D             0105   
04004D             0106   ;======================================================================
04004D             0107   start:
04004D F5          0108   	push af
04004E C5          0109   	push bc
04004F D5          0110   	push de
040050 DD E5       0111   	push ix
040052 FD E5       0112   	push iy
040054             0113   
040054             0114   	; set mode 8 (320x240x64)
040054             0115   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0116   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0117   
04005C             0118   	; disable logical scale coordinates system
04005C             0119   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0120   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0121   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0122   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0123   
04006C             0124   	; set text colors
04006C             0125   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0126   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0127   
040074             0128   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0129   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0130   
04007C             0131   	; set graphics pen
04007C             0132   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0133   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0134   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0135   
040088             0136   	; hide cursor
040088             0137   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0138   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0139   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0140   
040094             0141   	; store coordinates
040094 DD 21 2E 17 0142   	ld ix,x1
       04          
040099 21 00 00 00 0143   	ld hl,0
04009D DD 75 00    0144   	ld (ix+0),l
0400A0 DD 74 01    0145   	ld (ix+1),h
0400A3             0146   
0400A3 DD 21 30 17 0147   	ld ix,y1
       04          
0400A8 21 00 00 00 0148   	ld hl,0
0400AC DD 75 00    0149   	ld (ix+0),l
0400AF DD 74 01    0150   	ld (ix+1),h
0400B2             0151   
0400B2 DD 21 32 17 0152   	ld ix,x2
       04          
0400B7 21 3F 01 00 0153   	ld hl,319
0400BB DD 75 00    0154   	ld (ix+0),l
0400BE DD 74 01    0155   	ld (ix+1),h
0400C1             0156   
0400C1 DD 21 34 17 0157   	ld ix,y2
       04          
0400C6 21 EF 00 00 0158   	ld hl,239
0400CA DD 75 00    0159   	ld (ix+0),l
0400CD DD 74 01    0160   	ld (ix+1),h
0400D0             0161   
0400D0             0162   	; draw the border rectangle
0400D0 CD E1 0A 04 0163   	call fn_rect
0400D4             0164   
0400D4             0165   	; locate x,y
0400D4             0166   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0167   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0168   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0169   
0400E0             0170   	; print text
0400E0 21 45 17 04 0171   	ld hl,title
0400E4 01 00 00 00 0172   	ld bc,0
0400E8 AF          0173   	xor a
0400E9 49 DF       0174   	rst.lis $18
0400EB             0175   
0400EB             0176   	; locate x,y
0400EB             0177   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0178   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0179   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0180   
0400F7             0181   	; print text
0400F7 21 4E 17 04 0182   	ld hl,menu1
0400FB 01 00 00 00 0183   	ld bc,0
0400FF AF          0184   	xor a
040100 49 DF       0185   	rst.lis $18
040102             0186   
040102             0187   	; locate x,y
040102             0188   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0189   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0190   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0191   
04010E             0192   	; print text
04010E 21 5D 17 04 0193   	ld hl,menu2
040112 01 00 00 00 0194   	ld bc,0
040116 AF          0195   	xor a
040117 49 DF       0196   	rst.lis $18
040119             0197   
040119             0198   	; locate x,y
040119             0199   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0200   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0201   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0202   
040125             0203   	; print text
040125 21 6C 17 04 0204   	ld hl,menu3
040129 01 00 00 00 0205   	ld bc,0
04012D AF          0206   	xor a
04012E 49 DF       0207   	rst.lis $18
040130             0208   
040130             0209   	; locate x,y
040130             0210   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0211   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0212   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0213   
04013C             0214   	; print text
04013C 21 7D 17 04 0215   	ld hl,menu4
040140 01 00 00 00 0216   	ld bc,0
040144 AF          0217   	xor a
040145 49 DF       0218   	rst.lis $18
040147             0219   
040147             0220   ; menu loop
040147             0221   menu_loop:
040147 21 8F FF FF 0222   	ld hl,KEY_ESCAPE
04014B CD E0 16 04 0223   	call fn_inkey
04014F FE 01       0224   	CP 1
040151 CA BD 0A 04 0225   	jp z,exit_program
040155             0226   
040155 21 8E FF FF 0227   	ld hl,KEY_F1
040159 CD E0 16 04 0228   	call fn_inkey
04015D FE 01       0229   	CP 1
04015F CA 91 01 04 0230   	jp z,ml_menu1
040163             0231   
040163 21 8D FF FF 0232   	ld hl,KEY_F2
040167 CD E0 16 04 0233   	call fn_inkey
04016B FE 01       0234   	CP 1
04016D CA 97 01 04 0235   	jp z,ml_menu2
040171             0236   
040171 21 8C FF FF 0237   	ld hl,KEY_F3
040175 CD E0 16 04 0238   	call fn_inkey
040179 FE 01       0239   	CP 1
04017B CA 9D 01 04 0240   	jp z,ml_menu3
04017F             0241   
04017F 21 EB FF FF 0242   	ld hl,KEY_F4
040183 CD E0 16 04 0243   	call fn_inkey
040187 FE 01       0244   	CP 1
040189 CA A3 01 04 0245   	jp z,ml_menu4
04018D             0246   
04018D C3 47 01 04 0247   	jp menu_loop
040191             0248   
040191             0249   ml_menu1:
040191 3E 04       0250   	ld a,SPR44
040193 16 20       0251   	ld d,SPR44_width
040195 18 10       0252   	jr exit_menu_loop
040197             0253   
040197             0254   ml_menu2:
040197 3E 08       0255   	ld a,SPR88
040199 16 10       0256   	ld d,SPR88_width
04019B 18 0A       0257   	jr exit_menu_loop
04019D             0258   
04019D             0259   ml_menu3:
04019D 3E 10       0260   	ld a,SPR1616
04019F 16 08       0261   	ld d,SPR1616_width
0401A1 18 04       0262   	jr exit_menu_loop
0401A3             0263   
0401A3             0264   ml_menu4:
0401A3 3E 20       0265   	ld a,SPR3232
0401A5 16 04       0266   	ld d,SPR3232_width
0401A7             0267   
0401A7             0268   exit_menu_loop:
0401A7             0269   	; store edited sprite size
0401A7 21 43 17 04 0270   	ld hl,spr_size
0401AB 77          0271   	ld (hl),a
0401AC 21 42 17 04 0272   	ld hl,pixel_width
0401B0 72          0273   	ld (hl),d
0401B1             0274   
0401B1             0275   	; clear the text screen
0401B1             0276   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0277   
0401B5             0278   	; draw the palette
0401B5 0E 00       0279   	ld c,0
0401B7             0280   
0401B7             0281   palette_loop:
0401B7 C5          0282   	push bc
0401B8             0283   
0401B8             0284   	; choose palette color
0401B8             0285   	vdu 18
0401B8 3E 12       0001M  		LD	A, function
0401BA 49 D7       0002M  		RST.LIS	10h
0401BC             0286   	vdu 0
0401BC 3E 00       0001M  		LD	A, function
0401BE 49 D7       0002M  		RST.LIS	10h
0401C0 C1          0287   	pop bc
0401C1 C5          0288   	push bc
0401C2 79          0289   	ld a,c
0401C3             0290   	vdu_a
0401C3 49 D7       0001M  		RST.LIS	10h
0401C5             0291   
0401C5             0292   	; store coordinates for a palette square
0401C5 DD 21 2E 17 0293   	ld ix,x1
       04          
0401CA E1          0294   	pop hl
0401CB E5          0295   	push hl
0401CC 26 05       0296   	ld h,5
0401CE ED 6C       0297   	mlt hl
0401D0 E5          0298   	push hl
0401D1 DD 75 00    0299   	ld (ix+0),l
0401D4 DD 74 01    0300   	ld (ix+1),h
0401D7             0301   
0401D7 DD 21 30 17 0302   	ld ix,y1
       04          
0401DC 21 00 00 00 0303   	ld hl,0
0401E0 DD 75 00    0304   	ld (ix+0),l
0401E3 DD 74 01    0305   	ld (ix+1),h
0401E6             0306   
0401E6 DD 21 32 17 0307   	ld ix,x2
       04          
0401EB E1          0308   	pop hl
0401EC 11 04 00 00 0309   	ld de,4
0401F0 19          0310   	add hl,de
0401F1 DD 75 00    0311   	ld (ix+0),l
0401F4 DD 74 01    0312   	ld (ix+1),h
0401F7             0313   
0401F7 DD 21 34 17 0314   	ld ix,y2
       04          
0401FC 21 0A 00 00 0315   	ld hl,10
040200 DD 75 00    0316   	ld (ix+0),l
040203 DD 74 01    0317   	ld (ix+1),h
040206             0318   
040206             0319   	; draw the palette filled square
040206 CD A0 0B 04 0320   	call fn_rectf
04020A             0321   
04020A             0322   	; next color ?
04020A C1          0323   	pop bc
04020B 0C          0324   	inc c
04020C 79          0325   	ld a,c
04020D FE 40       0326   	cp MAX_COLORS
04020F C2 B7 01 04 0327   	jp nz,palette_loop
040213             0328   
040213             0329   	; store coordinates
040213 DD 21 2E 17 0330   	ld ix,x1
       04          
040218 21 00 00 00 0331   	ld hl,0
04021C DD 75 00    0332   	ld (ix+0),l
04021F DD 74 01    0333   	ld (ix+1),h
040222             0334   
040222 DD 21 30 17 0335   	ld ix,y1
       04          
040227 21 0B 00 00 0336   	ld hl,11
04022B DD 75 00    0337   	ld (ix+0),l
04022E DD 74 01    0338   	ld (ix+1),h
040231             0339   
040231 DD 21 32 17 0340   	ld ix,x2
       04          
040236 21 3F 01 00 0341   	ld hl,319
04023A DD 75 00    0342   	ld (ix+0),l
04023D DD 74 01    0343   	ld (ix+1),h
040240             0344   
040240 DD 21 34 17 0345   	ld ix,y2
       04          
040245 21 EF 00 00 0346   	ld hl,239
040249 DD 75 00    0347   	ld (ix+0),l
04024C DD 74 01    0348   	ld (ix+1),h
04024F             0349   
04024F             0350   	; draw the border rectangle
04024F CD E1 0A 04 0351   	call fn_rect
040253             0352   
040253             0353   	; store edited sprite coordinates
040253 DD 21 36 17 0354   	ld ix,xs1
       04          
040258 FD 21 2E 17 0355   	ld iy,x1
       04          
04025D DD 6E 00    0356   	ld l,(ix+0)
040260 DD 66 01    0357   	ld h,(ix+1)
040263 FD 75 00    0358   	ld (iy+0),l
040266 FD 74 01    0359   	ld (iy+1),h
040269             0360   
040269 DD 21 38 17 0361   	ld ix,ys1
       04          
04026E FD 21 30 17 0362   	ld iy,y1
       04          
040273 DD 6E 00    0363   	ld l,(ix+0)
040276 DD 66 01    0364   	ld h,(ix+1)
040279 FD 75 00    0365   	ld (iy+0),l
04027C FD 74 01    0366   	ld (iy+1),h
04027F             0367   
04027F DD 21 3A 17 0368   	ld ix,xs2
       04          
040284 FD 21 32 17 0369   	ld iy,x2
       04          
040289 DD 6E 00    0370   	ld l,(ix+0)
04028C DD 66 01    0371   	ld h,(ix+1)
04028F FD 75 00    0372   	ld (iy+0),l
040292 FD 74 01    0373   	ld (iy+1),h
040295             0374   
040295 DD 21 3C 17 0375   	ld ix,ys2
       04          
04029A FD 21 34 17 0376   	ld iy,y2
       04          
04029F DD 6E 00    0377   	ld l,(ix+0)
0402A2 DD 66 01    0378   	ld h,(ix+1)
0402A5 FD 75 00    0379   	ld (iy+0),l
0402A8 FD 74 01    0380   	ld (iy+1),h
0402AB             0381   
0402AB             0382   	; draw the sprite's border rectangle
0402AB CD E1 0A 04 0383   	call fn_rect
0402AF             0384   
0402AF             0385   	; update sprite size descriptions
0402AF CD 7C 16 04 0386   	call fn_show_spr_descr
0402B3             0387   
0402B3             0388   ; initialize sprite vars
0402B3             0389   init_sprite_vars:
0402B3             0390   	; initialize coordinates before drawing the sprite
0402B3 DD 21 3E 17 0391   	ld ix,xpix
       04          
0402B8 AF          0392   	xor a
0402B9 DD 77 00    0393   	ld (ix+0),a ; xpix = 0
0402BC DD 77 01    0394   	ld (ix+1),a	; ypix = 0
0402BF DD 21 44 17 0395   	ld ix,current_pen
       04          
0402C4 3E 0F       0396   	ld a,COLOR_WHITE
0402C6 DD 77 00    0397   	ld (ix+0),a ; current pen -> white
0402C9             0398   
0402C9             0399   	; set vars
0402C9 21 4E 18 04 0400   	ld hl,colors_count
0402CD 3E 40       0401   	ld a,MAX_COLORS
0402CF 77          0402   	ld (hl),a
0402D0 21 50 18 04 0403   	ld hl,current_frame
0402D4 AF          0404   	xor a
0402D5 77          0405   	ld (hl),a
0402D6 3C          0406   	inc a
0402D7 21 51 18 04 0407   	ld hl,frames_count
0402DB 77          0408   	ld (hl),a
0402DC             0409   
0402DC             0410   	; fill buffers with zeros
0402DC 01 00 20 00 0411   	ld bc,BUFFER_SIZE
0402E0 21 59 18 04 0412   	ld hl,sprite_buffer
0402E4             0413   
0402E4             0414   isv_fill_loop:
0402E4 AF          0415   	xor a
0402E5 77          0416   	ld (hl),a
0402E6 0B          0417   	dec bc
0402E7 23          0418   	inc hl
0402E8 78          0419   	ld a,b
0402E9 B1          0420   	or c
0402EA FE 00       0421   	cp 0
0402EC 20 F6       0422   	jr nz,isv_fill_loop
0402EE             0423   
0402EE             0424   ; draw the pixel with a border
0402EE CD 6E 0C 04 0425   	call fn_draw_pixel_with_border
0402F2             0426   
0402F2             0427   ; draw sprite loop
0402F2             0428   draw_sprite_loop:
0402F2 21 9D FF FF 0429   	ld hl,KEY_SPACE
0402F6 CD E0 16 04 0430   	call fn_inkey
0402FA FE 01       0431   	cp 1
0402FC CC 0E 04 04 0432   	call z,dsl_set_pen
040300             0433   
040300 21 C6 FF FF 0434   	ld hl,KEY_UP
040304 CD E0 16 04 0435   	call fn_inkey
040308 FE 01       0436   	cp 1
04030A CC 33 04 04 0437   	call z,dsl_up
04030E             0438   
04030E 21 D6 FF FF 0439   	ld hl,KEY_DOWN
040312 CD E0 16 04 0440   	call fn_inkey
040316 FE 01       0441   	cp 1
040318 CC 5A 04 04 0442   	call z,dsl_down
04031C             0443   
04031C 21 E6 FF FF 0444   	ld hl,KEY_LEFT
040320 CD E0 16 04 0445   	call fn_inkey
040324 FE 01       0446   	cp 1
040326 CC 86 04 04 0447   	call z,dsl_left
04032A             0448   
04032A 21 86 FF FF 0449   	ld hl,KEY_RIGHT
04032E CD E0 16 04 0450   	call fn_inkey
040332 FE 01       0451   	cp 1
040334 CC AD 04 04 0452   	call z,dsl_right
040338             0453   
040338 21 A6 FF FF 0454   	ld hl,KEY_DELETE
04033C CD E0 16 04 0455   	call fn_inkey
040340 FE 01       0456   	cp 1
040342 CC 22 04 04 0457   	call z,dsl_reset_pen
040346             0458   
040346 21 9F FF FF 0459   	ld hl,KEY_TAB
04034A CD E0 16 04 0460   	call fn_inkey
04034E FE 01       0461   	cp 1
040350 CA 85 09 04 0462   	jp z,dsl_palette_tool
040354             0463   
040354 21 AA FF FF 0464   	ld hl,KEY_N
040358 CD E0 16 04 0465   	call fn_inkey
04035C FE 01       0466   	cp 1
04035E CC 2C 05 04 0467   	call z,dsl_add_frame
040362             0468   
040362 21 AD FF FF 0469   	ld hl,KEY_C
040366 CD E0 16 04 0470   	call fn_inkey
04036A FE 01       0471   	cp 1
04036C CC C3 05 04 0472   	call z,dsl_add_and_copy_frame
040370             0473   
040370 21 D0 FF FF 0474   	ld hl,KEY_BACKSPACE
040374 CD E0 16 04 0475   	call fn_inkey
040378 FE 01       0476   	cp 1
04037A CC 2A 06 04 0477   	call z,dsl_delete_frame
04037E             0478   
04037E 21 C0 FF FF 0479   	ld hl,KEY_PGUP
040382 CD E0 16 04 0480   	call fn_inkey
040386 FE 01       0481   	cp 1
040388 CC 23 07 04 0482   	call z,dsl_next_frame
04038C             0483   
04038C 21 B1 FF FF 0484   	ld hl,KEY_PGDOWN
040390 CD E0 16 04 0485   	call fn_inkey
040394 FE 01       0486   	cp 1
040396 CC 04 07 04 0487   	call z,dsl_previous_frame
04039A             0488   
04039A 21 A9 FF FF 0489   	ld hl,KEY_L
04039E CD E0 16 04 0490   	call fn_inkey
0403A2 FE 01       0491   	cp 1
0403A4 CC D9 04 04 0492   	call z,dsl_load_sprite
0403A8             0493   
0403A8 21 AE FF FF 0494   	ld hl,KEY_S
0403AC CD E0 16 04 0495   	call fn_inkey
0403B0 FE 01       0496   	cp 1
0403B2 CC FA 04 04 0497   	call z,dsl_save_sprite
0403B6             0498   
0403B6 21 DD FF FF 0499   	ld hl,KEY_E
0403BA CD E0 16 04 0500   	call fn_inkey
0403BE FE 01       0501   	cp 1
0403C0 CC 13 05 04 0502   	call z,dsl_export_sprite
0403C4             0503   
0403C4 21 CC FF FF 0504   	ld hl,KEY_R
0403C8 CD E0 16 04 0505   	call fn_inkey
0403CC FE 01       0506   	cp 1
0403CE CC 49 07 04 0507   	call z,dsl_rotate_frame
0403D2             0508   
0403D2 21 BC FF FF 0509   	ld hl,KEY_F
0403D6 CD E0 16 04 0510   	call fn_inkey
0403DA FE 01       0511   	cp 1
0403DC CC FE 07 04 0512   	call z,dsl_flip_frame
0403E0             0513   
0403E0 21 9A FF FF 0514   	ld hl,KEY_M
0403E4 CD E0 16 04 0515   	call fn_inkey
0403E8 FE 01       0516   	cp 1
0403EA CC 65 08 04 0517   	call z,dsl_mirror_frame
0403EE             0518   
0403EE 21 B6 FF FF 0519   	ld hl,KEY_RETURN
0403F2 CD E0 16 04 0520   	call fn_inkey
0403F6 FE 01       0521   	cp 1
0403F8 CC E5 08 04 0522   	call z,dsl_flood_fill
0403FC             0523   
0403FC 21 8F FF FF 0524   	ld hl,KEY_ESCAPE
040400 CD E0 16 04 0525   	call fn_inkey
040404 FE 01       0526   	cp 1
040406 CA BD 0A 04 0527   	jp z,exit_program
04040A             0528   
04040A C3 F2 02 04 0529   	jp draw_sprite_loop
04040E             0530   
04040E             0531   ; set the pen of the current pixel
04040E             0532   dsl_set_pen:
04040E CD 98 0C 04 0533   	call fn_get_pixel_color
040412 21 44 17 04 0534   	ld hl,current_pen
040416 BE          0535   	cp (hl)
040417 C8          0536   	ret z
040418 7E          0537   	ld a,(hl)
040419 CD DA 0C 04 0538   	call fn_set_pixel_color
04041D CD 6E 0C 04 0539   	call fn_draw_pixel_with_border
040421 C9          0540   	ret
040422             0541   
040422             0542   ; reset the pen of the current pixel
040422             0543   dsl_reset_pen:
040422 CD 98 0C 04 0544   	call fn_get_pixel_color
040426 FE 00       0545   	cp 0
040428 C8          0546   	ret z
040429 AF          0547   	xor a
04042A CD DA 0C 04 0548   	call fn_set_pixel_color
04042E CD 6E 0C 04 0549   	call fn_draw_pixel_with_border
040432 C9          0550   	ret
040433             0551   
040433             0552   ; move pixel up
040433             0553   dsl_up:
040433 21 3F 17 04 0554   	ld hl,ypix
040437 7E          0555   	ld a,(hl)
040438 FE 00       0556   	cp 0
04043A C8          0557   	ret z
04043B             0558   
04043B 21 9D FF FF 0559   	ld hl,KEY_SPACE
04043F CD E0 16 04 0560   	call fn_inkey
040443 FE 01       0561   	cp 1
040445 CC 0E 04 04 0562   	call z,dsl_set_pen
040449             0563   
040449 CD 82 0C 04 0564   	call fn_draw_pixel_without_border
04044D CD 1E 0D 04 0565   	call fn_move_up
040451 CD 6E 0C 04 0566   	call fn_draw_pixel_with_border
040455 CD 5B 16 04 0567   	call fn_slowdown
040459 C9          0568   	ret
04045A             0569   
04045A             0570   ; move pixel down
04045A             0571   dsl_down:
04045A 21 43 17 04 0572   	ld hl,spr_size
04045E 56          0573   	ld d,(hl)
04045F 15          0574   	dec d
040460             0575   
040460 21 3F 17 04 0576   	ld hl,ypix
040464 7E          0577   	ld a,(hl)
040465 BA          0578   	cp d
040466 C8          0579   	ret z
040467             0580   
040467 21 9D FF FF 0581   	ld hl,KEY_SPACE
04046B CD E0 16 04 0582   	call fn_inkey
04046F FE 01       0583   	cp 1
040471 CC 0E 04 04 0584   	call z,dsl_set_pen
040475             0585   
040475 CD 82 0C 04 0586   	call fn_draw_pixel_without_border
040479 CD 24 0D 04 0587   	call fn_move_down
04047D CD 6E 0C 04 0588   	call fn_draw_pixel_with_border
040481 CD 5B 16 04 0589   	call fn_slowdown
040485 C9          0590   	ret
040486             0591   
040486             0592   ; move pixel left
040486             0593   dsl_left:
040486 21 3E 17 04 0594   	ld hl,xpix
04048A 7E          0595   	ld a,(hl)
04048B FE 00       0596   	cp 0
04048D C8          0597   	ret z
04048E             0598   
04048E 21 9D FF FF 0599   	ld hl,KEY_SPACE
040492 CD E0 16 04 0600   	call fn_inkey
040496 FE 01       0601   	cp 1
040498 CC 0E 04 04 0602   	call z,dsl_set_pen
04049C             0603   
04049C CD 82 0C 04 0604   	call fn_draw_pixel_without_border
0404A0 CD 2A 0D 04 0605   	call fn_move_left
0404A4 CD 6E 0C 04 0606   	call fn_draw_pixel_with_border
0404A8 CD 5B 16 04 0607   	call fn_slowdown
0404AC C9          0608   	ret
0404AD             0609   
0404AD             0610   ; move pixel right
0404AD             0611   dsl_right:
0404AD 21 43 17 04 0612   	ld hl,spr_size
0404B1 56          0613   	ld d,(hl)
0404B2 15          0614   	dec d
0404B3             0615   
0404B3 21 3E 17 04 0616   	ld hl,xpix
0404B7 7E          0617   	ld a,(hl)
0404B8 BA          0618   	cp d
0404B9 C8          0619   	ret z
0404BA             0620   
0404BA 21 9D FF FF 0621   	ld hl,KEY_SPACE
0404BE CD E0 16 04 0622   	call fn_inkey
0404C2 FE 01       0623   	cp 1
0404C4 CC 0E 04 04 0624   	call z,dsl_set_pen
0404C8             0625   
0404C8 CD 82 0C 04 0626   	call fn_draw_pixel_without_border
0404CC CD 30 0D 04 0627   	call fn_move_right
0404D0 CD 6E 0C 04 0628   	call fn_draw_pixel_with_border
0404D4 CD 5B 16 04 0629   	call fn_slowdown
0404D8 C9          0630   	ret
0404D9             0631   
0404D9             0632   ; load a sprite
0404D9             0633   dsl_load_sprite:
0404D9 21 A9 FF FF 0634   	ld hl,KEY_L
0404DD CD E0 16 04 0635   	call fn_inkey
0404E1 FE 00       0636   	cp 0
0404E3 20 F4       0637   	jr nz,dsl_load_sprite
0404E5             0638   
0404E5 CD 82 0C 04 0639   	call fn_draw_pixel_without_border
0404E9 CD 87 11 04 0640   	call fn_load_sprite
0404ED CD D2 15 04 0641   	call fn_refresh_sprite
0404F1 CD 6E 0C 04 0642   	call fn_draw_pixel_with_border
0404F5 CD 12 16 04 0643   	call fn_change_frame
0404F9 C9          0644   	ret
0404FA             0645   
0404FA             0646   ; save a sprite
0404FA             0647   dsl_save_sprite:
0404FA 21 AE FF FF 0648   	ld hl,KEY_S
0404FE CD E0 16 04 0649   	call fn_inkey
040502 FE 00       0650   	cp 0
040504 20 F4       0651   	jr nz,dsl_save_sprite
040506             0652   
040506 CD 82 0C 04 0653   	call fn_draw_pixel_without_border
04050A CD B0 12 04 0654   	call fn_save_sprite
04050E CD D2 15 04 0655   	call fn_refresh_sprite
040512 C9          0656   	ret
040513             0657   
040513             0658   dsl_export_sprite:
040513 21 DD FF FF 0659   	ld hl,KEY_E
040517 CD E0 16 04 0660   	call fn_inkey
04051B FE 00       0661   	cp 0
04051D 20 F4       0662   	jr nz,dsl_export_sprite
04051F             0663   
04051F CD 82 0C 04 0664   	call fn_draw_pixel_without_border
040523 CD AF 13 04 0665   	call fn_export_sprite
040527 CD D2 15 04 0666   	call fn_refresh_sprite
04052B C9          0667   	ret
04052C             0668   
04052C             0669   
04052C             0670   ; add a frame to the animation
04052C             0671   dsl_add_frame:
04052C 21 AA FF FF 0672   	ld hl,KEY_N
040530 CD E0 16 04 0673   	call fn_inkey
040534 FE 00       0674   	cp 0
040536 20 F4       0675   	jr nz,dsl_add_frame
040538             0676   
040538             0677   	; frames limit reached ? exit
040538 21 51 18 04 0678   	ld hl,frames_count
04053C 7E          0679   	ld a,(hl)
04053D FE 08       0680   	cp MAX_FRAMES
04053F C8          0681   	ret z
040540             0682   
040540             0683   	; get the number of frames to copy
040540 21 51 18 04 0684   	ld hl,frames_count
040544 7E          0685   	ld a,(hl)
040545 21 50 18 04 0686   	ld hl,current_frame
040549 46          0687   	ld b,(hl)
04054A 90          0688   	sub b
04054B 3D          0689   	dec a
04054C             0690   
04054C             0691   	; get sprsize² (length of a sprite, in bytes)
04054C 21 43 17 04 0692   	ld hl,spr_size
040550 11 00 00 00 0693   	ld de,$000000
040554 5E          0694   	ld e,(hl)
040555 56          0695   	ld d,(hl)
040556 ED 5C       0696   	mlt de ; DE = sprsize²
040558             0697   
040558             0698   	; prepare for the case we goto af_zap...
040558 21 59 18 04 0699   	ld hl,sprite_buffer
04055C             0700   
04055C F5          0701   	push af
04055D E5          0702   	push hl
04055E 21 50 18 04 0703   	ld hl,current_frame
040562 7E          0704   	ld a,(hl)
040563 3C          0705   	inc a
040564 47          0706   	ld b,a
040565 E1          0707   	pop hl
040566 F1          0708   	pop af
040567             0709   
040567             0710   af_loop0:
040567 19          0711   	add hl,de ; for if current frame = 0 (prepare to zap!)
040568 10 FD       0712   	djnz af_loop0
04056A             0713   
04056A E5          0714   	push hl ; store HL = sprite buffer + sprsize²
04056B FE 00       0715   	cp 0
04056D CA 95 05 04 0716   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040571 E1          0717   	pop hl ; HL unused in this case
040572             0718   
040572 21 00 00 00 0719   	ld hl,$000000 ; HL is 0 to store the result
040576 47          0720   	ld b,a ; B = frames to copy
040577             0721   
040577             0722   ; multiply number of frames to copy by sprsize²
040577             0723   af_loop1:
040577 19          0724   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040578 10 FD       0725   	djnz af_loop1
04057A             0726   
04057A E5          0727   	push hl
04057B C1          0728   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04057C             0729   
04057C 21 50 18 04 0730   	ld hl,current_frame
040580 7E          0731   	ld a,(hl)
040581 3C          0732   	inc a
040582 21 59 18 04 0733   	ld hl,sprite_buffer
040586             0734   
040586 C5          0735   	push bc
040587 47          0736   	ld b,a
040588             0737   
040588             0738   af_loop2:
040588 19          0739   	add hl,de ; HL = sprite buffer + length to copy
040589 10 FD       0740   	djnz af_loop2
04058B             0741   
04058B C1          0742   	pop bc
04058C             0743   
04058C E5          0744   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04058D             0745   
04058D 09          0746   	add hl,bc
04058E 2B          0747   	dec hl ; HL = end address to copy to end target address
04058F             0748   
04058F E5          0749   	push hl
040590 19          0750   	add hl,de
040591 EB          0751   	ex de,hl ; DE = end target address
040592 E1          0752   	pop hl
040593             0753   
040593 ED B8       0754   	lddr
040595             0755   
040595             0756   af_zap:
040595             0757   	; multiply number of frames to copy by sprsize²
040595 21 43 17 04 0758   	ld hl,spr_size
040599 01 00 00 00 0759   	ld bc,$000000
04059D 4E          0760   	ld c,(hl)
04059E 46          0761   	ld b,(hl)
04059F ED 4C       0762   	mlt bc ; BC = sprsize²
0405A1             0763   
0405A1 E1          0764   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
0405A2             0765   
0405A2             0766   ; fill frame with 0 color
0405A2             0767   af_loop3:
0405A2 AF          0768   	xor a
0405A3 77          0769   	ld (hl),a
0405A4 23          0770   	inc hl
0405A5 0B          0771   	dec bc
0405A6 78          0772   	ld a,b
0405A7 B1          0773   	or c
0405A8 FE 00       0774   	cp 0
0405AA 20 F6       0775   	jr nz,af_loop3
0405AC             0776   
0405AC             0777   	; increment the frames count and the current frame values
0405AC 21 51 18 04 0778   	ld hl,frames_count
0405B0 34          0779   	inc (hl)
0405B1 21 50 18 04 0780   	ld hl,current_frame
0405B5 34          0781   	inc (hl)
0405B6             0782   
0405B6 CD 12 16 04 0783   	call fn_change_frame
0405BA CD 37 16 04 0784   	call fn_change_frames_count
0405BE CD D2 15 04 0785   	call fn_refresh_sprite
0405C2 C9          0786   	ret
0405C3             0787   
0405C3             0788   ; add a copy of the current frame to the animation
0405C3             0789   dsl_add_and_copy_frame: ; TODO! debug me!
0405C3 21 AD FF FF 0790   	ld hl,KEY_C
0405C7 CD E0 16 04 0791   	call fn_inkey
0405CB FE 00       0792   	cp 0
0405CD 20 F4       0793   	jr nz,dsl_add_and_copy_frame
0405CF             0794   
0405CF             0795   	; frames limit reached ? exit
0405CF 21 51 18 04 0796   	ld hl,frames_count
0405D3 7E          0797   	ld a,(hl)
0405D4 FE 08       0798   	cp MAX_FRAMES
0405D6 C8          0799   	ret z
0405D7             0800   
0405D7             0801   	; get the number of frames to copy
0405D7 21 51 18 04 0802   	ld hl,frames_count
0405DB 7E          0803   	ld a,(hl)
0405DC 21 50 18 04 0804   	ld hl,current_frame
0405E0 46          0805   	ld b,(hl)
0405E1 90          0806   	sub b
0405E2             0807   
0405E2             0808   	; get sprsize² (length of a sprite, in bytes)
0405E2 21 43 17 04 0809   	ld hl,spr_size
0405E6 11 00 00 00 0810   	ld de,$000000
0405EA 5E          0811   	ld e,(hl)
0405EB 56          0812   	ld d,(hl)
0405EC ED 5C       0813   	mlt de ; DE = sprsize²
0405EE             0814   
0405EE 21 00 00 00 0815   	ld hl,$000000 ; HL is 0 to store the result
0405F2 47          0816   	ld b,a ; B = frames to copy
0405F3             0817   
0405F3             0818   ; multiply number of frames to copy by sprsize²
0405F3             0819   aacf_loop1:
0405F3 19          0820   	add hl,de ; HL = length (in bytes) to copy (a few frames)
0405F4 10 FD       0821   	djnz aacf_loop1
0405F6             0822   
0405F6 E5          0823   	push hl
0405F7 C1          0824   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
0405F8             0825   
0405F8 21 50 18 04 0826   	ld hl,current_frame
0405FC 7E          0827   	ld a,(hl)
0405FD 21 59 18 04 0828   	ld hl,sprite_buffer
040601 FE 00       0829   	cp 0
040603 28 06       0830   	jr z,aacf_loop_end2
040605             0831   
040605 C5          0832   	push bc
040606 47          0833   	ld b,a
040607             0834   
040607             0835   aacf_loop2:
040607 19          0836   	add hl,de ; HL = sprite buffer + length to copy
040608 10 FD       0837   	djnz aacf_loop2
04060A             0838   
04060A C1          0839   	pop bc
04060B             0840   
04060B             0841   aacf_loop_end2:
04060B 09          0842   	add hl,bc
04060C 2B          0843   	dec hl ; HL = end address to copy to end target address
04060D             0844   
04060D E5          0845   	push hl
04060E 19          0846   	add hl,de
04060F EB          0847   	ex de,hl ; DE = end target address
040610 E1          0848   	pop hl
040611             0849   
040611 ED B8       0850   	lddr
040613             0851   
040613             0852   	; increment the frames count and the current frame values
040613 21 51 18 04 0853   	ld hl,frames_count
040617 34          0854   	inc (hl)
040618 21 50 18 04 0855   	ld hl,current_frame
04061C 34          0856   	inc (hl)
04061D             0857   
04061D CD 12 16 04 0858   	call fn_change_frame
040621 CD 37 16 04 0859   	call fn_change_frames_count
040625 CD D2 15 04 0860   	call fn_refresh_sprite
040629 C9          0861   	ret
04062A             0862   
04062A             0863   ; delete last frame from animation
04062A             0864   dsl_delete_frame:
04062A 21 D0 FF FF 0865   	ld hl,KEY_BACKSPACE
04062E CD E0 16 04 0866   	call fn_inkey
040632 FE 00       0867   	cp 0
040634 20 F4       0868   	jr nz,dsl_delete_frame
040636             0869   
040636             0870   	; delete current selected frame
040636 21 43 17 04 0871   	ld hl,spr_size
04063A 01 00 00 00 0872   	ld bc,$000000
04063E 4E          0873   	ld c,(hl)
04063F 46          0874   	ld b,(hl)
040640 ED 4C       0875   	mlt bc ; BC = sprsize²
040642 21 50 18 04 0876   	ld hl,current_frame
040646 7E          0877   	ld a,(hl) ; A = current frame
040647 21 59 18 04 0878   	ld hl,sprite_buffer ; HL = sprite buffer
04064B C5          0879   	push bc
04064C FE 00       0880   	cp 0
04064E 28 06       0881   	jr z,df_loop2
040650             0882   
040650             0883   df_loop1:
040650 09          0884   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
040651 3D          0885   	dec a
040652 FE 00       0886   	cp 0
040654 20 FA       0887   	jr nz,df_loop1
040656             0888   
040656             0889   ; clear the current frame
040656             0890   df_loop2:
040656 AF          0891   	xor a
040657 77          0892   	ld (hl),a
040658 23          0893   	inc hl
040659 0B          0894   	dec bc
04065A 78          0895   	ld a,b
04065B B1          0896   	or c
04065C FE 00       0897   	cp 0
04065E 20 F6       0898   	jr nz,df_loop2
040660             0899   
040660             0900   	; current frame + 1 = frames count ?
040660 E5          0901   	push hl
040661 21 50 18 04 0902   	ld hl,current_frame
040665 5E          0903   	ld e,(hl)
040666 1C          0904   	inc e
040667 21 51 18 04 0905   	ld hl,frames_count
04066B 7E          0906   	ld a,(hl)
04066C BB          0907   	cp e
04066D E1          0908   	pop hl
04066E C1          0909   	pop bc
04066F CA E8 06 04 0910   	jp z,df_exit
040673             0911   
040673 11 51 18 04 0912   	ld de,frames_count
040677 1A          0913   	ld a,(de) ; A = frames count
040678 E5          0914   	push hl
040679 21 50 18 04 0915   	ld hl,current_frame
04067D 5E          0916   	ld e,(hl) ; E = current frame
04067E E1          0917   	pop hl
04067F 93          0918   	sub e
040680 3D          0919   	dec a ; A = number of frames to copy back
040681             0920   
040681 EB          0921   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040682 21 00 00 00 0922   	ld hl,$000000
040686 FE 00       0923   	cp 0 ; 0 frames to copy ?
040688 28 06       0924   	jr z,df_exit_loop3
04068A             0925   
04068A             0926   df_loop3:
04068A 09          0927   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04068B 3D          0928   	dec a
04068C FE 00       0929   	cp 0
04068E 20 FA       0930   	jr nz,df_loop3
040690             0931   
040690             0932   df_exit_loop3:
040690 E5          0933   	push hl
040691 C1          0934   	pop bc ; BC = total length of area to copy
040692 D5          0935   	push de
040693 E1          0936   	pop hl ; HL = DE = start of area to copy
040694             0937   
040694 C5          0938   	push bc
040695 D5          0939   	push de
040696 E5          0940   	push hl
040697 21 43 17 04 0941   	ld hl,spr_size
04069B 11 00 00 00 0942   	ld de,$000000
04069F 5E          0943   	ld e,(hl)
0406A0 56          0944   	ld d,(hl)
0406A1 ED 5C       0945   	mlt de ; DE = one sprite frame length
0406A3 E1          0946   	pop hl
0406A4 B7          0947   	or a
0406A5 ED 52       0948   	sbc hl,de ; HL = target area to copy
0406A7 D1          0949   	pop de
0406A8 EB          0950   	ex de,hl ; DE = target, HL = start
0406A9 C1          0951   	pop bc
0406AA ED B0       0952   	ldir
0406AC             0953   
0406AC 21 43 17 04 0954   	ld hl,spr_size
0406B0 01 00 00 00 0955   	ld bc,$000000
0406B4 4E          0956   	ld c,(hl)
0406B5 46          0957   	ld b,(hl)
0406B6 ED 4C       0958   	mlt bc ; DE = one sprite frame length
0406B8             0959   
0406B8             0960   	; delete last frame data
0406B8 21 51 18 04 0961   	ld hl,frames_count
0406BC 7E          0962   	ld a,(hl) ; A =frames count
0406BD 3D          0963   	dec a ; A = last frame
0406BE 21 59 18 04 0964   	ld hl,sprite_buffer ; HL = sprite buffer
0406C2 FE 00       0965   	cp 0
0406C4 28 06       0966   	jr z,df_loop5
0406C6             0967   
0406C6             0968   df_loop4:
0406C6 09          0969   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
0406C7 3D          0970   	dec a
0406C8 FE 00       0971   	cp 0
0406CA 20 FA       0972   	jr nz,df_loop4
0406CC             0973   
0406CC             0974   ; clear the current frame
0406CC             0975   df_loop5:
0406CC AF          0976   	xor a
0406CD 77          0977   	ld (hl),a
0406CE 23          0978   	inc hl
0406CF 0B          0979   	dec bc
0406D0 78          0980   	ld a,b
0406D1 B1          0981   	or c
0406D2 FE 00       0982   	cp 0
0406D4 20 F6       0983   	jr nz,df_loop5
0406D6             0984   
0406D6             0985   	; decrement frames count
0406D6 21 51 18 04 0986   	ld hl,frames_count
0406DA 35          0987   	dec (hl)
0406DB             0988   
0406DB CD 12 16 04 0989   	call fn_change_frame
0406DF CD 37 16 04 0990   	call fn_change_frames_count
0406E3 CD D2 15 04 0991   	call fn_refresh_sprite
0406E7 C9          0992   	ret
0406E8             0993   
0406E8             0994   df_exit:
0406E8 21 51 18 04 0995   	ld hl,frames_count
0406EC 7E          0996   	ld a,(hl)
0406ED FE 01       0997   	cp 1
0406EF 28 06       0998   	jr z,df_exit_end
0406F1 35          0999   	dec (hl)
0406F2 21 50 18 04 1000   	ld hl,current_frame
0406F6 35          1001   	dec (hl)
0406F7             1002   
0406F7             1003   df_exit_end:
0406F7 CD 12 16 04 1004   	call fn_change_frame
0406FB CD 37 16 04 1005   	call fn_change_frames_count
0406FF CD D2 15 04 1006   	call fn_refresh_sprite
040703 C9          1007   	ret
040704             1008   
040704             1009   ; goto previous frame
040704             1010   dsl_previous_frame:
040704 21 B1 FF FF 1011   	ld hl,KEY_PGDOWN
040708 CD E0 16 04 1012   	call fn_inkey
04070C FE 00       1013   	cp 0
04070E 20 F4       1014   	jr nz,dsl_previous_frame
040710             1015   
040710 21 50 18 04 1016   	ld hl,current_frame
040714 7E          1017   	ld a,(hl)
040715 FE 00       1018   	cp 0
040717 C8          1019   	ret z
040718             1020   
040718 3D          1021   	dec a
040719 77          1022   	ld (hl),a
04071A CD 12 16 04 1023   	call fn_change_frame
04071E CD D2 15 04 1024   	call fn_refresh_sprite
040722 C9          1025   	ret
040723             1026   
040723             1027   ; goto next frame
040723             1028   dsl_next_frame:
040723 21 C0 FF FF 1029   	ld hl,KEY_PGUP
040727 CD E0 16 04 1030   	call fn_inkey
04072B FE 00       1031   	cp 0
04072D 20 F4       1032   	jr nz,dsl_next_frame
04072F             1033   
04072F 21 50 18 04 1034   	ld hl,current_frame
040733 7E          1035   	ld a,(hl)
040734 3C          1036   	inc a
040735 21 51 18 04 1037   	ld hl,frames_count
040739 BE          1038   	cp (hl)
04073A C8          1039   	ret z
04073B             1040   
04073B 21 50 18 04 1041   	ld hl,current_frame
04073F 77          1042   	ld (hl),a
040740 CD 12 16 04 1043   	call fn_change_frame
040744 CD D2 15 04 1044   	call fn_refresh_sprite
040748 C9          1045   	ret
040749             1046   
040749             1047   ; rotate a frame 90° clockwise
040749             1048   dsl_rotate_frame:
040749 21 CC FF FF 1049   	ld hl,KEY_R
04074D CD E0 16 04 1050   	call fn_inkey
040751 FE 00       1051   	cp 0
040753 20 F4       1052   	jr nz,dsl_rotate_frame
040755             1053   
040755             1054   	; find HL as start of the first frame (buffer)
040755 21 43 17 04 1055   	ld hl,spr_size
040759 01 00 00 00 1056   	ld bc,$000000
04075D 11 00 00 00 1057   	ld de,$000000
040761 5E          1058   	ld e,(hl)
040762 56          1059   	ld d,(hl)
040763 4B          1060   	ld c,e
040764 ED 5C       1061   	mlt de ; DE = sprite length in bytes
040766 21 50 18 04 1062   	ld hl,current_frame
04076A 7E          1063   	ld a,(hl) ; A = current frame
04076B 21 59 18 04 1064   	ld hl,sprite_buffer
04076F FE 00       1065   	cp 0
040771 28 04       1066   	jr z,rf_noloop1
040773 47          1067   	ld b,a
040774             1068   
040774             1069   rf_loop1:
040774 19          1070   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040775 10 FD       1071   	djnz rf_loop1
040777             1072   
040777             1073   rf_noloop1:
040777 C5          1074   	push bc
040778 E5          1075   	push hl
040779             1076   
040779             1077   	; copy current frame to swap sprite buffer
040779 11 C5 3B 04 1078   	ld de,swap_sprite_buffer
04077D 41          1079   	ld b,c
04077E ED 4C       1080   	mlt bc
040780 ED B0       1081   	ldir
040782             1082   
040782 FD E1       1083   	pop iy ; IY: destination
040784 C1          1084   	pop bc
040785             1085   
040785 79          1086   	ld a,c
040786 01 00 00 00 1087   	ld bc,$000000
04078A 4F          1088   	ld c,a ; BC = sprite size
04078B             1089   
04078B             1090   	; turn and copy swap sprite buffer frame to sprite buffer
04078B DD 21 C5 3B 1091   	ld ix,swap_sprite_buffer ; IX: source
       04          
040790 11 00 00 00 1092   	ld de,0 ; x
040794 21 00 00 00 1093   	ld hl,0 ; y
040798             1094   
040798             1095   rf_loop2:
040798 DD E5       1096   	push ix
04079A FD E5       1097   	push iy
04079C             1098   
04079C D5          1099   	push de
04079D E5          1100   	push hl
04079E             1101   
04079E             1102   	; add x
04079E DD 19       1103   	add ix,de
0407A0             1104   
0407A0             1105   	; add y * width
0407A0 7C          1106   	ld a,h
0407A1 B5          1107   	or l
0407A2 FE 00       1108   	cp 0
0407A4 28 09       1109   	jr z,rf_done1
0407A6             1110   rf_loop3:
0407A6 DD 09       1111   	add ix,bc
0407A8 2B          1112   	dec hl
0407A9 7C          1113   	ld a,h
0407AA B5          1114   	or l
0407AB FE 00       1115   	cp 0
0407AD 20 F7       1116   	jr nz,rf_loop3
0407AF             1117   
0407AF             1118   rf_done1:
0407AF             1119   	; found the pixel value
0407AF DD 7E 00    1120   	ld a,(ix+0)
0407B2             1121   
0407B2 E1          1122   	pop hl
0407B3 D1          1123   	pop de
0407B4 D5          1124   	push de
0407B5 E5          1125   	push hl
0407B6             1126   
0407B6             1127   	; add y
0407B6 EB          1128   	ex de,hl
0407B7 FD 09       1129   	add iy,bc
0407B9 B7          1130   	or a
0407BA E5          1131   	push hl
0407BB FD E5       1132   	push iy
0407BD E1          1133   	pop hl
0407BE ED 52       1134   	sbc hl,de
0407C0 E5          1135   	push hl
0407C1 FD E1       1136   	pop iy
0407C3 FD 2B       1137   	dec iy
0407C5 E1          1138   	pop hl
0407C6 EB          1139   	ex de,hl
0407C7             1140   
0407C7             1141   	; add x * width
0407C7 F5          1142   	push af
0407C8 7A          1143   	ld a,d
0407C9 B3          1144   	or e
0407CA FE 00       1145   	cp 0
0407CC 28 09       1146   	jr z,rf_done2
0407CE             1147   rf_loop5:
0407CE FD 09       1148   	add iy,bc
0407D0 1B          1149   	dec de
0407D1 7A          1150   	ld a,d
0407D2 B3          1151   	or e
0407D3 FE 00       1152   	cp 0
0407D5 20 F7       1153   	jr nz,rf_loop5
0407D7             1154   
0407D7             1155   rf_done2:
0407D7 F1          1156   	pop af
0407D8             1157   
0407D8             1158   	; store the pixel value
0407D8 FD 77 00    1159   	ld (iy+0),a
0407DB             1160   
0407DB E1          1161   	pop hl
0407DC D1          1162   	pop de
0407DD             1163   
0407DD FD E1       1164   	pop iy
0407DF DD E1       1165   	pop ix
0407E1             1166   
0407E1 13          1167   	inc de
0407E2 EB          1168   	ex de,hl
0407E3 B7          1169   	or a
0407E4 ED 42       1170   	sbc hl,bc
0407E6 09          1171   	add hl,bc
0407E7 EB          1172   	ex de,hl
0407E8 DA 98 07 04 1173   	jp c,rf_loop2
0407EC             1174   
0407EC 11 00 00 00 1175   	ld de,0
0407F0 23          1176   	inc hl
0407F1 B7          1177   	or a
0407F2 ED 42       1178   	sbc hl,bc
0407F4 09          1179   	add hl,bc
0407F5 DA 98 07 04 1180   	jp c,rf_loop2
0407F9             1181   
0407F9 CD D2 15 04 1182   	call fn_refresh_sprite
0407FD C9          1183   	ret
0407FE             1184   
0407FE             1185   ; flip frame horizontally
0407FE             1186   dsl_flip_frame:
0407FE 21 BC FF FF 1187   	ld hl,KEY_F
040802 CD E0 16 04 1188   	call fn_inkey
040806 FE 00       1189   	cp 0
040808 20 F4       1190   	jr nz,dsl_flip_frame
04080A             1191   
04080A 21 43 17 04 1192   	ld hl,spr_size
04080E 11 00 00 00 1193   	ld de,$000000
040812 5E          1194   	ld e,(hl)
040813 56          1195   	ld d,(hl)
040814 4B          1196   	ld c,e
040815 ED 5C       1197   	mlt de ; DE = sprite length in bytes
040817 21 50 18 04 1198   	ld hl,current_frame
04081B 7E          1199   	ld a,(hl) ; A = current frame
04081C 21 59 18 04 1200   	ld hl,sprite_buffer
040820 FE 00       1201   	cp 0
040822 28 04       1202   	jr z,ff_noloop1
040824 47          1203   	ld b,a
040825             1204   
040825             1205   ff_loop1:
040825 19          1206   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040826 10 FD       1207   	djnz ff_loop1
040828             1208   
040828             1209   ff_noloop1:
040828 41          1210   	ld b,c ; B = sprite height
040829 11 00 00 00 1211   	ld de,$000000
04082D 59          1212   	ld e,c ; DE = sprite width
04082E 79          1213   	ld a,c ; A = sprite width
04082F CB 3F       1214   	srl a ; A = sprite height / 2
040831             1215   
040831 E5          1216   	push hl
040832 DD E1       1217   	pop ix ; IX = frame address
040834 19          1218   	add hl,de ; HL = frame address + sprite width - 1
040835 2B          1219   	dec hl
040836 E5          1220   	push hl
040837 FD E1       1221   	pop iy ; IY = IX + sprite width - 1
040839             1222   
040839             1223   ff_loop2:
040839 F5          1224   	push af
04083A D5          1225   	push de
04083B DD E5       1226   	push ix
04083D FD E5       1227   	push iy
04083F             1228   ff_loop3:
04083F DD 5E 00    1229   	ld e,(ix+0)
040842 FD 56 00    1230   	ld d,(iy+0)
040845 DD 72 00    1231   	ld (ix+0),d
040848 FD 73 00    1232   	ld (iy+0),e
04084B DD 23       1233   	inc ix
04084D FD 2B       1234   	dec iy
04084F 3D          1235   	dec a
040850 FE 00       1236   	cp 0
040852 20 EB       1237   	jr nz,ff_loop3
040854 FD E1       1238   	pop iy
040856 DD E1       1239   	pop ix
040858 D1          1240   	pop de
040859 F1          1241   	pop af
04085A DD 19       1242   	add ix,de
04085C FD 19       1243   	add iy,de
04085E 10 D9       1244   	djnz ff_loop2
040860             1245   
040860 CD D2 15 04 1246   	call fn_refresh_sprite
040864 C9          1247   	ret
040865             1248   
040865             1249   ; mirror frame vertically
040865             1250   dsl_mirror_frame:
040865 21 9A FF FF 1251   	ld hl,KEY_M
040869 CD E0 16 04 1252   	call fn_inkey
04086D FE 00       1253   	cp 0
04086F 20 F4       1254   	jr nz,dsl_mirror_frame
040871             1255   
040871 21 43 17 04 1256   	ld hl,spr_size
040875 01 00 00 00 1257   	ld bc,$000000
040879 11 00 00 00 1258   	ld de,$000000
04087D 5E          1259   	ld e,(hl)
04087E 56          1260   	ld d,(hl)
04087F 4B          1261   	ld c,e
040880 ED 5C       1262   	mlt de ; DE = sprite length in bytes
040882 21 50 18 04 1263   	ld hl,current_frame
040886 7E          1264   	ld a,(hl) ; A = current frame
040887 21 59 18 04 1265   	ld hl,sprite_buffer
04088B FE 00       1266   	cp 0
04088D 28 04       1267   	jr z,mf_noloop1
04088F 47          1268   	ld b,a
040890             1269   
040890             1270   mf_loop1:
040890 19          1271   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040891 10 FD       1272   	djnz mf_loop1
040893             1273   
040893             1274   mf_noloop1:
040893 11 00 00 00 1275   	ld de,$000000
040897 59          1276   	ld e,c ; E = sprite height
040898 79          1277   	ld a,c ; A = sprite width
040899 41          1278   	ld b,c ; B = sprite height
04089A CB 38       1279   	srl b ; divide B by 2, so B = sprite height / 2
04089C             1280   
04089C E5          1281   	push hl
04089D DD E1       1282   	pop ix ; IX = frame address
04089F 51          1283   	ld d,c
0408A0 15          1284   	dec d
0408A1 ED 5C       1285   	mlt de ; DE = sprite length - sprite width
0408A3 19          1286   	add hl,de ; HL = frame address + sprite length - sprite width
0408A4 E5          1287   	push hl
0408A5 FD E1       1288   	pop iy ; IY = IX + sprite length - sprite width
0408A7 21 00 00 00 1289   	ld hl,$000000
0408AB 69          1290   	ld l,c ; HL = sprite width
0408AC             1291   
0408AC             1292   mf_loop2:
0408AC F5          1293   	push af
0408AD D5          1294   	push de
0408AE DD E5       1295   	push ix
0408B0 FD E5       1296   	push iy
0408B2             1297   mf_loop3:
0408B2 DD 5E 00    1298   	ld e,(ix+0)
0408B5 FD 56 00    1299   	ld d,(iy+0)
0408B8 DD 72 00    1300   	ld (ix+0),d
0408BB FD 73 00    1301   	ld (iy+0),e
0408BE DD 23       1302   	inc ix
0408C0 FD 23       1303   	inc iy
0408C2 3D          1304   	dec a
0408C3 FE 00       1305   	cp 0
0408C5 20 EB       1306   	jr nz,mf_loop3
0408C7 FD E1       1307   	pop iy
0408C9 DD E1       1308   	pop ix
0408CB D1          1309   	pop de
0408CC F1          1310   	pop af
0408CD EB          1311   	ex de,hl
0408CE DD 19       1312   	add ix,de
0408D0 EB          1313   	ex de,hl
0408D1 E5          1314   	push hl
0408D2 FD E5       1315   	push iy
0408D4 E1          1316   	pop hl
0408D5 D1          1317   	pop de
0408D6 B7          1318   	or a
0408D7 ED 52       1319   	sbc hl,de
0408D9 E5          1320   	push hl
0408DA D5          1321   	push de
0408DB E1          1322   	pop hl
0408DC FD E1       1323   	pop iy
0408DE 10 CC       1324   	djnz mf_loop2
0408E0             1325   
0408E0 CD D2 15 04 1326   	call fn_refresh_sprite
0408E4 C9          1327   	ret
0408E5             1328   
0408E5             1329   dsl_flood_fill:
0408E5 21 B6 FF FF 1330   	ld hl,KEY_RETURN
0408E9 CD E0 16 04 1331   	call fn_inkey
0408ED FE 00       1332   	cp 0
0408EF 20 F4       1333   	jr nz,dsl_flood_fill
0408F1             1334   
0408F1             1335   	; hide the cursor
0408F1 CD 82 0C 04 1336   	call fn_draw_pixel_without_border
0408F5             1337   
0408F5             1338   	; memorize pixel coordinates
0408F5 3A 3E 17 04 1339   	ld a,(xpix)
0408F9 32 40 17 04 1340   	ld (memxpix),a
0408FD 3A 3F 17 04 1341   	ld a,(ypix)
040901 32 41 17 04 1342   	ld (memypix),a
040905             1343   
040905             1344   	; fill all recursively
040905 3A 3E 17 04 1345   	ld a,(xpix)
040909 5F          1346   	ld e,a
04090A 3A 3F 17 04 1347   	ld a,(ypix)
04090E 57          1348   	ld d,a
04090F CD 30 09 04 1349   	call dsl_flood_fill_loop
040913             1350   
040913             1351   	; refresh all the sprite
040913 CD D2 15 04 1352   	call fn_refresh_sprite
040917             1353   
040917             1354   	; hide the cursor again
040917 CD 82 0C 04 1355   	call fn_draw_pixel_without_border
04091B             1356   
04091B             1357   	; restore pixel coordinates
04091B             1358   	; and cursor
04091B 3A 40 17 04 1359   	ld a,(memxpix)
04091F 32 3E 17 04 1360   	ld (xpix),a
040923 3A 41 17 04 1361   	ld a,(memypix)
040927 32 3F 17 04 1362   	ld (ypix),a
04092B CD 6E 0C 04 1363   	call fn_draw_pixel_with_border
04092F C9          1364   	ret
040930             1365   
040930             1366   dsl_flood_fill_loop:
040930 D5          1367   	push de
040931             1368   
040931 DD 21 43 17 1369   	ld ix,spr_size
       04          
040936             1370   
040936             1371   	; out  of the sprite area ?
040936 7B          1372   	ld a,e
040937 DD BE 00    1373   	cp (ix+0)
04093A D2 83 09 04 1374   	jp nc,ffl_exit
04093E             1375   
04093E             1376   	; out  of the sprite area ?
04093E 7A          1377   	ld a,d
04093F DD BE 00    1378   	cp (ix+0)
040942 D2 83 09 04 1379   	jp nc,ffl_exit
040946             1380   
040946             1381   	; replace current pixel, if it is
040946             1382   	; inside the sprite area,
040946             1383   	; and has not the select palette color
040946 7B          1384   	ld a,e
040947 32 3E 17 04 1385   	ld (xpix),a
04094B 7A          1386   	ld a,d
04094C 32 3F 17 04 1387   	ld (ypix),a
040950 CD 98 0C 04 1388   	call fn_get_pixel_color
040954 21 44 17 04 1389   	ld hl,current_pen
040958 BE          1390   	cp (hl)
040959 CA 83 09 04 1391   	jp z,ffl_exit
04095D 7E          1392   	ld a,(hl)
04095E CD DA 0C 04 1393   	call fn_set_pixel_color
040962             1394   
040962             1395   	; restore coordinates
040962 3A 3E 17 04 1396   	ld a,(xpix)
040966 5F          1397   	ld e,a
040967 3A 3F 17 04 1398   	ld a,(ypix)
04096B 57          1399   	ld d,a
04096C             1400   
04096C             1401   	; draw pixel at right
04096C 1C          1402   	inc e
04096D CD 30 09 04 1403   	call dsl_flood_fill_loop
040971 1D          1404   	dec e
040972             1405   	; draw pixel at left
040972 1D          1406   	dec e
040973 CD 30 09 04 1407   	call dsl_flood_fill_loop
040977 1C          1408   	inc e
040978             1409   	; draw pixel up
040978 14          1410   	inc d
040979 CD 30 09 04 1411   	call dsl_flood_fill_loop
04097D 15          1412   	dec d
04097E             1413   	; draw pixel down
04097E 15          1414   	dec d
04097F CD 30 09 04 1415   	call dsl_flood_fill_loop
040983             1416   
040983             1417   ffl_exit:
040983 D1          1418   	pop de
040984 C9          1419   	ret
040985             1420   
040985             1421   ; change current tool to palette tool
040985             1422   dsl_palette_tool:
040985 21 9F FF FF 1423   	ld hl,KEY_TAB
040989 CD E0 16 04 1424   	call fn_inkey
04098D FE 00       1425   	cp 0
04098F 20 F4       1426   	jr nz,dsl_palette_tool
040991             1427   
040991             1428   	; hide sprite drawing cursor
040991 CD 82 0C 04 1429   	call fn_draw_pixel_without_border
040995             1430   
040995             1431   	; draw selected palette color
040995 21 44 17 04 1432   	ld hl,current_pen
040999 4E          1433   	ld c,(hl)
04099A CD 36 0D 04 1434   	call fn_draw_palette_with_border
04099E             1435   
04099E             1436   ; select palette color
04099E             1437   dsl_palette_tool_loop:
04099E             1438   	; move to left color in the palette
04099E 21 E6 FF FF 1439   	ld hl,KEY_LEFT
0409A2 CD E0 16 04 1440   	call fn_inkey
0409A6 FE 01       1441   	cp 1
0409A8 CC 67 0A 04 1442   	call z,dsl_dec_pen
0409AC             1443   
0409AC             1444   	; move to right color in the palette
0409AC 21 86 FF FF 1445   	ld hl,KEY_RIGHT
0409B0 CD E0 16 04 1446   	call fn_inkey
0409B4 FE 01       1447   	cp 1
0409B6 CC 92 0A 04 1448   	call z,dsl_inc_pen
0409BA             1449   
0409BA             1450   	; return to draw sprite tool
0409BA 21 9F FF FF 1451   	ld hl,KEY_TAB
0409BE CD E0 16 04 1452   	call fn_inkey
0409C2 FE 01       1453   	cp 1
0409C4 CA 4A 0A 04 1454   	jp z,dsl_draw_sprite_tool
0409C8             1455   
0409C8             1456   	; load palette
0409C8 21 A9 FF FF 1457   	ld hl,KEY_L
0409CC CD E0 16 04 1458   	call fn_inkey
0409D0 FE 01       1459   	cp 1
0409D2 CC F6 09 04 1460   	call z,dslp_load_palette
0409D6             1461   
0409D6             1462   	; save palette
0409D6 21 AE FF FF 1463   	ld hl,KEY_S
0409DA CD E0 16 04 1464   	call fn_inkey
0409DE FE 01       1465   	cp 1
0409E0 CC 24 0A 04 1466   	call z,dslp_save_palette
0409E4             1467   
0409E4             1468   	; exit program
0409E4 21 8F FF FF 1469   	ld hl,KEY_ESCAPE
0409E8 CD E0 16 04 1470   	call fn_inkey
0409EC FE 01       1471   	cp 1
0409EE CA BD 0A 04 1472   	jp z,exit_program
0409F2             1473   
0409F2 C3 9E 09 04 1474   	jp dsl_palette_tool_loop
0409F6             1475   
0409F6             1476   dslp_load_palette:
0409F6 21 A9 FF FF 1477   	ld hl,KEY_L
0409FA CD E0 16 04 1478   	call fn_inkey
0409FE FE 00       1479   	cp 0
040A00 20 F4       1480   	jr nz,dslp_load_palette
040A02             1481   
040A02 21 44 17 04 1482   	ld hl,current_pen
040A06 4E          1483   	ld c,(hl)
040A07 CD 9B 0D 04 1484   	call fn_draw_palette_without_border
040A0B CD 06 0F 04 1485   	call fn_load_palette
040A0F 21 44 17 04 1486   	ld hl,current_pen
040A13 4E          1487   	ld c,(hl)
040A14 CD D2 15 04 1488   	call fn_refresh_sprite
040A18 CD 36 0D 04 1489   	call fn_draw_palette_with_border
040A1C CD 12 16 04 1490   	call fn_change_frame
040A20 C3 9E 09 04 1491   	jp dsl_palette_tool_loop
040A24             1492   
040A24             1493   dslp_save_palette:
040A24 21 AE FF FF 1494   	ld hl,KEY_S
040A28 CD E0 16 04 1495   	call fn_inkey
040A2C FE 00       1496   	cp 0
040A2E 20 F4       1497   	jr nz,dslp_save_palette
040A30             1498   
040A30 21 44 17 04 1499   	ld hl,current_pen
040A34 4E          1500   	ld c,(hl)
040A35 CD 9B 0D 04 1501   	call fn_draw_palette_without_border
040A39 CD 86 11 04 1502   	call fn_save_palette
040A3D 21 44 17 04 1503   	ld hl,current_pen
040A41 4E          1504   	ld c,(hl)
040A42 CD 36 0D 04 1505   	call fn_draw_palette_with_border
040A46 C3 9E 09 04 1506   	jp dsl_palette_tool_loop
040A4A             1507   
040A4A             1508   dsl_draw_sprite_tool:
040A4A 21 9F FF FF 1509   	ld hl,KEY_TAB
040A4E CD E0 16 04 1510   	call fn_inkey
040A52 FE 00       1511   	cp 0
040A54 20 F4       1512   	jr nz,dsl_draw_sprite_tool
040A56             1513   
040A56             1514   	; unselect palette color
040A56 21 44 17 04 1515   	ld hl,current_pen
040A5A 4E          1516   	ld c,(hl)
040A5B CD 9B 0D 04 1517   	call fn_draw_palette_without_border
040A5F             1518   
040A5F             1519   	; draw the pixel with a border
040A5F CD 6E 0C 04 1520   	call fn_draw_pixel_with_border
040A63             1521   
040A63 C3 F2 02 04 1522   	jp draw_sprite_loop
040A67             1523   
040A67             1524   dsl_dec_pen:
040A67 21 44 17 04 1525   	ld hl,current_pen
040A6B 7E          1526   	ld a,(hl)
040A6C FE 00       1527   	cp COLOR_MIN
040A6E CA 9E 09 04 1528   	jp z,dsl_palette_tool_loop
040A72             1529   
040A72 F5          1530   	push af
040A73 E5          1531   	push hl
040A74             1532   
040A74             1533   	; unselect palette color
040A74 21 44 17 04 1534   	ld hl,current_pen
040A78 4E          1535   	ld c,(hl)
040A79 CD 9B 0D 04 1536   	call fn_draw_palette_without_border
040A7D             1537   
040A7D E1          1538   	pop hl
040A7E F1          1539   	pop af
040A7F             1540   
040A7F             1541   	; dec the pen
040A7F 3D          1542   	dec a
040A80 77          1543   	ld (hl),a
040A81             1544   
040A81             1545   	; select palette color
040A81 21 44 17 04 1546   	ld hl,current_pen
040A85 4E          1547   	ld c,(hl)
040A86 CD 36 0D 04 1548   	call fn_draw_palette_with_border
040A8A CD 5B 16 04 1549   	call fn_slowdown
040A8E C3 9E 09 04 1550   	jp dsl_palette_tool_loop
040A92             1551   
040A92             1552   dsl_inc_pen:
040A92 21 44 17 04 1553   	ld hl,current_pen
040A96 7E          1554   	ld a,(hl)
040A97 FE 3F       1555   	cp COLOR_MAX
040A99 CA 9E 09 04 1556   	jp z,dsl_palette_tool_loop
040A9D             1557   
040A9D F5          1558   	push af
040A9E E5          1559   	push hl
040A9F             1560   
040A9F             1561   	; unselect palette color
040A9F 21 44 17 04 1562   	ld hl,current_pen
040AA3 4E          1563   	ld c,(hl)
040AA4 CD 9B 0D 04 1564   	call fn_draw_palette_without_border
040AA8             1565   
040AA8 E1          1566   	pop hl
040AA9 F1          1567   	pop af
040AAA             1568   
040AAA             1569   	; inc the pen
040AAA 3C          1570   	inc a
040AAB 77          1571   	ld (hl),a
040AAC             1572   
040AAC             1573   	; select palette color
040AAC 21 44 17 04 1574   	ld hl,current_pen
040AB0 4E          1575   	ld c,(hl)
040AB1 CD 36 0D 04 1576   	call fn_draw_palette_with_border
040AB5 CD 5B 16 04 1577   	call fn_slowdown
040AB9 C3 9E 09 04 1578   	jp dsl_palette_tool_loop
040ABD             1579   
040ABD             1580   ; exit program
040ABD             1581   exit_program:
040ABD             1582   	; reset to mode 1
040ABD             1583   	vdu 22
040ABD 3E 16       0001M  		LD	A, function
040ABF 49 D7       0002M  		RST.LIS	10h
040AC1             1584   	vdu 1
040AC1 3E 01       0001M  		LD	A, function
040AC3 49 D7       0002M  		RST.LIS	10h
040AC5             1585   
040AC5             1586   	; position the texte cursor at home
040AC5             1587   	vdu 30
040AC5 3E 1E       0001M  		LD	A, function
040AC7 49 D7       0002M  		RST.LIS	10h
040AC9             1588   
040AC9             1589   	; show cursor
040AC9             1590   	vdu 23
040AC9 3E 17       0001M  		LD	A, function
040ACB 49 D7       0002M  		RST.LIS	10h
040ACD             1591   	vdu 1
040ACD 3E 01       0001M  		LD	A, function
040ACF 49 D7       0002M  		RST.LIS	10h
040AD1             1592   	vdu 1
040AD1 3E 01       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5             1593   
040AD5 FD E1       1594   	pop iy
040AD7 DD E1       1595   	pop ix
040AD9 D1          1596   	pop de
040ADA C1          1597   	pop bc
040ADB F1          1598   	pop af
040ADC 21 00 00 00 1599   	ld hl,0
040AE0             1600   
040AE0 C9          1601   	ret
040AE1             1602   ;======================================================================
040AE1             1603   
040AE1             1604   ; draw a rectangle
040AE1             1605   fn_rect:
040AE1             1606   	vdu 25
040AE1 3E 19       0001M  		LD	A, function
040AE3 49 D7       0002M  		RST.LIS	10h
040AE5             1607   	vdu 4
040AE5 3E 04       0001M  		LD	A, function
040AE7 49 D7       0002M  		RST.LIS	10h
040AE9 DD 21 2E 17 1608   	ld ix,x1
       04          
040AEE DD 7E 00    1609   	ld a,(ix + 0)
040AF1             1610   	vdu_a
040AF1 49 D7       0001M  		RST.LIS	10h
040AF3 DD 7E 01    1611   	ld a,(ix + 1)
040AF6             1612   	vdu_a
040AF6 49 D7       0001M  		RST.LIS	10h
040AF8 FD 21 30 17 1613   	ld iy,y1
       04          
040AFD FD 7E 00    1614   	ld a,(iy + 0)
040B00             1615   	vdu_a
040B00 49 D7       0001M  		RST.LIS	10h
040B02 FD 7E 01    1616   	ld a,(iy + 1)
040B05             1617   	vdu_a
040B05 49 D7       0001M  		RST.LIS	10h
040B07             1618   
040B07             1619   	vdu 25
040B07 3E 19       0001M  		LD	A, function
040B09 49 D7       0002M  		RST.LIS	10h
040B0B             1620   	vdu 5
040B0B 3E 05       0001M  		LD	A, function
040B0D 49 D7       0002M  		RST.LIS	10h
040B0F DD 21 32 17 1621   	ld ix,x2
       04          
040B14 DD 7E 00    1622   	ld a,(ix + 0)
040B17             1623   	vdu_a
040B17 49 D7       0001M  		RST.LIS	10h
040B19 DD 7E 01    1624   	ld a,(ix + 1)
040B1C             1625   	vdu_a
040B1C 49 D7       0001M  		RST.LIS	10h
040B1E FD 21 30 17 1626   	ld iy,y1
       04          
040B23 FD 7E 00    1627   	ld a,(iy + 0)
040B26             1628   	vdu_a
040B26 49 D7       0001M  		RST.LIS	10h
040B28 FD 7E 01    1629   	ld a,(iy + 1)
040B2B             1630   	vdu_a
040B2B 49 D7       0001M  		RST.LIS	10h
040B2D             1631   
040B2D             1632   	vdu 25
040B2D 3E 19       0001M  		LD	A, function
040B2F 49 D7       0002M  		RST.LIS	10h
040B31             1633   	vdu 5
040B31 3E 05       0001M  		LD	A, function
040B33 49 D7       0002M  		RST.LIS	10h
040B35 DD 21 32 17 1634   	ld ix,x2
       04          
040B3A DD 7E 00    1635   	ld a,(ix + 0)
040B3D             1636   	vdu_a
040B3D 49 D7       0001M  		RST.LIS	10h
040B3F DD 7E 01    1637   	ld a,(ix + 1)
040B42             1638   	vdu_a
040B42 49 D7       0001M  		RST.LIS	10h
040B44 FD 21 34 17 1639   	ld iy,y2
       04          
040B49 FD 7E 00    1640   	ld a,(iy + 0)
040B4C             1641   	vdu_a
040B4C 49 D7       0001M  		RST.LIS	10h
040B4E FD 7E 01    1642   	ld a,(iy + 1)
040B51             1643   	vdu_a
040B51 49 D7       0001M  		RST.LIS	10h
040B53             1644   
040B53             1645   	vdu 25
040B53 3E 19       0001M  		LD	A, function
040B55 49 D7       0002M  		RST.LIS	10h
040B57             1646   	vdu 5
040B57 3E 05       0001M  		LD	A, function
040B59 49 D7       0002M  		RST.LIS	10h
040B5B DD 21 2E 17 1647   	ld ix,x1
       04          
040B60 DD 7E 00    1648   	ld a,(ix + 0)
040B63             1649   	vdu_a
040B63 49 D7       0001M  		RST.LIS	10h
040B65 DD 7E 01    1650   	ld a,(ix + 1)
040B68             1651   	vdu_a
040B68 49 D7       0001M  		RST.LIS	10h
040B6A FD 21 34 17 1652   	ld iy,y2
       04          
040B6F FD 7E 00    1653   	ld a,(iy + 0)
040B72             1654   	vdu_a
040B72 49 D7       0001M  		RST.LIS	10h
040B74 FD 7E 01    1655   	ld a,(iy + 1)
040B77             1656   	vdu_a
040B77 49 D7       0001M  		RST.LIS	10h
040B79             1657   
040B79             1658   	vdu 25
040B79 3E 19       0001M  		LD	A, function
040B7B 49 D7       0002M  		RST.LIS	10h
040B7D             1659   	vdu 5
040B7D 3E 05       0001M  		LD	A, function
040B7F 49 D7       0002M  		RST.LIS	10h
040B81 DD 21 2E 17 1660   	ld ix,x1
       04          
040B86 DD 7E 00    1661   	ld a,(ix + 0)
040B89             1662   	vdu_a
040B89 49 D7       0001M  		RST.LIS	10h
040B8B DD 7E 01    1663   	ld a,(ix + 1)
040B8E             1664   	vdu_a
040B8E 49 D7       0001M  		RST.LIS	10h
040B90 FD 21 30 17 1665   	ld iy,y1
       04          
040B95 FD 7E 00    1666   	ld a,(iy + 0)
040B98             1667   	vdu_a
040B98 49 D7       0001M  		RST.LIS	10h
040B9A FD 7E 01    1668   	ld a,(iy + 1)
040B9D             1669   	vdu_a
040B9D 49 D7       0001M  		RST.LIS	10h
040B9F             1670   
040B9F C9          1671   	ret
040BA0             1672   
040BA0             1673   ; draw a filled rectangle
040BA0             1674   fn_rectf:
040BA0 DD 21 2E 17 1675   	ld ix,x1
       04          
040BA5 FD 21 30 17 1676   	ld iy,y1
       04          
040BAA             1677   
040BAA             1678   	vdu 25
040BAA 3E 19       0001M  		LD	A, function
040BAC 49 D7       0002M  		RST.LIS	10h
040BAE             1679   	vdu 4
040BAE 3E 04       0001M  		LD	A, function
040BB0 49 D7       0002M  		RST.LIS	10h
040BB2 DD 7E 00    1680   	ld a,(ix+0)
040BB5             1681   	vdu_a
040BB5 49 D7       0001M  		RST.LIS	10h
040BB7 DD 7E 01    1682   	ld a,(ix+1)
040BBA             1683   	vdu_a
040BBA 49 D7       0001M  		RST.LIS	10h
040BBC FD 7E 00    1684   	ld a,(iy+0)
040BBF             1685   	vdu_a
040BBF 49 D7       0001M  		RST.LIS	10h
040BC1 FD 7E 01    1686   	ld a,(iy+1)
040BC4             1687   	vdu_a
040BC4 49 D7       0001M  		RST.LIS	10h
040BC6             1688   
040BC6 DD 21 32 17 1689   	ld ix,x2
       04          
040BCB FD 21 34 17 1690   	ld iy,y2
       04          
040BD0             1691   
040BD0             1692   	vdu 25
040BD0 3E 19       0001M  		LD	A, function
040BD2 49 D7       0002M  		RST.LIS	10h
040BD4             1693   	vdu 101
040BD4 3E 65       0001M  		LD	A, function
040BD6 49 D7       0002M  		RST.LIS	10h
040BD8 DD 7E 00    1694   	ld a,(ix+0)
040BDB             1695   	vdu_a
040BDB 49 D7       0001M  		RST.LIS	10h
040BDD DD 7E 01    1696   	ld a,(ix+1)
040BE0             1697   	vdu_a
040BE0 49 D7       0001M  		RST.LIS	10h
040BE2 FD 7E 00    1698   	ld a,(iy+0)
040BE5             1699   	vdu_a
040BE5 49 D7       0001M  		RST.LIS	10h
040BE7 FD 7E 01    1700   	ld a,(iy+1)
040BEA             1701   	vdu_a
040BEA 49 D7       0001M  		RST.LIS	10h
040BEC             1702   
040BEC C9          1703   	ret
040BED             1704   
040BED             1705   fn_calc_pixel_coords:
040BED 11 00 00 00 1706   	ld de,$000000 ; reset deu
040BF1             1707   
040BF1             1708   	; calculate coordinates x of the resized pixel
040BF1 21 3E 17 04 1709   	ld hl,xpix
040BF5 5E          1710   	ld e,(hl) ; E = xpix
040BF6 21 42 17 04 1711   	ld hl,pixel_width
040BFA 56          1712   	ld d,(hl) ; D = pixel_width
040BFB D5          1713   	push de
040BFC E1          1714   	pop hl ; HL = DE
040BFD ED 6C       1715   	mlt hl ; HL = xpix * pixel_width
040BFF DD 21 36 17 1716   	ld ix,xs1
       04          
040C04 DD 5E 00    1717   	ld e,(ix+0)
040C07 DD 56 01    1718   	ld d,(ix+1)
040C0A 13          1719   	inc de ; DE = xs1 + 1
040C0B 19          1720   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040C0C FD 21 2E 17 1721   	ld iy,x1
       04          
040C11 FD 75 00    1722   	ld (iy+0),l
040C14 FD 74 01    1723   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040C17 E5          1724   	push hl
040C18 21 42 17 04 1725   	ld hl,pixel_width
040C1C 16 00       1726   	ld d,0
040C1E 5E          1727   	ld e,(hl)
040C1F E1          1728   	pop hl
040C20 19          1729   	add hl,de
040C21 2B          1730   	dec hl
040C22 FD 21 32 17 1731   	ld iy,x2
       04          
040C27 FD 75 00    1732   	ld (iy+0),l
040C2A FD 74 01    1733   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040C2D             1734   
040C2D 11 00 00 00 1735   	ld de,$000000 ; reset deu
040C31             1736   
040C31             1737   	; calculate coordinates y of the resized pixel
040C31 21 3F 17 04 1738   	ld hl,ypix
040C35 5E          1739   	ld e,(hl) ; E = ypix
040C36 21 42 17 04 1740   	ld hl,pixel_width
040C3A 56          1741   	ld d,(hl) ; D = pixel_width
040C3B D5          1742   	push de
040C3C E1          1743   	pop hl ; HL = DE
040C3D ED 6C       1744   	mlt hl ; HL = ypix * pixel_width
040C3F DD 21 38 17 1745   	ld ix,ys1
       04          
040C44 DD 5E 00    1746   	ld e,(ix+0)
040C47 DD 56 01    1747   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040C4A 13          1748   	inc de ; DE = ys1 + 1
040C4B 19          1749   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040C4C FD 21 30 17 1750   	ld iy,y1
       04          
040C51 FD 75 00    1751   	ld (iy+0),l
040C54 FD 74 01    1752   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040C57 E5          1753   	push hl
040C58 21 42 17 04 1754   	ld hl,pixel_width
040C5C 16 00       1755   	ld d,0
040C5E 5E          1756   	ld e,(hl)
040C5F E1          1757   	pop hl
040C60 19          1758   	add hl,de
040C61 2B          1759   	dec hl
040C62 FD 21 34 17 1760   	ld iy,y2
       04          
040C67 FD 75 00    1761   	ld (iy+0),l
040C6A FD 74 01    1762   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C6D             1763   
040C6D C9          1764   	ret
040C6E             1765   
040C6E             1766   ; draw the resized pixel border, with its color
040C6E             1767   fn_draw_pixel_with_border:
040C6E CD 82 0C 04 1768   	call fn_draw_pixel_without_border
040C72             1769   
040C72             1770   	; set graphics pen
040C72             1771   	vdu 18
040C72 3E 12       0001M  		LD	A, function
040C74 49 D7       0002M  		RST.LIS	10h
040C76             1772   	vdu 0
040C76 3E 00       0001M  		LD	A, function
040C78 49 D7       0002M  		RST.LIS	10h
040C7A             1773   	vdu COLOR_GREY ; grey pen
040C7A 3E 07       0001M  		LD	A, function
040C7C 49 D7       0002M  		RST.LIS	10h
040C7E             1774   
040C7E             1775   	; draw the sprite's border rectangle
040C7E C3 E1 0A 04 1776   	jp fn_rect
040C82             1777   
040C82             1778   ; draw the resized pixel color
040C82             1779   fn_draw_pixel_without_border:
040C82 CD ED 0B 04 1780   	call fn_calc_pixel_coords
040C86             1781   
040C86             1782   	; set graphics pen
040C86             1783   	vdu 18
040C86 3E 12       0001M  		LD	A, function
040C88 49 D7       0002M  		RST.LIS	10h
040C8A             1784   	vdu 0
040C8A 3E 00       0001M  		LD	A, function
040C8C 49 D7       0002M  		RST.LIS	10h
040C8E CD 98 0C 04 1785   	call fn_get_pixel_color
040C92             1786   	vdu_a
040C92 49 D7       0001M  		RST.LIS	10h
040C94             1787   
040C94             1788   	; draw the sprite's color rectangle
040C94 C3 A0 0B 04 1789   	jp fn_rectf
040C98             1790   
040C98             1791   ; get pixel color value in the sprite buffer
040C98             1792   ; returns A: pixel color (0-63)
040C98             1793   fn_get_pixel_color:
040C98 11 00 00 00 1794   	ld de,$000000 ; reset deu
040C9C             1795   
040C9C             1796   	; calculate the offset to add to the address
040C9C 21 3F 17 04 1797   	ld hl,ypix
040CA0 5E          1798   	ld e,(hl) ; E = ypix
040CA1 21 43 17 04 1799   	ld hl,spr_size
040CA5 56          1800   	ld d,(hl) ; D = sprsize
040CA6 D5          1801   	push de
040CA7 E1          1802   	pop hl
040CA8 ED 6C       1803   	mlt hl ; HL = ypix * sprsize
040CAA E5          1804   	push hl
040CAB 21 3E 17 04 1805   	ld hl,xpix
040CAF 5E          1806   	ld e,(hl)
040CB0 16 00       1807   	ld d,0
040CB2 E1          1808   	pop hl
040CB3 19          1809   	add hl,de ; HL = (ypix * sprsize) + xpix
040CB4             1810   
040CB4 11 50 18 04 1811   	ld de,current_frame
040CB8 1A          1812   	ld a,(de)
040CB9 FE 00       1813   	cp 0
040CBB 28 16       1814   	jr z,gpc_end_loop
040CBD             1815   
040CBD 47          1816   	ld b,a
040CBE E5          1817   	push hl
040CBF 11 00 00 00 1818   	ld de,$000000
040CC3 21 43 17 04 1819   	ld hl,spr_size
040CC7 5E          1820   	ld e,(hl)
040CC8 56          1821   	ld d,(hl)
040CC9 D5          1822   	push de
040CCA E1          1823   	pop hl
040CCB ED 6C       1824   	mlt hl
040CCD E5          1825   	push hl
040CCE D1          1826   	pop de ; DE = sprsize²
040CCF E1          1827   	pop hl
040CD0             1828   
040CD0             1829   gpc_loop:
040CD0 19          1830   	add hl,de
040CD1 10 FD       1831   	djnz gpc_loop
040CD3             1832   
040CD3             1833   gpc_end_loop:
040CD3             1834   	; add the offset to the address
040CD3 11 59 18 04 1835   	ld de,sprite_buffer
040CD7 19          1836   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CD8             1837   
040CD8             1838   	; get pixel color value
040CD8 7E          1839   	ld a,(hl)
040CD9             1840   
040CD9 C9          1841   	ret
040CDA             1842   
040CDA             1843   ; get pixel color value in the sprite buffer
040CDA             1844   ; A: pixel color (0-63)
040CDA             1845   fn_set_pixel_color:
040CDA 11 00 00 00 1846   	ld de,$000000 ; reset deu
040CDE             1847   
040CDE             1848   	; calculate the offset to add to the address
040CDE 21 3F 17 04 1849   	ld hl,ypix
040CE2 5E          1850   	ld e,(hl) ; E = ypix
040CE3 21 43 17 04 1851   	ld hl,spr_size
040CE7 56          1852   	ld d,(hl) ; D = sprsize
040CE8 D5          1853   	push de
040CE9 E1          1854   	pop hl
040CEA ED 6C       1855   	mlt hl ; HL = ypix * sprsize
040CEC E5          1856   	push hl
040CED 21 3E 17 04 1857   	ld hl,xpix
040CF1 5E          1858   	ld e,(hl)
040CF2 16 00       1859   	ld d,0
040CF4 E1          1860   	pop hl
040CF5 19          1861   	add hl,de ; HL = (ypix * sprsize) + xpix
040CF6 F5          1862   	push af
040CF7             1863   
040CF7 11 50 18 04 1864   	ld de,current_frame
040CFB 1A          1865   	ld a,(de)
040CFC FE 00       1866   	cp 0
040CFE 28 16       1867   	jr z,spc_end_loop
040D00             1868   
040D00 47          1869   	ld b,a
040D01 E5          1870   	push hl
040D02 11 00 00 00 1871   	ld de,$000000
040D06 21 43 17 04 1872   	ld hl,spr_size
040D0A 5E          1873   	ld e,(hl)
040D0B 56          1874   	ld d,(hl)
040D0C D5          1875   	push de
040D0D E1          1876   	pop hl
040D0E ED 6C       1877   	mlt hl
040D10 E5          1878   	push hl
040D11 D1          1879   	pop de ; DE = sprsize²
040D12 E1          1880   	pop hl
040D13             1881   
040D13             1882   spc_loop:
040D13 19          1883   	add hl,de
040D14 10 FD       1884   	djnz spc_loop
040D16             1885   
040D16             1886   spc_end_loop:
040D16             1887   
040D16             1888   	; add the offset to the address
040D16 11 59 18 04 1889   	ld de,sprite_buffer
040D1A 19          1890   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040D1B             1891   
040D1B             1892   	; set pixel color value
040D1B F1          1893   	pop af
040D1C 77          1894   	ld (hl),a
040D1D             1895   
040D1D C9          1896   	ret
040D1E             1897   
040D1E             1898   fn_move_up:
040D1E 21 3F 17 04 1899   	ld hl,ypix
040D22 35          1900   	dec (hl)
040D23 C9          1901   	ret
040D24             1902   
040D24             1903   fn_move_down:
040D24 21 3F 17 04 1904   	ld hl,ypix
040D28 34          1905   	inc (hl)
040D29 C9          1906   	ret
040D2A             1907   
040D2A             1908   fn_move_left:
040D2A 21 3E 17 04 1909   	ld hl,xpix
040D2E 35          1910   	dec (hl)
040D2F C9          1911   	ret
040D30             1912   
040D30             1913   fn_move_right:
040D30 21 3E 17 04 1914   	ld hl,xpix
040D34 34          1915   	inc (hl)
040D35 C9          1916   	ret
040D36             1917   
040D36             1918   ; draw palette color whit border and selection
040D36             1919   ; C = color number (0-63)
040D36             1920   fn_draw_palette_with_border:
040D36 C5          1921   	push bc
040D37             1922   
040D37             1923   	; choose palette color
040D37             1924   	vdu 18
040D37 3E 12       0001M  		LD	A, function
040D39 49 D7       0002M  		RST.LIS	10h
040D3B             1925   	vdu 0
040D3B 3E 00       0001M  		LD	A, function
040D3D 49 D7       0002M  		RST.LIS	10h
040D3F C1          1926   	pop bc
040D40 C5          1927   	push bc
040D41 79          1928   	ld a,c
040D42             1929   	vdu_a
040D42 49 D7       0001M  		RST.LIS	10h
040D44             1930   
040D44             1931   	; store coordinates for a palette square
040D44 DD 21 2E 17 1932   	ld ix,x1
       04          
040D49 E1          1933   	pop hl
040D4A E5          1934   	push hl
040D4B 26 05       1935   	ld h,5
040D4D ED 6C       1936   	mlt hl
040D4F E5          1937   	push hl
040D50 DD 75 00    1938   	ld (ix+0),l
040D53 DD 74 01    1939   	ld (ix+1),h
040D56             1940   
040D56 DD 21 30 17 1941   	ld ix,y1
       04          
040D5B 21 00 00 00 1942   	ld hl,0
040D5F DD 75 00    1943   	ld (ix+0),l
040D62 DD 74 01    1944   	ld (ix+1),h
040D65             1945   
040D65 DD 21 32 17 1946   	ld ix,x2
       04          
040D6A E1          1947   	pop hl
040D6B 11 04 00 00 1948   	ld de,4
040D6F 19          1949   	add hl,de
040D70 DD 75 00    1950   	ld (ix+0),l
040D73 DD 74 01    1951   	ld (ix+1),h
040D76             1952   
040D76 DD 21 34 17 1953   	ld ix,y2
       04          
040D7B 21 0A 00 00 1954   	ld hl,10
040D7F DD 75 00    1955   	ld (ix+0),l
040D82 DD 74 01    1956   	ld (ix+1),h
040D85             1957   
040D85             1958   	; draw the palette filled square
040D85 CD A0 0B 04 1959   	call fn_rectf
040D89             1960   
040D89             1961   	; choose grey color
040D89             1962   	vdu 18
040D89 3E 12       0001M  		LD	A, function
040D8B 49 D7       0002M  		RST.LIS	10h
040D8D             1963   	vdu 0
040D8D 3E 00       0001M  		LD	A, function
040D8F 49 D7       0002M  		RST.LIS	10h
040D91 3E 07       1964   	ld a,COLOR_GREY
040D93             1965   	vdu_a
040D93 49 D7       0001M  		RST.LIS	10h
040D95             1966   
040D95             1967   	; draw the palette square border
040D95 CD E1 0A 04 1968   	call fn_rect
040D99             1969   
040D99             1970   	; next color ?
040D99 C1          1971   	pop bc
040D9A             1972   
040D9A C9          1973   	ret
040D9B             1974   
040D9B             1975   ; draw palette color whitout border and selection
040D9B             1976   ; C = color number (0-63)
040D9B             1977   fn_draw_palette_without_border:
040D9B C5          1978   	push bc
040D9C             1979   
040D9C             1980   	; choose palette color
040D9C             1981   	vdu 18
040D9C 3E 12       0001M  		LD	A, function
040D9E 49 D7       0002M  		RST.LIS	10h
040DA0             1982   	vdu 0
040DA0 3E 00       0001M  		LD	A, function
040DA2 49 D7       0002M  		RST.LIS	10h
040DA4 C1          1983   	pop bc
040DA5 C5          1984   	push bc
040DA6 79          1985   	ld a,c
040DA7             1986   	vdu_a
040DA7 49 D7       0001M  		RST.LIS	10h
040DA9             1987   
040DA9             1988   	; store coordinates for a palette square
040DA9 DD 21 2E 17 1989   	ld ix,x1
       04          
040DAE E1          1990   	pop hl
040DAF E5          1991   	push hl
040DB0 26 05       1992   	ld h,5
040DB2 ED 6C       1993   	mlt hl
040DB4 E5          1994   	push hl
040DB5 DD 75 00    1995   	ld (ix+0),l
040DB8 DD 74 01    1996   	ld (ix+1),h
040DBB             1997   
040DBB DD 21 30 17 1998   	ld ix,y1
       04          
040DC0 21 00 00 00 1999   	ld hl,0
040DC4 DD 75 00    2000   	ld (ix+0),l
040DC7 DD 74 01    2001   	ld (ix+1),h
040DCA             2002   
040DCA DD 21 32 17 2003   	ld ix,x2
       04          
040DCF E1          2004   	pop hl
040DD0 11 04 00 00 2005   	ld de,4
040DD4 19          2006   	add hl,de
040DD5 DD 75 00    2007   	ld (ix+0),l
040DD8 DD 74 01    2008   	ld (ix+1),h
040DDB             2009   
040DDB DD 21 34 17 2010   	ld ix,y2
       04          
040DE0 21 0A 00 00 2011   	ld hl,10
040DE4 DD 75 00    2012   	ld (ix+0),l
040DE7 DD 74 01    2013   	ld (ix+1),h
040DEA             2014   
040DEA             2015   	; draw the palette filled square
040DEA CD A0 0B 04 2016   	call fn_rectf
040DEE             2017   
040DEE C1          2018   	pop bc
040DEF             2019   
040DEF C9          2020   	ret
040DF0             2021   
040DF0             2022   ; get an ascii key value
040DF0             2023   fn_input_key:
040DF0 C5          2024   	push bc
040DF1             2025   	moscall mos_getkey
040DF1 3E 00       0001M  		LD	A, function
040DF3 49 CF       0002M  		RST.LIS	08h
040DF5 C1          2026   	pop bc
040DF6 C9          2027   	ret
040DF7             2028   
040DF7             2029   ; input a text of 8 chars
040DF7             2030   fn_input_text8:
040DF7             2031   	; locate x,y
040DF7             2032   	vdu 31
040DF7 3E 1F       0001M  		LD	A, function
040DF9 49 D7       0002M  		RST.LIS	10h
040DFB             2033   	vdu FILENAME_X
040DFB 3E 07       0001M  		LD	A, function
040DFD 49 D7       0002M  		RST.LIS	10h
040DFF             2034   	vdu FILENAME_Y
040DFF 3E 18       0001M  		LD	A, function
040E01 49 D7       0002M  		RST.LIS	10h
040E03             2035   
040E03             2036   	; print text
040E03 21 B0 17 04 2037   	ld hl,filename_label
040E07 01 00 00 00 2038   	ld bc,0
040E0B AF          2039   	xor a
040E0C 49 DF       2040   	rst.lis $18
040E0E             2041   
040E0E             2042   	; show cursor
040E0E             2043   	vdu 23
040E0E 3E 17       0001M  		LD	A, function
040E10 49 D7       0002M  		RST.LIS	10h
040E12             2044   	vdu 1
040E12 3E 01       0001M  		LD	A, function
040E14 49 D7       0002M  		RST.LIS	10h
040E16             2045   	vdu 1
040E16 3E 01       0001M  		LD	A, function
040E18 49 D7       0002M  		RST.LIS	10h
040E1A             2046   
040E1A 0E 00       2047   	ld c,0
040E1C             2048   
040E1C             2049   it8_loop:
040E1C             2050   	; get ascii key
040E1C CD F0 0D 04 2051   	call fn_input_key
040E20 B7          2052   	or a
040E21 CA 1C 0E 04 2053   	jp z,it8_loop
040E25             2054   
040E25 FE 2E       2055   	cp '.'
040E27 CA 71 0E 04 2056   	jp z,it8l_add_char
040E2B             2057   
040E2B FE 2D       2058   	cp '-'
040E2D CA 71 0E 04 2059   	jp z,it8l_add_char
040E31             2060   
040E31 FE 5F       2061   	cp '_'
040E33 CA 71 0E 04 2062   	jp z,it8l_add_char
040E37             2063   
040E37 FE 7F       2064   	cp 127
040E39 CA A5 0E 04 2065   	jp z,it8l_backspace
040E3D             2066   
040E3D FE 0D       2067   	cp 13
040E3F CA D4 0E 04 2068   	jp z,it8l_return
040E43             2069   
040E43 FE 30       2070   	cp '0'
040E45 DA 1C 0E 04 2071   	jp c,it8_loop
040E49             2072   
040E49 16 39       2073   	ld d,'9'
040E4B 14          2074   	inc d
040E4C BA          2075   	cp d
040E4D DA 71 0E 04 2076   	jp c,it8l_add_char
040E51             2077   
040E51 FE 41       2078   	cp 'A'
040E53 DA 1C 0E 04 2079   	jp c,it8_loop
040E57             2080   
040E57 16 5A       2081   	ld d,'Z'
040E59 14          2082   	inc d
040E5A BA          2083   	cp d
040E5B DA 71 0E 04 2084   	jp c,it8l_add_char
040E5F             2085   
040E5F FE 61       2086   	cp 'a'
040E61 DA 1C 0E 04 2087   	jp c,it8_loop
040E65             2088   
040E65 16 7A       2089   	ld d,'z'
040E67 14          2090   	inc d
040E68 BA          2091   	cp d
040E69 DA 71 0E 04 2092   	jp c,it8l_add_char
040E6D             2093   
040E6D C3 1C 0E 04 2094   	jp it8_loop
040E71             2095   
040E71             2096   it8l_add_char:
040E71 F5          2097   	push af
040E72 79          2098   	ld a,c
040E73 FE 0C       2099   	cp 12
040E75 38 05       2100   	jr c,it8l_poke_char
040E77 F1          2101   	pop af
040E78 C3 1C 0E 04 2102   	jp it8_loop
040E7C             2103   
040E7C             2104   it8l_poke_char:
040E7C F1          2105   	pop af
040E7D 21 BA 17 04 2106   	ld hl,filename
040E81 06 00       2107   	ld b,0
040E83 09          2108   	add hl,bc
040E84 77          2109   	ld (hl),a
040E85 0C          2110   	inc c
040E86 F5          2111   	push af
040E87 C5          2112   	push bc
040E88             2113   
040E88             2114   	; locate x,y
040E88             2115   	vdu 31
040E88 3E 1F       0001M  		LD	A, function
040E8A 49 D7       0002M  		RST.LIS	10h
040E8C             2116   	vdu FILENAME_X+10
040E8C 3E 11       0001M  		LD	A, function
040E8E 49 D7       0002M  		RST.LIS	10h
040E90             2117   	vdu FILENAME_Y
040E90 3E 18       0001M  		LD	A, function
040E92 49 D7       0002M  		RST.LIS	10h
040E94             2118   
040E94             2119   	; print text
040E94 21 BA 17 04 2120   	ld hl,filename
040E98 01 00 00 00 2121   	ld bc,0
040E9C AF          2122   	xor a
040E9D 49 DF       2123   	rst.lis $18
040E9F             2124   
040E9F C1          2125   	pop bc
040EA0 F1          2126   	pop af
040EA1             2127   
040EA1 C3 1C 0E 04 2128   	jp it8_loop
040EA5             2129   
040EA5             2130   it8l_backspace:
040EA5 79          2131   	ld a,c
040EA6 FE 00       2132   	cp 0
040EA8 CA 1C 0E 04 2133   	jp z,it8_loop
040EAC             2134   
040EAC             2135   	; delete a character of the filename
040EAC 21 BA 17 04 2136   	ld hl,filename
040EB0 06 00       2137   	ld b,0
040EB2 09          2138   	add hl,bc
040EB3 AF          2139   	xor a
040EB4 77          2140   	ld (hl),a
040EB5 0D          2141   	dec c
040EB6 C5          2142   	push bc
040EB7             2143   
040EB7             2144   	; locate x,y
040EB7             2145   	vdu 31
040EB7 3E 1F       0001M  		LD	A, function
040EB9 49 D7       0002M  		RST.LIS	10h
040EBB 3E 11       2146   	ld a,FILENAME_X+10
040EBD 81          2147   	add a,c
040EBE             2148   	vdu_a
040EBE 49 D7       0001M  		RST.LIS	10h
040EC0             2149   	vdu FILENAME_Y
040EC0 3E 18       0001M  		LD	A, function
040EC2 49 D7       0002M  		RST.LIS	10h
040EC4             2150   
040EC4             2151   	; print text
040EC4 21 DB 17 04 2152   	ld hl,spacechar
040EC8 01 00 00 00 2153   	ld bc,0
040ECC AF          2154   	xor a
040ECD 49 DF       2155   	rst.lis $18
040ECF             2156   
040ECF C1          2157   	pop bc
040ED0 C3 1C 0E 04 2158   	jp it8_loop
040ED4             2159   
040ED4             2160   it8l_return:
040ED4             2161   	; locate x,y
040ED4             2162   	vdu 31
040ED4 3E 1F       0001M  		LD	A, function
040ED6 49 D7       0002M  		RST.LIS	10h
040ED8             2163   	vdu FILENAME_X
040ED8 3E 07       0001M  		LD	A, function
040EDA 49 D7       0002M  		RST.LIS	10h
040EDC             2164   	vdu FILENAME_Y
040EDC 3E 18       0001M  		LD	A, function
040EDE 49 D7       0002M  		RST.LIS	10h
040EE0             2165   
040EE0             2166   	; print text
040EE0 21 DD 17 04 2167   	ld hl,void_filename
040EE4 01 00 00 00 2168   	ld bc,0
040EE8 AF          2169   	xor a
040EE9 49 DF       2170   	rst.lis $18
040EEB             2171   
040EEB             2172   	; hide cursor
040EEB             2173   	vdu 23
040EEB 3E 17       0001M  		LD	A, function
040EED 49 D7       0002M  		RST.LIS	10h
040EEF             2174   	vdu 1
040EEF 3E 01       0001M  		LD	A, function
040EF1 49 D7       0002M  		RST.LIS	10h
040EF3             2175   	vdu 0
040EF3 3E 00       0001M  		LD	A, function
040EF5 49 D7       0002M  		RST.LIS	10h
040EF7             2176   
040EF7             2177   it8l_endloop:
040EF7 21 B6 FF FF 2178   	ld hl,KEY_RETURN
040EFB CD E0 16 04 2179   	call fn_inkey
040EFF FE 01       2180   	CP 1
040F01 CA F7 0E 04 2181   	jp z,it8l_endloop
040F05             2182   
040F05 C9          2183   	ret
040F06             2184   
040F06             2185   ; load a palette
040F06             2186   fn_load_palette:
040F06             2187   	; clear the filename on the screen
040F06 21 BA 17 04 2188   	ld hl,filename
040F0A 06 0C       2189   	ld b,12
040F0C AF          2190   	xor a
040F0D             2191   
040F0D             2192   lp_clear_filename:
040F0D 77          2193   	ld (hl),a
040F0E 23          2194   	inc hl
040F0F 10 FC       2195   	djnz lp_clear_filename
040F11             2196   
040F11             2197   	; get filename
040F11 CD F7 0D 04 2198   	call fn_input_text8
040F15             2199   
040F15             2200   	; set path to 'palettes/'
040F15 21 CF 17 04 2201   	ld hl,palette_path
040F19             2202   	moscall mos_cd
040F19 3E 03       0001M  		LD	A, function
040F1B 49 CF       0002M  		RST.LIS	08h
040F1D             2203   
040F1D             2204   	; exit on folder error
040F1D FE 00       2205   	cp 0
040F1F C2 E0 0F 04 2206   	jp nz,lp_folder_error
040F23             2207   
040F23             2208   	; open the file for read
040F23 21 BA 17 04 2209   	ld hl,filename
040F27 0E 01       2210   	ld c,fa_open_existing|fa_read
040F29             2211   	moscall mos_fopen
040F29 3E 0A       0001M  		LD	A, function
040F2B 49 CF       0002M  		RST.LIS	08h
040F2D             2212   
040F2D             2213   	; exit on file error
040F2D FE 00       2214   	cp 0
040F2F CA E1 10 04 2215   	jp z,lp_file_error
040F33             2216   
040F33             2217   	; filehandle -> C
040F33 4F          2218   	ld c,a
040F34             2219   
040F34             2220   	; get palette header
040F34 21 59 38 04 2221   	ld hl,header_buffer
040F38 11 10 00 00 2222   	ld de,16
040F3C C5          2223   	push bc ; store filehandle
040F3D             2224   	moscall mos_fread
040F3D 3E 1A       0001M  		LD	A, function
040F3F 49 CF       0002M  		RST.LIS	08h
040F41 C1          2225   	pop bc ; restore filehandle
040F42 3E 10       2226   	ld a,16
040F44 BB          2227   	cp e
040F45 C2 C4 0F 04 2228   	jp nz,lp_close_error
040F49             2229   
040F49             2230   	; compare loaded header with needed header
040F49 11 B5 3B 04 2231   	ld de,header
040F4D 21 59 38 04 2232   	ld hl,header_buffer
040F51 47          2233   	ld b,a
040F52             2234   
040F52             2235   lp_compare:
040F52 1A          2236   	ld a,(de)
040F53 BE          2237   	cp (hl)
040F54 C2 E8 0F 04 2238   	jp nz,lp_header_error
040F58             2239   
040F58 13          2240   	inc de
040F59 23          2241   	inc hl
040F5A 05          2242   	dec b
040F5B             2243   
040F5B 78          2244   	ld a,b
040F5C FE 00       2245   	cp 0
040F5E C2 52 0F 04 2246   	jp nz,lp_compare
040F62             2247   
040F62             2248   	; prepare to read the number of colors
040F62 21 69 38 04 2249   	ld hl,color_buffer
040F66             2250   
040F66             2251   lp_getcount:
040F66             2252   	; read a string for colors count
040F66 C5          2253   	push bc
040F67 E5          2254   	push hl
040F68             2255   
040F68             2256   	; read colors data
040F68             2257   	moscall mos_fgetc
040F68 3E 0C       0001M  		LD	A, function
040F6A 49 CF       0002M  		RST.LIS	08h
040F6C             2258   
040F6C E1          2259   	pop hl
040F6D C1          2260   	pop bc
040F6E             2261   
040F6E             2262   	; exit if eof
040F6E DA C4 0F 04 2263   	jp c,lp_close_error
040F72             2264   
040F72 FE 30       2265   	cp 48 ; < 0
040F74 38 0A       2266   	jr c,lpgc_next
040F76 FE 3A       2267   	cp 58 ; > 9
040F78 D2 DC 10 04 2268   	jp nc,lp_data_error
040F7C             2269   
040F7C 77          2270   	ld (hl),a
040F7D 23          2271   	inc hl
040F7E 18 E6       2272   	jr lp_getcount
040F80             2273   
040F80             2274   lpgc_next:
040F80 F5          2275   	push af
040F81 3E 0D       2276   	ld a,13
040F83 77          2277   	ld (hl),a ; store cr
040F84 F1          2278   	pop af
040F85             2279   
040F85             2280   	; test read CRLF
040F85 FE 0D       2281   	cp 13
040F87 C2 C4 0F 04 2282   	jp nz,lp_close_error
040F8B             2283   
040F8B C5          2284   	push bc
040F8C             2285   
040F8C             2286   	; read colors data
040F8C             2287   	moscall mos_fgetc
040F8C 3E 0C       0001M  		LD	A, function
040F8E 49 CF       0002M  		RST.LIS	08h
040F90             2288   
040F90 C1          2289   	pop bc
040F91             2290   
040F91 FE 0A       2291   	cp 10
040F93 C2 C4 0F 04 2292   	jp nz,lp_close_error
040F97             2293   
040F97             2294   	; read color strings
040F97 11 00 00 00 2295   	ld de,#000000
040F9B 21 6C 38 04 2296   	ld hl,palette_buffer
040F9F             2297   
040F9F             2298   lp_load_pal_loop:
040F9F C5          2299   	push bc
040FA0 D5          2300   	push de
040FA1 E5          2301   	push hl
040FA2             2302   
040FA2             2303   	; read colors data
040FA2             2304   	moscall mos_fgetc
040FA2 3E 0C       0001M  		LD	A, function
040FA4 49 CF       0002M  		RST.LIS	08h
040FA6             2305   
040FA6             2306   	; exit if eof
040FA6 DA BD 0F 04 2307   	jp c,lp_loaded
040FAA             2308   
040FAA E1          2309   	pop hl
040FAB D1          2310   	pop de
040FAC C1          2311   	pop bc
040FAD             2312   
040FAD 77          2313   	ld (hl),a ; store loaded char
040FAE 13          2314   	inc de ; count chars
040FAF 7A          2315   	ld a,d
040FB0 FE 03       2316   	cp MAX_PAL_DATA_HI
040FB2 DA 9F 0F 04 2317   	jp c,lp_load_pal_loop
040FB6 7B          2318   	ld a,e
040FB7 FE 44       2319   	cp MAX_PAL_DATA_LO
040FB9 DA 9F 0F 04 2320   	jp c,lp_load_pal_loop
040FBD             2321   
040FBD             2322   ; end of file
040FBD             2323   lp_loaded:
040FBD E1          2324   	pop hl
040FBE D1          2325   	pop de
040FBF C1          2326   	pop bc
040FC0             2327   
040FC0 C3 F0 0F 04 2328   	jp lp_close
040FC4             2329   
040FC4             2330   lp_close_error:
040FC4 C5          2331   	push bc
040FC5             2332   
040FC5             2333   	; read error
040FC5 CD F6 14 04 2334   	call fn_print_file_error
040FC9             2335   
040FC9 C1          2336   	pop bc
040FCA             2337   
040FCA             2338   	; close the file
040FCA             2339   	moscall mos_fclose
040FCA 3E 0B       0001M  		LD	A, function
040FCC 49 CF       0002M  		RST.LIS	08h
040FCE             2340   
040FCE             2341   	; set path to home
040FCE 21 D8 17 04 2342   	ld hl,back_path
040FD2             2343   	moscall mos_cd
040FD2 3E 03       0001M  		LD	A, function
040FD4 49 CF       0002M  		RST.LIS	08h
040FD6             2344   
040FD6             2345   	; exit on error
040FD6 FE 00       2346   	cp 0
040FD8 C2 E0 0F 04 2347   	jp nz,lp_folder_error
040FDC             2348   
040FDC C3 DB 10 04 2349   	jp lp_exit
040FE0             2350   
040FE0             2351   lp_folder_error:
040FE0             2352   	; write error
040FE0 CD 2D 15 04 2353   	call fn_print_folder_error
040FE4 C3 DB 10 04 2354   	jp lp_exit
040FE8             2355   
040FE8             2356   lp_header_error:
040FE8             2357   	; write error
040FE8 CD 64 15 04 2358   	call fn_print_header_error
040FEC C3 DB 10 04 2359   	jp lp_exit
040FF0             2360   
040FF0             2361   lp_close:
040FF0 C5          2362   	push bc
040FF1             2363   
040FF1             2364   	; close the file
040FF1             2365   	moscall mos_fclose
040FF1 3E 0B       0001M  		LD	A, function
040FF3 49 CF       0002M  		RST.LIS	08h
040FF5             2366   
040FF5 C1          2367   	pop bc
040FF6             2368   
040FF6             2369   	; set path to home
040FF6 21 D8 17 04 2370   	ld hl,back_path
040FFA             2371   	moscall mos_cd
040FFA 3E 03       0001M  		LD	A, function
040FFC 49 CF       0002M  		RST.LIS	08h
040FFE             2372   
040FFE             2373   	; exit on error
040FFE FE 00       2374   	cp 0
041000 C2 E0 0F 04 2375   	jp nz,lp_folder_error
041004             2376   
041004             2377   	; read the number of colors we have in the palette
041004 21 69 38 04 2378   	ld hl,color_buffer
041008 7E          2379   	ld a,(hl)
041009 47          2380   	ld b,a
04100A 23          2381   	inc hl
04100B 7E          2382   	ld a,(hl)
04100C 4F          2383   	ld c,a ; bc = 1st char, 2nd char or CR
04100D             2384   
04100D 21 6C 38 04 2385   	ld hl,palette_buffer
041011             2386   
041011 79          2387   	ld a,c
041012 FE 0D       2388   	cp 13
041014 C2 38 10 04 2389   	jp nz,lp_two_number
041018             2390   
041018             2391   lp_one_number:
041018 78          2392   	ld a,b
041019 D6 30       2393   	sub 48
04101B             2394   
04101B E5          2395   	push hl
04101C 21 4F 18 04 2396   	ld hl,new_colors_count
041020 77          2397   	ld (hl),a
041021 E1          2398   	pop hl
041022             2399   
041022 FE 00       2400   	cp 0
041024 CA DC 10 04 2401   	jp z,lp_data_error
041028 FE 03       2402   	cp 3
04102A DA 62 10 04 2403   	jp c,lp_two_colors
04102E FE 05       2404   	cp 5
041030 DA 76 10 04 2405   	jp c,lp_four_colors
041034             2406   
041034 C3 8A 10 04 2407   	jp lp_sixteen_colors
041038             2408   
041038             2409   lp_two_number:
041038 78          2410   	ld a,b
041039 D6 30       2411   	sub 48
04103B 01 00 00 00 2412   	ld bc,#000000
04103F 47          2413   	ld b,a
041040 0E 0A       2414   	ld c,10
041042 ED 4C       2415   	mlt bc
041044 81          2416   	add a,c
041045             2417   
041045 E5          2418   	push hl
041046 21 4F 18 04 2419   	ld hl,new_colors_count
04104A 77          2420   	ld (hl),a
04104B E1          2421   	pop hl
04104C             2422   
04104C FE 0A       2423   	cp 10
04104E DA DC 10 04 2424   	jp c,lp_data_error
041052 FE 11       2425   	cp 17
041054 DA 8A 10 04 2426   	jp c,lp_sixteen_colors
041058 FE 41       2427   	cp 65
04105A DA 9E 10 04 2428   	jp c,lp_sixty_four_colors
04105E             2429   
04105E C3 DC 10 04 2430   	jp lp_data_error
041062             2431   
041062             2432   lp_two_colors:
041062 E5          2433   	push hl
041063 21 4E 18 04 2434   	ld hl,colors_count
041067 3E 02       2435   	ld a,2
041069 77          2436   	ld (hl),a
04106A 21 4F 18 04 2437   	ld hl,new_colors_count
04106E 7E          2438   	ld a,(hl)
04106F E1          2439   	pop hl
041070 06 00       2440   	ld b,0 ; start wit color 0
041072 C3 B2 10 04 2441   	jp lp_read_colors
041076             2442   
041076             2443   lp_four_colors:
041076 E5          2444   	push hl
041077 21 4E 18 04 2445   	ld hl,colors_count
04107B 3E 04       2446   	ld a,4
04107D 77          2447   	ld (hl),a
04107E 21 4F 18 04 2448   	ld hl,new_colors_count
041082 7E          2449   	ld a,(hl)
041083 E1          2450   	pop hl
041084 06 00       2451   	ld b,0 ; start wit color 0
041086 C3 B2 10 04 2452   	jp lp_read_colors
04108A             2453   
04108A             2454   lp_sixteen_colors:
04108A E5          2455   	push hl
04108B 21 4E 18 04 2456   	ld hl,colors_count
04108F 3E 10       2457   	ld a,16
041091 77          2458   	ld (hl),a
041092 21 4F 18 04 2459   	ld hl,new_colors_count
041096 7E          2460   	ld a,(hl)
041097 E1          2461   	pop hl
041098 06 00       2462   	ld b,0 ; start wit color 0
04109A C3 B2 10 04 2463   	jp lp_read_colors
04109E             2464   
04109E             2465   lp_sixty_four_colors:
04109E E5          2466   	push hl
04109F 21 4E 18 04 2467   	ld hl,colors_count
0410A3 3E 40       2468   	ld a,64
0410A5 77          2469   	ld (hl),a
0410A6 21 4F 18 04 2470   	ld hl,new_colors_count
0410AA 7E          2471   	ld a,(hl)
0410AB E1          2472   	pop hl
0410AC 06 00       2473   	ld b,0 ; start wit color 0
0410AE C3 B2 10 04 2474   	jp lp_read_colors
0410B2             2475   
0410B2             2476   lp_read_colors:
0410B2 C3 B2 10 04 2477   xx:	jp xx
0410B6 F5          2478   	push af
0410B7 C5          2479   	push bc
0410B8 E5          2480   	push hl
0410B9 CD F4 10 04 2481   	call lp_read_tint ; read red
0410BD 4F          2482   	ld c,a
0410BE C5          2483   	push bc
0410BF CD F4 10 04 2484   	call lp_read_tint ; green red
0410C3 5F          2485   	ld e,a
0410C4 D5          2486   	push de
0410C5 CD F4 10 04 2487   	call lp_read_tint ; blue red
0410C9 6F          2488   	ld l,a
0410CA D1          2489   	pop de
0410CB C1          2490   	pop bc ; RGB = c,e,l
0410CC CD 68 11 04 2491   	call lp_set_tint
0410D0 E1          2492   	pop hl
0410D1 C1          2493   	pop bc
0410D2 F1          2494   	pop af
0410D3             2495   
0410D3 04          2496   	inc b
0410D4 3D          2497   	dec a
0410D5 FE 00       2498   	cp 0
0410D7 C2 B2 10 04 2499   	jp nz,lp_read_colors
0410DB             2500   
0410DB             2501   lp_exit:
0410DB C9          2502   	ret
0410DC             2503   
0410DC             2504   lp_data_error:
0410DC CD 9B 15 04 2505   	call fn_print_data_error
0410E0             2506   
0410E0 C9          2507   	ret
0410E1             2508   
0410E1             2509   lp_file_error:
0410E1 CD F6 14 04 2510   	call fn_print_file_error
0410E5             2511   
0410E5             2512   	; set path to home
0410E5 21 D8 17 04 2513   	ld hl,back_path
0410E9             2514   	moscall mos_cd
0410E9 3E 03       0001M  		LD	A, function
0410EB 49 CF       0002M  		RST.LIS	08h
0410ED             2515   
0410ED             2516   	; exit on error
0410ED FE 00       2517   	cp 0
0410EF C2 E0 0F 04 2518   	jp nz,lp_folder_error
0410F3             2519   
0410F3 C9          2520   	ret
0410F4             2521   
0410F4             2522   lp_read_tint:
0410F4 0E 00       2523   	ld c,0 ; number of chars readen
0410F6 11 B1 3B 04 2524   	ld de,temp_chars_buffer
0410FA             2525   
0410FA D5          2526   	push de
0410FB             2527   
0410FB             2528   	; read chars
0410FB CD 48 11 04 2529   	call lprt_read_chars
0410FF             2530   
0410FF D1          2531   	pop de
041100             2532   
041100 79          2533   	ld a,c
041101 FE 00       2534   	cp 0 ; no numbers
041103 CA DC 10 04 2535   	jp z,lp_data_error
041107 FE 04       2536   	cp 4 ; to many numbers
041109 D2 DC 10 04 2537   	jp nc,lp_data_error
04110D             2538   
04110D FE 03       2539   	cp 3
04110F 28 17       2540   	jr z,lprt_three_int
041111             2541   
041111 FE 02       2542   	cp 2
041113 28 02       2543   	jr z,lprt_two_int
041115             2544   
041115             2545   	; one int only
041115 1A          2546   	ld a,(de)
041116 C9          2547   	ret
041117             2548   
041117             2549   ; two int
041117             2550   lprt_two_int:
041117 1A          2551   	ld a,(de)
041118 D5          2552   	push de
041119 11 00 00 00 2553   	ld de,#000000
04111D 5F          2554   	ld e,a
04111E 16 0A       2555   	ld d,10
041120 ED 5C       2556   	mlt de
041122 43          2557   	ld b,e
041123 D1          2558   	pop de
041124 13          2559   	inc de
041125 1A          2560   	ld a,(de)
041126 80          2561   	add a,b ; full int value is here
041127 C9          2562   	ret
041128             2563   
041128             2564   ; three int
041128             2565   lprt_three_int:
041128 1A          2566   	ld a,(de)
041129 D5          2567   	push de
04112A 11 00 00 00 2568   	ld de,#000000
04112E 5F          2569   	ld e,a
04112F 16 64       2570   	ld d,100
041131 ED 5C       2571   	mlt de
041133 43          2572   	ld b,e
041134 D1          2573   	pop de
041135 13          2574   	inc de
041136 1A          2575   	ld a,(de)
041137 D5          2576   	push de
041138 11 00 00 00 2577   	ld de,#000000
04113C 5F          2578   	ld e,a
04113D 16 0A       2579   	ld d,10
04113F ED 5C       2580   	mlt de
041141 4B          2581   	ld c,e
041142 D1          2582   	pop de
041143 13          2583   	inc de
041144 1A          2584   	ld a,(de)
041145 81          2585   	add a,c
041146 80          2586   	add a,b ; full int value is here
041147 C9          2587   	ret
041148             2588   
041148             2589   lprt_read_chars:
041148 3E 0D       2590   	ld a,13
04114A 12          2591   	ld (de),a ; store eol as default char
04114B             2592   
04114B 7E          2593   	ld a,(hl)
04114C FE 20       2594   	cp ' '
04114E C8          2595   	ret z ; ret if space
04114F FE 0D       2596   	cp 13
041151 C8          2597   	ret z ; ret if cr
041152 FE 0A       2598   	cp 10
041154 C8          2599   	ret z ; ret if lf
041155 FE 30       2600   	cp '0'
041157 D8          2601   	ret c ; ret if not number
041158 FE 39       2602   	cp '9'
04115A 38 03       2603   	jr c,lprt_store
04115C 28 01       2604   	jr z,lprt_store
04115E C9          2605   	ret
04115F             2606   
04115F             2607   ; found a number, store it
04115F             2608   lprt_store:
04115F D6 30       2609   	sub 48 ; convert char to byte integer
041161 12          2610   	ld (de),a ; store value
041162 13          2611   	inc de
041163 0C          2612   	inc c
041164 C3 48 11 04 2613   	jp lprt_read_chars
041168             2614   
041168             2615   ; set tint (RGB = c,e,l)
041168             2616   lp_set_tint:
041168 C5          2617   	push bc
041169 D5          2618   	push de
04116A E5          2619   	push hl
04116B             2620   
04116B C5          2621   	push bc
04116C             2622   	vdu 19
04116C 3E 13       0001M  		LD	A, function
04116E 49 D7       0002M  		RST.LIS	10h
041170 C1          2623   	pop bc
041171 78          2624   	ld a,b
041172             2625   	vdu_a
041172 49 D7       0001M  		RST.LIS	10h
041174             2626   	vdu 255
041174 3E FF       0001M  		LD	A, function
041176 49 D7       0002M  		RST.LIS	10h
041178             2627   
041178 E1          2628   	pop hl
041179 7D          2629   	ld a,l
04117A             2630   	vdu_a
04117A 49 D7       0001M  		RST.LIS	10h
04117C D1          2631   	pop de
04117D 7B          2632   	ld a,e
04117E             2633   	vdu_a
04117E 49 D7       0001M  		RST.LIS	10h
041180 C1          2634   	pop bc
041181 79          2635   	ld a,c
041182             2636   	vdu_a
041182 49 D7       0001M  		RST.LIS	10h
041184             2637   
041184 C1          2638   	pop bc
041185             2639   
041185 C9          2640   	ret
041186             2641   
041186             2642   ; save the palette
041186             2643   fn_save_palette:
041186 C9          2644   	ret
041187             2645   
041187             2646   ; load a sprite, giving its full name, with extension
041187             2647   fn_load_sprite:
041187             2648   	; clear the filename on the screen
041187 21 BA 17 04 2649   	ld hl,filename
04118B 06 0C       2650   	ld b,12
04118D AF          2651   	xor a
04118E             2652   
04118E             2653   ls_clear_filename:
04118E 77          2654   	ld (hl),a
04118F 23          2655   	inc hl
041190 10 FC       2656   	djnz ls_clear_filename
041192             2657   
041192             2658   	; get filename
041192 CD F7 0D 04 2659   	call fn_input_text8
041196             2660   
041196             2661   	; set path to 'sprites/'
041196 21 C7 17 04 2662   	ld hl,sprite_path
04119A             2663   	moscall mos_cd
04119A 3E 03       0001M  		LD	A, function
04119C 49 CF       0002M  		RST.LIS	08h
04119E             2664   
04119E             2665   	; exit on folder error
04119E FE 00       2666   	cp 0
0411A0 C2 6F 12 04 2667   	jp nz,ls_folder_error
0411A4             2668   
0411A4             2669   	; open the file for read
0411A4 21 BA 17 04 2670   	ld hl,filename
0411A8 0E 01       2671   	ld c,fa_open_existing|fa_read
0411AA             2672   	moscall mos_fopen
0411AA 3E 0A       0001M  		LD	A, function
0411AC 49 CF       0002M  		RST.LIS	08h
0411AE             2673   
0411AE             2674   	; exit on file error
0411AE FE 00       2675   	cp 0
0411B0 CA 9D 12 04 2676   	jp z,ls_file_error
0411B4             2677   
0411B4             2678   	; filehandle -> C
0411B4 4F          2679   	ld c,a
0411B5             2680   
0411B5             2681   	; get colors count
0411B5             2682   	moscall mos_fgetc
0411B5 3E 0C       0001M  		LD	A, function
0411B7 49 CF       0002M  		RST.LIS	08h
0411B9 DA 4A 12 04 2683   	jp c,ls_close_error
0411BD             2684   
0411BD FE 41       2685   	cp MAX_COLORS + 1
0411BF D2 4A 12 04 2686   	jp nc,ls_close_error
0411C3             2687   
0411C3             2688   	; store colors count
0411C3 21 4E 18 04 2689   	ld hl,colors_count
0411C7 77          2690   	ld (hl),a
0411C8             2691   
0411C8             2692   	; get frames count
0411C8             2693   	moscall mos_fgetc
0411C8 3E 0C       0001M  		LD	A, function
0411CA 49 CF       0002M  		RST.LIS	08h
0411CC DA 4A 12 04 2694   	jp c,ls_close_error
0411D0             2695   
0411D0             2696   	; store frames count
0411D0 21 51 18 04 2697   	ld hl,frames_count
0411D4 77          2698   	ld (hl),a
0411D5             2699   
0411D5             2700   	; set last frame as current frame
0411D5 21 50 18 04 2701   	ld hl,current_frame
0411D9 3D          2702   	dec a
0411DA 77          2703   	ld (hl),a
0411DB             2704   
0411DB             2705   	; get sprite size
0411DB             2706   	moscall mos_fgetc
0411DB 3E 0C       0001M  		LD	A, function
0411DD 49 CF       0002M  		RST.LIS	08h
0411DF DA 4A 12 04 2707   	jp c,ls_close_error
0411E3             2708   
0411E3             2709   	; store sprite size
0411E3 21 43 17 04 2710   	ld hl,spr_size
0411E7 77          2711   	ld (hl),a
0411E8             2712   
0411E8             2713   	; set 4x4 pixel width
0411E8 FE 04       2714   	cp SPR44
0411EA 20 09       2715   	jr nz,ls_next1
0411EC             2716   
0411EC 21 42 17 04 2717   	ld hl,pixel_width
0411F0 06 20       2718   	ld b,SPR44_width
0411F2 70          2719   	ld (hl),b
0411F3 18 21       2720   	jr ls_next4
0411F5             2721   
0411F5             2722   ls_next1:
0411F5             2723   	; set 8x8 pixel width
0411F5 FE 08       2724   	cp SPR88
0411F7 20 09       2725   	jr nz,ls_next2
0411F9             2726   
0411F9 21 42 17 04 2727   	ld hl,pixel_width
0411FD 06 10       2728   	ld b,SPR88_width
0411FF 70          2729   	ld (hl),b
041200 18 14       2730   	jr ls_next4
041202             2731   
041202             2732   ls_next2:
041202             2733   
041202             2734   	; set 16x16 pixel width
041202 FE 10       2735   	cp SPR1616
041204 20 09       2736   	jr nz,ls_next3
041206             2737   
041206 21 42 17 04 2738   	ld hl,pixel_width
04120A 06 08       2739   	ld b,SPR1616_width
04120C 70          2740   	ld (hl),b
04120D 18 07       2741   	jr ls_next4
04120F             2742   
04120F             2743   ls_next3:
04120F             2744   
04120F 21 42 17 04 2745   	ld hl,pixel_width
041213 06 04       2746   	ld b,SPR3232_width
041215 70          2747   	ld (hl),b
041216             2748   
041216             2749   ls_next4:
041216 21 00 00 00 2750   	ld hl,#000000
04121A 6F          2751   	ld l,a
04121B 67          2752   	ld h,a
04121C ED 6C       2753   	mlt hl ; HL = sprite length
04121E E5          2754   	push hl
04121F             2755   
04121F             2756   	; get frames count
04121F 21 50 18 04 2757   	ld hl,current_frame
041223 46          2758   	ld b,(hl)
041224             2759   
041224 E1          2760   	pop hl
041225             2761   
041225 78          2762   	ld a,b
041226 FE 00       2763   	cp 0
041228 28 07       2764   	jr z,ls_read_data
04122A             2765   
04122A             2766   	; de = size²
04122A 11 00 04 00 2767   	ld de,ONE_FRAME_BUFFER_SIZE
04122E             2768   ls_add_length:
04122E 19          2769   	add hl,de
04122F 10 FD       2770   	djnz ls_add_length
041231             2771   
041231             2772   ls_read_data:
041231 E5          2773   	push hl
041232 E5          2774   	push hl
041233 D1          2775   	pop de
041234 7B          2776   	ld a,e
041235 21 59 18 04 2777   	ld hl,sprite_buffer
041239             2778   	moscall mos_fread
041239 3E 1A       0001M  		LD	A, function
04123B 49 CF       0002M  		RST.LIS	08h
04123D E1          2779   	pop hl
04123E 7C          2780   	ld a,h
04123F BA          2781   	cp d
041240 20 08       2782   	jr nz,ls_close_error
041242 7D          2783   	ld a,l
041243 BB          2784   	cp e
041244 20 04       2785   	jr nz,ls_close_error
041246 C3 77 12 04 2786   	jp ls_close
04124A             2787   
04124A             2788   ls_close_error:
04124A C5          2789   	push bc
04124B             2790   
04124B             2791   	; read error
04124B CD F6 14 04 2792   	call fn_print_file_error
04124F             2793   
04124F C1          2794   	pop bc
041250             2795   
041250             2796   	; close the file
041250             2797   	moscall mos_fclose
041250 3E 0B       0001M  		LD	A, function
041252 49 CF       0002M  		RST.LIS	08h
041254             2798   
041254             2799   	; set path to home
041254 21 D8 17 04 2800   	ld hl,back_path
041258             2801   	moscall mos_cd
041258 3E 03       0001M  		LD	A, function
04125A 49 CF       0002M  		RST.LIS	08h
04125C             2802   
04125C             2803   	; exit on error
04125C FE 00       2804   	cp 0
04125E C2 6F 12 04 2805   	jp nz,ls_folder_error
041262             2806   
041262             2807   
041262             2808   	; reset current frame and coordinates of the drawing pixel
041262 21 3E 17 04 2809   	ld hl,xpix
041266 AF          2810   	xor a
041267 77          2811   	ld (hl),a
041268 21 3F 17 04 2812   	ld hl,ypix
04126C 77          2813   	ld (hl),a
04126D 18 25       2814   	jr ls_exit
04126F             2815   
04126F             2816   ls_folder_error:
04126F             2817   	; write error
04126F CD 2D 15 04 2818   	call fn_print_folder_error
041273 C3 94 12 04 2819   	jp ls_exit
041277             2820   
041277             2821   ls_close:
041277             2822   	; close the file
041277             2823   	moscall mos_fclose
041277 3E 0B       0001M  		LD	A, function
041279 49 CF       0002M  		RST.LIS	08h
04127B             2824   
04127B             2825   	; set path to home
04127B 21 D8 17 04 2826   	ld hl,back_path
04127F             2827   	moscall mos_cd
04127F 3E 03       0001M  		LD	A, function
041281 49 CF       0002M  		RST.LIS	08h
041283             2828   
041283             2829   	; exit on error
041283 FE 00       2830   	cp 0
041285 C2 6F 12 04 2831   	jp nz,ls_folder_error
041289             2832   
041289             2833   	; reset current frame and coordinates of the drawing pixel
041289 21 3E 17 04 2834   	ld hl,xpix
04128D AF          2835   	xor a
04128E 77          2836   	ld (hl),a
04128F 21 3F 17 04 2837   	ld hl,ypix
041293 77          2838   	ld (hl),a
041294             2839   
041294             2840   ls_exit:
041294 CD 7C 16 04 2841   	call fn_show_spr_descr
041298 CD 37 16 04 2842   	call fn_change_frames_count
04129C C9          2843   	ret
04129D             2844   
04129D             2845   ls_file_error:
04129D CD F6 14 04 2846   	call fn_print_file_error
0412A1             2847   
0412A1             2848   	; set path to home
0412A1 21 D8 17 04 2849   	ld hl,back_path
0412A5             2850   	moscall mos_cd
0412A5 3E 03       0001M  		LD	A, function
0412A7 49 CF       0002M  		RST.LIS	08h
0412A9             2851   
0412A9             2852   	; exit on error
0412A9 FE 00       2853   	cp 0
0412AB C2 6F 12 04 2854   	jp nz,ls_folder_error
0412AF             2855   
0412AF C9          2856   	ret
0412B0             2857   
0412B0             2858   ; save a sprite, giving its name
0412B0             2859   fn_save_sprite:
0412B0             2860   	; clear filename on the screen
0412B0 21 BA 17 04 2861   	ld hl,filename
0412B4 06 0C       2862   	ld b,12
0412B6 AF          2863   	xor a
0412B7             2864   
0412B7             2865   ss_clear_filename:
0412B7 77          2866   	ld (hl),a
0412B8 23          2867   	inc hl
0412B9 10 FC       2868   	djnz ss_clear_filename
0412BB             2869   
0412BB             2870   	; get filename
0412BB CD F7 0D 04 2871   	call fn_input_text8
0412BF             2872   
0412BF             2873   	; set path to sprite path
0412BF 21 C7 17 04 2874   	ld hl,sprite_path
0412C3             2875   	moscall mos_cd
0412C3 3E 03       0001M  		LD	A, function
0412C5 49 CF       0002M  		RST.LIS	08h
0412C7             2876   
0412C7             2877   	; create it on error
0412C7 FE 00       2878   	cp 0
0412C9 F5          2879   	push af
0412CA C4 11 17 04 2880   	call nz,fn_create_sprite_folder
0412CE F1          2881   	pop af
0412CF 28 08       2882   	jr z,ss_next
0412D1             2883   
0412D1             2884   	; set path to sprite path
0412D1 21 C7 17 04 2885   	ld hl,sprite_path
0412D5             2886   	moscall mos_cd
0412D5 3E 03       0001M  		LD	A, function
0412D7 49 CF       0002M  		RST.LIS	08h
0412D9             2887   
0412D9             2888   ss_next:
0412D9             2889   
0412D9             2890   	; exit on error
0412D9 FE 00       2891   	cp 0
0412DB C2 6B 13 04 2892   	jp nz,ss_folder_error
0412DF             2893   
0412DF             2894   	; open the file for write
0412DF 21 BA 17 04 2895   	ld hl,filename
0412E3 0E 0A       2896   	ld c,fa_create_always|fa_write
0412E5             2897   	moscall mos_fopen
0412E5 3E 0A       0001M  		LD	A, function
0412E7 49 CF       0002M  		RST.LIS	08h
0412E9             2898   
0412E9             2899   	; exit on error
0412E9 FE 00       2900   	cp 0
0412EB CA 9C 13 04 2901   	jp z,ss_file_error
0412EF             2902   
0412EF             2903   	; filehandle -> C
0412EF 4F          2904   	ld c,a
0412F0             2905   
0412F0             2906   	; store colors count in the file
0412F0 06 40       2907   	ld b,MAX_COLORS
0412F2             2908   	moscall mos_fputc
0412F2 3E 0D       0001M  		LD	A, function
0412F4 49 CF       0002M  		RST.LIS	08h
0412F6             2909   
0412F6             2910   	; store frames count in the file
0412F6 21 51 18 04 2911   	ld hl,frames_count
0412FA 46          2912   	ld b,(hl)
0412FB             2913   	moscall mos_fputc
0412FB 3E 0D       0001M  		LD	A, function
0412FD 49 CF       0002M  		RST.LIS	08h
0412FF             2914   
0412FF             2915   	; store sprite size in the file
0412FF 21 43 17 04 2916   	ld hl,spr_size
041303 46          2917   	ld b,(hl)
041304             2918   	moscall mos_fputc
041304 3E 0D       0001M  		LD	A, function
041306 49 CF       0002M  		RST.LIS	08h
041308             2919   
041308             2920   	; de = size²
041308 21 00 00 00 2921   	ld hl,#000000
04130C 68          2922   	ld l,b
04130D 60          2923   	ld h,b
04130E ED 6C       2924   	mlt hl ; HL = sprite length
041310 E5          2925   	push hl
041311             2926   
041311             2927   	; get frames count
041311 21 50 18 04 2928   	ld hl,current_frame
041315 46          2929   	ld b,(hl)
041316             2930   
041316 E1          2931   	pop hl
041317             2932   
041317 78          2933   	ld a,b
041318 FE 00       2934   	cp 0
04131A 28 07       2935   	jr z,ss_write_data
04131C             2936   
04131C 11 00 04 00 2937   	ld de,ONE_FRAME_BUFFER_SIZE
041320             2938   ss_add_length:
041320 19          2939   	add hl,de
041321 10 FD       2940   	djnz ss_add_length
041323             2941   
041323             2942   ss_write_data:
041323 E5          2943   	push hl
041324 E5          2944   	push hl
041325 D1          2945   	pop de
041326 21 59 18 04 2946   	ld hl,sprite_buffer
04132A             2947   	moscall mos_fwrite
04132A 3E 1B       0001M  		LD	A, function
04132C 49 CF       0002M  		RST.LIS	08h
04132E E1          2948   	pop hl
04132F 7C          2949   	ld a,h
041330 BA          2950   	cp d
041331 20 08       2951   	jr nz,ss_close_error
041333 7D          2952   	ld a,l
041334 BB          2953   	cp e
041335 20 04       2954   	jr nz,ss_close_error
041337 C3 73 13 04 2955   	jp ss_close
04133B             2956   
04133B             2957   ss_close_error:
04133B C5          2958   	push bc
04133C             2959   
04133C             2960   	; write error
04133C CD F6 14 04 2961   	call fn_print_file_error
041340             2962   
041340 C1          2963   	pop bc
041341             2964   
041341             2965   	; close the file
041341             2966   	moscall mos_fclose
041341 3E 0B       0001M  		LD	A, function
041343 49 CF       0002M  		RST.LIS	08h
041345             2967   
041345             2968   	; set path to home
041345 21 D8 17 04 2969   	ld hl,back_path
041349             2970   	moscall mos_cd
041349 3E 03       0001M  		LD	A, function
04134B 49 CF       0002M  		RST.LIS	08h
04134D             2971   
04134D             2972   	; exit on error
04134D FE 00       2973   	cp 0
04134F C2 6B 13 04 2974   	jp nz,ss_folder_error
041353             2975   
041353             2976   	; reset current frame and coordinates of the drawing pixel
041353 21 51 18 04 2977   	ld hl,frames_count
041357 7E          2978   	ld a,(hl)
041358 3D          2979   	dec a
041359 21 50 18 04 2980   	ld hl,current_frame
04135D 77          2981   	ld (hl),a
04135E 21 3E 17 04 2982   	ld hl,xpix
041362 AF          2983   	xor a
041363 77          2984   	ld (hl),a
041364 21 3F 17 04 2985   	ld hl,ypix
041368 77          2986   	ld (hl),a
041369 18 30       2987   	jr ss_exit
04136B             2988   
04136B             2989   ss_folder_error:
04136B             2990   	; write error
04136B CD 2D 15 04 2991   	call fn_print_folder_error
04136F C3 9B 13 04 2992   	jp ss_exit
041373             2993   
041373             2994   ss_close:
041373             2995   	; close the file
041373             2996   	moscall mos_fclose
041373 3E 0B       0001M  		LD	A, function
041375 49 CF       0002M  		RST.LIS	08h
041377             2997   
041377             2998   	; set path to home
041377 21 D8 17 04 2999   	ld hl,back_path
04137B             3000   	moscall mos_cd
04137B 3E 03       0001M  		LD	A, function
04137D 49 CF       0002M  		RST.LIS	08h
04137F             3001   
04137F             3002   	; exit on error
04137F FE 00       3003   	cp 0
041381 C2 6B 13 04 3004   	jp nz,ss_folder_error
041385             3005   
041385             3006   	; reset current frame and coordinates of the drawing pixel
041385 21 51 18 04 3007   	ld hl,frames_count
041389 7E          3008   	ld a,(hl)
04138A 3D          3009   	dec a
04138B 21 50 18 04 3010   	ld hl,current_frame
04138F 77          3011   	ld (hl),a
041390 21 3E 17 04 3012   	ld hl,xpix
041394 AF          3013   	xor a
041395 77          3014   	ld (hl),a
041396 21 3F 17 04 3015   	ld hl,ypix
04139A 77          3016   	ld (hl),a
04139B             3017   
04139B             3018   ss_exit:
04139B C9          3019   	ret
04139C             3020   
04139C             3021   ss_file_error:
04139C CD F6 14 04 3022   	call fn_print_file_error
0413A0             3023   
0413A0             3024   	; set path to home
0413A0 21 D8 17 04 3025   	ld hl,back_path
0413A4             3026   	moscall mos_cd
0413A4 3E 03       0001M  		LD	A, function
0413A6 49 CF       0002M  		RST.LIS	08h
0413A8             3027   
0413A8             3028   	; exit on error
0413A8 FE 00       3029   	cp 0
0413AA C2 6B 13 04 3030   	jp nz,ss_folder_error
0413AE C9          3031   	ret
0413AF             3032   
0413AF             3033   ; export sprite data in assembly language, giving its name
0413AF             3034   fn_export_sprite:
0413AF             3035   	; clear filename
0413AF 21 BA 17 04 3036   	ld hl,filename
0413B3 06 0C       3037   	ld b,12
0413B5 AF          3038   	xor a
0413B6             3039   
0413B6             3040   es_clear_filename:
0413B6 77          3041   	ld (hl),a
0413B7 23          3042   	inc hl
0413B8 10 FC       3043   	djnz es_clear_filename
0413BA             3044   
0413BA             3045   	; get filename
0413BA CD F7 0D 04 3046   	call fn_input_text8
0413BE             3047   
0413BE             3048   	; set path to sprite path
0413BE 21 C7 17 04 3049   	ld hl,sprite_path
0413C2             3050   	moscall mos_cd
0413C2 3E 03       0001M  		LD	A, function
0413C4 49 CF       0002M  		RST.LIS	08h
0413C6             3051   
0413C6             3052   	; create it on error
0413C6 FE 00       3053   	cp 0
0413C8 F5          3054   	push af
0413C9 C4 11 17 04 3055   	call nz,fn_create_sprite_folder
0413CD F1          3056   	pop af
0413CE 28 0E       3057   	jr z,es_next
0413D0             3058   
0413D0             3059   	; set path to sprite path
0413D0 21 C7 17 04 3060   	ld hl,sprite_path
0413D4             3061   	moscall mos_cd
0413D4 3E 03       0001M  		LD	A, function
0413D6 49 CF       0002M  		RST.LIS	08h
0413D8             3062   
0413D8             3063   	; exit on error
0413D8 FE 00       3064   	cp 0
0413DA C2 DA 14 04 3065   	jp nz,es_folder_error
0413DE             3066   
0413DE             3067   es_next:
0413DE             3068   	; open the file for write
0413DE 21 BA 17 04 3069   	ld hl,filename
0413E2 0E 0A       3070   	ld c,fa_create_always|fa_write
0413E4             3071   	moscall mos_fopen
0413E4 3E 0A       0001M  		LD	A, function
0413E6 49 CF       0002M  		RST.LIS	08h
0413E8             3072   
0413E8             3073   	; exit on error
0413E8 FE 00       3074   	cp 0
0413EA CA E3 14 04 3075   	jp z,es_file_error
0413EE             3076   
0413EE             3077   	; filehandle -> C
0413EE 4F          3078   	ld c,a
0413EF             3079   
0413EF             3080   
0413EF             3081   	; L = first frame
0413EF 3E 00       3082   	ld a,0
0413F1 21 59 18 04 3083   	ld hl,sprite_buffer
0413F5 11 00 00 00 3084   	ld de,$000000
0413F9             3085   
0413F9             3086   es_frames_repeat:
0413F9 F5          3087   	push af
0413FA E5          3088   	push hl
0413FB             3089   
0413FB F5          3090   	push af
0413FC             3091   
0413FC             3092   	; start to write...
0413FC 1E 00       3093   	ld e,0 ; rows
0413FE             3094   
0413FE 06 3B       3095   	ld b,';'
041400             3096   	moscall mos_fputc
041400 3E 0D       0001M  		LD	A, function
041402 49 CF       0002M  		RST.LIS	08h
041404             3097   
041404 06 20       3098   	ld b,' '
041406             3099   	moscall mos_fputc
041406 3E 0D       0001M  		LD	A, function
041408 49 CF       0002M  		RST.LIS	08h
04140A             3100   
04140A 06 46       3101   	ld b,'F'
04140C             3102   	moscall mos_fputc
04140C 3E 0D       0001M  		LD	A, function
04140E 49 CF       0002M  		RST.LIS	08h
041410             3103   
041410 06 72       3104   	ld b,'r'
041412             3105   	moscall mos_fputc
041412 3E 0D       0001M  		LD	A, function
041414 49 CF       0002M  		RST.LIS	08h
041416             3106   
041416 06 6D       3107   	ld b,'m'
041418             3108   	moscall mos_fputc
041418 3E 0D       0001M  		LD	A, function
04141A 49 CF       0002M  		RST.LIS	08h
04141C             3109   
04141C 06 20       3110   	ld b,' '
04141E             3111   	moscall mos_fputc
04141E 3E 0D       0001M  		LD	A, function
041420 49 CF       0002M  		RST.LIS	08h
041422             3112   
041422 F1          3113   	pop af
041423 C6 30       3114   	add a,'0'
041425 47          3115   	ld b,a
041426             3116   	moscall mos_fputc
041426 3E 0D       0001M  		LD	A, function
041428 49 CF       0002M  		RST.LIS	08h
04142A             3117   
04142A 06 0D       3118   	ld b,13
04142C             3119   	moscall mos_fputc
04142C 3E 0D       0001M  		LD	A, function
04142E 49 CF       0002M  		RST.LIS	08h
041430             3120   
041430 06 0A       3121   	ld b,10
041432             3122   	moscall mos_fputc
041432 3E 0D       0001M  		LD	A, function
041434 49 CF       0002M  		RST.LIS	08h
041436             3123   
041436             3124   es_repeat:
041436             3125   
041436 06 44       3126   	ld b,'D'
041438             3127   	moscall mos_fputc
041438 3E 0D       0001M  		LD	A, function
04143A 49 CF       0002M  		RST.LIS	08h
04143C             3128   
04143C 06 42       3129   	ld b,'B'
04143E             3130   	moscall mos_fputc
04143E 3E 0D       0001M  		LD	A, function
041440 49 CF       0002M  		RST.LIS	08h
041442             3131   
041442 06 20       3132   	ld b,' '
041444             3133   	moscall mos_fputc
041444 3E 0D       0001M  		LD	A, function
041446 49 CF       0002M  		RST.LIS	08h
041448             3134   
041448 16 00       3135   	ld d,0 ; columns
04144A             3136   
04144A             3137   es_repeat_line:
04144A D5          3138   	push de
04144B             3139   
04144B 7E          3140   	ld a,(hl)
04144C 23          3141   	inc hl
04144D             3142   
04144D             3143   	; convert A to BCD
04144D CD 21 17 04 3144   	call fn_hex2bcd
041451             3145   
041451             3146   	; write two numbers (chars)
041451 5F          3147   	ld e,a
041452 E6 F0       3148   	and $f0
041454 0F          3149   	rrca
041455 0F          3150   	rrca
041456 0F          3151   	rrca
041457 0F          3152   	rrca
041458 C6 30       3153   	add '0'
04145A             3154   
04145A 47          3155   	ld b,a
04145B             3156   	moscall mos_fputc
04145B 3E 0D       0001M  		LD	A, function
04145D 49 CF       0002M  		RST.LIS	08h
04145F             3157   
04145F 7B          3158   	ld a,e
041460 E6 0F       3159   	and $0f
041462 C6 30       3160   	add '0'
041464             3161   
041464 47          3162   	ld b,a
041465             3163   	moscall mos_fputc
041465 3E 0D       0001M  		LD	A, function
041467 49 CF       0002M  		RST.LIS	08h
041469             3164   
041469 D1          3165   	pop de
04146A 14          3166   	inc d
04146B 3A 43 17 04 3167   	ld a,(spr_size)
04146F BA          3168   	cp d
041470 F5          3169   	push af
041471 C4 1A 17 04 3170   	call nz,fn_comma
041475 F1          3171   	pop af
041476 C2 4A 14 04 3172   	jp nz,es_repeat_line
04147A             3173   
04147A 06 0D       3174   	ld b,13 ; CR
04147C             3175   	moscall mos_fputc
04147C 3E 0D       0001M  		LD	A, function
04147E 49 CF       0002M  		RST.LIS	08h
041480             3176   
041480 06 0A       3177   	ld b,10 ; LF
041482             3178   	moscall mos_fputc
041482 3E 0D       0001M  		LD	A, function
041484 49 CF       0002M  		RST.LIS	08h
041486             3179   
041486 1C          3180   	inc e
041487 3A 43 17 04 3181   	ld a,(spr_size)
04148B BB          3182   	cp e
04148C C2 36 14 04 3183   	jp nz,es_repeat
041490             3184   
041490 06 0D       3185   	ld b,13 ; CR
041492             3186   	moscall mos_fputc
041492 3E 0D       0001M  		LD	A, function
041494 49 CF       0002M  		RST.LIS	08h
041496             3187   
041496 06 0A       3188   	ld b,10 ; LF
041498             3189   	moscall mos_fputc
041498 3E 0D       0001M  		LD	A, function
04149A 49 CF       0002M  		RST.LIS	08h
04149C             3190   
04149C E1          3191   	pop hl
04149D D5          3192   	push de
04149E ED 5C       3193   	mlt de
0414A0 19          3194   	add hl,de
0414A1 D1          3195   	pop de
0414A2 F1          3196   	pop af
0414A3 3C          3197   	inc a
0414A4 DD 21 51 18 3198   	ld ix,frames_count
       04          
0414A9 DD BE 00    3199   	cp (ix+0)
0414AC C2 F9 13 04 3200   	jp nz,es_frames_repeat
0414B0             3201   
0414B0             3202   	; close the file
0414B0             3203   	moscall mos_fclose
0414B0 3E 0B       0001M  		LD	A, function
0414B2 49 CF       0002M  		RST.LIS	08h
0414B4             3204   
0414B4             3205   	; set path to home
0414B4 21 D8 17 04 3206   	ld hl,back_path
0414B8             3207   	moscall mos_cd
0414B8 3E 03       0001M  		LD	A, function
0414BA 49 CF       0002M  		RST.LIS	08h
0414BC             3208   
0414BC             3209   	; exit on error
0414BC FE 00       3210   	cp 0
0414BE C2 DA 14 04 3211   	jp nz,es_folder_error
0414C2             3212   
0414C2             3213   	; reset current frame and coordinates of the drawing pixel
0414C2 21 51 18 04 3214   	ld hl,frames_count
0414C6 7E          3215   	ld a,(hl)
0414C7 3D          3216   	dec a
0414C8 21 50 18 04 3217   	ld hl,current_frame
0414CC 77          3218   	ld (hl),a
0414CD 21 3E 17 04 3219   	ld hl,xpix
0414D1 AF          3220   	xor a
0414D2 77          3221   	ld (hl),a
0414D3 21 3F 17 04 3222   	ld hl,ypix
0414D7 77          3223   	ld (hl),a
0414D8 18 08       3224   	jr es_exit
0414DA             3225   
0414DA             3226   es_folder_error:
0414DA             3227   	; write error
0414DA CD 2D 15 04 3228   	call fn_print_folder_error
0414DE C3 E2 14 04 3229   	jp es_exit
0414E2             3230   
0414E2             3231   es_exit:
0414E2 C9          3232   	ret
0414E3             3233   
0414E3             3234   es_file_error:
0414E3 CD F6 14 04 3235   	call fn_print_file_error
0414E7             3236   
0414E7             3237   	; set path to home
0414E7 21 D8 17 04 3238   	ld hl,back_path
0414EB             3239   	moscall mos_cd
0414EB 3E 03       0001M  		LD	A, function
0414ED 49 CF       0002M  		RST.LIS	08h
0414EF             3240   
0414EF             3241   	; exit on error
0414EF FE 00       3242   	cp 0
0414F1 C2 DA 14 04 3243   	jp nz,es_folder_error
0414F5 C9          3244   	ret
0414F6             3245   
0414F6             3246   ; print 'file error'
0414F6             3247   fn_print_file_error:
0414F6             3248   	vdu 7
0414F6 3E 07       0001M  		LD	A, function
0414F8 49 D7       0002M  		RST.LIS	10h
0414FA             3249   
0414FA             3250   	; locate x,y
0414FA             3251   	vdu 31
0414FA 3E 1F       0001M  		LD	A, function
0414FC 49 D7       0002M  		RST.LIS	10h
0414FE             3252   	vdu FILENAME_X
0414FE 3E 07       0001M  		LD	A, function
041500 49 D7       0002M  		RST.LIS	10h
041502             3253   	vdu FILENAME_Y
041502 3E 18       0001M  		LD	A, function
041504 49 D7       0002M  		RST.LIS	10h
041506             3254   
041506             3255   	; print text
041506 21 F4 17 04 3256   	ld hl,file_error
04150A 01 00 00 00 3257   	ld bc,0
04150E AF          3258   	xor a
04150F 49 DF       3259   	rst.lis $18
041511             3260   
041511 CD F0 0D 04 3261   	call fn_input_key
041515             3262   
041515             3263   	; locate x,y
041515             3264   	vdu 31
041515 3E 1F       0001M  		LD	A, function
041517 49 D7       0002M  		RST.LIS	10h
041519             3265   	vdu FILENAME_X
041519 3E 07       0001M  		LD	A, function
04151B 49 D7       0002M  		RST.LIS	10h
04151D             3266   	vdu FILENAME_Y
04151D 3E 18       0001M  		LD	A, function
04151F 49 D7       0002M  		RST.LIS	10h
041521             3267   
041521             3268   	; print text
041521 21 DD 17 04 3269   	ld hl,void_filename
041525 01 00 00 00 3270   	ld bc,0
041529 AF          3271   	xor a
04152A 49 DF       3272   	rst.lis $18
04152C             3273   
04152C C9          3274   	ret
04152D             3275   
04152D             3276   ; print 'folder error'
04152D             3277   fn_print_folder_error:
04152D             3278   	vdu 7
04152D 3E 07       0001M  		LD	A, function
04152F 49 D7       0002M  		RST.LIS	10h
041531             3279   
041531             3280   	; locate x,y
041531             3281   	vdu 31
041531 3E 1F       0001M  		LD	A, function
041533 49 D7       0002M  		RST.LIS	10h
041535             3282   	vdu FILENAME_X
041535 3E 07       0001M  		LD	A, function
041537 49 D7       0002M  		RST.LIS	10h
041539             3283   	vdu FILENAME_Y
041539 3E 18       0001M  		LD	A, function
04153B 49 D7       0002M  		RST.LIS	10h
04153D             3284   
04153D             3285   	; print text
04153D 21 0B 18 04 3286   	ld hl,folder_error
041541 01 00 00 00 3287   	ld bc,0
041545 AF          3288   	xor a
041546 49 DF       3289   	rst.lis $18
041548             3290   
041548 CD F0 0D 04 3291   	call fn_input_key
04154C             3292   
04154C             3293   	; locate x,y
04154C             3294   	vdu 31
04154C 3E 1F       0001M  		LD	A, function
04154E 49 D7       0002M  		RST.LIS	10h
041550             3295   	vdu FILENAME_X
041550 3E 07       0001M  		LD	A, function
041552 49 D7       0002M  		RST.LIS	10h
041554             3296   	vdu FILENAME_Y
041554 3E 18       0001M  		LD	A, function
041556 49 D7       0002M  		RST.LIS	10h
041558             3297   
041558             3298   	; print text
041558 21 DD 17 04 3299   	ld hl,void_filename
04155C 01 00 00 00 3300   	ld bc,0
041560 AF          3301   	xor a
041561 49 DF       3302   	rst.lis $18
041563             3303   
041563 C9          3304   	ret
041564             3305   
041564             3306   ; print 'header error'
041564             3307   fn_print_header_error:
041564             3308   	vdu 7
041564 3E 07       0001M  		LD	A, function
041566 49 D7       0002M  		RST.LIS	10h
041568             3309   
041568             3310   	; locate x,y
041568             3311   	vdu 31
041568 3E 1F       0001M  		LD	A, function
04156A 49 D7       0002M  		RST.LIS	10h
04156C             3312   	vdu FILENAME_X
04156C 3E 07       0001M  		LD	A, function
04156E 49 D7       0002M  		RST.LIS	10h
041570             3313   	vdu FILENAME_Y
041570 3E 18       0001M  		LD	A, function
041572 49 D7       0002M  		RST.LIS	10h
041574             3314   
041574             3315   	; print text
041574 21 22 18 04 3316   	ld hl,header_error
041578 01 00 00 00 3317   	ld bc,0
04157C AF          3318   	xor a
04157D 49 DF       3319   	rst.lis $18
04157F             3320   
04157F CD F0 0D 04 3321   	call fn_input_key
041583             3322   
041583             3323   	; locate x,y
041583             3324   	vdu 31
041583 3E 1F       0001M  		LD	A, function
041585 49 D7       0002M  		RST.LIS	10h
041587             3325   	vdu FILENAME_X
041587 3E 07       0001M  		LD	A, function
041589 49 D7       0002M  		RST.LIS	10h
04158B             3326   	vdu FILENAME_Y
04158B 3E 18       0001M  		LD	A, function
04158D 49 D7       0002M  		RST.LIS	10h
04158F             3327   
04158F             3328   	; print text
04158F 21 DD 17 04 3329   	ld hl,void_filename
041593 01 00 00 00 3330   	ld bc,0
041597 AF          3331   	xor a
041598 49 DF       3332   	rst.lis $18
04159A             3333   
04159A C9          3334   	ret
04159B             3335   
04159B             3336   ; print 'data error'
04159B             3337   fn_print_data_error:
04159B             3338   	vdu 7
04159B 3E 07       0001M  		LD	A, function
04159D 49 D7       0002M  		RST.LIS	10h
04159F             3339   
04159F             3340   	; locate x,y
04159F             3341   	vdu 31
04159F 3E 1F       0001M  		LD	A, function
0415A1 49 D7       0002M  		RST.LIS	10h
0415A3             3342   	vdu FILENAME_X
0415A3 3E 07       0001M  		LD	A, function
0415A5 49 D7       0002M  		RST.LIS	10h
0415A7             3343   	vdu FILENAME_Y
0415A7 3E 18       0001M  		LD	A, function
0415A9 49 D7       0002M  		RST.LIS	10h
0415AB             3344   
0415AB             3345   	; print text
0415AB 21 39 18 04 3346   	ld hl,data_error
0415AF 01 00 00 00 3347   	ld bc,0
0415B3 AF          3348   	xor a
0415B4 49 DF       3349   	rst.lis $18
0415B6             3350   
0415B6 CD F0 0D 04 3351   	call fn_input_key
0415BA             3352   
0415BA             3353   	; locate x,y
0415BA             3354   	vdu 31
0415BA 3E 1F       0001M  		LD	A, function
0415BC 49 D7       0002M  		RST.LIS	10h
0415BE             3355   	vdu FILENAME_X
0415BE 3E 07       0001M  		LD	A, function
0415C0 49 D7       0002M  		RST.LIS	10h
0415C2             3356   	vdu FILENAME_Y
0415C2 3E 18       0001M  		LD	A, function
0415C4 49 D7       0002M  		RST.LIS	10h
0415C6             3357   
0415C6             3358   	; print text
0415C6 21 DD 17 04 3359   	ld hl,void_filename
0415CA 01 00 00 00 3360   	ld bc,0
0415CE AF          3361   	xor a
0415CF 49 DF       3362   	rst.lis $18
0415D1             3363   
0415D1 C9          3364   	ret
0415D2             3365   
0415D2             3366   ; refresh all the current sprite frame
0415D2             3367   fn_refresh_sprite:
0415D2 06 00       3368   	ld b,0 ; B -> x cordinate
0415D4 0E 00       3369   	ld c,0 ; C -> y cordinate
0415D6             3370   
0415D6             3371   rs_loop:
0415D6 C5          3372   	push bc
0415D7             3373   
0415D7 21 3E 17 04 3374   	ld hl,xpix
0415DB 70          3375   	ld (hl),b
0415DC 21 3F 17 04 3376   	ld hl,ypix
0415E0 71          3377   	ld (hl),c
0415E1 CD 82 0C 04 3378   	call fn_draw_pixel_without_border
0415E5             3379   
0415E5 C1          3380   	pop bc
0415E6             3381   
0415E6 04          3382   	inc b
0415E7 21 43 17 04 3383   	ld hl,spr_size
0415EB 7E          3384   	ld a,(hl)
0415EC B8          3385   	cp b
0415ED 28 04       3386   	jr z,rs_next_line
0415EF C3 D6 15 04 3387   	jp rs_loop
0415F3             3388   
0415F3             3389   rs_next_line:
0415F3 06 00       3390   	ld b,0
0415F5 0C          3391   	inc c
0415F6 21 43 17 04 3392   	ld hl,spr_size
0415FA 7E          3393   	ld a,(hl)
0415FB B9          3394   	cp c
0415FC 28 04       3395   	jr z,rs_end
0415FE C3 D6 15 04 3396   	jp rs_loop
041602             3397   
041602             3398   rs_end:
041602 AF          3399   	xor a
041603 21 3E 17 04 3400   	ld hl,xpix
041607 77          3401   	ld (hl),a
041608 21 3F 17 04 3402   	ld hl,ypix
04160C 77          3403   	ld (hl),a
04160D CD 6E 0C 04 3404   	call fn_draw_pixel_with_border
041611             3405   
041611 C9          3406   	ret
041612             3407   
041612             3408   fn_change_frame:
041612 21 50 18 04 3409   	ld hl,current_frame
041616 7E          3410   	ld a,(hl)
041617 3C          3411   	inc a
041618 C6 30       3412   	add a,48
04161A 21 52 18 04 3413   	ld hl,current_frame_ascii
04161E 77          3414   	ld (hl),a
04161F             3415   
04161F             3416   	; locate 21,3
04161F             3417   	vdu 31
04161F 3E 1F       0001M  		LD	A, function
041621 49 D7       0002M  		RST.LIS	10h
041623             3418   	vdu 21
041623 3E 15       0001M  		LD	A, function
041625 49 D7       0002M  		RST.LIS	10h
041627             3419   	vdu 3
041627 3E 03       0001M  		LD	A, function
041629 49 D7       0002M  		RST.LIS	10h
04162B             3420   
04162B             3421   	; print text
04162B 21 52 18 04 3422   	ld hl,current_frame_ascii
04162F 01 00 00 00 3423   	ld bc,0
041633 AF          3424   	xor a
041634 49 DF       3425   	rst.lis $18
041636             3426   
041636 C9          3427   	ret
041637             3428   
041637             3429   fn_change_frames_count:
041637 21 51 18 04 3430   	ld hl,frames_count
04163B 7E          3431   	ld a,(hl)
04163C C6 30       3432   	add a,48
04163E 21 54 18 04 3433   	ld hl,frames_count_ascii
041642 77          3434   	ld (hl),a
041643             3435   
041643             3436   	; locate 23,3
041643             3437   	vdu 31
041643 3E 1F       0001M  		LD	A, function
041645 49 D7       0002M  		RST.LIS	10h
041647             3438   	vdu 23
041647 3E 17       0001M  		LD	A, function
041649 49 D7       0002M  		RST.LIS	10h
04164B             3439   	vdu 3
04164B 3E 03       0001M  		LD	A, function
04164D 49 D7       0002M  		RST.LIS	10h
04164F             3440   
04164F             3441   	; print text
04164F 21 54 18 04 3442   	ld hl,frames_count_ascii
041653 01 00 00 00 3443   	ld bc,0
041657 AF          3444   	xor a
041658 49 DF       3445   	rst.lis $18
04165A             3446   
04165A C9          3447   	ret
04165B             3448   
04165B             3449   ; slowdown (wait delay)
04165B             3450   fn_slowdown:
04165B DD 21 56 18 3451   	ld ix,keydata
       04          
041660 DD 7E 02    3452   	ld a,(ix+2)
041663 E6 02       3453   	and 2
041665 FE 02       3454   	cp 2 ; shift key to disable delay
041667 C8          3455   	ret z
041668             3456   
041668             3457   	moscall mos_sysvars
041668 3E 08       0001M  		LD	A, function
04166A 49 CF       0002M  		RST.LIS	08h
04166C DD 4E 00    3458   	ld c,(ix+sysvar_time)
04166F             3459   
04166F             3460   sd_loop:
04166F             3461   	moscall mos_sysvars
04166F 3E 08       0001M  		LD	A, function
041671 49 CF       0002M  		RST.LIS	08h
041673 DD 7E 00    3462   	ld a,(ix+sysvar_time)
041676 91          3463   	sub c
041677 FE 14       3464   	cp SLOWDOWN_DELAY
041679 20 F4       3465   	jr nz,sd_loop
04167B C9          3466   	ret
04167C             3467   
04167C             3468   fn_show_spr_descr:
04167C             3469   	; locate 15,3
04167C             3470   	vdu 31
04167C 3E 1F       0001M  		LD	A, function
04167E 49 D7       0002M  		RST.LIS	10h
041680             3471   	vdu 15
041680 3E 0F       0001M  		LD	A, function
041682 49 D7       0002M  		RST.LIS	10h
041684             3472   	vdu 3
041684 3E 03       0001M  		LD	A, function
041686 49 D7       0002M  		RST.LIS	10h
041688             3473   
041688             3474   	; print text
041688 21 8E 17 04 3475   	ld hl,spr_descr
04168C 01 00 00 00 3476   	ld bc,0
041690 AF          3477   	xor a
041691 49 DF       3478   	rst.lis $18
041693             3479   
041693             3480   	; locate 15,5
041693             3481   	vdu 31
041693 3E 1F       0001M  		LD	A, function
041695 49 D7       0002M  		RST.LIS	10h
041697             3482   	vdu 15
041697 3E 0F       0001M  		LD	A, function
041699 49 D7       0002M  		RST.LIS	10h
04169B             3483   	vdu 5
04169B 3E 05       0001M  		LD	A, function
04169D 49 D7       0002M  		RST.LIS	10h
04169F             3484   
04169F             3485   	; check for sprite size...
04169F 21 43 17 04 3486   	ld hl,spr_size
0416A3 7E          3487   	ld a,(hl)
0416A4             3488   
0416A4 FE 04       3489   	cp 4
0416A6 20 0C       3490   	jr nz,ssd_8x8
0416A8             3491   
0416A8             3492   	; print text 4x4
0416A8 21 98 17 04 3493   	ld hl,spr_descr1
0416AC 01 00 00 00 3494   	ld bc,0
0416B0 AF          3495   	xor a
0416B1 49 DF       3496   	rst.lis $18
0416B3 C9          3497   	ret
0416B4             3498   
0416B4             3499   ssd_8x8:
0416B4 FE 08       3500   	cp 8
0416B6 20 0C       3501   	jr nz,ssd_16x16
0416B8             3502   
0416B8             3503   	; print text 8x8
0416B8 21 9E 17 04 3504   	ld hl,spr_descr2
0416BC 01 00 00 00 3505   	ld bc,0
0416C0 AF          3506   	xor a
0416C1 49 DF       3507   	rst.lis $18
0416C3 C9          3508   	ret
0416C4             3509   
0416C4             3510   ssd_16x16:
0416C4 FE 10       3511   	cp 16
0416C6 20 0C       3512   	jr nz,ssd_32x32
0416C8             3513   
0416C8             3514   	; print text 16x16
0416C8 21 A4 17 04 3515   	ld hl,spr_descr3
0416CC 01 00 00 00 3516   	ld bc,0
0416D0 AF          3517   	xor a
0416D1 49 DF       3518   	rst.lis $18
0416D3 C9          3519   	ret
0416D4             3520   
0416D4             3521   ssd_32x32:
0416D4             3522   	; print text 32x32
0416D4 21 AA 17 04 3523   	ld hl,spr_descr4
0416D8 01 00 00 00 3524   	ld bc,0
0416DC AF          3525   	xor a
0416DD 49 DF       3526   	rst.lis $18
0416DF             3527   
0416DF C9          3528   	ret
0416E0             3529   
0416E0             3530   ; input: HL = negative key to check
0416E0             3531   fn_inkey:
0416E0             3532   	moscall mos_getkbmap
0416E0 3E 1E       0001M  		LD	A, function
0416E2 49 CF       0002M  		RST.LIS	08h
0416E4 23          3533   	INC	HL
0416E5 7D          3534   	LD	A, L
0416E6 ED 44       3535   	NEG
0416E8 4F          3536   	LD	C, A
0416E9 3E 01       3537   	LD	A, 1
0416EB FA 0F 17 04 3538   	JP	M,i_false ; < -128 ?
0416EF             3539   
0416EF 21 45 00 04 3540   	LD	HL,BITLOOKUP
0416F3 11 00 00 00 3541   	LD	DE,0
0416F7 79          3542   	LD	A,C
0416F8 E6 07       3543   	AND	00000111b
0416FA 5F          3544   	LD	E,A
0416FB 19          3545   	ADD	HL,DE
0416FC 46          3546   	LD	B,(HL)
0416FD             3547   
0416FD 79          3548   	LD	A,C
0416FE E6 78       3549   	AND	01111000b
041700 0F          3550   	RRCA
041701 0F          3551   	RRCA
041702 0F          3552   	RRCA
041703 5F          3553   	LD	E, A
041704 DD 19       3554   	ADD	IX,DE
041706 DD 7E 00    3555   	LD	A,(IX+0)
041709 A0          3556   	AND	B
04170A 28 03       3557   	JR Z,i_false
04170C 3E 01       3558   	LD A,1
04170E C9          3559   	RET
04170F             3560   i_false:
04170F AF          3561   	XOR A
041710 C9          3562   	RET
041711             3563   
041711             3564   fn_create_sprite_folder:
041711 21 C7 17 04 3565   	ld hl,sprite_path
041715             3566   	moscall mos_mkdir
041715 3E 07       0001M  		LD	A, function
041717 49 CF       0002M  		RST.LIS	08h
041719 C9          3567   	ret
04171A             3568   
04171A             3569   fn_comma:
04171A 06 2C       3570   	ld b,','
04171C             3571   	moscall mos_fputc
04171C 3E 0D       0001M  		LD	A, function
04171E 49 CF       0002M  		RST.LIS	08h
041720 C9          3572   	ret
041721             3573   
041721             3574   ; Hex to BCD
041721             3575   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
041721             3576   ; Input: a = hex number
041721             3577   ; Output: a = BCD number
041721             3578   ; Clobbers: b,c
041721             3579   fn_hex2bcd:
041721 C5          3580   		push bc
041722 4F          3581   		ld c,a  ; Original (hex) number
041723 06 08       3582   		ld b,8  ; How many bits
041725 AF          3583   		xor a   ; Output (BCD) number, starts at 0
041726 CB 21       3584   htb:	sla c   ; shift c into carry
041728 8F          3585   		adc a,a
041729 27          3586   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
04172A 10 FA       3587   		djnz htb  ; Repeat for 8 bits
04172C C1          3588   		pop bc
04172D C9          3589   		ret
04172E             3590   
04172E             3591   ;======================================================================
04172E             3592   
04172E             3593   ; coordinates for rectangles
04172E             3594   x1:
04172E 00 00       3595   	dw $0000
041730             3596   y1:
041730 00 00       3597   	dw $0000
041732             3598   x2:
041732 00 00       3599   	dw $0000
041734             3600   y2:
041734 00 00       3601   	dw $0000
041736             3602   
041736             3603   ; coordinates of the edited sprite
041736             3604   xs1:
041736 5F 00       3605   	dw 95
041738             3606   ys1:
041738 37 00       3607   	dw 55
04173A             3608   xs2:
04173A E0 00       3609   	dw 224
04173C             3610   ys2:
04173C B8 00       3611   	dw 184
04173E             3612   
04173E             3613   ; coordinates of active pixels to draw
04173E             3614   xpix:
04173E 00          3615   	db 0
04173F             3616   ypix:
04173F 00          3617   	db 0
041740             3618   
041740             3619   ; memorized coordinates of active pixels to draw
041740             3620   memxpix:
041740 00          3621   	db 0
041741             3622   memypix:
041741 00          3623   	db 0
041742             3624   
041742             3625   ; width of a pixel in the sprite
041742             3626   pixel_width:
041742 00          3627   	db 0
041743             3628   
041743             3629   ; sprite size, in resized pixels
041743             3630   spr_size:
041743 00          3631   	db 0
041744             3632   
041744             3633   ; pen color (0-63)
041744             3634   current_pen:
041744 00          3635   	db 0
041745             3636   
041745             3637   ; texts for 1st menu
041745             3638   title:
041745 53 50 52 2D 3639   	db "SPR-EDIT",0
       45 44 49 54 
       00          
04174E             3640   
04174E             3641   menu1:
04174E 46 31 2E 20 3642   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
04175D             3643   menu2:
04175D 46 32 2E 20 3644   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
04176C             3645   menu3:
04176C 46 33 2E 20 3646   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
04177D             3647   menu4:
04177D 46 34 2E 20 3648   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
04178E             3649   
04178E             3650   ; descriptions of sprites
04178E             3651   spr_descr:
04178E 46 72 61 6D 3652   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041798             3653   spr_descr1:
041798 34 78 34 20 3654   	db "4x4  ",0
       20 00       
04179E             3655   spr_descr2:
04179E 38 78 38 20 3656   	db "8x8  ",0
       20 00       
0417A4             3657   spr_descr3:
0417A4 31 36 78 31 3658   	db "16x16",0
       36 00       
0417AA             3659   spr_descr4:
0417AA 33 32 78 33 3660   	db "32x32",0
       32 00       
0417B0             3661   
0417B0             3662   ; label before filename
0417B0             3663   filename_label:
0417B0 46 69 6C 65 3664   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
0417BA             3665   
0417BA             3666   ; filename without extension
0417BA             3667   filename:
0417BA 00 00 00 00 3668   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
0417C7             3669   
0417C7             3670   sprite_path:
0417C7 73 70 72 69 3671   	db "sprites",0
       74 65 73 00 
0417CF             3672   
0417CF             3673   palette_path:
0417CF 70 61 6C 65 3674   	db "palettes",0
       74 74 65 73 
       00          
0417D8             3675   
0417D8             3676   back_path:
0417D8 2E 2E 00    3677   	db "..",0
0417DB             3678   
0417DB             3679   ; single space char to print
0417DB             3680   spacechar:
0417DB 20 00       3681   	db " ",0
0417DD             3682   
0417DD             3683   ; spaces to remove filename label
0417DD             3684   void_filename:
0417DD 20 20 20 20 3685   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0417F4             3686   
0417F4             3687   ; file error message
0417F4             3688   file_error:
0417F4 46 69 6C 65 3689   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
04180B             3690   
04180B             3691   ; folder error message
04180B             3692   folder_error:
04180B 46 6F 6C 64 3693   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
041822             3694   
041822             3695   ; header error message
041822             3696   header_error:
041822 48 65 61 64 3697   	db "Header error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
041839             3698   
041839             3699   ; data error message
041839             3700   data_error:
041839 44 61 74 61 3701   	db "Data error !        ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       00          
04184E             3702   
04184E             3703   ; number of colors
04184E             3704   colors_count:
04184E 00          3705   	db 0
04184F             3706   
04184F             3707   ; real number of colors
04184F             3708   new_colors_count:
04184F 00          3709   	db 0
041850             3710   
041850             3711   ; current frame
041850             3712   current_frame:
041850 00          3713   	db 0
041851             3714   
041851             3715   ; frames count
041851             3716   frames_count:
041851 00          3717   	db 0
041852             3718   
041852             3719   current_frame_ascii:
041852 30 00       3720   	db '0',0
041854             3721   
041854             3722   frames_count_ascii:
041854 30 00       3723   	db '0',0
041856             3724   
041856             3725   ; keycode, keydown & keymods are stored here
041856             3726   keydata:
041856 00 00 00    3727   	db 0,0,0
041859             3728   
041859             3729   ; buffer for the current sprite
041859             3730   sprite_buffer:
041859             3731   	ds BUFFER_SIZE
043859             3732   
043859             3733   header_buffer:
043859             3734   	ds HEADER_BUFFER_SIZE
043869             3735   
043869             3736   color_buffer:
043869 00 00 00    3737   	db 0,0,0
04386C             3738   
04386C             3739   palette_buffer:
04386C             3740   	ds MAX_PAL_DATA + 1
043BB1             3741   
043BB1             3742   temp_chars_buffer:
043BB1 00 00 00 00 3743   	db 0,0,0,0
043BB5             3744   
043BB5             3745   header:
043BB5 4A 41 53 43 3746   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043BBF 30 31 30 30 3747   	db "0100",13,10
       0D 0A       
043BC5             3748   
043BC5             3749   ; buffer to perform some operations
043BC5             3750   swap_sprite_buffer:
043BC5             3751   	ds ONE_FRAME_BUFFER_SIZE
043FC5             3752   
043FC5             3753   asm_line:
043FC5 44 42 20    3754   	DB "DB "
043FC8             3755   
043FC8             3756   asm_line_length:
043FC8 03          3757   	DB 3
043FC9             3758   
043FC9             3759   rgb_palette:
043FC9 00 00 00    3760   	db $00,$00,$00
043FCC AA 00 00    3761   	db $AA,$00,$00
043FCF 00 AA 00    3762   	db $00,$AA,$00
043FD2 AA AA 00    3763   	db $AA,$AA,$00
043FD5 00 00 AA    3764   	db $00,$00,$AA
043FD8 AA 00 AA    3765   	db $AA,$00,$AA
043FDB 00 AA AA    3766   	db $00,$AA,$AA
043FDE AA AA AA    3767   	db $AA,$AA,$AA
043FE1             3768   
043FE1 55 55 55    3769   	db $55,$55,$55
043FE4 FF 00 00    3770   	db $FF,$00,$00
043FE7 00 FF 00    3771   	db $00,$FF,$00
043FEA FF FF 00    3772   	db $FF,$FF,$00
043FED 00 00 FF    3773   	db $00,$00,$FF
043FF0 FF 00 FF    3774   	db $FF,$00,$FF
043FF3 00 FF FF    3775   	db $00,$FF,$FF
043FF6 FF FF FF    3776   	db $FF,$FF,$FF
043FF9             3777   
043FF9 00 00 55    3778   	db $00,$00,$55
043FFC 00 55 00    3779   	db $00,$55,$00
043FFF 00 55 55    3780   	db $00,$55,$55
044002 00 55 AA    3781   	db $00,$55,$AA
044005 00 55 FF    3782   	db $00,$55,$FF
044008 00 AA 55    3783   	db $00,$AA,$55
04400B 00 AA FF    3784   	db $00,$AA,$FF
04400E 00 FF 55    3785   	db $00,$FF,$55
044011             3786   
044011 00 FF AA    3787   	db $00,$FF,$AA
044014 55 00 00    3788   	db $55,$00,$00
044017 55 00 55    3789   	db $55,$00,$55
04401A 55 00 AA    3790   	db $55,$00,$AA
04401D 55 00 FF    3791   	db $55,$00,$FF
044020 55 55 00    3792   	db $55,$55,$00
044023 55 55 AA    3793   	db $55,$55,$AA
044026 55 55 FF    3794   	db $55,$55,$FF
044029             3795   
044029 55 AA 00    3796   	db $55,$AA,$00
04402C 55 AA 55    3797   	db $55,$AA,$55
04402F 55 AA AA    3798   	db $55,$AA,$AA
044032 55 AA FF    3799   	db $55,$AA,$FF
044035 55 FF 00    3800   	db $55,$FF,$00
044038 55 FF 55    3801   	db $55,$FF,$55
04403B 55 FF AA    3802   	db $55,$FF,$AA
04403E 55 FF FF    3803   	db $55,$FF,$FF
044041             3804   
044041 AA 00 55    3805   	db $AA,$00,$55
044044 AA 00 FF    3806   	db $AA,$00,$FF
044047 AA 55 00    3807   	db $AA,$55,$00
04404A AA 55 55    3808   	db $AA,$55,$55
04404D AA 55 AA    3809   	db $AA,$55,$AA
044050 AA 55 FF    3810   	db $AA,$55,$FF
044053 AA AA 55    3811   	db $AA,$AA,$55
044056 AA AA FF    3812   	db $AA,$AA,$FF
044059             3813   
044059 AA FF 00    3814   	db $AA,$FF,$00
04405C AA FF 55    3815   	db $AA,$FF,$55
04405F AA FF AA    3816   	db $AA,$FF,$AA
044062 AA FF FF    3817   	db $AA,$FF,$FF
044065 FF 00 55    3818   	db $FF,$00,$55
044068 FF 00 AA    3819   	db $FF,$00,$AA
04406B FF 55 00    3820   	db $FF,$55,$00
04406E FF 55 55    3821   	db $FF,$55,$55
044071             3822   
044071 FF 55 AA    3823   	db $FF,$55,$AA
044074 FF 55 FF    3824   	db $FF,$55,$FF
044077 FF AA 00    3825   	db $FF,$AA,$00
04407A FF AA 55    3826   	db $FF,$AA,$55
04407D FF AA AA    3827   	db $FF,$AA,$AA
044080 FF AA FF    3828   	db $FF,$AA,$FF
044083 FF FF 55    3829   	db $FF,$FF,$55
044086 FF FF AA    3830   	db $FF,$FF,$AA
044089             3831   
044089             3832   ; sprite structure:
044089             3833   ; =================
044089             3834   ; colors_count  :   byte
044089             3835   ; frames count	:	byte
044089             3836   ; spr size		:	byte
044089             3837   ; data			:   width x height bytes of colors
044089             3838   
044089             3839   ; ===============================================
044089             3840   ; A = byte to debug
044089             3841   debug_byte:
044089 F5          3842   	PUSH AF
04408A C5          3843   	PUSH BC
04408B D5          3844   	PUSH DE
04408C E5          3845   	PUSH HL
04408D 21 00 00 00 3846   	LD HL,$000000
044091 6F          3847   	LD L,A
044092 11 CE 40 04 3848   	LD DE,debug_text
044096 D5          3849   	PUSH DE
044097 CD D4 40 04 3850   	CALL num2dec
04409B E1          3851   	POP HL
04409C 23          3852   	INC HL
04409D 23          3853   	INC HL
04409E 01 03 00 00 3854   	LD BC,3
0440A2 3E 00       3855   	LD A,0
0440A4 49 DF       3856   	RST.LIS $18
0440A6 E1          3857   	POP HL
0440A7 D1          3858   	POP DE
0440A8 C1          3859   	POP BC
0440A9 F1          3860   	POP AF
0440AA C9          3861   	RET
0440AB             3862   
0440AB             3863   ; HL = word to debug
0440AB             3864   debug_word:
0440AB F5          3865   	PUSH AF
0440AC C5          3866   	PUSH BC
0440AD D5          3867   	PUSH DE
0440AE E5          3868   	PUSH HL
0440AF 11 00 00 00 3869   	LD DE,$000000 ; remove HLU
0440B3 5D          3870   	LD E,L
0440B4 54          3871   	LD D,H
0440B5 D5          3872   	PUSH DE
0440B6 E1          3873   	POP HL
0440B7 11 CE 40 04 3874   	LD DE,debug_text
0440BB D5          3875   	PUSH DE
0440BC CD D4 40 04 3876   	CALL num2dec
0440C0 E1          3877   	POP HL
0440C1 01 05 00 00 3878   	LD BC,5
0440C5 3E 00       3879   	LD A,0
0440C7 49 DF       3880   	RST.LIS $18
0440C9 E1          3881   	POP HL
0440CA D1          3882   	POP DE
0440CB C1          3883   	POP BC
0440CC F1          3884   	POP AF
0440CD C9          3885   	RET
0440CE             3886   
0440CE             3887   debug_text:
0440CE             3888   	DS 6
0440D4             3889   
0440D4             3890   ; 16 bits number to string
0440D4             3891   num2dec:
0440D4 01 F0 D8 FF 3892   	LD BC,-10000
0440D8 CD F5 40 04 3893   	CALL num1
0440DC 01 18 FC FF 3894   	LD BC,-1000
0440E0 CD F5 40 04 3895   	CALL num1
0440E4 01 9C FF FF 3896   	LD BC,-100
0440E8 CD F5 40 04 3897   	CALL num1
0440EC 01 F6 FF FF 3898   	LD BC,-10
0440F0 CD F5 40 04 3899   	CALL num1
0440F4 48          3900   	LD C,B
0440F5             3901   
0440F5 3E 2F       3902   num1: LD A,'0'-1
0440F7 3C          3903   num2: INC A
0440F8 09          3904   	ADD HL,BC
0440F9 38 FC       3905   	JR C,num2
0440FB ED 42       3906   	SBC HL,BC
0440FD             3907   
0440FD 12          3908   	LD (DE),A
0440FE 13          3909   	INC DE
0440FF C9          3910   	RET
