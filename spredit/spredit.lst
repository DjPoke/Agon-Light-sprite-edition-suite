PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   
040045             0022   MAX_FRAMES:			equ 8
040045             0023   
040045             0024   COLOR_WHITE:		equ 15
040045             0025   COLOR_GREY:			equ 7
040045             0026   COLOR_BLACK:		equ 0
040045             0027   
040045             0028   TITLE_X: 	equ 17
040045             0029   TITLE_Y: 	equ 2
040045             0030   MENU_X: 	equ 13
040045             0031   MENU1_Y: 	equ 8
040045             0032   MENU2_Y: 	equ 12
040045             0033   MENU3_Y: 	equ 16
040045             0034   MENU4_Y: 	equ 20
040045             0035   MENU5_Y: 	equ 24
040045             0036   FILENAME_X: equ 7
040045             0037   FILENAME_Y: equ 24
040045             0038   
040045             0039   SPR44: 		equ 4
040045             0040   SPR88: 		equ 8
040045             0041   SPR1616: 	equ 16
040045             0042   SPR3232: 	equ 32
040045             0043   
040045             0044   SPR44_width: 	equ 32
040045             0045   SPR88_width: 	equ 16
040045             0046   SPR1616_width: 	equ 8
040045             0047   SPR3232_width: 	equ 4
040045             0048   
040045             0049   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0050   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0051   
040045             0052   HEADER_BUFFER_SIZE:		equ 16
040045             0053   
040045             0054   SLOWDOWN_DELAY:	equ 20
040045             0055   
040045             0056   KEY_SPACE: equ -99 ; draw with color
040045             0057   KEY_UP: equ -58 ; move
040045             0058   KEY_DOWN: equ -42
040045             0059   KEY_LEFT: equ -26
040045             0060   KEY_RIGHT: equ -122
040045             0061   KEY_DELETE: equ -90 ; remove color with black
040045             0062   KEY_N: equ -86 ; add a new void frame
040045             0063   KEY_C: equ -83 ; copy current frame to a new frame
040045             0064   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0065   KEY_PGUP: equ -64 ; select frame
040045             0066   KEY_PGDOWN: equ -79
040045             0067   KEY_L: equ -87 ; load sprite
040045             0068   KEY_S: equ -82 ; save sprite
040045             0069   KEY_E: equ -35 ; export sprite as assembler data
040045             0070   KEY_R: equ -52 ; rotate frame clockwise
040045             0071   KEY_F: equ -68 ; flip frame horizontally
040045             0072   KEY_M: equ -102 ; mirror frame vertically
040045             0073   KEY_ESCAPE: equ -113
040045             0074   KEY_F1: equ -114 ; select 4x4 sprite
040045             0075   KEY_F2: equ -115 ; select 8x8 sprite
040045             0076   KEY_F3: equ -116 ; select 16x16 sprite
040045             0077   KEY_F4: equ -21 ; select 32x32 sprite
040045             0078   KEY_RETURN: equ -74 ; floodfill
040045             0079   
040045             0080   ; play mode:
040045             0081   KEY_P:	equ -56 ; switch to play mode
040045             0082   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0083   
040045             0084   ; palette mode:
040045             0085   KEY_TAB: equ -97 ; switch to palette mode
040045             0086   KEY_1:	equ -49 ; red+
040045             0087   KEY_2:	equ -50 ; green+
040045             0088   KEY_3:	equ -18 ; blue+
040045             0089   KEY_4:	equ -19 ; red-
040045             0090   KEY_5:	equ -20 ; green-
040045             0091   KEY_6:	equ -53; blue-
040045             0092   KEY_7:	equ -37 ; reset color to black
040045             0093   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0094   ; KEY_S: save palette file
040045             0095   
040045             0096   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0097   MAX_PAL_DATA_HI: equ 03h
040045             0098   MAX_PAL_DATA_LO: equ 44h
040045             0099   
040045             0100   BITLOOKUP:
040045 01 02 04 08 0101   	DB 01h,02h,04h,08h
040049 10 20 40 80 0102   	DB 10h,20h,40h,80h
04004D             0103   
04004D             0104   ;======================================================================
04004D             0105   start:
04004D F5          0106   	push af
04004E C5          0107   	push bc
04004F D5          0108   	push de
040050 DD E5       0109   	push ix
040052 FD E5       0110   	push iy
040054             0111   
040054             0112   	; set mode 8 (320x240x64)
040054             0113   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0114   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0115   
04005C             0116   	; disable logical scale coordinates system
04005C             0117   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0118   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0119   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0120   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0121   
04006C             0122   	; set text colors
04006C             0123   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0124   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0125   
040074             0126   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0127   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0128   
04007C             0129   	; set graphics pen
04007C             0130   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0131   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0132   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0133   
040088             0134   	; hide cursor
040088             0135   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0136   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0137   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0138   
040094             0139   	; store coordinates
040094 DD 21 F8 17 0140   	ld ix,x1
       04          
040099 21 00 00 00 0141   	ld hl,0
04009D DD 75 00    0142   	ld (ix+0),l
0400A0 DD 74 01    0143   	ld (ix+1),h
0400A3             0144   
0400A3 DD 21 FA 17 0145   	ld ix,y1
       04          
0400A8 21 00 00 00 0146   	ld hl,0
0400AC DD 75 00    0147   	ld (ix+0),l
0400AF DD 74 01    0148   	ld (ix+1),h
0400B2             0149   
0400B2 DD 21 FC 17 0150   	ld ix,x2
       04          
0400B7 21 3F 01 00 0151   	ld hl,319
0400BB DD 75 00    0152   	ld (ix+0),l
0400BE DD 74 01    0153   	ld (ix+1),h
0400C1             0154   
0400C1 DD 21 FE 17 0155   	ld ix,y2
       04          
0400C6 21 EF 00 00 0156   	ld hl,239
0400CA DD 75 00    0157   	ld (ix+0),l
0400CD DD 74 01    0158   	ld (ix+1),h
0400D0             0159   
0400D0             0160   	; draw the border rectangle
0400D0 CD 81 0A 04 0161   	call fn_rect
0400D4             0162   
0400D4             0163   	; locate x,y
0400D4             0164   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0165   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0166   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0167   
0400E0             0168   	; print text
0400E0 21 0F 18 04 0169   	ld hl,title
0400E4 01 00 00 00 0170   	ld bc,0
0400E8 AF          0171   	xor a
0400E9 49 DF       0172   	rst.lis $18
0400EB             0173   
0400EB             0174   	; locate x,y
0400EB             0175   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0176   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0177   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0178   
0400F7             0179   	; print text
0400F7 21 18 18 04 0180   	ld hl,menu1
0400FB 01 00 00 00 0181   	ld bc,0
0400FF AF          0182   	xor a
040100 49 DF       0183   	rst.lis $18
040102             0184   
040102             0185   	; locate x,y
040102             0186   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0187   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0188   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0189   
04010E             0190   	; print text
04010E 21 27 18 04 0191   	ld hl,menu2
040112 01 00 00 00 0192   	ld bc,0
040116 AF          0193   	xor a
040117 49 DF       0194   	rst.lis $18
040119             0195   
040119             0196   	; locate x,y
040119             0197   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0198   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0199   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0200   
040125             0201   	; print text
040125 21 36 18 04 0202   	ld hl,menu3
040129 01 00 00 00 0203   	ld bc,0
04012D AF          0204   	xor a
04012E 49 DF       0205   	rst.lis $18
040130             0206   
040130             0207   	; locate x,y
040130             0208   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0209   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0210   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0211   
04013C             0212   	; print text
04013C 21 47 18 04 0213   	ld hl,menu4
040140 01 00 00 00 0214   	ld bc,0
040144 AF          0215   	xor a
040145 49 DF       0216   	rst.lis $18
040147             0217   
040147             0218   ; menu loop
040147             0219   menu_loop:
040147 21 8F FF FF 0220   	ld hl,KEY_ESCAPE
04014B CD 35 17 04 0221   	call fn_inkey
04014F FE 01       0222   	CP 1
040151 CA 5D 0A 04 0223   	jp z,exit_program
040155             0224   
040155 21 8E FF FF 0225   	ld hl,KEY_F1
040159 CD 35 17 04 0226   	call fn_inkey
04015D FE 01       0227   	CP 1
04015F CA 91 01 04 0228   	jp z,ml_menu1
040163             0229   
040163 21 8D FF FF 0230   	ld hl,KEY_F2
040167 CD 35 17 04 0231   	call fn_inkey
04016B FE 01       0232   	CP 1
04016D CA 97 01 04 0233   	jp z,ml_menu2
040171             0234   
040171 21 8C FF FF 0235   	ld hl,KEY_F3
040175 CD 35 17 04 0236   	call fn_inkey
040179 FE 01       0237   	CP 1
04017B CA 9D 01 04 0238   	jp z,ml_menu3
04017F             0239   
04017F 21 EB FF FF 0240   	ld hl,KEY_F4
040183 CD 35 17 04 0241   	call fn_inkey
040187 FE 01       0242   	CP 1
040189 CA A3 01 04 0243   	jp z,ml_menu4
04018D             0244   
04018D C3 47 01 04 0245   	jp menu_loop
040191             0246   
040191             0247   ml_menu1:
040191 3E 04       0248   	ld a,SPR44
040193 16 20       0249   	ld d,SPR44_width
040195 18 10       0250   	jr exit_menu_loop
040197             0251   
040197             0252   ml_menu2:
040197 3E 08       0253   	ld a,SPR88
040199 16 10       0254   	ld d,SPR88_width
04019B 18 0A       0255   	jr exit_menu_loop
04019D             0256   
04019D             0257   ml_menu3:
04019D 3E 10       0258   	ld a,SPR1616
04019F 16 08       0259   	ld d,SPR1616_width
0401A1 18 04       0260   	jr exit_menu_loop
0401A3             0261   
0401A3             0262   ml_menu4:
0401A3 3E 20       0263   	ld a,SPR3232
0401A5 16 04       0264   	ld d,SPR3232_width
0401A7             0265   
0401A7             0266   exit_menu_loop:
0401A7             0267   	; store edited sprite size
0401A7 21 0D 18 04 0268   	ld hl,spr_size
0401AB 77          0269   	ld (hl),a
0401AC 21 0C 18 04 0270   	ld hl,pixel_width
0401B0 72          0271   	ld (hl),d
0401B1             0272   
0401B1             0273   	; clear the text screen
0401B1             0274   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0275   
0401B5             0276   	; set colors count to max colors
0401B5 21 2D 19 04 0277   	ld hl,colors_count
0401B9 3E 40       0278   	ld a,MAX_COLORS
0401BB 77          0279   	ld (hl),a
0401BC             0280   
0401BC CD 6F 17 04 0281   	call fn_draw_the_palette
0401C0             0282   
0401C0             0283   	; store coordinates
0401C0 DD 21 F8 17 0284   	ld ix,x1
       04          
0401C5 21 00 00 00 0285   	ld hl,0
0401C9 DD 75 00    0286   	ld (ix+0),l
0401CC DD 74 01    0287   	ld (ix+1),h
0401CF             0288   
0401CF DD 21 FA 17 0289   	ld ix,y1
       04          
0401D4 21 0B 00 00 0290   	ld hl,11
0401D8 DD 75 00    0291   	ld (ix+0),l
0401DB DD 74 01    0292   	ld (ix+1),h
0401DE             0293   
0401DE DD 21 FC 17 0294   	ld ix,x2
       04          
0401E3 21 3F 01 00 0295   	ld hl,319
0401E7 DD 75 00    0296   	ld (ix+0),l
0401EA DD 74 01    0297   	ld (ix+1),h
0401ED             0298   
0401ED DD 21 FE 17 0299   	ld ix,y2
       04          
0401F2 21 EF 00 00 0300   	ld hl,239
0401F6 DD 75 00    0301   	ld (ix+0),l
0401F9 DD 74 01    0302   	ld (ix+1),h
0401FC             0303   
0401FC             0304   	; draw the border rectangle
0401FC CD 81 0A 04 0305   	call fn_rect
040200             0306   
040200             0307   	; store edited sprite coordinates
040200 DD 21 00 18 0308   	ld ix,xs1
       04          
040205 FD 21 F8 17 0309   	ld iy,x1
       04          
04020A DD 6E 00    0310   	ld l,(ix+0)
04020D DD 66 01    0311   	ld h,(ix+1)
040210 FD 75 00    0312   	ld (iy+0),l
040213 FD 74 01    0313   	ld (iy+1),h
040216             0314   
040216 DD 21 02 18 0315   	ld ix,ys1
       04          
04021B FD 21 FA 17 0316   	ld iy,y1
       04          
040220 DD 6E 00    0317   	ld l,(ix+0)
040223 DD 66 01    0318   	ld h,(ix+1)
040226 FD 75 00    0319   	ld (iy+0),l
040229 FD 74 01    0320   	ld (iy+1),h
04022C             0321   
04022C DD 21 04 18 0322   	ld ix,xs2
       04          
040231 FD 21 FC 17 0323   	ld iy,x2
       04          
040236 DD 6E 00    0324   	ld l,(ix+0)
040239 DD 66 01    0325   	ld h,(ix+1)
04023C FD 75 00    0326   	ld (iy+0),l
04023F FD 74 01    0327   	ld (iy+1),h
040242             0328   
040242 DD 21 06 18 0329   	ld ix,ys2
       04          
040247 FD 21 FE 17 0330   	ld iy,y2
       04          
04024C DD 6E 00    0331   	ld l,(ix+0)
04024F DD 66 01    0332   	ld h,(ix+1)
040252 FD 75 00    0333   	ld (iy+0),l
040255 FD 74 01    0334   	ld (iy+1),h
040258             0335   
040258             0336   	; draw the sprite's border rectangle
040258 CD 81 0A 04 0337   	call fn_rect
04025C             0338   
04025C             0339   	; update sprite size descriptions
04025C CD D1 16 04 0340   	call fn_show_spr_descr
040260             0341   
040260             0342   ; initialize sprite vars
040260             0343   init_sprite_vars:
040260             0344   	; initialize coordinates before drawing the sprite
040260 DD 21 08 18 0345   	ld ix,xpix
       04          
040265 AF          0346   	xor a
040266 DD 77 00    0347   	ld (ix+0),a ; xpix = 0
040269 DD 77 01    0348   	ld (ix+1),a	; ypix = 0
04026C DD 21 0E 18 0349   	ld ix,current_pen
       04          
040271 3E 0F       0350   	ld a,COLOR_WHITE
040273 DD 77 00    0351   	ld (ix+0),a ; current pen -> white
040276             0352   
040276             0353   	; set vars
040276 21 32 19 04 0354   	ld hl,current_frame
04027A AF          0355   	xor a
04027B 77          0356   	ld (hl),a
04027C 3C          0357   	inc a
04027D 21 33 19 04 0358   	ld hl,frames_count
040281 77          0359   	ld (hl),a
040282             0360   
040282             0361   	; fill buffers with zeros
040282 01 00 20 00 0362   	ld bc,BUFFER_SIZE
040286 21 3B 19 04 0363   	ld hl,sprite_buffer
04028A             0364   
04028A             0365   isv_fill_loop:
04028A AF          0366   	xor a
04028B 77          0367   	ld (hl),a
04028C 0B          0368   	dec bc
04028D 23          0369   	inc hl
04028E 78          0370   	ld a,b
04028F B1          0371   	or c
040290 FE 00       0372   	cp 0
040292 20 F6       0373   	jr nz,isv_fill_loop
040294             0374   
040294             0375   ; draw the pixel with a border
040294 CD 0E 0C 04 0376   	call fn_draw_pixel_with_border
040298             0377   
040298             0378   ; draw sprite loop
040298             0379   draw_sprite_loop:
040298 21 9D FF FF 0380   	ld hl,KEY_SPACE
04029C CD 35 17 04 0381   	call fn_inkey
0402A0 FE 01       0382   	cp 1
0402A2 CC B4 03 04 0383   	call z,dsl_set_pen
0402A6             0384   
0402A6 21 C6 FF FF 0385   	ld hl,KEY_UP
0402AA CD 35 17 04 0386   	call fn_inkey
0402AE FE 01       0387   	cp 1
0402B0 CC D9 03 04 0388   	call z,dsl_up
0402B4             0389   
0402B4 21 D6 FF FF 0390   	ld hl,KEY_DOWN
0402B8 CD 35 17 04 0391   	call fn_inkey
0402BC FE 01       0392   	cp 1
0402BE CC 00 04 04 0393   	call z,dsl_down
0402C2             0394   
0402C2 21 E6 FF FF 0395   	ld hl,KEY_LEFT
0402C6 CD 35 17 04 0396   	call fn_inkey
0402CA FE 01       0397   	cp 1
0402CC CC 2C 04 04 0398   	call z,dsl_left
0402D0             0399   
0402D0 21 86 FF FF 0400   	ld hl,KEY_RIGHT
0402D4 CD 35 17 04 0401   	call fn_inkey
0402D8 FE 01       0402   	cp 1
0402DA CC 53 04 04 0403   	call z,dsl_right
0402DE             0404   
0402DE 21 A6 FF FF 0405   	ld hl,KEY_DELETE
0402E2 CD 35 17 04 0406   	call fn_inkey
0402E6 FE 01       0407   	cp 1
0402E8 CC C8 03 04 0408   	call z,dsl_reset_pen
0402EC             0409   
0402EC 21 9F FF FF 0410   	ld hl,KEY_TAB
0402F0 CD 35 17 04 0411   	call fn_inkey
0402F4 FE 01       0412   	cp 1
0402F6 CA 27 09 04 0413   	jp z,dsl_palette_tool
0402FA             0414   
0402FA 21 AA FF FF 0415   	ld hl,KEY_N
0402FE CD 35 17 04 0416   	call fn_inkey
040302 FE 01       0417   	cp 1
040304 CC CE 04 04 0418   	call z,dsl_add_frame
040308             0419   
040308 21 AD FF FF 0420   	ld hl,KEY_C
04030C CD 35 17 04 0421   	call fn_inkey
040310 FE 01       0422   	cp 1
040312 CC 65 05 04 0423   	call z,dsl_add_and_copy_frame
040316             0424   
040316 21 D0 FF FF 0425   	ld hl,KEY_BACKSPACE
04031A CD 35 17 04 0426   	call fn_inkey
04031E FE 01       0427   	cp 1
040320 CC CC 05 04 0428   	call z,dsl_delete_frame
040324             0429   
040324 21 C0 FF FF 0430   	ld hl,KEY_PGUP
040328 CD 35 17 04 0431   	call fn_inkey
04032C FE 01       0432   	cp 1
04032E CC C5 06 04 0433   	call z,dsl_next_frame
040332             0434   
040332 21 B1 FF FF 0435   	ld hl,KEY_PGDOWN
040336 CD 35 17 04 0436   	call fn_inkey
04033A FE 01       0437   	cp 1
04033C CC A6 06 04 0438   	call z,dsl_previous_frame
040340             0439   
040340 21 A9 FF FF 0440   	ld hl,KEY_L
040344 CD 35 17 04 0441   	call fn_inkey
040348 FE 01       0442   	cp 1
04034A CC 7F 04 04 0443   	call z,dsl_load_sprite
04034E             0444   
04034E 21 AE FF FF 0445   	ld hl,KEY_S
040352 CD 35 17 04 0446   	call fn_inkey
040356 FE 01       0447   	cp 1
040358 CC 9C 04 04 0448   	call z,dsl_save_sprite
04035C             0449   
04035C 21 DD FF FF 0450   	ld hl,KEY_E
040360 CD 35 17 04 0451   	call fn_inkey
040364 FE 01       0452   	cp 1
040366 CC B5 04 04 0453   	call z,dsl_export_sprite
04036A             0454   
04036A 21 CC FF FF 0455   	ld hl,KEY_R
04036E CD 35 17 04 0456   	call fn_inkey
040372 FE 01       0457   	cp 1
040374 CC EB 06 04 0458   	call z,dsl_rotate_frame
040378             0459   
040378 21 BC FF FF 0460   	ld hl,KEY_F
04037C CD 35 17 04 0461   	call fn_inkey
040380 FE 01       0462   	cp 1
040382 CC A0 07 04 0463   	call z,dsl_flip_frame
040386             0464   
040386 21 9A FF FF 0465   	ld hl,KEY_M
04038A CD 35 17 04 0466   	call fn_inkey
04038E FE 01       0467   	cp 1
040390 CC 07 08 04 0468   	call z,dsl_mirror_frame
040394             0469   
040394 21 B6 FF FF 0470   	ld hl,KEY_RETURN
040398 CD 35 17 04 0471   	call fn_inkey
04039C FE 01       0472   	cp 1
04039E CC 87 08 04 0473   	call z,dsl_flood_fill
0403A2             0474   
0403A2 21 8F FF FF 0475   	ld hl,KEY_ESCAPE
0403A6 CD 35 17 04 0476   	call fn_inkey
0403AA FE 01       0477   	cp 1
0403AC CA 5D 0A 04 0478   	jp z,exit_program
0403B0             0479   
0403B0 C3 98 02 04 0480   	jp draw_sprite_loop
0403B4             0481   
0403B4             0482   ; set the pen of the current pixel
0403B4             0483   dsl_set_pen:
0403B4 CD 38 0C 04 0484   	call fn_get_pixel_color
0403B8 21 0E 18 04 0485   	ld hl,current_pen
0403BC BE          0486   	cp (hl)
0403BD C8          0487   	ret z
0403BE 7E          0488   	ld a,(hl)
0403BF CD 7A 0C 04 0489   	call fn_set_pixel_color
0403C3 CD 0E 0C 04 0490   	call fn_draw_pixel_with_border
0403C7 C9          0491   	ret
0403C8             0492   
0403C8             0493   ; reset the pen of the current pixel
0403C8             0494   dsl_reset_pen:
0403C8 CD 38 0C 04 0495   	call fn_get_pixel_color
0403CC FE 00       0496   	cp 0
0403CE C8          0497   	ret z
0403CF AF          0498   	xor a
0403D0 CD 7A 0C 04 0499   	call fn_set_pixel_color
0403D4 CD 0E 0C 04 0500   	call fn_draw_pixel_with_border
0403D8 C9          0501   	ret
0403D9             0502   
0403D9             0503   ; move pixel up
0403D9             0504   dsl_up:
0403D9 21 09 18 04 0505   	ld hl,ypix
0403DD 7E          0506   	ld a,(hl)
0403DE FE 00       0507   	cp 0
0403E0 C8          0508   	ret z
0403E1             0509   
0403E1 21 9D FF FF 0510   	ld hl,KEY_SPACE
0403E5 CD 35 17 04 0511   	call fn_inkey
0403E9 FE 01       0512   	cp 1
0403EB CC B4 03 04 0513   	call z,dsl_set_pen
0403EF             0514   
0403EF CD 22 0C 04 0515   	call fn_draw_pixel_without_border
0403F3 CD BE 0C 04 0516   	call fn_move_up
0403F7 CD 0E 0C 04 0517   	call fn_draw_pixel_with_border
0403FB CD B0 16 04 0518   	call fn_slowdown
0403FF C9          0519   	ret
040400             0520   
040400             0521   ; move pixel down
040400             0522   dsl_down:
040400 21 0D 18 04 0523   	ld hl,spr_size
040404 56          0524   	ld d,(hl)
040405 15          0525   	dec d
040406             0526   
040406 21 09 18 04 0527   	ld hl,ypix
04040A 7E          0528   	ld a,(hl)
04040B BA          0529   	cp d
04040C C8          0530   	ret z
04040D             0531   
04040D 21 9D FF FF 0532   	ld hl,KEY_SPACE
040411 CD 35 17 04 0533   	call fn_inkey
040415 FE 01       0534   	cp 1
040417 CC B4 03 04 0535   	call z,dsl_set_pen
04041B             0536   
04041B CD 22 0C 04 0537   	call fn_draw_pixel_without_border
04041F CD C4 0C 04 0538   	call fn_move_down
040423 CD 0E 0C 04 0539   	call fn_draw_pixel_with_border
040427 CD B0 16 04 0540   	call fn_slowdown
04042B C9          0541   	ret
04042C             0542   
04042C             0543   ; move pixel left
04042C             0544   dsl_left:
04042C 21 08 18 04 0545   	ld hl,xpix
040430 7E          0546   	ld a,(hl)
040431 FE 00       0547   	cp 0
040433 C8          0548   	ret z
040434             0549   
040434 21 9D FF FF 0550   	ld hl,KEY_SPACE
040438 CD 35 17 04 0551   	call fn_inkey
04043C FE 01       0552   	cp 1
04043E CC B4 03 04 0553   	call z,dsl_set_pen
040442             0554   
040442 CD 22 0C 04 0555   	call fn_draw_pixel_without_border
040446 CD CA 0C 04 0556   	call fn_move_left
04044A CD 0E 0C 04 0557   	call fn_draw_pixel_with_border
04044E CD B0 16 04 0558   	call fn_slowdown
040452 C9          0559   	ret
040453             0560   
040453             0561   ; move pixel right
040453             0562   dsl_right:
040453 21 0D 18 04 0563   	ld hl,spr_size
040457 56          0564   	ld d,(hl)
040458 15          0565   	dec d
040459             0566   
040459 21 08 18 04 0567   	ld hl,xpix
04045D 7E          0568   	ld a,(hl)
04045E BA          0569   	cp d
04045F C8          0570   	ret z
040460             0571   
040460 21 9D FF FF 0572   	ld hl,KEY_SPACE
040464 CD 35 17 04 0573   	call fn_inkey
040468 FE 01       0574   	cp 1
04046A CC B4 03 04 0575   	call z,dsl_set_pen
04046E             0576   
04046E CD 22 0C 04 0577   	call fn_draw_pixel_without_border
040472 CD D0 0C 04 0578   	call fn_move_right
040476 CD 0E 0C 04 0579   	call fn_draw_pixel_with_border
04047A CD B0 16 04 0580   	call fn_slowdown
04047E C9          0581   	ret
04047F             0582   
04047F             0583   ; load a sprite
04047F             0584   dsl_load_sprite:
04047F 21 A9 FF FF 0585   	ld hl,KEY_L
040483 CD 35 17 04 0586   	call fn_inkey
040487 FE 00       0587   	cp 0
040489 20 F4       0588   	jr nz,dsl_load_sprite
04048B             0589   
04048B CD 22 0C 04 0590   	call fn_draw_pixel_without_border
04048F CD CA 11 04 0591   	call fn_load_sprite
040493 CD 27 16 04 0592   	call fn_refresh_sprite
040497 CD 0E 0C 04 0593   	call fn_draw_pixel_with_border
04049B C9          0594   	ret
04049C             0595   
04049C             0596   ; save a sprite
04049C             0597   dsl_save_sprite:
04049C 21 AE FF FF 0598   	ld hl,KEY_S
0404A0 CD 35 17 04 0599   	call fn_inkey
0404A4 FE 00       0600   	cp 0
0404A6 20 F4       0601   	jr nz,dsl_save_sprite
0404A8             0602   
0404A8 CD 22 0C 04 0603   	call fn_draw_pixel_without_border
0404AC CD F9 12 04 0604   	call fn_save_sprite
0404B0 CD 27 16 04 0605   	call fn_refresh_sprite
0404B4 C9          0606   	ret
0404B5             0607   
0404B5             0608   dsl_export_sprite:
0404B5 21 DD FF FF 0609   	ld hl,KEY_E
0404B9 CD 35 17 04 0610   	call fn_inkey
0404BD FE 00       0611   	cp 0
0404BF 20 F4       0612   	jr nz,dsl_export_sprite
0404C1             0613   
0404C1 CD 22 0C 04 0614   	call fn_draw_pixel_without_border
0404C5 CD 04 14 04 0615   	call fn_export_sprite
0404C9 CD 27 16 04 0616   	call fn_refresh_sprite
0404CD C9          0617   	ret
0404CE             0618   
0404CE             0619   
0404CE             0620   ; add a frame to the animation
0404CE             0621   dsl_add_frame:
0404CE 21 AA FF FF 0622   	ld hl,KEY_N
0404D2 CD 35 17 04 0623   	call fn_inkey
0404D6 FE 00       0624   	cp 0
0404D8 20 F4       0625   	jr nz,dsl_add_frame
0404DA             0626   
0404DA             0627   	; frames limit reached ? exit
0404DA 21 33 19 04 0628   	ld hl,frames_count
0404DE 7E          0629   	ld a,(hl)
0404DF FE 08       0630   	cp MAX_FRAMES
0404E1 C8          0631   	ret z
0404E2             0632   
0404E2             0633   	; get the number of frames to copy
0404E2 21 33 19 04 0634   	ld hl,frames_count
0404E6 7E          0635   	ld a,(hl)
0404E7 21 32 19 04 0636   	ld hl,current_frame
0404EB 46          0637   	ld b,(hl)
0404EC 90          0638   	sub b
0404ED 3D          0639   	dec a
0404EE             0640   
0404EE             0641   	; get sprsize² (length of a sprite, in bytes)
0404EE 21 0D 18 04 0642   	ld hl,spr_size
0404F2 11 00 00 00 0643   	ld de,$000000
0404F6 5E          0644   	ld e,(hl)
0404F7 56          0645   	ld d,(hl)
0404F8 ED 5C       0646   	mlt de ; DE = sprsize²
0404FA             0647   
0404FA             0648   	; prepare for the case we goto af_zap...
0404FA 21 3B 19 04 0649   	ld hl,sprite_buffer
0404FE             0650   
0404FE F5          0651   	push af
0404FF E5          0652   	push hl
040500 21 32 19 04 0653   	ld hl,current_frame
040504 7E          0654   	ld a,(hl)
040505 3C          0655   	inc a
040506 47          0656   	ld b,a
040507 E1          0657   	pop hl
040508 F1          0658   	pop af
040509             0659   
040509             0660   af_loop0:
040509 19          0661   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050A 10 FD       0662   	djnz af_loop0
04050C             0663   
04050C E5          0664   	push hl ; store HL = sprite buffer + sprsize²
04050D FE 00       0665   	cp 0
04050F CA 37 05 04 0666   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040513 E1          0667   	pop hl ; HL unused in this case
040514             0668   
040514 21 00 00 00 0669   	ld hl,$000000 ; HL is 0 to store the result
040518 47          0670   	ld b,a ; B = frames to copy
040519             0671   
040519             0672   ; multiply number of frames to copy by sprsize²
040519             0673   af_loop1:
040519 19          0674   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051A 10 FD       0675   	djnz af_loop1
04051C             0676   
04051C E5          0677   	push hl
04051D C1          0678   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04051E             0679   
04051E 21 32 19 04 0680   	ld hl,current_frame
040522 7E          0681   	ld a,(hl)
040523 3C          0682   	inc a
040524 21 3B 19 04 0683   	ld hl,sprite_buffer
040528             0684   
040528 C5          0685   	push bc
040529 47          0686   	ld b,a
04052A             0687   
04052A             0688   af_loop2:
04052A 19          0689   	add hl,de ; HL = sprite buffer + length to copy
04052B 10 FD       0690   	djnz af_loop2
04052D             0691   
04052D C1          0692   	pop bc
04052E             0693   
04052E E5          0694   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04052F             0695   
04052F 09          0696   	add hl,bc
040530 2B          0697   	dec hl ; HL = end address to copy to end target address
040531             0698   
040531 E5          0699   	push hl
040532 19          0700   	add hl,de
040533 EB          0701   	ex de,hl ; DE = end target address
040534 E1          0702   	pop hl
040535             0703   
040535 ED B8       0704   	lddr
040537             0705   
040537             0706   af_zap:
040537             0707   	; multiply number of frames to copy by sprsize²
040537 21 0D 18 04 0708   	ld hl,spr_size
04053B 01 00 00 00 0709   	ld bc,$000000
04053F 4E          0710   	ld c,(hl)
040540 46          0711   	ld b,(hl)
040541 ED 4C       0712   	mlt bc ; BC = sprsize²
040543             0713   
040543 E1          0714   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040544             0715   
040544             0716   ; fill frame with 0 color
040544             0717   af_loop3:
040544 AF          0718   	xor a
040545 77          0719   	ld (hl),a
040546 23          0720   	inc hl
040547 0B          0721   	dec bc
040548 78          0722   	ld a,b
040549 B1          0723   	or c
04054A FE 00       0724   	cp 0
04054C 20 F6       0725   	jr nz,af_loop3
04054E             0726   
04054E             0727   	; increment the frames count and the current frame values
04054E 21 33 19 04 0728   	ld hl,frames_count
040552 34          0729   	inc (hl)
040553 21 32 19 04 0730   	ld hl,current_frame
040557 34          0731   	inc (hl)
040558             0732   
040558 CD 67 16 04 0733   	call fn_change_frame
04055C CD 8C 16 04 0734   	call fn_change_frames_count
040560 CD 27 16 04 0735   	call fn_refresh_sprite
040564 C9          0736   	ret
040565             0737   
040565             0738   ; add a copy of the current frame to the animation
040565             0739   dsl_add_and_copy_frame: ; TODO! debug me!
040565 21 AD FF FF 0740   	ld hl,KEY_C
040569 CD 35 17 04 0741   	call fn_inkey
04056D FE 00       0742   	cp 0
04056F 20 F4       0743   	jr nz,dsl_add_and_copy_frame
040571             0744   
040571             0745   	; frames limit reached ? exit
040571 21 33 19 04 0746   	ld hl,frames_count
040575 7E          0747   	ld a,(hl)
040576 FE 08       0748   	cp MAX_FRAMES
040578 C8          0749   	ret z
040579             0750   
040579             0751   	; get the number of frames to copy
040579 21 33 19 04 0752   	ld hl,frames_count
04057D 7E          0753   	ld a,(hl)
04057E 21 32 19 04 0754   	ld hl,current_frame
040582 46          0755   	ld b,(hl)
040583 90          0756   	sub b
040584             0757   
040584             0758   	; get sprsize² (length of a sprite, in bytes)
040584 21 0D 18 04 0759   	ld hl,spr_size
040588 11 00 00 00 0760   	ld de,$000000
04058C 5E          0761   	ld e,(hl)
04058D 56          0762   	ld d,(hl)
04058E ED 5C       0763   	mlt de ; DE = sprsize²
040590             0764   
040590 21 00 00 00 0765   	ld hl,$000000 ; HL is 0 to store the result
040594 47          0766   	ld b,a ; B = frames to copy
040595             0767   
040595             0768   ; multiply number of frames to copy by sprsize²
040595             0769   aacf_loop1:
040595 19          0770   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040596 10 FD       0771   	djnz aacf_loop1
040598             0772   
040598 E5          0773   	push hl
040599 C1          0774   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059A             0775   
04059A 21 32 19 04 0776   	ld hl,current_frame
04059E 7E          0777   	ld a,(hl)
04059F 21 3B 19 04 0778   	ld hl,sprite_buffer
0405A3 FE 00       0779   	cp 0
0405A5 28 06       0780   	jr z,aacf_loop_end2
0405A7             0781   
0405A7 C5          0782   	push bc
0405A8 47          0783   	ld b,a
0405A9             0784   
0405A9             0785   aacf_loop2:
0405A9 19          0786   	add hl,de ; HL = sprite buffer + length to copy
0405AA 10 FD       0787   	djnz aacf_loop2
0405AC             0788   
0405AC C1          0789   	pop bc
0405AD             0790   
0405AD             0791   aacf_loop_end2:
0405AD 09          0792   	add hl,bc
0405AE 2B          0793   	dec hl ; HL = end address to copy to end target address
0405AF             0794   
0405AF E5          0795   	push hl
0405B0 19          0796   	add hl,de
0405B1 EB          0797   	ex de,hl ; DE = end target address
0405B2 E1          0798   	pop hl
0405B3             0799   
0405B3 ED B8       0800   	lddr
0405B5             0801   
0405B5             0802   	; increment the frames count and the current frame values
0405B5 21 33 19 04 0803   	ld hl,frames_count
0405B9 34          0804   	inc (hl)
0405BA 21 32 19 04 0805   	ld hl,current_frame
0405BE 34          0806   	inc (hl)
0405BF             0807   
0405BF CD 67 16 04 0808   	call fn_change_frame
0405C3 CD 8C 16 04 0809   	call fn_change_frames_count
0405C7 CD 27 16 04 0810   	call fn_refresh_sprite
0405CB C9          0811   	ret
0405CC             0812   
0405CC             0813   ; delete last frame from animation
0405CC             0814   dsl_delete_frame:
0405CC 21 D0 FF FF 0815   	ld hl,KEY_BACKSPACE
0405D0 CD 35 17 04 0816   	call fn_inkey
0405D4 FE 00       0817   	cp 0
0405D6 20 F4       0818   	jr nz,dsl_delete_frame
0405D8             0819   
0405D8             0820   	; delete current selected frame
0405D8 21 0D 18 04 0821   	ld hl,spr_size
0405DC 01 00 00 00 0822   	ld bc,$000000
0405E0 4E          0823   	ld c,(hl)
0405E1 46          0824   	ld b,(hl)
0405E2 ED 4C       0825   	mlt bc ; BC = sprsize²
0405E4 21 32 19 04 0826   	ld hl,current_frame
0405E8 7E          0827   	ld a,(hl) ; A = current frame
0405E9 21 3B 19 04 0828   	ld hl,sprite_buffer ; HL = sprite buffer
0405ED C5          0829   	push bc
0405EE FE 00       0830   	cp 0
0405F0 28 06       0831   	jr z,df_loop2
0405F2             0832   
0405F2             0833   df_loop1:
0405F2 09          0834   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F3 3D          0835   	dec a
0405F4 FE 00       0836   	cp 0
0405F6 20 FA       0837   	jr nz,df_loop1
0405F8             0838   
0405F8             0839   ; clear the current frame
0405F8             0840   df_loop2:
0405F8 AF          0841   	xor a
0405F9 77          0842   	ld (hl),a
0405FA 23          0843   	inc hl
0405FB 0B          0844   	dec bc
0405FC 78          0845   	ld a,b
0405FD B1          0846   	or c
0405FE FE 00       0847   	cp 0
040600 20 F6       0848   	jr nz,df_loop2
040602             0849   
040602             0850   	; current frame + 1 = frames count ?
040602 E5          0851   	push hl
040603 21 32 19 04 0852   	ld hl,current_frame
040607 5E          0853   	ld e,(hl)
040608 1C          0854   	inc e
040609 21 33 19 04 0855   	ld hl,frames_count
04060D 7E          0856   	ld a,(hl)
04060E BB          0857   	cp e
04060F E1          0858   	pop hl
040610 C1          0859   	pop bc
040611 CA 8A 06 04 0860   	jp z,df_exit
040615             0861   
040615 11 33 19 04 0862   	ld de,frames_count
040619 1A          0863   	ld a,(de) ; A = frames count
04061A E5          0864   	push hl
04061B 21 32 19 04 0865   	ld hl,current_frame
04061F 5E          0866   	ld e,(hl) ; E = current frame
040620 E1          0867   	pop hl
040621 93          0868   	sub e
040622 3D          0869   	dec a ; A = number of frames to copy back
040623             0870   
040623 EB          0871   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040624 21 00 00 00 0872   	ld hl,$000000
040628 FE 00       0873   	cp 0 ; 0 frames to copy ?
04062A 28 06       0874   	jr z,df_exit_loop3
04062C             0875   
04062C             0876   df_loop3:
04062C 09          0877   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04062D 3D          0878   	dec a
04062E FE 00       0879   	cp 0
040630 20 FA       0880   	jr nz,df_loop3
040632             0881   
040632             0882   df_exit_loop3:
040632 E5          0883   	push hl
040633 C1          0884   	pop bc ; BC = total length of area to copy
040634 D5          0885   	push de
040635 E1          0886   	pop hl ; HL = DE = start of area to copy
040636             0887   
040636 C5          0888   	push bc
040637 D5          0889   	push de
040638 E5          0890   	push hl
040639 21 0D 18 04 0891   	ld hl,spr_size
04063D 11 00 00 00 0892   	ld de,$000000
040641 5E          0893   	ld e,(hl)
040642 56          0894   	ld d,(hl)
040643 ED 5C       0895   	mlt de ; DE = one sprite frame length
040645 E1          0896   	pop hl
040646 B7          0897   	or a
040647 ED 52       0898   	sbc hl,de ; HL = target area to copy
040649 D1          0899   	pop de
04064A EB          0900   	ex de,hl ; DE = target, HL = start
04064B C1          0901   	pop bc
04064C ED B0       0902   	ldir
04064E             0903   
04064E 21 0D 18 04 0904   	ld hl,spr_size
040652 01 00 00 00 0905   	ld bc,$000000
040656 4E          0906   	ld c,(hl)
040657 46          0907   	ld b,(hl)
040658 ED 4C       0908   	mlt bc ; DE = one sprite frame length
04065A             0909   
04065A             0910   	; delete last frame data
04065A 21 33 19 04 0911   	ld hl,frames_count
04065E 7E          0912   	ld a,(hl) ; A =frames count
04065F 3D          0913   	dec a ; A = last frame
040660 21 3B 19 04 0914   	ld hl,sprite_buffer ; HL = sprite buffer
040664 FE 00       0915   	cp 0
040666 28 06       0916   	jr z,df_loop5
040668             0917   
040668             0918   df_loop4:
040668 09          0919   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
040669 3D          0920   	dec a
04066A FE 00       0921   	cp 0
04066C 20 FA       0922   	jr nz,df_loop4
04066E             0923   
04066E             0924   ; clear the current frame
04066E             0925   df_loop5:
04066E AF          0926   	xor a
04066F 77          0927   	ld (hl),a
040670 23          0928   	inc hl
040671 0B          0929   	dec bc
040672 78          0930   	ld a,b
040673 B1          0931   	or c
040674 FE 00       0932   	cp 0
040676 20 F6       0933   	jr nz,df_loop5
040678             0934   
040678             0935   	; decrement frames count
040678 21 33 19 04 0936   	ld hl,frames_count
04067C 35          0937   	dec (hl)
04067D             0938   
04067D CD 67 16 04 0939   	call fn_change_frame
040681 CD 8C 16 04 0940   	call fn_change_frames_count
040685 CD 27 16 04 0941   	call fn_refresh_sprite
040689 C9          0942   	ret
04068A             0943   
04068A             0944   df_exit:
04068A 21 33 19 04 0945   	ld hl,frames_count
04068E 7E          0946   	ld a,(hl)
04068F FE 01       0947   	cp 1
040691 28 06       0948   	jr z,df_exit_end
040693 35          0949   	dec (hl)
040694 21 32 19 04 0950   	ld hl,current_frame
040698 35          0951   	dec (hl)
040699             0952   
040699             0953   df_exit_end:
040699 CD 67 16 04 0954   	call fn_change_frame
04069D CD 8C 16 04 0955   	call fn_change_frames_count
0406A1 CD 27 16 04 0956   	call fn_refresh_sprite
0406A5 C9          0957   	ret
0406A6             0958   
0406A6             0959   ; goto previous frame
0406A6             0960   dsl_previous_frame:
0406A6 21 B1 FF FF 0961   	ld hl,KEY_PGDOWN
0406AA CD 35 17 04 0962   	call fn_inkey
0406AE FE 00       0963   	cp 0
0406B0 20 F4       0964   	jr nz,dsl_previous_frame
0406B2             0965   
0406B2 21 32 19 04 0966   	ld hl,current_frame
0406B6 7E          0967   	ld a,(hl)
0406B7 FE 00       0968   	cp 0
0406B9 C8          0969   	ret z
0406BA             0970   
0406BA 3D          0971   	dec a
0406BB 77          0972   	ld (hl),a
0406BC CD 67 16 04 0973   	call fn_change_frame
0406C0 CD 27 16 04 0974   	call fn_refresh_sprite
0406C4 C9          0975   	ret
0406C5             0976   
0406C5             0977   ; goto next frame
0406C5             0978   dsl_next_frame:
0406C5 21 C0 FF FF 0979   	ld hl,KEY_PGUP
0406C9 CD 35 17 04 0980   	call fn_inkey
0406CD FE 00       0981   	cp 0
0406CF 20 F4       0982   	jr nz,dsl_next_frame
0406D1             0983   
0406D1 21 32 19 04 0984   	ld hl,current_frame
0406D5 7E          0985   	ld a,(hl)
0406D6 3C          0986   	inc a
0406D7 21 33 19 04 0987   	ld hl,frames_count
0406DB BE          0988   	cp (hl)
0406DC C8          0989   	ret z
0406DD             0990   
0406DD 21 32 19 04 0991   	ld hl,current_frame
0406E1 77          0992   	ld (hl),a
0406E2 CD 67 16 04 0993   	call fn_change_frame
0406E6 CD 27 16 04 0994   	call fn_refresh_sprite
0406EA C9          0995   	ret
0406EB             0996   
0406EB             0997   ; rotate a frame 90° clockwise
0406EB             0998   dsl_rotate_frame:
0406EB 21 CC FF FF 0999   	ld hl,KEY_R
0406EF CD 35 17 04 1000   	call fn_inkey
0406F3 FE 00       1001   	cp 0
0406F5 20 F4       1002   	jr nz,dsl_rotate_frame
0406F7             1003   
0406F7             1004   	; find HL as start of the first frame (buffer)
0406F7 21 0D 18 04 1005   	ld hl,spr_size
0406FB 01 00 00 00 1006   	ld bc,$000000
0406FF 11 00 00 00 1007   	ld de,$000000
040703 5E          1008   	ld e,(hl)
040704 56          1009   	ld d,(hl)
040705 4B          1010   	ld c,e
040706 ED 5C       1011   	mlt de ; DE = sprite length in bytes
040708 21 32 19 04 1012   	ld hl,current_frame
04070C 7E          1013   	ld a,(hl) ; A = current frame
04070D 21 3B 19 04 1014   	ld hl,sprite_buffer
040711 FE 00       1015   	cp 0
040713 28 04       1016   	jr z,rf_noloop1
040715 47          1017   	ld b,a
040716             1018   
040716             1019   rf_loop1:
040716 19          1020   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040717 10 FD       1021   	djnz rf_loop1
040719             1022   
040719             1023   rf_noloop1:
040719 C5          1024   	push bc
04071A E5          1025   	push hl
04071B             1026   
04071B             1027   	; copy current frame to swap sprite buffer
04071B 11 A7 3C 04 1028   	ld de,swap_sprite_buffer
04071F 41          1029   	ld b,c
040720 ED 4C       1030   	mlt bc
040722 ED B0       1031   	ldir
040724             1032   
040724 FD E1       1033   	pop iy ; IY: destination
040726 C1          1034   	pop bc
040727             1035   
040727 79          1036   	ld a,c
040728 01 00 00 00 1037   	ld bc,$000000
04072C 4F          1038   	ld c,a ; BC = sprite size
04072D             1039   
04072D             1040   	; turn and copy swap sprite buffer frame to sprite buffer
04072D DD 21 A7 3C 1041   	ld ix,swap_sprite_buffer ; IX: source
       04          
040732 11 00 00 00 1042   	ld de,0 ; x
040736 21 00 00 00 1043   	ld hl,0 ; y
04073A             1044   
04073A             1045   rf_loop2:
04073A DD E5       1046   	push ix
04073C FD E5       1047   	push iy
04073E             1048   
04073E D5          1049   	push de
04073F E5          1050   	push hl
040740             1051   
040740             1052   	; add x
040740 DD 19       1053   	add ix,de
040742             1054   
040742             1055   	; add y * width
040742 7C          1056   	ld a,h
040743 B5          1057   	or l
040744 FE 00       1058   	cp 0
040746 28 09       1059   	jr z,rf_done1
040748             1060   rf_loop3:
040748 DD 09       1061   	add ix,bc
04074A 2B          1062   	dec hl
04074B 7C          1063   	ld a,h
04074C B5          1064   	or l
04074D FE 00       1065   	cp 0
04074F 20 F7       1066   	jr nz,rf_loop3
040751             1067   
040751             1068   rf_done1:
040751             1069   	; found the pixel value
040751 DD 7E 00    1070   	ld a,(ix+0)
040754             1071   
040754 E1          1072   	pop hl
040755 D1          1073   	pop de
040756 D5          1074   	push de
040757 E5          1075   	push hl
040758             1076   
040758             1077   	; add y
040758 EB          1078   	ex de,hl
040759 FD 09       1079   	add iy,bc
04075B B7          1080   	or a
04075C E5          1081   	push hl
04075D FD E5       1082   	push iy
04075F E1          1083   	pop hl
040760 ED 52       1084   	sbc hl,de
040762 E5          1085   	push hl
040763 FD E1       1086   	pop iy
040765 FD 2B       1087   	dec iy
040767 E1          1088   	pop hl
040768 EB          1089   	ex de,hl
040769             1090   
040769             1091   	; add x * width
040769 F5          1092   	push af
04076A 7A          1093   	ld a,d
04076B B3          1094   	or e
04076C FE 00       1095   	cp 0
04076E 28 09       1096   	jr z,rf_done2
040770             1097   rf_loop5:
040770 FD 09       1098   	add iy,bc
040772 1B          1099   	dec de
040773 7A          1100   	ld a,d
040774 B3          1101   	or e
040775 FE 00       1102   	cp 0
040777 20 F7       1103   	jr nz,rf_loop5
040779             1104   
040779             1105   rf_done2:
040779 F1          1106   	pop af
04077A             1107   
04077A             1108   	; store the pixel value
04077A FD 77 00    1109   	ld (iy+0),a
04077D             1110   
04077D E1          1111   	pop hl
04077E D1          1112   	pop de
04077F             1113   
04077F FD E1       1114   	pop iy
040781 DD E1       1115   	pop ix
040783             1116   
040783 13          1117   	inc de
040784 EB          1118   	ex de,hl
040785 B7          1119   	or a
040786 ED 42       1120   	sbc hl,bc
040788 09          1121   	add hl,bc
040789 EB          1122   	ex de,hl
04078A DA 3A 07 04 1123   	jp c,rf_loop2
04078E             1124   
04078E 11 00 00 00 1125   	ld de,0
040792 23          1126   	inc hl
040793 B7          1127   	or a
040794 ED 42       1128   	sbc hl,bc
040796 09          1129   	add hl,bc
040797 DA 3A 07 04 1130   	jp c,rf_loop2
04079B             1131   
04079B CD 27 16 04 1132   	call fn_refresh_sprite
04079F C9          1133   	ret
0407A0             1134   
0407A0             1135   ; flip frame horizontally
0407A0             1136   dsl_flip_frame:
0407A0 21 BC FF FF 1137   	ld hl,KEY_F
0407A4 CD 35 17 04 1138   	call fn_inkey
0407A8 FE 00       1139   	cp 0
0407AA 20 F4       1140   	jr nz,dsl_flip_frame
0407AC             1141   
0407AC 21 0D 18 04 1142   	ld hl,spr_size
0407B0 11 00 00 00 1143   	ld de,$000000
0407B4 5E          1144   	ld e,(hl)
0407B5 56          1145   	ld d,(hl)
0407B6 4B          1146   	ld c,e
0407B7 ED 5C       1147   	mlt de ; DE = sprite length in bytes
0407B9 21 32 19 04 1148   	ld hl,current_frame
0407BD 7E          1149   	ld a,(hl) ; A = current frame
0407BE 21 3B 19 04 1150   	ld hl,sprite_buffer
0407C2 FE 00       1151   	cp 0
0407C4 28 04       1152   	jr z,ff_noloop1
0407C6 47          1153   	ld b,a
0407C7             1154   
0407C7             1155   ff_loop1:
0407C7 19          1156   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407C8 10 FD       1157   	djnz ff_loop1
0407CA             1158   
0407CA             1159   ff_noloop1:
0407CA 41          1160   	ld b,c ; B = sprite height
0407CB 11 00 00 00 1161   	ld de,$000000
0407CF 59          1162   	ld e,c ; DE = sprite width
0407D0 79          1163   	ld a,c ; A = sprite width
0407D1 CB 3F       1164   	srl a ; A = sprite height / 2
0407D3             1165   
0407D3 E5          1166   	push hl
0407D4 DD E1       1167   	pop ix ; IX = frame address
0407D6 19          1168   	add hl,de ; HL = frame address + sprite width - 1
0407D7 2B          1169   	dec hl
0407D8 E5          1170   	push hl
0407D9 FD E1       1171   	pop iy ; IY = IX + sprite width - 1
0407DB             1172   
0407DB             1173   ff_loop2:
0407DB F5          1174   	push af
0407DC D5          1175   	push de
0407DD DD E5       1176   	push ix
0407DF FD E5       1177   	push iy
0407E1             1178   ff_loop3:
0407E1 DD 5E 00    1179   	ld e,(ix+0)
0407E4 FD 56 00    1180   	ld d,(iy+0)
0407E7 DD 72 00    1181   	ld (ix+0),d
0407EA FD 73 00    1182   	ld (iy+0),e
0407ED DD 23       1183   	inc ix
0407EF FD 2B       1184   	dec iy
0407F1 3D          1185   	dec a
0407F2 FE 00       1186   	cp 0
0407F4 20 EB       1187   	jr nz,ff_loop3
0407F6 FD E1       1188   	pop iy
0407F8 DD E1       1189   	pop ix
0407FA D1          1190   	pop de
0407FB F1          1191   	pop af
0407FC DD 19       1192   	add ix,de
0407FE FD 19       1193   	add iy,de
040800 10 D9       1194   	djnz ff_loop2
040802             1195   
040802 CD 27 16 04 1196   	call fn_refresh_sprite
040806 C9          1197   	ret
040807             1198   
040807             1199   ; mirror frame vertically
040807             1200   dsl_mirror_frame:
040807 21 9A FF FF 1201   	ld hl,KEY_M
04080B CD 35 17 04 1202   	call fn_inkey
04080F FE 00       1203   	cp 0
040811 20 F4       1204   	jr nz,dsl_mirror_frame
040813             1205   
040813 21 0D 18 04 1206   	ld hl,spr_size
040817 01 00 00 00 1207   	ld bc,$000000
04081B 11 00 00 00 1208   	ld de,$000000
04081F 5E          1209   	ld e,(hl)
040820 56          1210   	ld d,(hl)
040821 4B          1211   	ld c,e
040822 ED 5C       1212   	mlt de ; DE = sprite length in bytes
040824 21 32 19 04 1213   	ld hl,current_frame
040828 7E          1214   	ld a,(hl) ; A = current frame
040829 21 3B 19 04 1215   	ld hl,sprite_buffer
04082D FE 00       1216   	cp 0
04082F 28 04       1217   	jr z,mf_noloop1
040831 47          1218   	ld b,a
040832             1219   
040832             1220   mf_loop1:
040832 19          1221   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040833 10 FD       1222   	djnz mf_loop1
040835             1223   
040835             1224   mf_noloop1:
040835 11 00 00 00 1225   	ld de,$000000
040839 59          1226   	ld e,c ; E = sprite height
04083A 79          1227   	ld a,c ; A = sprite width
04083B 41          1228   	ld b,c ; B = sprite height
04083C CB 38       1229   	srl b ; divide B by 2, so B = sprite height / 2
04083E             1230   
04083E E5          1231   	push hl
04083F DD E1       1232   	pop ix ; IX = frame address
040841 51          1233   	ld d,c
040842 15          1234   	dec d
040843 ED 5C       1235   	mlt de ; DE = sprite length - sprite width
040845 19          1236   	add hl,de ; HL = frame address + sprite length - sprite width
040846 E5          1237   	push hl
040847 FD E1       1238   	pop iy ; IY = IX + sprite length - sprite width
040849 21 00 00 00 1239   	ld hl,$000000
04084D 69          1240   	ld l,c ; HL = sprite width
04084E             1241   
04084E             1242   mf_loop2:
04084E F5          1243   	push af
04084F D5          1244   	push de
040850 DD E5       1245   	push ix
040852 FD E5       1246   	push iy
040854             1247   mf_loop3:
040854 DD 5E 00    1248   	ld e,(ix+0)
040857 FD 56 00    1249   	ld d,(iy+0)
04085A DD 72 00    1250   	ld (ix+0),d
04085D FD 73 00    1251   	ld (iy+0),e
040860 DD 23       1252   	inc ix
040862 FD 23       1253   	inc iy
040864 3D          1254   	dec a
040865 FE 00       1255   	cp 0
040867 20 EB       1256   	jr nz,mf_loop3
040869 FD E1       1257   	pop iy
04086B DD E1       1258   	pop ix
04086D D1          1259   	pop de
04086E F1          1260   	pop af
04086F EB          1261   	ex de,hl
040870 DD 19       1262   	add ix,de
040872 EB          1263   	ex de,hl
040873 E5          1264   	push hl
040874 FD E5       1265   	push iy
040876 E1          1266   	pop hl
040877 D1          1267   	pop de
040878 B7          1268   	or a
040879 ED 52       1269   	sbc hl,de
04087B E5          1270   	push hl
04087C D5          1271   	push de
04087D E1          1272   	pop hl
04087E FD E1       1273   	pop iy
040880 10 CC       1274   	djnz mf_loop2
040882             1275   
040882 CD 27 16 04 1276   	call fn_refresh_sprite
040886 C9          1277   	ret
040887             1278   
040887             1279   dsl_flood_fill:
040887 21 B6 FF FF 1280   	ld hl,KEY_RETURN
04088B CD 35 17 04 1281   	call fn_inkey
04088F FE 00       1282   	cp 0
040891 20 F4       1283   	jr nz,dsl_flood_fill
040893             1284   
040893             1285   	; hide the cursor
040893 CD 22 0C 04 1286   	call fn_draw_pixel_without_border
040897             1287   
040897             1288   	; memorize pixel coordinates
040897 3A 08 18 04 1289   	ld a,(xpix)
04089B 32 0A 18 04 1290   	ld (memxpix),a
04089F 3A 09 18 04 1291   	ld a,(ypix)
0408A3 32 0B 18 04 1292   	ld (memypix),a
0408A7             1293   
0408A7             1294   	; fill all recursively
0408A7 3A 08 18 04 1295   	ld a,(xpix)
0408AB 5F          1296   	ld e,a
0408AC 3A 09 18 04 1297   	ld a,(ypix)
0408B0 57          1298   	ld d,a
0408B1 CD D2 08 04 1299   	call dsl_flood_fill_loop
0408B5             1300   
0408B5             1301   	; refresh all the sprite
0408B5 CD 27 16 04 1302   	call fn_refresh_sprite
0408B9             1303   
0408B9             1304   	; hide the cursor again
0408B9 CD 22 0C 04 1305   	call fn_draw_pixel_without_border
0408BD             1306   
0408BD             1307   	; restore pixel coordinates
0408BD             1308   	; and cursor
0408BD 3A 0A 18 04 1309   	ld a,(memxpix)
0408C1 32 08 18 04 1310   	ld (xpix),a
0408C5 3A 0B 18 04 1311   	ld a,(memypix)
0408C9 32 09 18 04 1312   	ld (ypix),a
0408CD CD 0E 0C 04 1313   	call fn_draw_pixel_with_border
0408D1 C9          1314   	ret
0408D2             1315   
0408D2             1316   dsl_flood_fill_loop:
0408D2 D5          1317   	push de
0408D3             1318   
0408D3 DD 21 0D 18 1319   	ld ix,spr_size
       04          
0408D8             1320   
0408D8             1321   	; out  of the sprite area ?
0408D8 7B          1322   	ld a,e
0408D9 DD BE 00    1323   	cp (ix+0)
0408DC D2 25 09 04 1324   	jp nc,ffl_exit
0408E0             1325   
0408E0             1326   	; out  of the sprite area ?
0408E0 7A          1327   	ld a,d
0408E1 DD BE 00    1328   	cp (ix+0)
0408E4 D2 25 09 04 1329   	jp nc,ffl_exit
0408E8             1330   
0408E8             1331   	; replace current pixel, if it is
0408E8             1332   	; inside the sprite area,
0408E8             1333   	; and has not the select palette color
0408E8 7B          1334   	ld a,e
0408E9 32 08 18 04 1335   	ld (xpix),a
0408ED 7A          1336   	ld a,d
0408EE 32 09 18 04 1337   	ld (ypix),a
0408F2 CD 38 0C 04 1338   	call fn_get_pixel_color
0408F6 21 0E 18 04 1339   	ld hl,current_pen
0408FA BE          1340   	cp (hl)
0408FB CA 25 09 04 1341   	jp z,ffl_exit
0408FF 7E          1342   	ld a,(hl)
040900 CD 7A 0C 04 1343   	call fn_set_pixel_color
040904             1344   
040904             1345   	; restore coordinates
040904 3A 08 18 04 1346   	ld a,(xpix)
040908 5F          1347   	ld e,a
040909 3A 09 18 04 1348   	ld a,(ypix)
04090D 57          1349   	ld d,a
04090E             1350   
04090E             1351   	; draw pixel at right
04090E 1C          1352   	inc e
04090F CD D2 08 04 1353   	call dsl_flood_fill_loop
040913 1D          1354   	dec e
040914             1355   	; draw pixel at left
040914 1D          1356   	dec e
040915 CD D2 08 04 1357   	call dsl_flood_fill_loop
040919 1C          1358   	inc e
04091A             1359   	; draw pixel up
04091A 14          1360   	inc d
04091B CD D2 08 04 1361   	call dsl_flood_fill_loop
04091F 15          1362   	dec d
040920             1363   	; draw pixel down
040920 15          1364   	dec d
040921 CD D2 08 04 1365   	call dsl_flood_fill_loop
040925             1366   
040925             1367   ffl_exit:
040925 D1          1368   	pop de
040926 C9          1369   	ret
040927             1370   
040927             1371   ; change current tool to palette tool
040927             1372   dsl_palette_tool:
040927 21 9F FF FF 1373   	ld hl,KEY_TAB
04092B CD 35 17 04 1374   	call fn_inkey
04092F FE 00       1375   	cp 0
040931 20 F4       1376   	jr nz,dsl_palette_tool
040933             1377   
040933             1378   	; hide sprite drawing cursor
040933 CD 22 0C 04 1379   	call fn_draw_pixel_without_border
040937             1380   
040937             1381   	; draw selected palette color
040937 21 0E 18 04 1382   	ld hl,current_pen
04093B 4E          1383   	ld c,(hl)
04093C CD D6 0C 04 1384   	call fn_draw_palette_with_border
040940             1385   
040940             1386   ; select palette color
040940             1387   dsl_palette_tool_loop:
040940             1388   	; move to left color in the palette
040940 21 E6 FF FF 1389   	ld hl,KEY_LEFT
040944 CD 35 17 04 1390   	call fn_inkey
040948 FE 01       1391   	cp 1
04094A CC 0D 0A 04 1392   	call z,dsl_dec_pen
04094E             1393   
04094E             1394   	; move to right color in the palette
04094E 21 86 FF FF 1395   	ld hl,KEY_RIGHT
040952 CD 35 17 04 1396   	call fn_inkey
040956 FE 01       1397   	cp 1
040958 CC 34 0A 04 1398   	call z,dsl_inc_pen
04095C             1399   
04095C             1400   	; return to draw sprite tool
04095C 21 9F FF FF 1401   	ld hl,KEY_TAB
040960 CD 35 17 04 1402   	call fn_inkey
040964 FE 01       1403   	cp 1
040966 CA F0 09 04 1404   	jp z,dsl_draw_sprite_tool
04096A             1405   
04096A             1406   	; load palette
04096A 21 A9 FF FF 1407   	ld hl,KEY_L
04096E CD 35 17 04 1408   	call fn_inkey
040972 FE 01       1409   	cp 1
040974 CC 98 09 04 1410   	call z,dslp_load_palette
040978             1411   
040978             1412   	; save palette
040978 21 AE FF FF 1413   	ld hl,KEY_S
04097C CD 35 17 04 1414   	call fn_inkey
040980 FE 01       1415   	cp 1
040982 CC CA 09 04 1416   	call z,dslp_save_palette
040986             1417   
040986             1418   	; exit program
040986 21 8F FF FF 1419   	ld hl,KEY_ESCAPE
04098A CD 35 17 04 1420   	call fn_inkey
04098E FE 01       1421   	cp 1
040990 CA 5D 0A 04 1422   	jp z,exit_program
040994             1423   
040994 C3 40 09 04 1424   	jp dsl_palette_tool_loop
040998             1425   
040998             1426   dslp_load_palette:
040998 21 A9 FF FF 1427   	ld hl,KEY_L
04099C CD 35 17 04 1428   	call fn_inkey
0409A0 FE 00       1429   	cp 0
0409A2 20 F4       1430   	jr nz,dslp_load_palette
0409A4             1431   
0409A4 21 0E 18 04 1432   	ld hl,current_pen
0409A8 4E          1433   	ld c,(hl)
0409A9 CD 3B 0D 04 1434   	call fn_draw_palette_without_border
0409AD CD B5 0E 04 1435   	call fn_load_palette
0409B1 CD 6F 17 04 1436   	call fn_draw_the_palette
0409B5 CD 27 16 04 1437   	call fn_refresh_sprite
0409B9 21 0E 18 04 1438   	ld hl,current_pen
0409BD 4E          1439   	ld c,(hl)
0409BE CD D6 0C 04 1440   	call fn_draw_palette_with_border
0409C2 CD 67 16 04 1441   	call fn_change_frame
0409C6 C3 40 09 04 1442   	jp dsl_palette_tool_loop
0409CA             1443   
0409CA             1444   dslp_save_palette:
0409CA 21 AE FF FF 1445   	ld hl,KEY_S
0409CE CD 35 17 04 1446   	call fn_inkey
0409D2 FE 00       1447   	cp 0
0409D4 20 F4       1448   	jr nz,dslp_save_palette
0409D6             1449   
0409D6 21 0E 18 04 1450   	ld hl,current_pen
0409DA 4E          1451   	ld c,(hl)
0409DB CD 3B 0D 04 1452   	call fn_draw_palette_without_border
0409DF CD C9 11 04 1453   	call fn_save_palette
0409E3 21 0E 18 04 1454   	ld hl,current_pen
0409E7 4E          1455   	ld c,(hl)
0409E8 CD D6 0C 04 1456   	call fn_draw_palette_with_border
0409EC C3 40 09 04 1457   	jp dsl_palette_tool_loop
0409F0             1458   
0409F0             1459   dsl_draw_sprite_tool:
0409F0 21 9F FF FF 1460   	ld hl,KEY_TAB
0409F4 CD 35 17 04 1461   	call fn_inkey
0409F8 FE 00       1462   	cp 0
0409FA 20 F4       1463   	jr nz,dsl_draw_sprite_tool
0409FC             1464   
0409FC             1465   	; unselect palette color
0409FC 21 0E 18 04 1466   	ld hl,current_pen
040A00 4E          1467   	ld c,(hl)
040A01 CD 3B 0D 04 1468   	call fn_draw_palette_without_border
040A05             1469   
040A05             1470   	; draw the pixel with a border
040A05 CD 0E 0C 04 1471   	call fn_draw_pixel_with_border
040A09             1472   
040A09 C3 98 02 04 1473   	jp draw_sprite_loop
040A0D             1474   
040A0D             1475   dsl_dec_pen:
040A0D 21 0E 18 04 1476   	ld hl,current_pen
040A11 7E          1477   	ld a,(hl)
040A12 FE 00       1478   	cp 0
040A14 C8          1479   	ret z
040A15 FE 40       1480   	cp MAX_COLORS
040A17 D0          1481   	ret nc
040A18             1482   
040A18 4F          1483   	ld c,a ; c is the old pen
040A19 3D          1484   	dec a ; a is the new pen
040A1A             1485   
040A1A F5          1486   	push af
040A1B C5          1487   	push bc
040A1C             1488   
040A1C             1489   	; unselect palette color
040A1C CD 3B 0D 04 1490   	call fn_draw_palette_without_border
040A20             1491   
040A20 C1          1492   	pop bc
040A21 F1          1493   	pop af
040A22             1494   
040A22             1495   	; replace current pen value
040A22 21 0E 18 04 1496   	ld hl,current_pen
040A26 77          1497   	ld (hl),a
040A27             1498   
040A27             1499   	; select palette color
040A27 4F          1500   	ld c,a
040A28 CD D6 0C 04 1501   	call fn_draw_palette_with_border
040A2C CD B0 16 04 1502   	call fn_slowdown
040A30 C3 40 09 04 1503   	jp dsl_palette_tool_loop
040A34             1504   
040A34             1505   dsl_inc_pen:
040A34 21 0E 18 04 1506   	ld hl,current_pen
040A38 7E          1507   	ld a,(hl)
040A39 21 2D 19 04 1508   	ld hl,colors_count
040A3D 4E          1509   	ld c,(hl)
040A3E 0D          1510   	dec c
040A3F B9          1511   	cp c
040A40 D0          1512   	ret nc
040A41             1513   
040A41 4F          1514   	ld c,a ; c is the old pen
040A42 3C          1515   	inc a ; a is the new pen
040A43             1516   
040A43 F5          1517   	push af
040A44 C5          1518   	push bc
040A45             1519   
040A45             1520   	; unselect palette color
040A45 CD 3B 0D 04 1521   	call fn_draw_palette_without_border
040A49             1522   
040A49 C1          1523   	pop bc
040A4A F1          1524   	pop af
040A4B             1525   
040A4B             1526   	; replace current pen value
040A4B 21 0E 18 04 1527   	ld hl,current_pen
040A4F 77          1528   	ld (hl),a
040A50             1529   
040A50             1530   	; select palette color
040A50 4F          1531   	ld c,a
040A51 CD D6 0C 04 1532   	call fn_draw_palette_with_border
040A55 CD B0 16 04 1533   	call fn_slowdown
040A59 C3 40 09 04 1534   	jp dsl_palette_tool_loop
040A5D             1535   
040A5D             1536   ; exit program
040A5D             1537   exit_program:
040A5D             1538   	; reset to mode 1
040A5D             1539   	vdu 22
040A5D 3E 16       0001M  		LD	A, function
040A5F 49 D7       0002M  		RST.LIS	10h
040A61             1540   	vdu 1
040A61 3E 01       0001M  		LD	A, function
040A63 49 D7       0002M  		RST.LIS	10h
040A65             1541   
040A65             1542   	; position the texte cursor at home
040A65             1543   	vdu 30
040A65 3E 1E       0001M  		LD	A, function
040A67 49 D7       0002M  		RST.LIS	10h
040A69             1544   
040A69             1545   	; show cursor
040A69             1546   	vdu 23
040A69 3E 17       0001M  		LD	A, function
040A6B 49 D7       0002M  		RST.LIS	10h
040A6D             1547   	vdu 1
040A6D 3E 01       0001M  		LD	A, function
040A6F 49 D7       0002M  		RST.LIS	10h
040A71             1548   	vdu 1
040A71 3E 01       0001M  		LD	A, function
040A73 49 D7       0002M  		RST.LIS	10h
040A75             1549   
040A75 FD E1       1550   	pop iy
040A77 DD E1       1551   	pop ix
040A79 D1          1552   	pop de
040A7A C1          1553   	pop bc
040A7B F1          1554   	pop af
040A7C 21 00 00 00 1555   	ld hl,0
040A80             1556   
040A80 C9          1557   	ret
040A81             1558   ;======================================================================
040A81             1559   
040A81             1560   ; draw a rectangle
040A81             1561   fn_rect:
040A81             1562   	vdu 25
040A81 3E 19       0001M  		LD	A, function
040A83 49 D7       0002M  		RST.LIS	10h
040A85             1563   	vdu 4
040A85 3E 04       0001M  		LD	A, function
040A87 49 D7       0002M  		RST.LIS	10h
040A89 DD 21 F8 17 1564   	ld ix,x1
       04          
040A8E DD 7E 00    1565   	ld a,(ix + 0)
040A91             1566   	vdu_a
040A91 49 D7       0001M  		RST.LIS	10h
040A93 DD 7E 01    1567   	ld a,(ix + 1)
040A96             1568   	vdu_a
040A96 49 D7       0001M  		RST.LIS	10h
040A98 FD 21 FA 17 1569   	ld iy,y1
       04          
040A9D FD 7E 00    1570   	ld a,(iy + 0)
040AA0             1571   	vdu_a
040AA0 49 D7       0001M  		RST.LIS	10h
040AA2 FD 7E 01    1572   	ld a,(iy + 1)
040AA5             1573   	vdu_a
040AA5 49 D7       0001M  		RST.LIS	10h
040AA7             1574   
040AA7             1575   	vdu 25
040AA7 3E 19       0001M  		LD	A, function
040AA9 49 D7       0002M  		RST.LIS	10h
040AAB             1576   	vdu 5
040AAB 3E 05       0001M  		LD	A, function
040AAD 49 D7       0002M  		RST.LIS	10h
040AAF DD 21 FC 17 1577   	ld ix,x2
       04          
040AB4 DD 7E 00    1578   	ld a,(ix + 0)
040AB7             1579   	vdu_a
040AB7 49 D7       0001M  		RST.LIS	10h
040AB9 DD 7E 01    1580   	ld a,(ix + 1)
040ABC             1581   	vdu_a
040ABC 49 D7       0001M  		RST.LIS	10h
040ABE FD 21 FA 17 1582   	ld iy,y1
       04          
040AC3 FD 7E 00    1583   	ld a,(iy + 0)
040AC6             1584   	vdu_a
040AC6 49 D7       0001M  		RST.LIS	10h
040AC8 FD 7E 01    1585   	ld a,(iy + 1)
040ACB             1586   	vdu_a
040ACB 49 D7       0001M  		RST.LIS	10h
040ACD             1587   
040ACD             1588   	vdu 25
040ACD 3E 19       0001M  		LD	A, function
040ACF 49 D7       0002M  		RST.LIS	10h
040AD1             1589   	vdu 5
040AD1 3E 05       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5 DD 21 FC 17 1590   	ld ix,x2
       04          
040ADA DD 7E 00    1591   	ld a,(ix + 0)
040ADD             1592   	vdu_a
040ADD 49 D7       0001M  		RST.LIS	10h
040ADF DD 7E 01    1593   	ld a,(ix + 1)
040AE2             1594   	vdu_a
040AE2 49 D7       0001M  		RST.LIS	10h
040AE4 FD 21 FE 17 1595   	ld iy,y2
       04          
040AE9 FD 7E 00    1596   	ld a,(iy + 0)
040AEC             1597   	vdu_a
040AEC 49 D7       0001M  		RST.LIS	10h
040AEE FD 7E 01    1598   	ld a,(iy + 1)
040AF1             1599   	vdu_a
040AF1 49 D7       0001M  		RST.LIS	10h
040AF3             1600   
040AF3             1601   	vdu 25
040AF3 3E 19       0001M  		LD	A, function
040AF5 49 D7       0002M  		RST.LIS	10h
040AF7             1602   	vdu 5
040AF7 3E 05       0001M  		LD	A, function
040AF9 49 D7       0002M  		RST.LIS	10h
040AFB DD 21 F8 17 1603   	ld ix,x1
       04          
040B00 DD 7E 00    1604   	ld a,(ix + 0)
040B03             1605   	vdu_a
040B03 49 D7       0001M  		RST.LIS	10h
040B05 DD 7E 01    1606   	ld a,(ix + 1)
040B08             1607   	vdu_a
040B08 49 D7       0001M  		RST.LIS	10h
040B0A FD 21 FE 17 1608   	ld iy,y2
       04          
040B0F FD 7E 00    1609   	ld a,(iy + 0)
040B12             1610   	vdu_a
040B12 49 D7       0001M  		RST.LIS	10h
040B14 FD 7E 01    1611   	ld a,(iy + 1)
040B17             1612   	vdu_a
040B17 49 D7       0001M  		RST.LIS	10h
040B19             1613   
040B19             1614   	vdu 25
040B19 3E 19       0001M  		LD	A, function
040B1B 49 D7       0002M  		RST.LIS	10h
040B1D             1615   	vdu 5
040B1D 3E 05       0001M  		LD	A, function
040B1F 49 D7       0002M  		RST.LIS	10h
040B21 DD 21 F8 17 1616   	ld ix,x1
       04          
040B26 DD 7E 00    1617   	ld a,(ix + 0)
040B29             1618   	vdu_a
040B29 49 D7       0001M  		RST.LIS	10h
040B2B DD 7E 01    1619   	ld a,(ix + 1)
040B2E             1620   	vdu_a
040B2E 49 D7       0001M  		RST.LIS	10h
040B30 FD 21 FA 17 1621   	ld iy,y1
       04          
040B35 FD 7E 00    1622   	ld a,(iy + 0)
040B38             1623   	vdu_a
040B38 49 D7       0001M  		RST.LIS	10h
040B3A FD 7E 01    1624   	ld a,(iy + 1)
040B3D             1625   	vdu_a
040B3D 49 D7       0001M  		RST.LIS	10h
040B3F             1626   
040B3F C9          1627   	ret
040B40             1628   
040B40             1629   ; draw a filled rectangle
040B40             1630   fn_rectf:
040B40 DD 21 F8 17 1631   	ld ix,x1
       04          
040B45 FD 21 FA 17 1632   	ld iy,y1
       04          
040B4A             1633   
040B4A             1634   	vdu 25
040B4A 3E 19       0001M  		LD	A, function
040B4C 49 D7       0002M  		RST.LIS	10h
040B4E             1635   	vdu 4
040B4E 3E 04       0001M  		LD	A, function
040B50 49 D7       0002M  		RST.LIS	10h
040B52 DD 7E 00    1636   	ld a,(ix+0)
040B55             1637   	vdu_a
040B55 49 D7       0001M  		RST.LIS	10h
040B57 DD 7E 01    1638   	ld a,(ix+1)
040B5A             1639   	vdu_a
040B5A 49 D7       0001M  		RST.LIS	10h
040B5C FD 7E 00    1640   	ld a,(iy+0)
040B5F             1641   	vdu_a
040B5F 49 D7       0001M  		RST.LIS	10h
040B61 FD 7E 01    1642   	ld a,(iy+1)
040B64             1643   	vdu_a
040B64 49 D7       0001M  		RST.LIS	10h
040B66             1644   
040B66 DD 21 FC 17 1645   	ld ix,x2
       04          
040B6B FD 21 FE 17 1646   	ld iy,y2
       04          
040B70             1647   
040B70             1648   	vdu 25
040B70 3E 19       0001M  		LD	A, function
040B72 49 D7       0002M  		RST.LIS	10h
040B74             1649   	vdu 101
040B74 3E 65       0001M  		LD	A, function
040B76 49 D7       0002M  		RST.LIS	10h
040B78 DD 7E 00    1650   	ld a,(ix+0)
040B7B             1651   	vdu_a
040B7B 49 D7       0001M  		RST.LIS	10h
040B7D DD 7E 01    1652   	ld a,(ix+1)
040B80             1653   	vdu_a
040B80 49 D7       0001M  		RST.LIS	10h
040B82 FD 7E 00    1654   	ld a,(iy+0)
040B85             1655   	vdu_a
040B85 49 D7       0001M  		RST.LIS	10h
040B87 FD 7E 01    1656   	ld a,(iy+1)
040B8A             1657   	vdu_a
040B8A 49 D7       0001M  		RST.LIS	10h
040B8C             1658   
040B8C C9          1659   	ret
040B8D             1660   
040B8D             1661   fn_calc_pixel_coords:
040B8D 11 00 00 00 1662   	ld de,$000000 ; reset deu
040B91             1663   
040B91             1664   	; calculate coordinates x of the resized pixel
040B91 21 08 18 04 1665   	ld hl,xpix
040B95 5E          1666   	ld e,(hl) ; E = xpix
040B96 21 0C 18 04 1667   	ld hl,pixel_width
040B9A 56          1668   	ld d,(hl) ; D = pixel_width
040B9B D5          1669   	push de
040B9C E1          1670   	pop hl ; HL = DE
040B9D ED 6C       1671   	mlt hl ; HL = xpix * pixel_width
040B9F DD 21 00 18 1672   	ld ix,xs1
       04          
040BA4 DD 5E 00    1673   	ld e,(ix+0)
040BA7 DD 56 01    1674   	ld d,(ix+1)
040BAA 13          1675   	inc de ; DE = xs1 + 1
040BAB 19          1676   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040BAC FD 21 F8 17 1677   	ld iy,x1
       04          
040BB1 FD 75 00    1678   	ld (iy+0),l
040BB4 FD 74 01    1679   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040BB7 E5          1680   	push hl
040BB8 21 0C 18 04 1681   	ld hl,pixel_width
040BBC 16 00       1682   	ld d,0
040BBE 5E          1683   	ld e,(hl)
040BBF E1          1684   	pop hl
040BC0 19          1685   	add hl,de
040BC1 2B          1686   	dec hl
040BC2 FD 21 FC 17 1687   	ld iy,x2
       04          
040BC7 FD 75 00    1688   	ld (iy+0),l
040BCA FD 74 01    1689   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040BCD             1690   
040BCD 11 00 00 00 1691   	ld de,$000000 ; reset deu
040BD1             1692   
040BD1             1693   	; calculate coordinates y of the resized pixel
040BD1 21 09 18 04 1694   	ld hl,ypix
040BD5 5E          1695   	ld e,(hl) ; E = ypix
040BD6 21 0C 18 04 1696   	ld hl,pixel_width
040BDA 56          1697   	ld d,(hl) ; D = pixel_width
040BDB D5          1698   	push de
040BDC E1          1699   	pop hl ; HL = DE
040BDD ED 6C       1700   	mlt hl ; HL = ypix * pixel_width
040BDF DD 21 02 18 1701   	ld ix,ys1
       04          
040BE4 DD 5E 00    1702   	ld e,(ix+0)
040BE7 DD 56 01    1703   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040BEA 13          1704   	inc de ; DE = ys1 + 1
040BEB 19          1705   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040BEC FD 21 FA 17 1706   	ld iy,y1
       04          
040BF1 FD 75 00    1707   	ld (iy+0),l
040BF4 FD 74 01    1708   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040BF7 E5          1709   	push hl
040BF8 21 0C 18 04 1710   	ld hl,pixel_width
040BFC 16 00       1711   	ld d,0
040BFE 5E          1712   	ld e,(hl)
040BFF E1          1713   	pop hl
040C00 19          1714   	add hl,de
040C01 2B          1715   	dec hl
040C02 FD 21 FE 17 1716   	ld iy,y2
       04          
040C07 FD 75 00    1717   	ld (iy+0),l
040C0A FD 74 01    1718   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C0D             1719   
040C0D C9          1720   	ret
040C0E             1721   
040C0E             1722   ; draw the resized pixel border, with its color
040C0E             1723   fn_draw_pixel_with_border:
040C0E CD 22 0C 04 1724   	call fn_draw_pixel_without_border
040C12             1725   
040C12             1726   	; set graphics pen
040C12             1727   	vdu 18
040C12 3E 12       0001M  		LD	A, function
040C14 49 D7       0002M  		RST.LIS	10h
040C16             1728   	vdu 0
040C16 3E 00       0001M  		LD	A, function
040C18 49 D7       0002M  		RST.LIS	10h
040C1A             1729   	vdu COLOR_GREY ; grey pen
040C1A 3E 07       0001M  		LD	A, function
040C1C 49 D7       0002M  		RST.LIS	10h
040C1E             1730   
040C1E             1731   	; draw the sprite's border rectangle
040C1E C3 81 0A 04 1732   	jp fn_rect
040C22             1733   
040C22             1734   ; draw the resized pixel color
040C22             1735   fn_draw_pixel_without_border:
040C22 CD 8D 0B 04 1736   	call fn_calc_pixel_coords
040C26             1737   
040C26             1738   	; set graphics pen
040C26             1739   	vdu 18
040C26 3E 12       0001M  		LD	A, function
040C28 49 D7       0002M  		RST.LIS	10h
040C2A             1740   	vdu 0
040C2A 3E 00       0001M  		LD	A, function
040C2C 49 D7       0002M  		RST.LIS	10h
040C2E CD 38 0C 04 1741   	call fn_get_pixel_color
040C32             1742   	vdu_a
040C32 49 D7       0001M  		RST.LIS	10h
040C34             1743   
040C34             1744   	; draw the sprite's color rectangle
040C34 C3 40 0B 04 1745   	jp fn_rectf
040C38             1746   
040C38             1747   ; get pixel color value in the sprite buffer
040C38             1748   ; returns A: pixel color (0-63)
040C38             1749   fn_get_pixel_color:
040C38 11 00 00 00 1750   	ld de,$000000 ; reset deu
040C3C             1751   
040C3C             1752   	; calculate the offset to add to the address
040C3C 21 09 18 04 1753   	ld hl,ypix
040C40 5E          1754   	ld e,(hl) ; E = ypix
040C41 21 0D 18 04 1755   	ld hl,spr_size
040C45 56          1756   	ld d,(hl) ; D = sprsize
040C46 D5          1757   	push de
040C47 E1          1758   	pop hl
040C48 ED 6C       1759   	mlt hl ; HL = ypix * sprsize
040C4A E5          1760   	push hl
040C4B 21 08 18 04 1761   	ld hl,xpix
040C4F 5E          1762   	ld e,(hl)
040C50 16 00       1763   	ld d,0
040C52 E1          1764   	pop hl
040C53 19          1765   	add hl,de ; HL = (ypix * sprsize) + xpix
040C54             1766   
040C54 11 32 19 04 1767   	ld de,current_frame
040C58 1A          1768   	ld a,(de)
040C59 FE 00       1769   	cp 0
040C5B 28 16       1770   	jr z,gpc_end_loop
040C5D             1771   
040C5D 47          1772   	ld b,a
040C5E E5          1773   	push hl
040C5F 11 00 00 00 1774   	ld de,$000000
040C63 21 0D 18 04 1775   	ld hl,spr_size
040C67 5E          1776   	ld e,(hl)
040C68 56          1777   	ld d,(hl)
040C69 D5          1778   	push de
040C6A E1          1779   	pop hl
040C6B ED 6C       1780   	mlt hl
040C6D E5          1781   	push hl
040C6E D1          1782   	pop de ; DE = sprsize²
040C6F E1          1783   	pop hl
040C70             1784   
040C70             1785   gpc_loop:
040C70 19          1786   	add hl,de
040C71 10 FD       1787   	djnz gpc_loop
040C73             1788   
040C73             1789   gpc_end_loop:
040C73             1790   	; add the offset to the address
040C73 11 3B 19 04 1791   	ld de,sprite_buffer
040C77 19          1792   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040C78             1793   
040C78             1794   	; get pixel color value
040C78 7E          1795   	ld a,(hl)
040C79             1796   
040C79 C9          1797   	ret
040C7A             1798   
040C7A             1799   ; get pixel color value in the sprite buffer
040C7A             1800   ; A: pixel color (0-63)
040C7A             1801   fn_set_pixel_color:
040C7A 11 00 00 00 1802   	ld de,$000000 ; reset deu
040C7E             1803   
040C7E             1804   	; calculate the offset to add to the address
040C7E 21 09 18 04 1805   	ld hl,ypix
040C82 5E          1806   	ld e,(hl) ; E = ypix
040C83 21 0D 18 04 1807   	ld hl,spr_size
040C87 56          1808   	ld d,(hl) ; D = sprsize
040C88 D5          1809   	push de
040C89 E1          1810   	pop hl
040C8A ED 6C       1811   	mlt hl ; HL = ypix * sprsize
040C8C E5          1812   	push hl
040C8D 21 08 18 04 1813   	ld hl,xpix
040C91 5E          1814   	ld e,(hl)
040C92 16 00       1815   	ld d,0
040C94 E1          1816   	pop hl
040C95 19          1817   	add hl,de ; HL = (ypix * sprsize) + xpix
040C96 F5          1818   	push af
040C97             1819   
040C97 11 32 19 04 1820   	ld de,current_frame
040C9B 1A          1821   	ld a,(de)
040C9C FE 00       1822   	cp 0
040C9E 28 16       1823   	jr z,spc_end_loop
040CA0             1824   
040CA0 47          1825   	ld b,a
040CA1 E5          1826   	push hl
040CA2 11 00 00 00 1827   	ld de,$000000
040CA6 21 0D 18 04 1828   	ld hl,spr_size
040CAA 5E          1829   	ld e,(hl)
040CAB 56          1830   	ld d,(hl)
040CAC D5          1831   	push de
040CAD E1          1832   	pop hl
040CAE ED 6C       1833   	mlt hl
040CB0 E5          1834   	push hl
040CB1 D1          1835   	pop de ; DE = sprsize²
040CB2 E1          1836   	pop hl
040CB3             1837   
040CB3             1838   spc_loop:
040CB3 19          1839   	add hl,de
040CB4 10 FD       1840   	djnz spc_loop
040CB6             1841   
040CB6             1842   spc_end_loop:
040CB6             1843   
040CB6             1844   	; add the offset to the address
040CB6 11 3B 19 04 1845   	ld de,sprite_buffer
040CBA 19          1846   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CBB             1847   
040CBB             1848   	; set pixel color value
040CBB F1          1849   	pop af
040CBC 77          1850   	ld (hl),a
040CBD             1851   
040CBD C9          1852   	ret
040CBE             1853   
040CBE             1854   fn_move_up:
040CBE 21 09 18 04 1855   	ld hl,ypix
040CC2 35          1856   	dec (hl)
040CC3 C9          1857   	ret
040CC4             1858   
040CC4             1859   fn_move_down:
040CC4 21 09 18 04 1860   	ld hl,ypix
040CC8 34          1861   	inc (hl)
040CC9 C9          1862   	ret
040CCA             1863   
040CCA             1864   fn_move_left:
040CCA 21 08 18 04 1865   	ld hl,xpix
040CCE 35          1866   	dec (hl)
040CCF C9          1867   	ret
040CD0             1868   
040CD0             1869   fn_move_right:
040CD0 21 08 18 04 1870   	ld hl,xpix
040CD4 34          1871   	inc (hl)
040CD5 C9          1872   	ret
040CD6             1873   
040CD6             1874   ; draw palette color whit border and selection
040CD6             1875   ; C = color number (0-63)
040CD6             1876   fn_draw_palette_with_border:
040CD6 C5          1877   	push bc
040CD7             1878   
040CD7             1879   	; choose palette color
040CD7             1880   	vdu 18
040CD7 3E 12       0001M  		LD	A, function
040CD9 49 D7       0002M  		RST.LIS	10h
040CDB             1881   	vdu 0
040CDB 3E 00       0001M  		LD	A, function
040CDD 49 D7       0002M  		RST.LIS	10h
040CDF C1          1882   	pop bc
040CE0 C5          1883   	push bc
040CE1 79          1884   	ld a,c
040CE2             1885   	vdu_a
040CE2 49 D7       0001M  		RST.LIS	10h
040CE4             1886   
040CE4             1887   	; store coordinates for a palette square
040CE4 DD 21 F8 17 1888   	ld ix,x1
       04          
040CE9 E1          1889   	pop hl
040CEA E5          1890   	push hl
040CEB 26 05       1891   	ld h,5
040CED ED 6C       1892   	mlt hl
040CEF E5          1893   	push hl
040CF0 DD 75 00    1894   	ld (ix+0),l
040CF3 DD 74 01    1895   	ld (ix+1),h
040CF6             1896   
040CF6 DD 21 FA 17 1897   	ld ix,y1
       04          
040CFB 21 00 00 00 1898   	ld hl,0
040CFF DD 75 00    1899   	ld (ix+0),l
040D02 DD 74 01    1900   	ld (ix+1),h
040D05             1901   
040D05 DD 21 FC 17 1902   	ld ix,x2
       04          
040D0A E1          1903   	pop hl
040D0B 11 04 00 00 1904   	ld de,4
040D0F 19          1905   	add hl,de
040D10 DD 75 00    1906   	ld (ix+0),l
040D13 DD 74 01    1907   	ld (ix+1),h
040D16             1908   
040D16 DD 21 FE 17 1909   	ld ix,y2
       04          
040D1B 21 0A 00 00 1910   	ld hl,10
040D1F DD 75 00    1911   	ld (ix+0),l
040D22 DD 74 01    1912   	ld (ix+1),h
040D25             1913   
040D25             1914   	; draw the palette filled square
040D25 CD 40 0B 04 1915   	call fn_rectf
040D29             1916   
040D29             1917   	; choose grey color
040D29             1918   	vdu 18
040D29 3E 12       0001M  		LD	A, function
040D2B 49 D7       0002M  		RST.LIS	10h
040D2D             1919   	vdu 0
040D2D 3E 00       0001M  		LD	A, function
040D2F 49 D7       0002M  		RST.LIS	10h
040D31 3E 07       1920   	ld a,COLOR_GREY
040D33             1921   	vdu_a
040D33 49 D7       0001M  		RST.LIS	10h
040D35             1922   
040D35             1923   	; draw the palette square border
040D35 CD 81 0A 04 1924   	call fn_rect
040D39             1925   
040D39             1926   	; next color ?
040D39 C1          1927   	pop bc
040D3A             1928   
040D3A C9          1929   	ret
040D3B             1930   
040D3B             1931   ; draw palette color whitout border and selection
040D3B             1932   ; C = color number (0-63)
040D3B             1933   fn_draw_palette_without_border:
040D3B C5          1934   	push bc
040D3C             1935   
040D3C             1936   	; choose palette color
040D3C             1937   	vdu 18
040D3C 3E 12       0001M  		LD	A, function
040D3E 49 D7       0002M  		RST.LIS	10h
040D40             1938   	vdu 0
040D40 3E 00       0001M  		LD	A, function
040D42 49 D7       0002M  		RST.LIS	10h
040D44 C1          1939   	pop bc
040D45 C5          1940   	push bc
040D46 79          1941   	ld a,c
040D47             1942   	vdu_a
040D47 49 D7       0001M  		RST.LIS	10h
040D49             1943   
040D49             1944   	; store coordinates for a palette square
040D49 DD 21 F8 17 1945   	ld ix,x1
       04          
040D4E E1          1946   	pop hl
040D4F E5          1947   	push hl
040D50 26 05       1948   	ld h,5
040D52 ED 6C       1949   	mlt hl
040D54 E5          1950   	push hl
040D55 DD 75 00    1951   	ld (ix+0),l
040D58 DD 74 01    1952   	ld (ix+1),h
040D5B             1953   
040D5B DD 21 FA 17 1954   	ld ix,y1
       04          
040D60 21 00 00 00 1955   	ld hl,0
040D64 DD 75 00    1956   	ld (ix+0),l
040D67 DD 74 01    1957   	ld (ix+1),h
040D6A             1958   
040D6A DD 21 FC 17 1959   	ld ix,x2
       04          
040D6F E1          1960   	pop hl
040D70 11 04 00 00 1961   	ld de,4
040D74 19          1962   	add hl,de
040D75 DD 75 00    1963   	ld (ix+0),l
040D78 DD 74 01    1964   	ld (ix+1),h
040D7B             1965   
040D7B DD 21 FE 17 1966   	ld ix,y2
       04          
040D80 21 0A 00 00 1967   	ld hl,10
040D84 DD 75 00    1968   	ld (ix+0),l
040D87 DD 74 01    1969   	ld (ix+1),h
040D8A             1970   
040D8A             1971   	; draw the palette filled square
040D8A CD 40 0B 04 1972   	call fn_rectf
040D8E             1973   
040D8E C1          1974   	pop bc
040D8F             1975   
040D8F C9          1976   	ret
040D90             1977   
040D90             1978   ; get an ascii key value
040D90             1979   fn_input_key:
040D90 C5          1980   	push bc
040D91             1981   	moscall mos_getkey
040D91 3E 00       0001M  		LD	A, function
040D93 49 CF       0002M  		RST.LIS	08h
040D95 C1          1982   	pop bc
040D96 C9          1983   	ret
040D97             1984   
040D97             1985   ; input a text of 8 chars
040D97             1986   fn_input_text8:
040D97             1987   	; locate x,y
040D97             1988   	vdu 31
040D97 3E 1F       0001M  		LD	A, function
040D99 49 D7       0002M  		RST.LIS	10h
040D9B             1989   	vdu FILENAME_X
040D9B 3E 07       0001M  		LD	A, function
040D9D 49 D7       0002M  		RST.LIS	10h
040D9F             1990   	vdu FILENAME_Y
040D9F 3E 18       0001M  		LD	A, function
040DA1 49 D7       0002M  		RST.LIS	10h
040DA3             1991   
040DA3             1992   	; print text
040DA3 21 7A 18 04 1993   	ld hl,filename_label
040DA7 01 00 00 00 1994   	ld bc,0
040DAB AF          1995   	xor a
040DAC 49 DF       1996   	rst.lis $18
040DAE             1997   
040DAE             1998   	; show cursor
040DAE             1999   	vdu 23
040DAE 3E 17       0001M  		LD	A, function
040DB0 49 D7       0002M  		RST.LIS	10h
040DB2             2000   	vdu 1
040DB2 3E 01       0001M  		LD	A, function
040DB4 49 D7       0002M  		RST.LIS	10h
040DB6             2001   	vdu 1
040DB6 3E 01       0001M  		LD	A, function
040DB8 49 D7       0002M  		RST.LIS	10h
040DBA             2002   
040DBA 0E 00       2003   	ld c,0
040DBC             2004   
040DBC             2005   it8_loop:
040DBC             2006   	; get ascii key
040DBC CD 90 0D 04 2007   	call fn_input_key
040DC0 B7          2008   	or a
040DC1 CA BC 0D 04 2009   	jp z,it8_loop
040DC5             2010   
040DC5 FE 2E       2011   	cp '.'
040DC7 CA 11 0E 04 2012   	jp z,it8l_add_char
040DCB             2013   
040DCB FE 2D       2014   	cp '-'
040DCD CA 11 0E 04 2015   	jp z,it8l_add_char
040DD1             2016   
040DD1 FE 5F       2017   	cp '_'
040DD3 CA 11 0E 04 2018   	jp z,it8l_add_char
040DD7             2019   
040DD7 FE 7F       2020   	cp 127
040DD9 CA 45 0E 04 2021   	jp z,it8l_backspace
040DDD             2022   
040DDD FE 0D       2023   	cp 13
040DDF CA 83 0E 04 2024   	jp z,it8l_return
040DE3             2025   
040DE3 FE 30       2026   	cp '0'
040DE5 DA BC 0D 04 2027   	jp c,it8_loop
040DE9             2028   
040DE9 16 39       2029   	ld d,'9'
040DEB 14          2030   	inc d
040DEC BA          2031   	cp d
040DED DA 11 0E 04 2032   	jp c,it8l_add_char
040DF1             2033   
040DF1 FE 41       2034   	cp 'A'
040DF3 DA BC 0D 04 2035   	jp c,it8_loop
040DF7             2036   
040DF7 16 5A       2037   	ld d,'Z'
040DF9 14          2038   	inc d
040DFA BA          2039   	cp d
040DFB DA 11 0E 04 2040   	jp c,it8l_add_char
040DFF             2041   
040DFF FE 61       2042   	cp 'a'
040E01 DA BC 0D 04 2043   	jp c,it8_loop
040E05             2044   
040E05 16 7A       2045   	ld d,'z'
040E07 14          2046   	inc d
040E08 BA          2047   	cp d
040E09 DA 11 0E 04 2048   	jp c,it8l_add_char
040E0D             2049   
040E0D C3 BC 0D 04 2050   	jp it8_loop
040E11             2051   
040E11             2052   it8l_add_char:
040E11 F5          2053   	push af
040E12 79          2054   	ld a,c
040E13 FE 10       2055   	cp 16
040E15 38 05       2056   	jr c,it8l_poke_char
040E17 F1          2057   	pop af
040E18 C3 BC 0D 04 2058   	jp it8_loop
040E1C             2059   
040E1C             2060   it8l_poke_char:
040E1C F1          2061   	pop af
040E1D 21 84 18 04 2062   	ld hl,filename
040E21 06 00       2063   	ld b,0
040E23 09          2064   	add hl,bc
040E24 77          2065   	ld (hl),a
040E25 0C          2066   	inc c
040E26 F5          2067   	push af
040E27 C5          2068   	push bc
040E28             2069   
040E28             2070   	; locate x,y
040E28             2071   	vdu 31
040E28 3E 1F       0001M  		LD	A, function
040E2A 49 D7       0002M  		RST.LIS	10h
040E2C             2072   	vdu FILENAME_X+9
040E2C 3E 10       0001M  		LD	A, function
040E2E 49 D7       0002M  		RST.LIS	10h
040E30             2073   	vdu FILENAME_Y
040E30 3E 18       0001M  		LD	A, function
040E32 49 D7       0002M  		RST.LIS	10h
040E34             2074   
040E34             2075   	; print text
040E34 21 84 18 04 2076   	ld hl,filename
040E38 01 00 00 00 2077   	ld bc,0
040E3C AF          2078   	xor a
040E3D 49 DF       2079   	rst.lis $18
040E3F             2080   
040E3F C1          2081   	pop bc
040E40 F1          2082   	pop af
040E41             2083   
040E41 C3 BC 0D 04 2084   	jp it8_loop
040E45             2085   
040E45             2086   it8l_backspace:
040E45 79          2087   	ld a,c
040E46 FE 00       2088   	cp 0
040E48 CA BC 0D 04 2089   	jp z,it8_loop
040E4C             2090   
040E4C             2091   	; delete a character of the filename
040E4C 21 84 18 04 2092   	ld hl,filename
040E50 06 00       2093   	ld b,0
040E52 09          2094   	add hl,bc
040E53 AF          2095   	xor a
040E54 77          2096   	ld (hl),a
040E55 0D          2097   	dec c
040E56 C5          2098   	push bc
040E57             2099   
040E57             2100   	; locate x,y
040E57             2101   	vdu 31
040E57 3E 1F       0001M  		LD	A, function
040E59 49 D7       0002M  		RST.LIS	10h
040E5B 3E 10       2102   	ld a,FILENAME_X+9
040E5D 81          2103   	add a,c
040E5E             2104   	vdu_a
040E5E 49 D7       0001M  		RST.LIS	10h
040E60             2105   	vdu FILENAME_Y
040E60 3E 18       0001M  		LD	A, function
040E62 49 D7       0002M  		RST.LIS	10h
040E64             2106   
040E64 C5          2107   	push bc
040E65             2108   
040E65             2109   	; print text
040E65 21 A9 18 04 2110   	ld hl,spacechar
040E69 01 00 00 00 2111   	ld bc,0
040E6D AF          2112   	xor a
040E6E 49 DF       2113   	rst.lis $18
040E70             2114   
040E70 C1          2115   	pop bc
040E71             2116   
040E71             2117   	; locate x,y
040E71             2118   	vdu 31
040E71 3E 1F       0001M  		LD	A, function
040E73 49 D7       0002M  		RST.LIS	10h
040E75 3E 10       2119   	ld a,FILENAME_X+9
040E77 81          2120   	add a,c
040E78             2121   	vdu_a
040E78 49 D7       0001M  		RST.LIS	10h
040E7A             2122   	vdu FILENAME_Y
040E7A 3E 18       0001M  		LD	A, function
040E7C 49 D7       0002M  		RST.LIS	10h
040E7E             2123   
040E7E C1          2124   	pop bc
040E7F C3 BC 0D 04 2125   	jp it8_loop
040E83             2126   
040E83             2127   it8l_return:
040E83             2128   	; locate x,y
040E83             2129   	vdu 31
040E83 3E 1F       0001M  		LD	A, function
040E85 49 D7       0002M  		RST.LIS	10h
040E87             2130   	vdu FILENAME_X
040E87 3E 07       0001M  		LD	A, function
040E89 49 D7       0002M  		RST.LIS	10h
040E8B             2131   	vdu FILENAME_Y
040E8B 3E 18       0001M  		LD	A, function
040E8D 49 D7       0002M  		RST.LIS	10h
040E8F             2132   
040E8F             2133   	; print text
040E8F 21 AB 18 04 2134   	ld hl,void_filename
040E93 01 00 00 00 2135   	ld bc,0
040E97 AF          2136   	xor a
040E98 49 DF       2137   	rst.lis $18
040E9A             2138   
040E9A             2139   	; hide cursor
040E9A             2140   	vdu 23
040E9A 3E 17       0001M  		LD	A, function
040E9C 49 D7       0002M  		RST.LIS	10h
040E9E             2141   	vdu 1
040E9E 3E 01       0001M  		LD	A, function
040EA0 49 D7       0002M  		RST.LIS	10h
040EA2             2142   	vdu 0
040EA2 3E 00       0001M  		LD	A, function
040EA4 49 D7       0002M  		RST.LIS	10h
040EA6             2143   
040EA6             2144   it8l_endloop:
040EA6 21 B6 FF FF 2145   	ld hl,KEY_RETURN
040EAA CD 35 17 04 2146   	call fn_inkey
040EAE FE 01       2147   	CP 1
040EB0 CA A6 0E 04 2148   	jp z,it8l_endloop
040EB4             2149   
040EB4 C9          2150   	ret
040EB5             2151   
040EB5             2152   ; load a palette
040EB5             2153   fn_load_palette:
040EB5             2154   	; clear the filename on the screen
040EB5 21 84 18 04 2155   	ld hl,filename
040EB9 06 10       2156   	ld b,16
040EBB AF          2157   	xor a
040EBC             2158   
040EBC             2159   lp_clear_filename:
040EBC 77          2160   	ld (hl),a
040EBD 23          2161   	inc hl
040EBE 10 FC       2162   	djnz lp_clear_filename
040EC0             2163   
040EC0             2164   	; get filename
040EC0 CD 97 0D 04 2165   	call fn_input_text8
040EC4             2166   
040EC4             2167   	; set path to 'palettes/'
040EC4 21 9D 18 04 2168   	ld hl,palette_path
040EC8             2169   	moscall mos_cd
040EC8 3E 03       0001M  		LD	A, function
040ECA 49 CF       0002M  		RST.LIS	08h
040ECC             2170   
040ECC             2171   	; exit on folder error
040ECC FE 00       2172   	cp 0
040ECE C2 90 0F 04 2173   	jp nz,lp_folder_error
040ED2             2174   
040ED2             2175   	; open the file for read
040ED2 21 84 18 04 2176   	ld hl,filename
040ED6 0E 01       2177   	ld c,fa_open_existing|fa_read
040ED8             2178   	moscall mos_fopen
040ED8 3E 0A       0001M  		LD	A, function
040EDA 49 CF       0002M  		RST.LIS	08h
040EDC             2179   
040EDC             2180   	; exit on file error
040EDC FE 00       2181   	cp 0
040EDE CA FE 10 04 2182   	jp z,lp_file_error
040EE2             2183   
040EE2             2184   	; filehandle -> C
040EE2 4F          2185   	ld c,a
040EE3             2186   
040EE3             2187   	; get palette header
040EE3 21 3B 39 04 2188   	ld hl,header_buffer
040EE7 11 10 00 00 2189   	ld de,16
040EEB C5          2190   	push bc ; store filehandle
040EEC             2191   	moscall mos_fread
040EEC 3E 1A       0001M  		LD	A, function
040EEE 49 CF       0002M  		RST.LIS	08h
040EF0 C1          2192   	pop bc ; restore filehandle
040EF1 3E 10       2193   	ld a,16
040EF3 BB          2194   	cp e
040EF4 C2 74 0F 04 2195   	jp nz,lp_close_error
040EF8             2196   
040EF8             2197   	; compare loaded header with needed header
040EF8 11 97 3C 04 2198   	ld de,header
040EFC 21 3B 39 04 2199   	ld hl,header_buffer
040F00 47          2200   	ld b,a
040F01             2201   
040F01             2202   lp_compare:
040F01 1A          2203   	ld a,(de)
040F02 BE          2204   	cp (hl)
040F03 C2 98 0F 04 2205   	jp nz,lp_header_error
040F07             2206   
040F07 13          2207   	inc de
040F08 23          2208   	inc hl
040F09 05          2209   	dec b
040F0A             2210   
040F0A 78          2211   	ld a,b
040F0B FE 00       2212   	cp 0
040F0D C2 01 0F 04 2213   	jp nz,lp_compare
040F11             2214   
040F11             2215   	; prepare to read the number of colors
040F11 21 4B 39 04 2216   	ld hl,color_buffer
040F15             2217   
040F15             2218   lp_getcount:
040F15             2219   	; read a string for colors count
040F15 C5          2220   	push bc
040F16 E5          2221   	push hl
040F17             2222   
040F17             2223   	; read colors data
040F17             2224   	moscall mos_fgetc
040F17 3E 0C       0001M  		LD	A, function
040F19 49 CF       0002M  		RST.LIS	08h
040F1B             2225   
040F1B E1          2226   	pop hl
040F1C C1          2227   	pop bc
040F1D             2228   
040F1D             2229   	; exit if eof
040F1D DA 74 0F 04 2230   	jp c,lp_close_error
040F21             2231   
040F21 FE 30       2232   	cp 48 ; < 0
040F23 38 0A       2233   	jr c,lpgc_next
040F25 FE 3A       2234   	cp 58 ; > 9
040F27 D2 F9 10 04 2235   	jp nc,lp_data_error
040F2B             2236   
040F2B 77          2237   	ld (hl),a
040F2C 23          2238   	inc hl
040F2D 18 E6       2239   	jr lp_getcount
040F2F             2240   
040F2F             2241   lpgc_next:
040F2F F5          2242   	push af
040F30 3E 0D       2243   	ld a,13
040F32 77          2244   	ld (hl),a ; store CR
040F33 F1          2245   	pop af
040F34             2246   
040F34             2247   	; test CR
040F34 FE 0D       2248   	cp 13
040F36 C2 74 0F 04 2249   	jp nz,lp_close_error
040F3A             2250   
040F3A C5          2251   	push bc
040F3B             2252   
040F3B             2253   	; read LF
040F3B             2254   	moscall mos_fgetc
040F3B 3E 0C       0001M  		LD	A, function
040F3D 49 CF       0002M  		RST.LIS	08h
040F3F             2255   
040F3F C1          2256   	pop bc
040F40             2257   
040F40             2258   	; test LF
040F40 FE 0A       2259   	cp 10
040F42 C2 74 0F 04 2260   	jp nz,lp_close_error
040F46             2261   
040F46             2262   	; prepare to read color strings
040F46 11 00 00 00 2263   	ld de,#000000
040F4A 21 4E 39 04 2264   	ld hl,palette_buffer
040F4E             2265   
040F4E             2266   lp_load_pal_loop:
040F4E C5          2267   	push bc
040F4F D5          2268   	push de
040F50 E5          2269   	push hl
040F51             2270   
040F51             2271   	; read colors data
040F51             2272   	moscall mos_fgetc
040F51 3E 0C       0001M  		LD	A, function
040F53 49 CF       0002M  		RST.LIS	08h
040F55             2273   
040F55             2274   	; exit if eof
040F55 DA 6D 0F 04 2275   	jp c,lp_loaded
040F59             2276   
040F59 E1          2277   	pop hl
040F5A D1          2278   	pop de
040F5B C1          2279   	pop bc
040F5C             2280   
040F5C 77          2281   	ld (hl),a ; store loaded char in palette buffer
040F5D 23          2282   	inc hl
040F5E 13          2283   	inc de ; count chars
040F5F 7A          2284   	ld a,d
040F60 FE 03       2285   	cp MAX_PAL_DATA_HI
040F62 DA 4E 0F 04 2286   	jp c,lp_load_pal_loop
040F66 7B          2287   	ld a,e
040F67 FE 44       2288   	cp MAX_PAL_DATA_LO
040F69 DA 4E 0F 04 2289   	jp c,lp_load_pal_loop
040F6D             2290   
040F6D             2291   ; end of file
040F6D             2292   lp_loaded:
040F6D E1          2293   	pop hl
040F6E D1          2294   	pop de
040F6F C1          2295   	pop bc
040F70             2296   
040F70 C3 A0 0F 04 2297   	jp lp_close
040F74             2298   
040F74             2299   lp_close_error:
040F74 C5          2300   	push bc
040F75             2301   
040F75             2302   	; read error
040F75 CD 4B 15 04 2303   	call fn_print_file_error
040F79             2304   
040F79 C1          2305   	pop bc
040F7A             2306   
040F7A             2307   	; close the file
040F7A             2308   	moscall mos_fclose
040F7A 3E 0B       0001M  		LD	A, function
040F7C 49 CF       0002M  		RST.LIS	08h
040F7E             2309   
040F7E             2310   	; set path to home
040F7E 21 A6 18 04 2311   	ld hl,back_path
040F82             2312   	moscall mos_cd
040F82 3E 03       0001M  		LD	A, function
040F84 49 CF       0002M  		RST.LIS	08h
040F86             2313   
040F86             2314   	; exit on error
040F86 FE 00       2315   	cp 0
040F88 C2 90 0F 04 2316   	jp nz,lp_folder_error
040F8C             2317   
040F8C C3 EF 10 04 2318   	jp lp_exit
040F90             2319   
040F90             2320   lp_folder_error:
040F90             2321   	; write error
040F90 CD 82 15 04 2322   	call fn_print_folder_error
040F94 C3 EF 10 04 2323   	jp lp_exit
040F98             2324   
040F98             2325   lp_header_error:
040F98             2326   	; write error
040F98 CD B9 15 04 2327   	call fn_print_header_error
040F9C C3 EF 10 04 2328   	jp lp_exit
040FA0             2329   
040FA0             2330   lp_close:
040FA0 C5          2331   	push bc
040FA1             2332   
040FA1             2333   	; close the file
040FA1             2334   	moscall mos_fclose
040FA1 3E 0B       0001M  		LD	A, function
040FA3 49 CF       0002M  		RST.LIS	08h
040FA5             2335   
040FA5 C1          2336   	pop bc
040FA6             2337   
040FA6             2338   	; set path to home
040FA6 21 A6 18 04 2339   	ld hl,back_path
040FAA             2340   	moscall mos_cd
040FAA 3E 03       0001M  		LD	A, function
040FAC 49 CF       0002M  		RST.LIS	08h
040FAE             2341   
040FAE             2342   	; exit on error
040FAE FE 00       2343   	cp 0
040FB0 C2 90 0F 04 2344   	jp nz,lp_folder_error
040FB4             2345   
040FB4             2346   	; read the number of colors we have in the palette
040FB4 21 4B 39 04 2347   	ld hl,color_buffer
040FB8 7E          2348   	ld a,(hl)
040FB9 47          2349   	ld b,a
040FBA 23          2350   	inc hl
040FBB 7E          2351   	ld a,(hl)
040FBC 4F          2352   	ld c,a ; bc = 1st char, 2nd char or CR
040FBD             2353   
040FBD             2354   	; first is a char number ?
040FBD 78          2355   	ld a,b
040FBE FE 30       2356   	cp 48
040FC0 DA F9 10 04 2357   	jp c,lp_data_error
040FC4 FE 3A       2358   	cp 58
040FC6 D2 F9 10 04 2359   	jp nc,lp_data_error
040FCA             2360   
040FCA 79          2361   	ld a,c
040FCB FE 0D       2362   	cp 13
040FCD C2 EF 0F 04 2363   	jp nz,lp_two_numbers
040FD1             2364   
040FD1             2365   ; only one number
040FD1 78          2366   	ld a,b
040FD2 D6 30       2367   	sub 48
040FD4             2368   
040FD4 21 2E 19 04 2369   	ld hl,new_colors_count
040FD8 77          2370   	ld (hl),a
040FD9             2371   
040FD9 FE 00       2372   	cp 0
040FDB CA F9 10 04 2373   	jp z,lp_data_error
040FDF FE 03       2374   	cp 3
040FE1 DA 24 10 04 2375   	jp c,lp_two_colors
040FE5 FE 05       2376   	cp 5
040FE7 DA 45 10 04 2377   	jp c,lp_four_colors
040FEB             2378   
040FEB C3 66 10 04 2379   	jp lp_sixteen_colors
040FEF             2380   
040FEF             2381   ; two numbers
040FEF             2382   lp_two_numbers:
040FEF 79          2383   	ld a,c
040FF0 FE 30       2384   	cp 48
040FF2 DA F9 10 04 2385   	jp c,lp_data_error
040FF6 FE 3A       2386   	cp 58
040FF8 D2 F9 10 04 2387   	jp nc,lp_data_error
040FFC             2388   
040FFC 78          2389   	ld a,b
040FFD D6 30       2390   	sub 48
040FFF 01 00 00 00 2391   	ld bc,#000000
041003 47          2392   	ld b,a
041004 0E 0A       2393   	ld c,10
041006 ED 4C       2394   	mlt bc
041008 81          2395   	add a,c
041009             2396   
041009 21 2E 19 04 2397   	ld hl,new_colors_count
04100D 77          2398   	ld (hl),a
04100E             2399   
04100E FE 0A       2400   	cp 10
041010 DA F9 10 04 2401   	jp c,lp_data_error
041014 FE 11       2402   	cp 17
041016 DA 66 10 04 2403   	jp c,lp_sixteen_colors
04101A FE 41       2404   	cp 65
04101C DA 87 10 04 2405   	jp c,lp_sixty_four_colors
041020             2406   
041020 C3 F9 10 04 2407   	jp lp_data_error
041024             2408   
041024             2409   lp_two_colors:
041024 21 2D 19 04 2410   	ld hl,colors_count
041028 3E 02       2411   	ld a,2
04102A 77          2412   	ld (hl),a
04102B             2413   
04102B 47          2414   	ld b,a
04102C 21 0E 18 04 2415   	ld hl,current_pen
041030 7E          2416   	ld a,(hl)
041031 B8          2417   	cp b
041032 38 02       2418   	jr c,lptc_done
041034 05          2419   	dec b
041035 70          2420   	ld (hl),b
041036             2421   
041036             2422   lptc_done:
041036 21 2E 19 04 2423   	ld hl,new_colors_count
04103A 7E          2424   	ld a,(hl) ; real number of coulours
04103B 06 00       2425   	ld b,0 ; start wit color 0
04103D 21 4E 39 04 2426   	ld hl,palette_buffer ; palette will be got here
041041 C3 A8 10 04 2427   	jp lp_read_colors
041045             2428   
041045             2429   lp_four_colors:
041045 21 2D 19 04 2430   	ld hl,colors_count
041049 3E 04       2431   	ld a,4
04104B 77          2432   	ld (hl),a
04104C             2433   
04104C 47          2434   	ld b,a
04104D 21 0E 18 04 2435   	ld hl,current_pen
041051 7E          2436   	ld a,(hl)
041052 B8          2437   	cp b
041053 38 02       2438   	jr c,lpfc_done
041055 05          2439   	dec b
041056 70          2440   	ld (hl),b
041057             2441   
041057             2442   lpfc_done:
041057 21 2E 19 04 2443   	ld hl,new_colors_count
04105B 7E          2444   	ld a,(hl) ; real number of coulours
04105C 06 00       2445   	ld b,0 ; start wit color 0
04105E 21 4E 39 04 2446   	ld hl,palette_buffer ; palette will be got here
041062 C3 A8 10 04 2447   	jp lp_read_colors
041066             2448   
041066             2449   lp_sixteen_colors:
041066 21 2D 19 04 2450   	ld hl,colors_count
04106A 3E 10       2451   	ld a,16
04106C 77          2452   	ld (hl),a
04106D             2453   
04106D 47          2454   	ld b,a
04106E 21 0E 18 04 2455   	ld hl,current_pen
041072 7E          2456   	ld a,(hl)
041073 B8          2457   	cp b
041074 38 02       2458   	jr c,lpsc_done
041076 05          2459   	dec b
041077 70          2460   	ld (hl),b
041078             2461   
041078             2462   lpsc_done:
041078 21 2E 19 04 2463   	ld hl,new_colors_count
04107C 7E          2464   	ld a,(hl) ; real number of coulours
04107D 06 00       2465   	ld b,0 ; start wit color 0
04107F 21 4E 39 04 2466   	ld hl,palette_buffer ; palette will be got here
041083 C3 A8 10 04 2467   	jp lp_read_colors
041087             2468   
041087             2469   lp_sixty_four_colors:
041087 21 2D 19 04 2470   	ld hl,colors_count
04108B 3E 40       2471   	ld a,64
04108D 77          2472   	ld (hl),a
04108E             2473   
04108E 47          2474   	ld b,a
04108F 21 0E 18 04 2475   	ld hl,current_pen
041093 7E          2476   	ld a,(hl)
041094 B8          2477   	cp b
041095 38 02       2478   	jr c,lpsfc_done
041097 05          2479   	dec b
041098 70          2480   	ld (hl),b
041099             2481   
041099             2482   lpsfc_done:
041099 21 2E 19 04 2483   	ld hl,new_colors_count
04109D 7E          2484   	ld a,(hl) ; real number of coulours
04109E 06 00       2485   	ld b,0 ; start wit color 0
0410A0 21 4E 39 04 2486   	ld hl,palette_buffer ; palette will be got here
0410A4 C3 A8 10 04 2487   	jp lp_read_colors
0410A8             2488   
0410A8             2489   lp_read_colors:
0410A8 F5          2490   	push af
0410A9 E5          2491   	push hl
0410AA C5          2492   	push bc
0410AB             2493   
0410AB CD 11 11 04 2494   	call lp_read_tint ; read red tint
0410AF FE FF       2495   	cp 255
0410B1 CA F2 10 04 2496   	jp z,lp_wrong_exit1
0410B5             2497   
0410B5 E5          2498   	push hl
0410B6 21 2F 19 04 2499   	ld hl,red_tint
0410BA 77          2500   	ld (hl),a
0410BB E1          2501   	pop hl
0410BC             2502   
0410BC CD 11 11 04 2503   	call lp_read_tint ; read green tint
0410C0 FE FF       2504   	cp 255
0410C2 CA F1 10 04 2505   	jp z,lp_wrong_exit2
0410C6             2506   
0410C6 E5          2507   	push hl
0410C7 21 30 19 04 2508   	ld hl,green_tint
0410CB 77          2509   	ld (hl),a
0410CC E1          2510   	pop hl
0410CD             2511   
0410CD CD 11 11 04 2512   	call lp_read_tint ; read blue tint
0410D1 FE FF       2513   	cp 255
0410D3 CA F0 10 04 2514   	jp z,lp_wrong_exit3
0410D7             2515   
0410D7 E5          2516   	push hl
0410D8 21 31 19 04 2517   	ld hl,blue_tint
0410DC 77          2518   	ld (hl),a
0410DD E1          2519   	pop hl
0410DE             2520   
0410DE C1          2521   	pop bc
0410DF C5          2522   	push bc
0410E0             2523   
0410E0 CD 9E 11 04 2524   	call lp_set_tint
0410E4             2525   
0410E4 C1          2526   	pop bc
0410E5 E1          2527   	pop hl
0410E6 F1          2528   	pop af
0410E7             2529   
0410E7 04          2530   	inc b ; increment number of colors
0410E8 3D          2531   	dec a ; decrement real number of colors
0410E9 FE 00       2532   	cp 0
0410EB C2 A8 10 04 2533   	jp nz,lp_read_colors
0410EF             2534   
0410EF             2535   lp_exit:
0410EF C9          2536   	ret
0410F0             2537   
0410F0             2538   lp_wrong_exit3:
0410F0 D1          2539   	pop de
0410F1             2540   
0410F1             2541   lp_wrong_exit2:
0410F1 C1          2542   	pop bc
0410F2             2543   
0410F2             2544   lp_wrong_exit1:
0410F2 E1          2545   	pop hl
0410F3 C1          2546   	pop bc
0410F4 F1          2547   	pop af
0410F5 C3 F9 10 04 2548   	jp lp_data_error
0410F9             2549   
0410F9             2550   lp_data_error:
0410F9 CD F0 15 04 2551   	call fn_print_data_error
0410FD             2552   
0410FD C9          2553   	ret
0410FE             2554   
0410FE             2555   lp_file_error:
0410FE CD 4B 15 04 2556   	call fn_print_file_error
041102             2557   
041102             2558   	; set path to home
041102 21 A6 18 04 2559   	ld hl,back_path
041106             2560   	moscall mos_cd
041106 3E 03       0001M  		LD	A, function
041108 49 CF       0002M  		RST.LIS	08h
04110A             2561   
04110A             2562   	; exit on error
04110A FE 00       2563   	cp 0
04110C C2 90 0F 04 2564   	jp nz,lp_folder_error
041110             2565   
041110 C9          2566   	ret
041111             2567   
041111             2568   lp_read_tint:
041111 0E 00       2569   	ld c,0 ; number of chars readen for a single string number
041113 11 93 3C 04 2570   	ld de,temp_chars_buffer ; temp buffer for a string number
041117             2571   
041117             2572   	; read next string number
041117 CD 82 11 04 2573   	call lprt_read_chars
04111B             2574   
04111B 79          2575   	ld a,c
04111C FE 00       2576   	cp 0 ; no numbers
04111E CA 38 11 04 2577   	jp z,lprt_exit
041122 FE 04       2578   	cp 4 ; too many numbers
041124 D2 38 11 04 2579   	jp nc,lprt_exit
041128             2580   
041128 FE 03       2581   	cp 3
04112A 28 2A       2582   	jr z,lprt_three_int
04112C             2583   
04112C FE 02       2584   	cp 2
04112E 28 0B       2585   	jr z,lprt_two_int
041130             2586   
041130             2587   	; one int only
041130 11 93 3C 04 2588   	ld de,temp_chars_buffer
041134 1A          2589   	ld a,(de)
041135 D6 30       2590   	sub 48
041137 C9          2591   	ret
041138             2592   
041138             2593   lprt_exit:
041138 3E FF       2594   	ld a,255
04113A C9          2595   	ret
04113B             2596   
04113B             2597   ; two int
04113B             2598   lprt_two_int:
04113B C5          2599   	push bc
04113C 11 93 3C 04 2600   	ld de,temp_chars_buffer
041140 1A          2601   	ld a,(de)
041141 D6 30       2602   	sub 48
041143 D5          2603   	push de
041144 11 00 00 00 2604   	ld de,#000000
041148 5F          2605   	ld e,a
041149 16 0A       2606   	ld d,10
04114B ED 5C       2607   	mlt de
04114D 43          2608   	ld b,e
04114E D1          2609   	pop de
04114F 13          2610   	inc de
041150 1A          2611   	ld a,(de)
041151 D6 30       2612   	sub 48
041153 80          2613   	add a,b ; full int value is here
041154 C1          2614   	pop bc
041155 C9          2615   	ret
041156             2616   
041156             2617   ; three int
041156             2618   lprt_three_int:
041156 C5          2619   	push bc
041157 11 93 3C 04 2620   	ld de,temp_chars_buffer
04115B 1A          2621   	ld a,(de)
04115C D6 30       2622   	sub 48
04115E D5          2623   	push de
04115F 11 00 00 00 2624   	ld de,#000000
041163 5F          2625   	ld e,a
041164 16 64       2626   	ld d,100
041166 ED 5C       2627   	mlt de
041168 43          2628   	ld b,e
041169 D1          2629   	pop de
04116A 13          2630   	inc de
04116B 1A          2631   	ld a,(de)
04116C D6 30       2632   	sub 48
04116E D5          2633   	push de
04116F 11 00 00 00 2634   	ld de,#000000
041173 5F          2635   	ld e,a
041174 16 0A       2636   	ld d,10
041176 ED 5C       2637   	mlt de
041178 4B          2638   	ld c,e
041179 D1          2639   	pop de
04117A 13          2640   	inc de
04117B 1A          2641   	ld a,(de)
04117C D6 30       2642   	sub 48
04117E 81          2643   	add a,c
04117F 80          2644   	add a,b ; full int value is here
041180 C1          2645   	pop bc
041181 C9          2646   	ret
041182             2647   
041182             2648   lprt_read_chars:
041182 3E 0D       2649   	ld a,13
041184 12          2650   	ld (de),a ; store eol as default temp char
041185             2651   
041185 7E          2652   	ld a,(hl) ; get a new char in the palette buffer
041186 23          2653   	inc hl
041187             2654   
041187 FE 20       2655   	cp 32
041189 C8          2656   	ret z ; ret if space
04118A FE 0D       2657   	cp 13
04118C 28 F4       2658   	jr z,lprt_read_chars ; loop if CR
04118E FE 0A       2659   	cp 10
041190 C8          2660   	ret z ; ret if LF
041191 FE 30       2661   	cp 48
041193 D8          2662   	ret c ; ret if not number
041194 FE 3A       2663   	cp 58
041196 D0          2664   	ret nc ; ret if not number
041197             2665   
041197             2666   ; found a number, store it
041197 12          2667   	ld (de),a
041198 13          2668   	inc de
041199 0C          2669   	inc c
04119A             2670   
04119A C3 82 11 04 2671   	jp lprt_read_chars
04119E             2672   
04119E             2673   ; set tint (RGB = c,e,l)
04119E             2674   lp_set_tint:
04119E F5          2675   	push af
04119F C5          2676   	push bc
0411A0 D5          2677   	push de
0411A1 E5          2678   	push hl
0411A2             2679   
0411A2 C5          2680   	push bc
0411A3             2681   	vdu 19
0411A3 3E 13       0001M  		LD	A, function
0411A5 49 D7       0002M  		RST.LIS	10h
0411A7 C1          2682   	pop bc
0411A8 78          2683   	ld a,b
0411A9             2684   	vdu_a
0411A9 49 D7       0001M  		RST.LIS	10h
0411AB             2685   	vdu 255
0411AB 3E FF       0001M  		LD	A, function
0411AD 49 D7       0002M  		RST.LIS	10h
0411AF             2686   
0411AF 21 2F 19 04 2687   	ld hl,red_tint
0411B3 7E          2688   	ld a,(hl)
0411B4             2689   	vdu_a
0411B4 49 D7       0001M  		RST.LIS	10h
0411B6             2690   
0411B6 21 30 19 04 2691   	ld hl,green_tint
0411BA 7E          2692   	ld a,(hl)
0411BB             2693   	vdu_a
0411BB 49 D7       0001M  		RST.LIS	10h
0411BD             2694   
0411BD 21 31 19 04 2695   	ld hl,blue_tint
0411C1 7E          2696   	ld a,(hl)
0411C2             2697   	vdu_a
0411C2 49 D7       0001M  		RST.LIS	10h
0411C4             2698   
0411C4 E1          2699   	pop hl
0411C5 D1          2700   	pop de
0411C6 C1          2701   	pop bc
0411C7 F1          2702   	pop af
0411C8 C9          2703   	ret
0411C9             2704   
0411C9             2705   ; save the palette
0411C9             2706   fn_save_palette:
0411C9 C9          2707   	ret
0411CA             2708   
0411CA             2709   ; load a sprite, giving its full name, with extension
0411CA             2710   fn_load_sprite:
0411CA             2711   	; clear the filename on the screen
0411CA 21 84 18 04 2712   	ld hl,filename
0411CE 06 10       2713   	ld b,16
0411D0 AF          2714   	xor a
0411D1             2715   
0411D1             2716   ls_clear_filename:
0411D1 77          2717   	ld (hl),a
0411D2 23          2718   	inc hl
0411D3 10 FC       2719   	djnz ls_clear_filename
0411D5             2720   
0411D5             2721   	; get filename
0411D5 CD 97 0D 04 2722   	call fn_input_text8
0411D9             2723   
0411D9             2724   	; set path to 'sprites/'
0411D9 21 95 18 04 2725   	ld hl,sprite_path
0411DD             2726   	moscall mos_cd
0411DD 3E 03       0001M  		LD	A, function
0411DF 49 CF       0002M  		RST.LIS	08h
0411E1             2727   
0411E1             2728   	; exit on folder error
0411E1 FE 00       2729   	cp 0
0411E3 C2 B4 12 04 2730   	jp nz,ls_folder_error
0411E7             2731   
0411E7             2732   	; open the file for read
0411E7 21 84 18 04 2733   	ld hl,filename
0411EB 0E 01       2734   	ld c,fa_open_existing|fa_read
0411ED             2735   	moscall mos_fopen
0411ED 3E 0A       0001M  		LD	A, function
0411EF 49 CF       0002M  		RST.LIS	08h
0411F1             2736   
0411F1             2737   	; exit on file error
0411F1 FE 00       2738   	cp 0
0411F3 CA E6 12 04 2739   	jp z,ls_file_error
0411F7             2740   
0411F7             2741   	; filehandle -> C
0411F7 4F          2742   	ld c,a
0411F8             2743   
0411F8             2744   	; get colors count
0411F8             2745   	moscall mos_fgetc
0411F8 3E 0C       0001M  		LD	A, function
0411FA 49 CF       0002M  		RST.LIS	08h
0411FC DA 8F 12 04 2746   	jp c,ls_close_error
041200             2747   
041200 FE 41       2748   	cp MAX_COLORS + 1
041202 D2 8F 12 04 2749   	jp nc,ls_close_error
041206             2750   
041206             2751   	; store colors count
041206 21 2D 19 04 2752   	ld hl,colors_count
04120A 77          2753   	ld (hl),a
04120B             2754   
04120B             2755   	; redraw palette
04120B C5          2756   	push bc
04120C CD 6F 17 04 2757   	call fn_draw_the_palette
041210 C1          2758   	pop bc
041211             2759   
041211             2760   	; get frames count
041211             2761   	moscall mos_fgetc
041211 3E 0C       0001M  		LD	A, function
041213 49 CF       0002M  		RST.LIS	08h
041215 DA 8F 12 04 2762   	jp c,ls_close_error
041219             2763   
041219             2764   	; store frames count
041219 21 33 19 04 2765   	ld hl,frames_count
04121D 77          2766   	ld (hl),a
04121E             2767   
04121E             2768   	; set last frame as current frame
04121E 21 32 19 04 2769   	ld hl,current_frame
041222 3D          2770   	dec a
041223 77          2771   	ld (hl),a
041224             2772   
041224             2773   	; get sprite size
041224             2774   	moscall mos_fgetc
041224 3E 0C       0001M  		LD	A, function
041226 49 CF       0002M  		RST.LIS	08h
041228 DA 8F 12 04 2775   	jp c,ls_close_error
04122C             2776   
04122C             2777   	; store sprite size
04122C 21 0D 18 04 2778   	ld hl,spr_size
041230 77          2779   	ld (hl),a
041231             2780   
041231             2781   	; set 4x4 pixel width
041231 FE 04       2782   	cp SPR44
041233 20 09       2783   	jr nz,ls_next1
041235             2784   
041235 21 0C 18 04 2785   	ld hl,pixel_width
041239 06 20       2786   	ld b,SPR44_width
04123B 70          2787   	ld (hl),b
04123C 18 21       2788   	jr ls_next4
04123E             2789   
04123E             2790   ls_next1:
04123E             2791   	; set 8x8 pixel width
04123E FE 08       2792   	cp SPR88
041240 20 09       2793   	jr nz,ls_next2
041242             2794   
041242 21 0C 18 04 2795   	ld hl,pixel_width
041246 06 10       2796   	ld b,SPR88_width
041248 70          2797   	ld (hl),b
041249 18 14       2798   	jr ls_next4
04124B             2799   
04124B             2800   ls_next2:
04124B             2801   
04124B             2802   	; set 16x16 pixel width
04124B FE 10       2803   	cp SPR1616
04124D 20 09       2804   	jr nz,ls_next3
04124F             2805   
04124F 21 0C 18 04 2806   	ld hl,pixel_width
041253 06 08       2807   	ld b,SPR1616_width
041255 70          2808   	ld (hl),b
041256 18 07       2809   	jr ls_next4
041258             2810   
041258             2811   ls_next3:
041258             2812   
041258 21 0C 18 04 2813   	ld hl,pixel_width
04125C 06 04       2814   	ld b,SPR3232_width
04125E 70          2815   	ld (hl),b
04125F             2816   
04125F             2817   ls_next4:
04125F 21 00 00 00 2818   	ld hl,#000000
041263 6F          2819   	ld l,a
041264 67          2820   	ld h,a
041265 ED 6C       2821   	mlt hl ; one frame sprite length
041267 E5          2822   	push hl
041268             2823   
041268             2824   	; get frames count
041268 21 33 19 04 2825   	ld hl,frames_count
04126C 46          2826   	ld b,(hl)
04126D             2827   
04126D E1          2828   	pop hl
04126E             2829   
04126E 05          2830   	dec b
04126F 78          2831   	ld a,b
041270 FE 00       2832   	cp 0
041272 28 05       2833   	jr z,ls_read_data
041274             2834   
041274             2835   	; de = one frame sprite length
041274 E5          2836   	push hl
041275 D1          2837   	pop de
041276             2838   ls_add_length:
041276 19          2839   	add hl,de
041277 10 FD       2840   	djnz ls_add_length
041279             2841   
041279             2842   ls_read_data:
041279 E5          2843   	push hl ; all frames length
04127A E5          2844   	push hl
04127B D1          2845   	pop de
04127C 21 3B 19 04 2846   	ld hl,sprite_buffer
041280             2847   	moscall mos_fread
041280 3E 1A       0001M  		LD	A, function
041282 49 CF       0002M  		RST.LIS	08h
041284 E1          2848   	pop hl ; frame length
041285 B7          2849   	or a
041286 ED 52       2850   	sbc hl,de
041288 19          2851   	add hl,de ; compare frame length with loaded bytes
041289 20 04       2852   	jr nz,ls_close_error
04128B C3 BC 12 04 2853   	jp ls_close
04128F             2854   
04128F             2855   ls_close_error:
04128F C5          2856   	push bc
041290             2857   
041290             2858   	; read error
041290 CD 4B 15 04 2859   	call fn_print_file_error
041294             2860   
041294 C1          2861   	pop bc
041295             2862   
041295             2863   	; close the file
041295             2864   	moscall mos_fclose
041295 3E 0B       0001M  		LD	A, function
041297 49 CF       0002M  		RST.LIS	08h
041299             2865   
041299             2866   	; set path to home
041299 21 A6 18 04 2867   	ld hl,back_path
04129D             2868   	moscall mos_cd
04129D 3E 03       0001M  		LD	A, function
04129F 49 CF       0002M  		RST.LIS	08h
0412A1             2869   
0412A1             2870   	; exit on error
0412A1 FE 00       2871   	cp 0
0412A3 C2 B4 12 04 2872   	jp nz,ls_folder_error
0412A7             2873   
0412A7             2874   
0412A7             2875   	; reset current frame and coordinates of the drawing pixel
0412A7 21 08 18 04 2876   	ld hl,xpix
0412AB AF          2877   	xor a
0412AC 77          2878   	ld (hl),a
0412AD 21 09 18 04 2879   	ld hl,ypix
0412B1 77          2880   	ld (hl),a
0412B2 18 25       2881   	jr ls_exit
0412B4             2882   
0412B4             2883   ls_folder_error:
0412B4             2884   	; write error
0412B4 CD 82 15 04 2885   	call fn_print_folder_error
0412B8 C3 D9 12 04 2886   	jp ls_exit
0412BC             2887   
0412BC             2888   ls_close:
0412BC             2889   	; close the file
0412BC             2890   	moscall mos_fclose
0412BC 3E 0B       0001M  		LD	A, function
0412BE 49 CF       0002M  		RST.LIS	08h
0412C0             2891   
0412C0             2892   	; set path to home
0412C0 21 A6 18 04 2893   	ld hl,back_path
0412C4             2894   	moscall mos_cd
0412C4 3E 03       0001M  		LD	A, function
0412C6 49 CF       0002M  		RST.LIS	08h
0412C8             2895   
0412C8             2896   	; exit on error
0412C8 FE 00       2897   	cp 0
0412CA C2 B4 12 04 2898   	jp nz,ls_folder_error
0412CE             2899   
0412CE             2900   	; reset current frame and coordinates of the drawing pixel
0412CE 21 08 18 04 2901   	ld hl,xpix
0412D2 AF          2902   	xor a
0412D3 77          2903   	ld (hl),a
0412D4 21 09 18 04 2904   	ld hl,ypix
0412D8 77          2905   	ld (hl),a
0412D9             2906   
0412D9             2907   ls_exit:
0412D9 CD D1 16 04 2908   	call fn_show_spr_descr
0412DD CD 67 16 04 2909   	call fn_change_frame
0412E1 CD 8C 16 04 2910   	call fn_change_frames_count
0412E5 C9          2911   	ret
0412E6             2912   
0412E6             2913   ls_file_error:
0412E6 CD 4B 15 04 2914   	call fn_print_file_error
0412EA             2915   
0412EA             2916   	; set path to home
0412EA 21 A6 18 04 2917   	ld hl,back_path
0412EE             2918   	moscall mos_cd
0412EE 3E 03       0001M  		LD	A, function
0412F0 49 CF       0002M  		RST.LIS	08h
0412F2             2919   
0412F2             2920   	; exit on error
0412F2 FE 00       2921   	cp 0
0412F4 C2 B4 12 04 2922   	jp nz,ls_folder_error
0412F8             2923   
0412F8 C9          2924   	ret
0412F9             2925   
0412F9             2926   ; save a sprite, giving its name
0412F9             2927   fn_save_sprite:
0412F9             2928   	; clear filename on the screen
0412F9 21 84 18 04 2929   	ld hl,filename
0412FD 06 10       2930   	ld b,16
0412FF AF          2931   	xor a
041300             2932   
041300             2933   ss_clear_filename:
041300 77          2934   	ld (hl),a
041301 23          2935   	inc hl
041302 10 FC       2936   	djnz ss_clear_filename
041304             2937   
041304             2938   	; get filename
041304 CD 97 0D 04 2939   	call fn_input_text8
041308             2940   
041308             2941   	; set path to sprite path
041308 21 95 18 04 2942   	ld hl,sprite_path
04130C             2943   	moscall mos_cd
04130C 3E 03       0001M  		LD	A, function
04130E 49 CF       0002M  		RST.LIS	08h
041310             2944   
041310             2945   	; create it on error
041310 FE 00       2946   	cp 0
041312 F5          2947   	push af
041313 C4 66 17 04 2948   	call nz,fn_create_sprite_folder
041317 F1          2949   	pop af
041318 28 08       2950   	jr z,ss_next
04131A             2951   
04131A             2952   	; set path to sprite path
04131A 21 95 18 04 2953   	ld hl,sprite_path
04131E             2954   	moscall mos_cd
04131E 3E 03       0001M  		LD	A, function
041320 49 CF       0002M  		RST.LIS	08h
041322             2955   
041322             2956   ss_next:
041322             2957   	; exit on error
041322 FE 00       2958   	cp 0
041324 C2 B4 13 04 2959   	jp nz,ss_folder_error
041328             2960   
041328             2961   	; open the file for write
041328 21 84 18 04 2962   	ld hl,filename
04132C 0E 0A       2963   	ld c,fa_create_always|fa_write
04132E             2964   	moscall mos_fopen
04132E 3E 0A       0001M  		LD	A, function
041330 49 CF       0002M  		RST.LIS	08h
041332             2965   
041332             2966   	; exit on error
041332 FE 00       2967   	cp 0
041334 CA F1 13 04 2968   	jp z,ss_file_error
041338             2969   
041338             2970   	; filehandle -> C
041338 4F          2971   	ld c,a
041339             2972   
041339             2973   	; store colors count in the file
041339 21 2D 19 04 2974   	ld hl,colors_count
04133D 46          2975   	ld b,(hl)
04133E             2976   	moscall mos_fputc
04133E 3E 0D       0001M  		LD	A, function
041340 49 CF       0002M  		RST.LIS	08h
041342             2977   
041342             2978   	; store frames count in the file
041342 21 33 19 04 2979   	ld hl,frames_count
041346 46          2980   	ld b,(hl)
041347             2981   	moscall mos_fputc
041347 3E 0D       0001M  		LD	A, function
041349 49 CF       0002M  		RST.LIS	08h
04134B             2982   
04134B             2983   	; store sprite size in the file
04134B 21 0D 18 04 2984   	ld hl,spr_size
04134F 46          2985   	ld b,(hl)
041350             2986   	moscall mos_fputc
041350 3E 0D       0001M  		LD	A, function
041352 49 CF       0002M  		RST.LIS	08h
041354             2987   
041354             2988   	; de = size²
041354 21 00 00 00 2989   	ld hl,#000000
041358 68          2990   	ld l,b
041359 60          2991   	ld h,b
04135A ED 6C       2992   	mlt hl ; HL = sprite length
04135C E5          2993   	push hl
04135D             2994   
04135D             2995   	; get frames count
04135D 21 33 19 04 2996   	ld hl,frames_count
041361 46          2997   	ld b,(hl)
041362             2998   
041362 E1          2999   	pop hl
041363             3000   
041363 05          3001   	dec b
041364 78          3002   	ld a,b
041365 FE 00       3003   	cp 0
041367 28 05       3004   	jr z,ss_write_data
041369             3005   
041369 E5          3006   	push hl
04136A D1          3007   	pop de
04136B             3008   ss_add_length:
04136B 19          3009   	add hl,de
04136C 10 FD       3010   	djnz ss_add_length
04136E             3011   
04136E             3012   ss_write_data:
04136E E5          3013   	push hl
04136F E5          3014   	push hl
041370 D1          3015   	pop de
041371 21 3B 19 04 3016   	ld hl,sprite_buffer
041375             3017   	moscall mos_fwrite
041375 3E 1B       0001M  		LD	A, function
041377 49 CF       0002M  		RST.LIS	08h
041379 E1          3018   	pop hl
04137A B7          3019   	or a
04137B ED 52       3020   	sbc hl,de
04137D 19          3021   	add hl,de
04137E 20 04       3022   	jr nz,ss_close_error
041380 C3 BC 13 04 3023   	jp ss_close
041384             3024   
041384             3025   ss_close_error:
041384 C5          3026   	push bc
041385             3027   
041385             3028   	; write error
041385 CD 4B 15 04 3029   	call fn_print_file_error
041389             3030   
041389 C1          3031   	pop bc
04138A             3032   
04138A             3033   	; close the file
04138A             3034   	moscall mos_fclose
04138A 3E 0B       0001M  		LD	A, function
04138C 49 CF       0002M  		RST.LIS	08h
04138E             3035   
04138E             3036   	; set path to home
04138E 21 A6 18 04 3037   	ld hl,back_path
041392             3038   	moscall mos_cd
041392 3E 03       0001M  		LD	A, function
041394 49 CF       0002M  		RST.LIS	08h
041396             3039   
041396             3040   	; exit on error
041396 FE 00       3041   	cp 0
041398 C2 B4 13 04 3042   	jp nz,ss_folder_error
04139C             3043   
04139C             3044   	; reset current frame and coordinates of the drawing pixel
04139C 21 33 19 04 3045   	ld hl,frames_count
0413A0 7E          3046   	ld a,(hl)
0413A1 3D          3047   	dec a
0413A2 21 32 19 04 3048   	ld hl,current_frame
0413A6 77          3049   	ld (hl),a
0413A7 21 08 18 04 3050   	ld hl,xpix
0413AB AF          3051   	xor a
0413AC 77          3052   	ld (hl),a
0413AD 21 09 18 04 3053   	ld hl,ypix
0413B1 77          3054   	ld (hl),a
0413B2 18 30       3055   	jr ss_exit
0413B4             3056   
0413B4             3057   ss_folder_error:
0413B4             3058   	; write error
0413B4 CD 82 15 04 3059   	call fn_print_folder_error
0413B8 C3 E4 13 04 3060   	jp ss_exit
0413BC             3061   
0413BC             3062   ss_close:
0413BC             3063   	; close the file
0413BC             3064   	moscall mos_fclose
0413BC 3E 0B       0001M  		LD	A, function
0413BE 49 CF       0002M  		RST.LIS	08h
0413C0             3065   
0413C0             3066   	; set path to home
0413C0 21 A6 18 04 3067   	ld hl,back_path
0413C4             3068   	moscall mos_cd
0413C4 3E 03       0001M  		LD	A, function
0413C6 49 CF       0002M  		RST.LIS	08h
0413C8             3069   
0413C8             3070   	; exit on error
0413C8 FE 00       3071   	cp 0
0413CA C2 B4 13 04 3072   	jp nz,ss_folder_error
0413CE             3073   
0413CE             3074   	; reset current frame and coordinates of the drawing pixel
0413CE 21 33 19 04 3075   	ld hl,frames_count
0413D2 7E          3076   	ld a,(hl)
0413D3 3D          3077   	dec a
0413D4 21 32 19 04 3078   	ld hl,current_frame
0413D8 77          3079   	ld (hl),a
0413D9 21 08 18 04 3080   	ld hl,xpix
0413DD AF          3081   	xor a
0413DE 77          3082   	ld (hl),a
0413DF 21 09 18 04 3083   	ld hl,ypix
0413E3 77          3084   	ld (hl),a
0413E4             3085   
0413E4             3086   ss_exit:
0413E4 CD D1 16 04 3087   	call fn_show_spr_descr
0413E8 CD 67 16 04 3088   	call fn_change_frame
0413EC CD 8C 16 04 3089   	call fn_change_frames_count
0413F0 C9          3090   	ret
0413F1             3091   
0413F1             3092   ss_file_error:
0413F1 CD 4B 15 04 3093   	call fn_print_file_error
0413F5             3094   
0413F5             3095   	; set path to home
0413F5 21 A6 18 04 3096   	ld hl,back_path
0413F9             3097   	moscall mos_cd
0413F9 3E 03       0001M  		LD	A, function
0413FB 49 CF       0002M  		RST.LIS	08h
0413FD             3098   
0413FD             3099   	; exit on error
0413FD FE 00       3100   	cp 0
0413FF C2 B4 13 04 3101   	jp nz,ss_folder_error
041403 C9          3102   	ret
041404             3103   
041404             3104   ; export sprite data in assembly language, giving its name
041404             3105   fn_export_sprite:
041404             3106   	; clear filename
041404 21 84 18 04 3107   	ld hl,filename
041408 06 10       3108   	ld b,16
04140A AF          3109   	xor a
04140B             3110   
04140B             3111   es_clear_filename:
04140B 77          3112   	ld (hl),a
04140C 23          3113   	inc hl
04140D 10 FC       3114   	djnz es_clear_filename
04140F             3115   
04140F             3116   	; get filename
04140F CD 97 0D 04 3117   	call fn_input_text8
041413             3118   
041413             3119   	; set path to sprite path
041413 21 95 18 04 3120   	ld hl,sprite_path
041417             3121   	moscall mos_cd
041417 3E 03       0001M  		LD	A, function
041419 49 CF       0002M  		RST.LIS	08h
04141B             3122   
04141B             3123   	; create it on error
04141B FE 00       3124   	cp 0
04141D F5          3125   	push af
04141E C4 66 17 04 3126   	call nz,fn_create_sprite_folder
041422 F1          3127   	pop af
041423 28 0E       3128   	jr z,es_next
041425             3129   
041425             3130   	; set path to sprite path
041425 21 95 18 04 3131   	ld hl,sprite_path
041429             3132   	moscall mos_cd
041429 3E 03       0001M  		LD	A, function
04142B 49 CF       0002M  		RST.LIS	08h
04142D             3133   
04142D             3134   	; exit on error
04142D FE 00       3135   	cp 0
04142F C2 2F 15 04 3136   	jp nz,es_folder_error
041433             3137   
041433             3138   es_next:
041433             3139   	; open the file for write
041433 21 84 18 04 3140   	ld hl,filename
041437 0E 0A       3141   	ld c,fa_create_always|fa_write
041439             3142   	moscall mos_fopen
041439 3E 0A       0001M  		LD	A, function
04143B 49 CF       0002M  		RST.LIS	08h
04143D             3143   
04143D             3144   	; exit on error
04143D FE 00       3145   	cp 0
04143F CA 38 15 04 3146   	jp z,es_file_error
041443             3147   
041443             3148   	; filehandle -> C
041443 4F          3149   	ld c,a
041444             3150   
041444             3151   
041444             3152   	; L = first frame
041444 3E 00       3153   	ld a,0
041446 21 3B 19 04 3154   	ld hl,sprite_buffer
04144A 11 00 00 00 3155   	ld de,$000000
04144E             3156   
04144E             3157   es_frames_repeat:
04144E F5          3158   	push af
04144F E5          3159   	push hl
041450             3160   
041450 F5          3161   	push af
041451             3162   
041451             3163   	; start to write...
041451 1E 00       3164   	ld e,0 ; rows
041453             3165   
041453 06 3B       3166   	ld b,';'
041455             3167   	moscall mos_fputc
041455 3E 0D       0001M  		LD	A, function
041457 49 CF       0002M  		RST.LIS	08h
041459             3168   
041459 06 20       3169   	ld b,' '
04145B             3170   	moscall mos_fputc
04145B 3E 0D       0001M  		LD	A, function
04145D 49 CF       0002M  		RST.LIS	08h
04145F             3171   
04145F 06 46       3172   	ld b,'F'
041461             3173   	moscall mos_fputc
041461 3E 0D       0001M  		LD	A, function
041463 49 CF       0002M  		RST.LIS	08h
041465             3174   
041465 06 72       3175   	ld b,'r'
041467             3176   	moscall mos_fputc
041467 3E 0D       0001M  		LD	A, function
041469 49 CF       0002M  		RST.LIS	08h
04146B             3177   
04146B 06 6D       3178   	ld b,'m'
04146D             3179   	moscall mos_fputc
04146D 3E 0D       0001M  		LD	A, function
04146F 49 CF       0002M  		RST.LIS	08h
041471             3180   
041471 06 20       3181   	ld b,' '
041473             3182   	moscall mos_fputc
041473 3E 0D       0001M  		LD	A, function
041475 49 CF       0002M  		RST.LIS	08h
041477             3183   
041477 F1          3184   	pop af
041478 C6 30       3185   	add a,'0'
04147A 47          3186   	ld b,a
04147B             3187   	moscall mos_fputc
04147B 3E 0D       0001M  		LD	A, function
04147D 49 CF       0002M  		RST.LIS	08h
04147F             3188   
04147F 06 0D       3189   	ld b,13
041481             3190   	moscall mos_fputc
041481 3E 0D       0001M  		LD	A, function
041483 49 CF       0002M  		RST.LIS	08h
041485             3191   
041485 06 0A       3192   	ld b,10
041487             3193   	moscall mos_fputc
041487 3E 0D       0001M  		LD	A, function
041489 49 CF       0002M  		RST.LIS	08h
04148B             3194   
04148B             3195   es_repeat:
04148B             3196   
04148B 06 44       3197   	ld b,'D'
04148D             3198   	moscall mos_fputc
04148D 3E 0D       0001M  		LD	A, function
04148F 49 CF       0002M  		RST.LIS	08h
041491             3199   
041491 06 42       3200   	ld b,'B'
041493             3201   	moscall mos_fputc
041493 3E 0D       0001M  		LD	A, function
041495 49 CF       0002M  		RST.LIS	08h
041497             3202   
041497 06 20       3203   	ld b,' '
041499             3204   	moscall mos_fputc
041499 3E 0D       0001M  		LD	A, function
04149B 49 CF       0002M  		RST.LIS	08h
04149D             3205   
04149D 16 00       3206   	ld d,0 ; columns
04149F             3207   
04149F             3208   es_repeat_line:
04149F D5          3209   	push de
0414A0             3210   
0414A0 7E          3211   	ld a,(hl)
0414A1 23          3212   	inc hl
0414A2             3213   
0414A2             3214   	; convert A to BCD
0414A2 CD EB 17 04 3215   	call fn_hex2bcd
0414A6             3216   
0414A6             3217   	; write two numbers (chars)
0414A6 5F          3218   	ld e,a
0414A7 E6 F0       3219   	and $f0
0414A9 0F          3220   	rrca
0414AA 0F          3221   	rrca
0414AB 0F          3222   	rrca
0414AC 0F          3223   	rrca
0414AD C6 30       3224   	add '0'
0414AF             3225   
0414AF 47          3226   	ld b,a
0414B0             3227   	moscall mos_fputc
0414B0 3E 0D       0001M  		LD	A, function
0414B2 49 CF       0002M  		RST.LIS	08h
0414B4             3228   
0414B4 7B          3229   	ld a,e
0414B5 E6 0F       3230   	and $0f
0414B7 C6 30       3231   	add '0'
0414B9             3232   
0414B9 47          3233   	ld b,a
0414BA             3234   	moscall mos_fputc
0414BA 3E 0D       0001M  		LD	A, function
0414BC 49 CF       0002M  		RST.LIS	08h
0414BE             3235   
0414BE D1          3236   	pop de
0414BF 14          3237   	inc d
0414C0 3A 0D 18 04 3238   	ld a,(spr_size)
0414C4 BA          3239   	cp d
0414C5 F5          3240   	push af
0414C6 C4 E4 17 04 3241   	call nz,fn_comma
0414CA F1          3242   	pop af
0414CB C2 9F 14 04 3243   	jp nz,es_repeat_line
0414CF             3244   
0414CF 06 0D       3245   	ld b,13 ; CR
0414D1             3246   	moscall mos_fputc
0414D1 3E 0D       0001M  		LD	A, function
0414D3 49 CF       0002M  		RST.LIS	08h
0414D5             3247   
0414D5 06 0A       3248   	ld b,10 ; LF
0414D7             3249   	moscall mos_fputc
0414D7 3E 0D       0001M  		LD	A, function
0414D9 49 CF       0002M  		RST.LIS	08h
0414DB             3250   
0414DB 1C          3251   	inc e
0414DC 3A 0D 18 04 3252   	ld a,(spr_size)
0414E0 BB          3253   	cp e
0414E1 C2 8B 14 04 3254   	jp nz,es_repeat
0414E5             3255   
0414E5 06 0D       3256   	ld b,13 ; CR
0414E7             3257   	moscall mos_fputc
0414E7 3E 0D       0001M  		LD	A, function
0414E9 49 CF       0002M  		RST.LIS	08h
0414EB             3258   
0414EB 06 0A       3259   	ld b,10 ; LF
0414ED             3260   	moscall mos_fputc
0414ED 3E 0D       0001M  		LD	A, function
0414EF 49 CF       0002M  		RST.LIS	08h
0414F1             3261   
0414F1 E1          3262   	pop hl
0414F2 D5          3263   	push de
0414F3 ED 5C       3264   	mlt de
0414F5 19          3265   	add hl,de
0414F6 D1          3266   	pop de
0414F7 F1          3267   	pop af
0414F8 3C          3268   	inc a
0414F9 DD 21 33 19 3269   	ld ix,frames_count
       04          
0414FE DD BE 00    3270   	cp (ix+0)
041501 C2 4E 14 04 3271   	jp nz,es_frames_repeat
041505             3272   
041505             3273   	; close the file
041505             3274   	moscall mos_fclose
041505 3E 0B       0001M  		LD	A, function
041507 49 CF       0002M  		RST.LIS	08h
041509             3275   
041509             3276   	; set path to home
041509 21 A6 18 04 3277   	ld hl,back_path
04150D             3278   	moscall mos_cd
04150D 3E 03       0001M  		LD	A, function
04150F 49 CF       0002M  		RST.LIS	08h
041511             3279   
041511             3280   	; exit on error
041511 FE 00       3281   	cp 0
041513 C2 2F 15 04 3282   	jp nz,es_folder_error
041517             3283   
041517             3284   	; reset current frame and coordinates of the drawing pixel
041517 21 33 19 04 3285   	ld hl,frames_count
04151B 7E          3286   	ld a,(hl)
04151C 3D          3287   	dec a
04151D 21 32 19 04 3288   	ld hl,current_frame
041521 77          3289   	ld (hl),a
041522 21 08 18 04 3290   	ld hl,xpix
041526 AF          3291   	xor a
041527 77          3292   	ld (hl),a
041528 21 09 18 04 3293   	ld hl,ypix
04152C 77          3294   	ld (hl),a
04152D 18 08       3295   	jr es_exit
04152F             3296   
04152F             3297   es_folder_error:
04152F             3298   	; write error
04152F CD 82 15 04 3299   	call fn_print_folder_error
041533 C3 37 15 04 3300   	jp es_exit
041537             3301   
041537             3302   es_exit:
041537 C9          3303   	ret
041538             3304   
041538             3305   es_file_error:
041538 CD 4B 15 04 3306   	call fn_print_file_error
04153C             3307   
04153C             3308   	; set path to home
04153C 21 A6 18 04 3309   	ld hl,back_path
041540             3310   	moscall mos_cd
041540 3E 03       0001M  		LD	A, function
041542 49 CF       0002M  		RST.LIS	08h
041544             3311   
041544             3312   	; exit on error
041544 FE 00       3313   	cp 0
041546 C2 2F 15 04 3314   	jp nz,es_folder_error
04154A C9          3315   	ret
04154B             3316   
04154B             3317   ; print 'file error'
04154B             3318   fn_print_file_error:
04154B             3319   	vdu 7
04154B 3E 07       0001M  		LD	A, function
04154D 49 D7       0002M  		RST.LIS	10h
04154F             3320   
04154F             3321   	; locate x,y
04154F             3322   	vdu 31
04154F 3E 1F       0001M  		LD	A, function
041551 49 D7       0002M  		RST.LIS	10h
041553             3323   	vdu FILENAME_X
041553 3E 07       0001M  		LD	A, function
041555 49 D7       0002M  		RST.LIS	10h
041557             3324   	vdu FILENAME_Y
041557 3E 18       0001M  		LD	A, function
041559 49 D7       0002M  		RST.LIS	10h
04155B             3325   
04155B             3326   	; print text
04155B 21 C5 18 04 3327   	ld hl,file_error
04155F 01 00 00 00 3328   	ld bc,0
041563 AF          3329   	xor a
041564 49 DF       3330   	rst.lis $18
041566             3331   
041566 CD 90 0D 04 3332   	call fn_input_key
04156A             3333   
04156A             3334   	; locate x,y
04156A             3335   	vdu 31
04156A 3E 1F       0001M  		LD	A, function
04156C 49 D7       0002M  		RST.LIS	10h
04156E             3336   	vdu FILENAME_X
04156E 3E 07       0001M  		LD	A, function
041570 49 D7       0002M  		RST.LIS	10h
041572             3337   	vdu FILENAME_Y
041572 3E 18       0001M  		LD	A, function
041574 49 D7       0002M  		RST.LIS	10h
041576             3338   
041576             3339   	; print text
041576 21 AB 18 04 3340   	ld hl,void_filename
04157A 01 00 00 00 3341   	ld bc,0
04157E AF          3342   	xor a
04157F 49 DF       3343   	rst.lis $18
041581             3344   
041581 C9          3345   	ret
041582             3346   
041582             3347   ; print 'folder error'
041582             3348   fn_print_folder_error:
041582             3349   	vdu 7
041582 3E 07       0001M  		LD	A, function
041584 49 D7       0002M  		RST.LIS	10h
041586             3350   
041586             3351   	; locate x,y
041586             3352   	vdu 31
041586 3E 1F       0001M  		LD	A, function
041588 49 D7       0002M  		RST.LIS	10h
04158A             3353   	vdu FILENAME_X
04158A 3E 07       0001M  		LD	A, function
04158C 49 D7       0002M  		RST.LIS	10h
04158E             3354   	vdu FILENAME_Y
04158E 3E 18       0001M  		LD	A, function
041590 49 D7       0002M  		RST.LIS	10h
041592             3355   
041592             3356   	; print text
041592 21 DF 18 04 3357   	ld hl,folder_error
041596 01 00 00 00 3358   	ld bc,0
04159A AF          3359   	xor a
04159B 49 DF       3360   	rst.lis $18
04159D             3361   
04159D CD 90 0D 04 3362   	call fn_input_key
0415A1             3363   
0415A1             3364   	; locate x,y
0415A1             3365   	vdu 31
0415A1 3E 1F       0001M  		LD	A, function
0415A3 49 D7       0002M  		RST.LIS	10h
0415A5             3366   	vdu FILENAME_X
0415A5 3E 07       0001M  		LD	A, function
0415A7 49 D7       0002M  		RST.LIS	10h
0415A9             3367   	vdu FILENAME_Y
0415A9 3E 18       0001M  		LD	A, function
0415AB 49 D7       0002M  		RST.LIS	10h
0415AD             3368   
0415AD             3369   	; print text
0415AD 21 AB 18 04 3370   	ld hl,void_filename
0415B1 01 00 00 00 3371   	ld bc,0
0415B5 AF          3372   	xor a
0415B6 49 DF       3373   	rst.lis $18
0415B8             3374   
0415B8 C9          3375   	ret
0415B9             3376   
0415B9             3377   ; print 'header error'
0415B9             3378   fn_print_header_error:
0415B9             3379   	vdu 7
0415B9 3E 07       0001M  		LD	A, function
0415BB 49 D7       0002M  		RST.LIS	10h
0415BD             3380   
0415BD             3381   	; locate x,y
0415BD             3382   	vdu 31
0415BD 3E 1F       0001M  		LD	A, function
0415BF 49 D7       0002M  		RST.LIS	10h
0415C1             3383   	vdu FILENAME_X
0415C1 3E 07       0001M  		LD	A, function
0415C3 49 D7       0002M  		RST.LIS	10h
0415C5             3384   	vdu FILENAME_Y
0415C5 3E 18       0001M  		LD	A, function
0415C7 49 D7       0002M  		RST.LIS	10h
0415C9             3385   
0415C9             3386   	; print text
0415C9 21 F9 18 04 3387   	ld hl,header_error
0415CD 01 00 00 00 3388   	ld bc,0
0415D1 AF          3389   	xor a
0415D2 49 DF       3390   	rst.lis $18
0415D4             3391   
0415D4 CD 90 0D 04 3392   	call fn_input_key
0415D8             3393   
0415D8             3394   	; locate x,y
0415D8             3395   	vdu 31
0415D8 3E 1F       0001M  		LD	A, function
0415DA 49 D7       0002M  		RST.LIS	10h
0415DC             3396   	vdu FILENAME_X
0415DC 3E 07       0001M  		LD	A, function
0415DE 49 D7       0002M  		RST.LIS	10h
0415E0             3397   	vdu FILENAME_Y
0415E0 3E 18       0001M  		LD	A, function
0415E2 49 D7       0002M  		RST.LIS	10h
0415E4             3398   
0415E4             3399   	; print text
0415E4 21 AB 18 04 3400   	ld hl,void_filename
0415E8 01 00 00 00 3401   	ld bc,0
0415EC AF          3402   	xor a
0415ED 49 DF       3403   	rst.lis $18
0415EF             3404   
0415EF C9          3405   	ret
0415F0             3406   
0415F0             3407   ; print 'data error'
0415F0             3408   fn_print_data_error:
0415F0             3409   	vdu 7
0415F0 3E 07       0001M  		LD	A, function
0415F2 49 D7       0002M  		RST.LIS	10h
0415F4             3410   
0415F4             3411   	; locate x,y
0415F4             3412   	vdu 31
0415F4 3E 1F       0001M  		LD	A, function
0415F6 49 D7       0002M  		RST.LIS	10h
0415F8             3413   	vdu FILENAME_X
0415F8 3E 07       0001M  		LD	A, function
0415FA 49 D7       0002M  		RST.LIS	10h
0415FC             3414   	vdu FILENAME_Y
0415FC 3E 18       0001M  		LD	A, function
0415FE 49 D7       0002M  		RST.LIS	10h
041600             3415   
041600             3416   	; print text
041600 21 13 19 04 3417   	ld hl,data_error
041604 01 00 00 00 3418   	ld bc,0
041608 AF          3419   	xor a
041609 49 DF       3420   	rst.lis $18
04160B             3421   
04160B CD 90 0D 04 3422   	call fn_input_key
04160F             3423   
04160F             3424   	; locate x,y
04160F             3425   	vdu 31
04160F 3E 1F       0001M  		LD	A, function
041611 49 D7       0002M  		RST.LIS	10h
041613             3426   	vdu FILENAME_X
041613 3E 07       0001M  		LD	A, function
041615 49 D7       0002M  		RST.LIS	10h
041617             3427   	vdu FILENAME_Y
041617 3E 18       0001M  		LD	A, function
041619 49 D7       0002M  		RST.LIS	10h
04161B             3428   
04161B             3429   	; print text
04161B 21 AB 18 04 3430   	ld hl,void_filename
04161F 01 00 00 00 3431   	ld bc,0
041623 AF          3432   	xor a
041624 49 DF       3433   	rst.lis $18
041626             3434   
041626 C9          3435   	ret
041627             3436   
041627             3437   ; refresh all the current sprite frame
041627             3438   fn_refresh_sprite:
041627 06 00       3439   	ld b,0 ; B -> x cordinate
041629 0E 00       3440   	ld c,0 ; C -> y cordinate
04162B             3441   
04162B             3442   rs_loop:
04162B C5          3443   	push bc
04162C             3444   
04162C 21 08 18 04 3445   	ld hl,xpix
041630 70          3446   	ld (hl),b
041631 21 09 18 04 3447   	ld hl,ypix
041635 71          3448   	ld (hl),c
041636 CD 22 0C 04 3449   	call fn_draw_pixel_without_border
04163A             3450   
04163A C1          3451   	pop bc
04163B             3452   
04163B 04          3453   	inc b
04163C 21 0D 18 04 3454   	ld hl,spr_size
041640 7E          3455   	ld a,(hl)
041641 B8          3456   	cp b
041642 28 04       3457   	jr z,rs_next_line
041644 C3 2B 16 04 3458   	jp rs_loop
041648             3459   
041648             3460   rs_next_line:
041648 06 00       3461   	ld b,0
04164A 0C          3462   	inc c
04164B 21 0D 18 04 3463   	ld hl,spr_size
04164F 7E          3464   	ld a,(hl)
041650 B9          3465   	cp c
041651 28 04       3466   	jr z,rs_end
041653 C3 2B 16 04 3467   	jp rs_loop
041657             3468   
041657             3469   rs_end:
041657 AF          3470   	xor a
041658 21 08 18 04 3471   	ld hl,xpix
04165C 77          3472   	ld (hl),a
04165D 21 09 18 04 3473   	ld hl,ypix
041661 77          3474   	ld (hl),a
041662 CD 0E 0C 04 3475   	call fn_draw_pixel_with_border
041666             3476   
041666 C9          3477   	ret
041667             3478   
041667             3479   fn_change_frame:
041667 21 32 19 04 3480   	ld hl,current_frame
04166B 7E          3481   	ld a,(hl)
04166C 3C          3482   	inc a
04166D C6 30       3483   	add a,48
04166F 21 34 19 04 3484   	ld hl,current_frame_ascii
041673 77          3485   	ld (hl),a
041674             3486   
041674             3487   	; locate 21,3
041674             3488   	vdu 31
041674 3E 1F       0001M  		LD	A, function
041676 49 D7       0002M  		RST.LIS	10h
041678             3489   	vdu 21
041678 3E 15       0001M  		LD	A, function
04167A 49 D7       0002M  		RST.LIS	10h
04167C             3490   	vdu 3
04167C 3E 03       0001M  		LD	A, function
04167E 49 D7       0002M  		RST.LIS	10h
041680             3491   
041680             3492   	; print text
041680 21 34 19 04 3493   	ld hl,current_frame_ascii
041684 01 00 00 00 3494   	ld bc,0
041688 AF          3495   	xor a
041689 49 DF       3496   	rst.lis $18
04168B             3497   
04168B C9          3498   	ret
04168C             3499   
04168C             3500   fn_change_frames_count:
04168C 21 33 19 04 3501   	ld hl,frames_count
041690 7E          3502   	ld a,(hl)
041691 C6 30       3503   	add a,48
041693 21 36 19 04 3504   	ld hl,frames_count_ascii
041697 77          3505   	ld (hl),a
041698             3506   
041698             3507   	; locate 23,3
041698             3508   	vdu 31
041698 3E 1F       0001M  		LD	A, function
04169A 49 D7       0002M  		RST.LIS	10h
04169C             3509   	vdu 23
04169C 3E 17       0001M  		LD	A, function
04169E 49 D7       0002M  		RST.LIS	10h
0416A0             3510   	vdu 3
0416A0 3E 03       0001M  		LD	A, function
0416A2 49 D7       0002M  		RST.LIS	10h
0416A4             3511   
0416A4             3512   	; print text
0416A4 21 36 19 04 3513   	ld hl,frames_count_ascii
0416A8 01 00 00 00 3514   	ld bc,0
0416AC AF          3515   	xor a
0416AD 49 DF       3516   	rst.lis $18
0416AF             3517   
0416AF C9          3518   	ret
0416B0             3519   
0416B0             3520   ; slowdown (wait delay)
0416B0             3521   fn_slowdown:
0416B0 DD 21 38 19 3522   	ld ix,keydata
       04          
0416B5 DD 7E 02    3523   	ld a,(ix+2)
0416B8 E6 02       3524   	and 2
0416BA FE 02       3525   	cp 2 ; shift key to disable delay
0416BC C8          3526   	ret z
0416BD             3527   
0416BD             3528   	moscall mos_sysvars
0416BD 3E 08       0001M  		LD	A, function
0416BF 49 CF       0002M  		RST.LIS	08h
0416C1 DD 4E 00    3529   	ld c,(ix+sysvar_time)
0416C4             3530   
0416C4             3531   sd_loop:
0416C4             3532   	moscall mos_sysvars
0416C4 3E 08       0001M  		LD	A, function
0416C6 49 CF       0002M  		RST.LIS	08h
0416C8 DD 7E 00    3533   	ld a,(ix+sysvar_time)
0416CB 91          3534   	sub c
0416CC FE 14       3535   	cp SLOWDOWN_DELAY
0416CE 20 F4       3536   	jr nz,sd_loop
0416D0 C9          3537   	ret
0416D1             3538   
0416D1             3539   fn_show_spr_descr:
0416D1             3540   	; locate 15,3
0416D1             3541   	vdu 31
0416D1 3E 1F       0001M  		LD	A, function
0416D3 49 D7       0002M  		RST.LIS	10h
0416D5             3542   	vdu 15
0416D5 3E 0F       0001M  		LD	A, function
0416D7 49 D7       0002M  		RST.LIS	10h
0416D9             3543   	vdu 3
0416D9 3E 03       0001M  		LD	A, function
0416DB 49 D7       0002M  		RST.LIS	10h
0416DD             3544   
0416DD             3545   	; print text
0416DD 21 58 18 04 3546   	ld hl,spr_descr
0416E1 01 00 00 00 3547   	ld bc,0
0416E5 AF          3548   	xor a
0416E6 49 DF       3549   	rst.lis $18
0416E8             3550   
0416E8             3551   	; locate 15,5
0416E8             3552   	vdu 31
0416E8 3E 1F       0001M  		LD	A, function
0416EA 49 D7       0002M  		RST.LIS	10h
0416EC             3553   	vdu 15
0416EC 3E 0F       0001M  		LD	A, function
0416EE 49 D7       0002M  		RST.LIS	10h
0416F0             3554   	vdu 5
0416F0 3E 05       0001M  		LD	A, function
0416F2 49 D7       0002M  		RST.LIS	10h
0416F4             3555   
0416F4             3556   	; check for sprite size...
0416F4 21 0D 18 04 3557   	ld hl,spr_size
0416F8 7E          3558   	ld a,(hl)
0416F9             3559   
0416F9 FE 04       3560   	cp 4
0416FB 20 0C       3561   	jr nz,ssd_8x8
0416FD             3562   
0416FD             3563   	; print text 4x4
0416FD 21 62 18 04 3564   	ld hl,spr_descr1
041701 01 00 00 00 3565   	ld bc,0
041705 AF          3566   	xor a
041706 49 DF       3567   	rst.lis $18
041708 C9          3568   	ret
041709             3569   
041709             3570   ssd_8x8:
041709 FE 08       3571   	cp 8
04170B 20 0C       3572   	jr nz,ssd_16x16
04170D             3573   
04170D             3574   	; print text 8x8
04170D 21 68 18 04 3575   	ld hl,spr_descr2
041711 01 00 00 00 3576   	ld bc,0
041715 AF          3577   	xor a
041716 49 DF       3578   	rst.lis $18
041718 C9          3579   	ret
041719             3580   
041719             3581   ssd_16x16:
041719 FE 10       3582   	cp 16
04171B 20 0C       3583   	jr nz,ssd_32x32
04171D             3584   
04171D             3585   	; print text 16x16
04171D 21 6E 18 04 3586   	ld hl,spr_descr3
041721 01 00 00 00 3587   	ld bc,0
041725 AF          3588   	xor a
041726 49 DF       3589   	rst.lis $18
041728 C9          3590   	ret
041729             3591   
041729             3592   ssd_32x32:
041729             3593   	; print text 32x32
041729 21 74 18 04 3594   	ld hl,spr_descr4
04172D 01 00 00 00 3595   	ld bc,0
041731 AF          3596   	xor a
041732 49 DF       3597   	rst.lis $18
041734             3598   
041734 C9          3599   	ret
041735             3600   
041735             3601   ; input: HL = negative key to check
041735             3602   fn_inkey:
041735             3603   	moscall mos_getkbmap
041735 3E 1E       0001M  		LD	A, function
041737 49 CF       0002M  		RST.LIS	08h
041739 23          3604   	INC	HL
04173A 7D          3605   	LD	A, L
04173B ED 44       3606   	NEG
04173D 4F          3607   	LD	C, A
04173E 3E 01       3608   	LD	A, 1
041740 FA 64 17 04 3609   	JP	M,i_false ; < -128 ?
041744             3610   
041744 21 45 00 04 3611   	LD	HL,BITLOOKUP
041748 11 00 00 00 3612   	LD	DE,0
04174C 79          3613   	LD	A,C
04174D E6 07       3614   	AND	00000111b
04174F 5F          3615   	LD	E,A
041750 19          3616   	ADD	HL,DE
041751 46          3617   	LD	B,(HL)
041752             3618   
041752 79          3619   	LD	A,C
041753 E6 78       3620   	AND	01111000b
041755 0F          3621   	RRCA
041756 0F          3622   	RRCA
041757 0F          3623   	RRCA
041758 5F          3624   	LD	E, A
041759 DD 19       3625   	ADD	IX,DE
04175B DD 7E 00    3626   	LD	A,(IX+0)
04175E A0          3627   	AND	B
04175F 28 03       3628   	JR Z,i_false
041761 3E 01       3629   	LD A,1
041763 C9          3630   	RET
041764             3631   i_false:
041764 AF          3632   	XOR A
041765 C9          3633   	RET
041766             3634   
041766             3635   fn_create_sprite_folder:
041766 21 95 18 04 3636   	ld hl,sprite_path
04176A             3637   	moscall mos_mkdir
04176A 3E 07       0001M  		LD	A, function
04176C 49 CF       0002M  		RST.LIS	08h
04176E C9          3638   	ret
04176F             3639   
04176F             3640   ; draw the palette
04176F             3641   fn_draw_the_palette:
04176F 0E 00       3642   	ld c,0
041771             3643   
041771             3644   fndtp_palette_loop:
041771 C5          3645   	push bc
041772             3646   
041772             3647   	; choose palette color
041772             3648   	vdu 18
041772 3E 12       0001M  		LD	A, function
041774 49 D7       0002M  		RST.LIS	10h
041776             3649   	vdu 0
041776 3E 00       0001M  		LD	A, function
041778 49 D7       0002M  		RST.LIS	10h
04177A C1          3650   	pop bc
04177B C5          3651   	push bc
04177C 79          3652   	ld a,c
04177D F5          3653   	push af
04177E             3654   	vdu_a
04177E 49 D7       0001M  		RST.LIS	10h
041780 F1          3655   	pop af
041781 E5          3656   	push hl
041782 21 2D 19 04 3657   	ld hl,colors_count
041786 BE          3658   	cp (hl)
041787 E1          3659   	pop hl
041788 38 0B       3660   	jr c,fndtppl_zap
04178A             3661   
04178A             3662   	; set 0 if color is out of palette
04178A             3663   	vdu 18
04178A 3E 12       0001M  		LD	A, function
04178C 49 D7       0002M  		RST.LIS	10h
04178E             3664   	vdu 0
04178E 3E 00       0001M  		LD	A, function
041790 49 D7       0002M  		RST.LIS	10h
041792 AF          3665   	xor a
041793             3666   	vdu_a
041793 49 D7       0001M  		RST.LIS	10h
041795             3667   
041795             3668   fndtppl_zap:
041795             3669   	; store coordinates for a palette square
041795 DD 21 F8 17 3670   	ld ix,x1
       04          
04179A E1          3671   	pop hl
04179B E5          3672   	push hl
04179C 26 05       3673   	ld h,5
04179E ED 6C       3674   	mlt hl
0417A0 E5          3675   	push hl
0417A1 DD 75 00    3676   	ld (ix+0),l
0417A4 DD 74 01    3677   	ld (ix+1),h
0417A7             3678   
0417A7 DD 21 FA 17 3679   	ld ix,y1
       04          
0417AC 21 00 00 00 3680   	ld hl,0
0417B0 DD 75 00    3681   	ld (ix+0),l
0417B3 DD 74 01    3682   	ld (ix+1),h
0417B6             3683   
0417B6 DD 21 FC 17 3684   	ld ix,x2
       04          
0417BB E1          3685   	pop hl
0417BC 11 04 00 00 3686   	ld de,4
0417C0 19          3687   	add hl,de
0417C1 DD 75 00    3688   	ld (ix+0),l
0417C4 DD 74 01    3689   	ld (ix+1),h
0417C7             3690   
0417C7 DD 21 FE 17 3691   	ld ix,y2
       04          
0417CC 21 0A 00 00 3692   	ld hl,10
0417D0 DD 75 00    3693   	ld (ix+0),l
0417D3 DD 74 01    3694   	ld (ix+1),h
0417D6             3695   
0417D6             3696   	; draw the palette filled square
0417D6 CD 40 0B 04 3697   	call fn_rectf
0417DA             3698   
0417DA             3699   	; next color ?
0417DA C1          3700   	pop bc
0417DB 0C          3701   	inc c
0417DC 79          3702   	ld a,c
0417DD FE 40       3703   	cp MAX_COLORS
0417DF C2 71 17 04 3704   	jp nz,fndtp_palette_loop
0417E3             3705   
0417E3 C9          3706   	ret
0417E4             3707   
0417E4             3708   fn_comma:
0417E4 06 2C       3709   	ld b,','
0417E6             3710   	moscall mos_fputc
0417E6 3E 0D       0001M  		LD	A, function
0417E8 49 CF       0002M  		RST.LIS	08h
0417EA C9          3711   	ret
0417EB             3712   
0417EB             3713   ; Hex to BCD
0417EB             3714   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
0417EB             3715   ; Input: a = hex number
0417EB             3716   ; Output: a = BCD number
0417EB             3717   ; Clobbers: b,c
0417EB             3718   fn_hex2bcd:
0417EB C5          3719   		push bc
0417EC 4F          3720   		ld c,a  ; Original (hex) number
0417ED 06 08       3721   		ld b,8  ; How many bits
0417EF AF          3722   		xor a   ; Output (BCD) number, starts at 0
0417F0 CB 21       3723   htb:	sla c   ; shift c into carry
0417F2 8F          3724   		adc a,a
0417F3 27          3725   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
0417F4 10 FA       3726   		djnz htb  ; Repeat for 8 bits
0417F6 C1          3727   		pop bc
0417F7 C9          3728   		ret
0417F8             3729   
0417F8             3730   ;======================================================================
0417F8             3731   
0417F8             3732   ; coordinates for rectangles
0417F8             3733   x1:
0417F8 00 00       3734   	dw $0000
0417FA             3735   y1:
0417FA 00 00       3736   	dw $0000
0417FC             3737   x2:
0417FC 00 00       3738   	dw $0000
0417FE             3739   y2:
0417FE 00 00       3740   	dw $0000
041800             3741   
041800             3742   ; coordinates of the edited sprite
041800             3743   xs1:
041800 5F 00       3744   	dw 95
041802             3745   ys1:
041802 37 00       3746   	dw 55
041804             3747   xs2:
041804 E0 00       3748   	dw 224
041806             3749   ys2:
041806 B8 00       3750   	dw 184
041808             3751   
041808             3752   ; coordinates of active pixels to draw
041808             3753   xpix:
041808 00          3754   	db 0
041809             3755   ypix:
041809 00          3756   	db 0
04180A             3757   
04180A             3758   ; memorized coordinates of active pixels to draw
04180A             3759   memxpix:
04180A 00          3760   	db 0
04180B             3761   memypix:
04180B 00          3762   	db 0
04180C             3763   
04180C             3764   ; width of a pixel in the sprite
04180C             3765   pixel_width:
04180C 00          3766   	db 0
04180D             3767   
04180D             3768   ; sprite size, in resized pixels
04180D             3769   spr_size:
04180D 00          3770   	db 0
04180E             3771   
04180E             3772   ; pen color (0-63)
04180E             3773   current_pen:
04180E 00          3774   	db 0
04180F             3775   
04180F             3776   ; texts for 1st menu
04180F             3777   title:
04180F 53 50 52 2D 3778   	db "SPR-EDIT",0
       45 44 49 54 
       00          
041818             3779   
041818             3780   menu1:
041818 46 31 2E 20 3781   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
041827             3782   menu2:
041827 46 32 2E 20 3783   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041836             3784   menu3:
041836 46 33 2E 20 3785   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
041847             3786   menu4:
041847 46 34 2E 20 3787   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
041858             3788   
041858             3789   ; descriptions of sprites
041858             3790   spr_descr:
041858 46 72 61 6D 3791   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041862             3792   spr_descr1:
041862 34 78 34 20 3793   	db "4x4  ",0
       20 00       
041868             3794   spr_descr2:
041868 38 78 38 20 3795   	db "8x8  ",0
       20 00       
04186E             3796   spr_descr3:
04186E 31 36 78 31 3797   	db "16x16",0
       36 00       
041874             3798   spr_descr4:
041874 33 32 78 33 3799   	db "32x32",0
       32 00       
04187A             3800   
04187A             3801   ; label before filename
04187A             3802   filename_label:
04187A 46 69 6C 65 3803   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041884             3804   
041884             3805   ; filename without extension
041884             3806   filename:
041884             3807   	ds 17
041895             3808   
041895             3809   sprite_path:
041895 73 70 72 69 3810   	db "sprites",0
       74 65 73 00 
04189D             3811   
04189D             3812   palette_path:
04189D 70 61 6C 65 3813   	db "palettes",0
       74 74 65 73 
       00          
0418A6             3814   
0418A6             3815   back_path:
0418A6 2E 2E 00    3816   	db "..",0
0418A9             3817   
0418A9             3818   ; single space char to print
0418A9             3819   spacechar:
0418A9 20 00       3820   	db " ",0
0418AB             3821   
0418AB             3822   ; spaces to remove filename label
0418AB             3823   void_filename:
0418AB 20 20 20 20 3824   	db "                         ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0418C5             3825   
0418C5             3826   ; file error message
0418C5             3827   file_error:
0418C5 46 69 6C 65 3828   	db "File error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0418DF             3829   
0418DF             3830   ; folder error message
0418DF             3831   folder_error:
0418DF 46 6F 6C 64 3832   	db "Folder error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0418F9             3833   
0418F9             3834   ; header error message
0418F9             3835   header_error:
0418F9 48 65 61 64 3836   	db "Header error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041913             3837   
041913             3838   ; data error message
041913             3839   data_error:
041913 44 61 74 61 3840   	db "Data error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
04192D             3841   
04192D             3842   ; number of colors
04192D             3843   colors_count:
04192D 00          3844   	db 0
04192E             3845   
04192E             3846   ; real number of colors
04192E             3847   new_colors_count:
04192E 00          3848   	db 0
04192F             3849   
04192F             3850   red_tint:
04192F 00          3851   	db 0
041930             3852   
041930             3853   green_tint:
041930 00          3854   	db 0
041931             3855   
041931             3856   blue_tint:
041931 00          3857   	db 0
041932             3858   
041932             3859   ; current frame
041932             3860   current_frame:
041932 00          3861   	db 0
041933             3862   
041933             3863   ; frames count
041933             3864   frames_count:
041933 00          3865   	db 0
041934             3866   
041934             3867   current_frame_ascii:
041934 30 00       3868   	db '0',0
041936             3869   
041936             3870   frames_count_ascii:
041936 30 00       3871   	db '0',0
041938             3872   
041938             3873   ; keycode, keydown & keymods are stored here
041938             3874   keydata:
041938 00 00 00    3875   	db 0,0,0
04193B             3876   
04193B             3877   ; buffer for the current sprite
04193B             3878   sprite_buffer:
04193B             3879   	ds BUFFER_SIZE
04393B             3880   
04393B             3881   header_buffer:
04393B             3882   	ds HEADER_BUFFER_SIZE
04394B             3883   
04394B             3884   color_buffer:
04394B 00 00 00    3885   	db 0,0,0
04394E             3886   
04394E             3887   palette_buffer:
04394E             3888   	ds MAX_PAL_DATA + 1
043C93             3889   
043C93             3890   temp_chars_buffer:
043C93 00 00 00 00 3891   	db 0,0,0,0
043C97             3892   
043C97             3893   header:
043C97 4A 41 53 43 3894   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043CA1 30 31 30 30 3895   	db "0100",13,10
       0D 0A       
043CA7             3896   
043CA7             3897   ; buffer to perform some operations
043CA7             3898   swap_sprite_buffer:
043CA7             3899   	ds ONE_FRAME_BUFFER_SIZE
0440A7             3900   
0440A7             3901   asm_line:
0440A7 44 42 20    3902   	DB "DB "
0440AA             3903   
0440AA             3904   asm_line_length:
0440AA 03          3905   	DB 3
0440AB             3906   
0440AB             3907   rgb_palette:
0440AB 00 00 00    3908   	db $00,$00,$00
0440AE AA 00 00    3909   	db $AA,$00,$00
0440B1 00 AA 00    3910   	db $00,$AA,$00
0440B4 AA AA 00    3911   	db $AA,$AA,$00
0440B7 00 00 AA    3912   	db $00,$00,$AA
0440BA AA 00 AA    3913   	db $AA,$00,$AA
0440BD 00 AA AA    3914   	db $00,$AA,$AA
0440C0 AA AA AA    3915   	db $AA,$AA,$AA
0440C3             3916   
0440C3 55 55 55    3917   	db $55,$55,$55
0440C6 FF 00 00    3918   	db $FF,$00,$00
0440C9 00 FF 00    3919   	db $00,$FF,$00
0440CC FF FF 00    3920   	db $FF,$FF,$00
0440CF 00 00 FF    3921   	db $00,$00,$FF
0440D2 FF 00 FF    3922   	db $FF,$00,$FF
0440D5 00 FF FF    3923   	db $00,$FF,$FF
0440D8 FF FF FF    3924   	db $FF,$FF,$FF
0440DB             3925   
0440DB 00 00 55    3926   	db $00,$00,$55
0440DE 00 55 00    3927   	db $00,$55,$00
0440E1 00 55 55    3928   	db $00,$55,$55
0440E4 00 55 AA    3929   	db $00,$55,$AA
0440E7 00 55 FF    3930   	db $00,$55,$FF
0440EA 00 AA 55    3931   	db $00,$AA,$55
0440ED 00 AA FF    3932   	db $00,$AA,$FF
0440F0 00 FF 55    3933   	db $00,$FF,$55
0440F3             3934   
0440F3 00 FF AA    3935   	db $00,$FF,$AA
0440F6 55 00 00    3936   	db $55,$00,$00
0440F9 55 00 55    3937   	db $55,$00,$55
0440FC 55 00 AA    3938   	db $55,$00,$AA
0440FF 55 00 FF    3939   	db $55,$00,$FF
044102 55 55 00    3940   	db $55,$55,$00
044105 55 55 AA    3941   	db $55,$55,$AA
044108 55 55 FF    3942   	db $55,$55,$FF
04410B             3943   
04410B 55 AA 00    3944   	db $55,$AA,$00
04410E 55 AA 55    3945   	db $55,$AA,$55
044111 55 AA AA    3946   	db $55,$AA,$AA
044114 55 AA FF    3947   	db $55,$AA,$FF
044117 55 FF 00    3948   	db $55,$FF,$00
04411A 55 FF 55    3949   	db $55,$FF,$55
04411D 55 FF AA    3950   	db $55,$FF,$AA
044120 55 FF FF    3951   	db $55,$FF,$FF
044123             3952   
044123 AA 00 55    3953   	db $AA,$00,$55
044126 AA 00 FF    3954   	db $AA,$00,$FF
044129 AA 55 00    3955   	db $AA,$55,$00
04412C AA 55 55    3956   	db $AA,$55,$55
04412F AA 55 AA    3957   	db $AA,$55,$AA
044132 AA 55 FF    3958   	db $AA,$55,$FF
044135 AA AA 55    3959   	db $AA,$AA,$55
044138 AA AA FF    3960   	db $AA,$AA,$FF
04413B             3961   
04413B AA FF 00    3962   	db $AA,$FF,$00
04413E AA FF 55    3963   	db $AA,$FF,$55
044141 AA FF AA    3964   	db $AA,$FF,$AA
044144 AA FF FF    3965   	db $AA,$FF,$FF
044147 FF 00 55    3966   	db $FF,$00,$55
04414A FF 00 AA    3967   	db $FF,$00,$AA
04414D FF 55 00    3968   	db $FF,$55,$00
044150 FF 55 55    3969   	db $FF,$55,$55
044153             3970   
044153 FF 55 AA    3971   	db $FF,$55,$AA
044156 FF 55 FF    3972   	db $FF,$55,$FF
044159 FF AA 00    3973   	db $FF,$AA,$00
04415C FF AA 55    3974   	db $FF,$AA,$55
04415F FF AA AA    3975   	db $FF,$AA,$AA
044162 FF AA FF    3976   	db $FF,$AA,$FF
044165 FF FF 55    3977   	db $FF,$FF,$55
044168 FF FF AA    3978   	db $FF,$FF,$AA
04416B             3979   
04416B             3980   ; sprite structure:
04416B             3981   ; =================
04416B             3982   ; colors_count  :   byte
04416B             3983   ; frames count	:	byte
04416B             3984   ; spr size		:	byte
04416B             3985   ; data			:   width x height bytes of colors
04416B             3986   
04416B             3987   ; ===============================================
04416B             3988   ; A = byte to debug
04416B             3989   debug_byte:
04416B F5          3990   	PUSH AF
04416C C5          3991   	PUSH BC
04416D D5          3992   	PUSH DE
04416E E5          3993   	PUSH HL
04416F 21 00 00 00 3994   	LD HL,$000000
044173 6F          3995   	LD L,A
044174 11 B0 41 04 3996   	LD DE,debug_text
044178 D5          3997   	PUSH DE
044179 CD B6 41 04 3998   	CALL num2dec
04417D E1          3999   	POP HL
04417E 23          4000   	INC HL
04417F 23          4001   	INC HL
044180 01 03 00 00 4002   	LD BC,3
044184 3E 00       4003   	LD A,0
044186 49 DF       4004   	RST.LIS $18
044188 E1          4005   	POP HL
044189 D1          4006   	POP DE
04418A C1          4007   	POP BC
04418B F1          4008   	POP AF
04418C C9          4009   	RET
04418D             4010   
04418D             4011   ; HL = word to debug
04418D             4012   debug_word:
04418D F5          4013   	PUSH AF
04418E C5          4014   	PUSH BC
04418F D5          4015   	PUSH DE
044190 E5          4016   	PUSH HL
044191 11 00 00 00 4017   	LD DE,$000000 ; remove HLU
044195 5D          4018   	LD E,L
044196 54          4019   	LD D,H
044197 D5          4020   	PUSH DE
044198 E1          4021   	POP HL
044199 11 B0 41 04 4022   	LD DE,debug_text
04419D D5          4023   	PUSH DE
04419E CD B6 41 04 4024   	CALL num2dec
0441A2 E1          4025   	POP HL
0441A3 01 05 00 00 4026   	LD BC,5
0441A7 3E 00       4027   	LD A,0
0441A9 49 DF       4028   	RST.LIS $18
0441AB E1          4029   	POP HL
0441AC D1          4030   	POP DE
0441AD C1          4031   	POP BC
0441AE F1          4032   	POP AF
0441AF C9          4033   	RET
0441B0             4034   
0441B0             4035   debug_text:
0441B0             4036   	DS 6
0441B6             4037   
0441B6             4038   ; 16 bits number to string
0441B6             4039   num2dec:
0441B6 01 F0 D8 FF 4040   	LD BC,-10000
0441BA CD D7 41 04 4041   	CALL num1
0441BE 01 18 FC FF 4042   	LD BC,-1000
0441C2 CD D7 41 04 4043   	CALL num1
0441C6 01 9C FF FF 4044   	LD BC,-100
0441CA CD D7 41 04 4045   	CALL num1
0441CE 01 F6 FF FF 4046   	LD BC,-10
0441D2 CD D7 41 04 4047   	CALL num1
0441D6 48          4048   	LD C,B
0441D7             4049   
0441D7 3E 2F       4050   num1: LD A,'0'-1
0441D9 3C          4051   num2: INC A
0441DA 09          4052   	ADD HL,BC
0441DB 38 FC       4053   	JR C,num2
0441DD ED 42       4054   	SBC HL,BC
0441DF             4055   
0441DF 12          4056   	LD (DE),A
0441E0 13          4057   	INC DE
0441E1 C9          4058   	RET
