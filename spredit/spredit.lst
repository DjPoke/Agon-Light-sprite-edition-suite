PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   COLOR_MIN:	 		equ 0
040045             0022   COLOR_MAX:	 		equ 63
040045             0023   
040045             0024   MAX_FRAMES:			equ 8
040045             0025   
040045             0026   COLOR_WHITE:		equ 15
040045             0027   COLOR_GREY:			equ 7
040045             0028   COLOR_BLACK:		equ 0
040045             0029   
040045             0030   TITLE_X: 	equ 17
040045             0031   TITLE_Y: 	equ 2
040045             0032   MENU_X: 	equ 13
040045             0033   MENU1_Y: 	equ 8
040045             0034   MENU2_Y: 	equ 12
040045             0035   MENU3_Y: 	equ 16
040045             0036   MENU4_Y: 	equ 20
040045             0037   MENU5_Y: 	equ 24
040045             0038   FILENAME_X: equ 7
040045             0039   FILENAME_Y: equ 24
040045             0040   
040045             0041   SPR44: 		equ 4
040045             0042   SPR88: 		equ 8
040045             0043   SPR1616: 	equ 16
040045             0044   SPR3232: 	equ 32
040045             0045   
040045             0046   SPR44_width: 	equ 32
040045             0047   SPR88_width: 	equ 16
040045             0048   SPR1616_width: 	equ 8
040045             0049   SPR3232_width: 	equ 4
040045             0050   
040045             0051   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0052   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0053   
040045             0054   HEADER_BUFFER_SIZE:		equ 16
040045             0055   
040045             0056   SLOWDOWN_DELAY:	equ 20
040045             0057   
040045             0058   KEY_SPACE: equ -99 ; draw with color
040045             0059   KEY_UP: equ -58 ; move
040045             0060   KEY_DOWN: equ -42
040045             0061   KEY_LEFT: equ -26
040045             0062   KEY_RIGHT: equ -122
040045             0063   KEY_DELETE: equ -90 ; remove color with black
040045             0064   KEY_N: equ -86 ; add a new void frame
040045             0065   KEY_C: equ -83 ; copy current frame to a new frame
040045             0066   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0067   KEY_PGUP: equ -64 ; select frame
040045             0068   KEY_PGDOWN: equ -79
040045             0069   KEY_L: equ -87 ; load sprite
040045             0070   KEY_S: equ -82 ; save sprite
040045             0071   KEY_E: equ -35 ; export sprite as assembler data
040045             0072   KEY_R: equ -52 ; rotate frame clockwise
040045             0073   KEY_F: equ -68 ; flip frame horizontally
040045             0074   KEY_M: equ -102 ; mirror frame vertically
040045             0075   KEY_ESCAPE: equ -113
040045             0076   KEY_F1: equ -114 ; select 4x4 sprite
040045             0077   KEY_F2: equ -115 ; select 8x8 sprite
040045             0078   KEY_F3: equ -116 ; select 16x16 sprite
040045             0079   KEY_F4: equ -21 ; select 32x32 sprite
040045             0080   KEY_RETURN: equ -74 ; floodfill
040045             0081   
040045             0082   ; play mode:
040045             0083   KEY_P:	equ -56 ; switch to play mode
040045             0084   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0085   
040045             0086   ; palette mode:
040045             0087   KEY_TAB: equ -97 ; switch to palette mode
040045             0088   KEY_1:	equ -49 ; red+
040045             0089   KEY_2:	equ -50 ; green+
040045             0090   KEY_3:	equ -18 ; blue+
040045             0091   KEY_4:	equ -19 ; red-
040045             0092   KEY_5:	equ -20 ; green-
040045             0093   KEY_6:	equ -53; blue-
040045             0094   KEY_7:	equ -37 ; reset color to black
040045             0095   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0096   ; KEY_S: save palette file
040045             0097   
040045             0098   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0099   MAX_PAL_DATA_HI: equ 03h
040045             0100   MAX_PAL_DATA_LO: equ 44h
040045             0101   
040045             0102   BITLOOKUP:
040045 01 02 04 08 0103   	DB 01h,02h,04h,08h
040049 10 20 40 80 0104   	DB 10h,20h,40h,80h
04004D             0105   
04004D             0106   ;======================================================================
04004D             0107   start:
04004D F5          0108   	push af
04004E C5          0109   	push bc
04004F D5          0110   	push de
040050 DD E5       0111   	push ix
040052 FD E5       0112   	push iy
040054             0113   
040054             0114   	; set mode 8 (320x240x64)
040054             0115   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0116   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0117   
04005C             0118   	; disable logical scale coordinates system
04005C             0119   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0120   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0121   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0122   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0123   
04006C             0124   	; set text colors
04006C             0125   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0126   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0127   
040074             0128   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0129   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0130   
04007C             0131   	; set graphics pen
04007C             0132   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0133   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0134   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0135   
040088             0136   	; hide cursor
040088             0137   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0138   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0139   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0140   
040094             0141   	; store coordinates
040094 DD 21 22 17 0142   	ld ix,x1
       04          
040099 21 00 00 00 0143   	ld hl,0
04009D DD 75 00    0144   	ld (ix+0),l
0400A0 DD 74 01    0145   	ld (ix+1),h
0400A3             0146   
0400A3 DD 21 24 17 0147   	ld ix,y1
       04          
0400A8 21 00 00 00 0148   	ld hl,0
0400AC DD 75 00    0149   	ld (ix+0),l
0400AF DD 74 01    0150   	ld (ix+1),h
0400B2             0151   
0400B2 DD 21 26 17 0152   	ld ix,x2
       04          
0400B7 21 3F 01 00 0153   	ld hl,319
0400BB DD 75 00    0154   	ld (ix+0),l
0400BE DD 74 01    0155   	ld (ix+1),h
0400C1             0156   
0400C1 DD 21 28 17 0157   	ld ix,y2
       04          
0400C6 21 EF 00 00 0158   	ld hl,239
0400CA DD 75 00    0159   	ld (ix+0),l
0400CD DD 74 01    0160   	ld (ix+1),h
0400D0             0161   
0400D0             0162   	; draw the border rectangle
0400D0 CD E1 0A 04 0163   	call fn_rect
0400D4             0164   
0400D4             0165   	; locate x,y
0400D4             0166   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0167   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0168   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0169   
0400E0             0170   	; print text
0400E0 21 39 17 04 0171   	ld hl,title
0400E4 01 00 00 00 0172   	ld bc,0
0400E8 AF          0173   	xor a
0400E9 49 DF       0174   	rst.lis $18
0400EB             0175   
0400EB             0176   	; locate x,y
0400EB             0177   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0178   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0179   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0180   
0400F7             0181   	; print text
0400F7 21 42 17 04 0182   	ld hl,menu1
0400FB 01 00 00 00 0183   	ld bc,0
0400FF AF          0184   	xor a
040100 49 DF       0185   	rst.lis $18
040102             0186   
040102             0187   	; locate x,y
040102             0188   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0189   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0190   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0191   
04010E             0192   	; print text
04010E 21 51 17 04 0193   	ld hl,menu2
040112 01 00 00 00 0194   	ld bc,0
040116 AF          0195   	xor a
040117 49 DF       0196   	rst.lis $18
040119             0197   
040119             0198   	; locate x,y
040119             0199   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0200   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0201   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0202   
040125             0203   	; print text
040125 21 60 17 04 0204   	ld hl,menu3
040129 01 00 00 00 0205   	ld bc,0
04012D AF          0206   	xor a
04012E 49 DF       0207   	rst.lis $18
040130             0208   
040130             0209   	; locate x,y
040130             0210   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0211   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0212   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0213   
04013C             0214   	; print text
04013C 21 71 17 04 0215   	ld hl,menu4
040140 01 00 00 00 0216   	ld bc,0
040144 AF          0217   	xor a
040145 49 DF       0218   	rst.lis $18
040147             0219   
040147             0220   ; menu loop
040147             0221   menu_loop:
040147 21 8F FF FF 0222   	ld hl,KEY_ESCAPE
04014B CD D4 16 04 0223   	call fn_inkey
04014F FE 01       0224   	CP 1
040151 CA BD 0A 04 0225   	jp z,exit_program
040155             0226   
040155 21 8E FF FF 0227   	ld hl,KEY_F1
040159 CD D4 16 04 0228   	call fn_inkey
04015D FE 01       0229   	CP 1
04015F CA 91 01 04 0230   	jp z,ml_menu1
040163             0231   
040163 21 8D FF FF 0232   	ld hl,KEY_F2
040167 CD D4 16 04 0233   	call fn_inkey
04016B FE 01       0234   	CP 1
04016D CA 97 01 04 0235   	jp z,ml_menu2
040171             0236   
040171 21 8C FF FF 0237   	ld hl,KEY_F3
040175 CD D4 16 04 0238   	call fn_inkey
040179 FE 01       0239   	CP 1
04017B CA 9D 01 04 0240   	jp z,ml_menu3
04017F             0241   
04017F 21 EB FF FF 0242   	ld hl,KEY_F4
040183 CD D4 16 04 0243   	call fn_inkey
040187 FE 01       0244   	CP 1
040189 CA A3 01 04 0245   	jp z,ml_menu4
04018D             0246   
04018D C3 47 01 04 0247   	jp menu_loop
040191             0248   
040191             0249   ml_menu1:
040191 3E 04       0250   	ld a,SPR44
040193 16 20       0251   	ld d,SPR44_width
040195 18 10       0252   	jr exit_menu_loop
040197             0253   
040197             0254   ml_menu2:
040197 3E 08       0255   	ld a,SPR88
040199 16 10       0256   	ld d,SPR88_width
04019B 18 0A       0257   	jr exit_menu_loop
04019D             0258   
04019D             0259   ml_menu3:
04019D 3E 10       0260   	ld a,SPR1616
04019F 16 08       0261   	ld d,SPR1616_width
0401A1 18 04       0262   	jr exit_menu_loop
0401A3             0263   
0401A3             0264   ml_menu4:
0401A3 3E 20       0265   	ld a,SPR3232
0401A5 16 04       0266   	ld d,SPR3232_width
0401A7             0267   
0401A7             0268   exit_menu_loop:
0401A7             0269   	; store edited sprite size
0401A7 21 37 17 04 0270   	ld hl,spr_size
0401AB 77          0271   	ld (hl),a
0401AC 21 36 17 04 0272   	ld hl,pixel_width
0401B0 72          0273   	ld (hl),d
0401B1             0274   
0401B1             0275   	; clear the text screen
0401B1             0276   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0277   
0401B5             0278   	; draw the palette
0401B5 0E 00       0279   	ld c,0
0401B7             0280   
0401B7             0281   palette_loop:
0401B7 C5          0282   	push bc
0401B8             0283   
0401B8             0284   	; choose palette color
0401B8             0285   	vdu 18
0401B8 3E 12       0001M  		LD	A, function
0401BA 49 D7       0002M  		RST.LIS	10h
0401BC             0286   	vdu 0
0401BC 3E 00       0001M  		LD	A, function
0401BE 49 D7       0002M  		RST.LIS	10h
0401C0 C1          0287   	pop bc
0401C1 C5          0288   	push bc
0401C2 79          0289   	ld a,c
0401C3             0290   	vdu_a
0401C3 49 D7       0001M  		RST.LIS	10h
0401C5             0291   
0401C5             0292   	; store coordinates for a palette square
0401C5 DD 21 22 17 0293   	ld ix,x1
       04          
0401CA E1          0294   	pop hl
0401CB E5          0295   	push hl
0401CC 26 05       0296   	ld h,5
0401CE ED 6C       0297   	mlt hl
0401D0 E5          0298   	push hl
0401D1 DD 75 00    0299   	ld (ix+0),l
0401D4 DD 74 01    0300   	ld (ix+1),h
0401D7             0301   
0401D7 DD 21 24 17 0302   	ld ix,y1
       04          
0401DC 21 00 00 00 0303   	ld hl,0
0401E0 DD 75 00    0304   	ld (ix+0),l
0401E3 DD 74 01    0305   	ld (ix+1),h
0401E6             0306   
0401E6 DD 21 26 17 0307   	ld ix,x2
       04          
0401EB E1          0308   	pop hl
0401EC 11 04 00 00 0309   	ld de,4
0401F0 19          0310   	add hl,de
0401F1 DD 75 00    0311   	ld (ix+0),l
0401F4 DD 74 01    0312   	ld (ix+1),h
0401F7             0313   
0401F7 DD 21 28 17 0314   	ld ix,y2
       04          
0401FC 21 0A 00 00 0315   	ld hl,10
040200 DD 75 00    0316   	ld (ix+0),l
040203 DD 74 01    0317   	ld (ix+1),h
040206             0318   
040206             0319   	; draw the palette filled square
040206 CD A0 0B 04 0320   	call fn_rectf
04020A             0321   
04020A             0322   	; next color ?
04020A C1          0323   	pop bc
04020B 0C          0324   	inc c
04020C 79          0325   	ld a,c
04020D FE 40       0326   	cp MAX_COLORS
04020F C2 B7 01 04 0327   	jp nz,palette_loop
040213             0328   
040213             0329   	; store coordinates
040213 DD 21 22 17 0330   	ld ix,x1
       04          
040218 21 00 00 00 0331   	ld hl,0
04021C DD 75 00    0332   	ld (ix+0),l
04021F DD 74 01    0333   	ld (ix+1),h
040222             0334   
040222 DD 21 24 17 0335   	ld ix,y1
       04          
040227 21 0B 00 00 0336   	ld hl,11
04022B DD 75 00    0337   	ld (ix+0),l
04022E DD 74 01    0338   	ld (ix+1),h
040231             0339   
040231 DD 21 26 17 0340   	ld ix,x2
       04          
040236 21 3F 01 00 0341   	ld hl,319
04023A DD 75 00    0342   	ld (ix+0),l
04023D DD 74 01    0343   	ld (ix+1),h
040240             0344   
040240 DD 21 28 17 0345   	ld ix,y2
       04          
040245 21 EF 00 00 0346   	ld hl,239
040249 DD 75 00    0347   	ld (ix+0),l
04024C DD 74 01    0348   	ld (ix+1),h
04024F             0349   
04024F             0350   	; draw the border rectangle
04024F CD E1 0A 04 0351   	call fn_rect
040253             0352   
040253             0353   	; store edited sprite coordinates
040253 DD 21 2A 17 0354   	ld ix,xs1
       04          
040258 FD 21 22 17 0355   	ld iy,x1
       04          
04025D DD 6E 00    0356   	ld l,(ix+0)
040260 DD 66 01    0357   	ld h,(ix+1)
040263 FD 75 00    0358   	ld (iy+0),l
040266 FD 74 01    0359   	ld (iy+1),h
040269             0360   
040269 DD 21 2C 17 0361   	ld ix,ys1
       04          
04026E FD 21 24 17 0362   	ld iy,y1
       04          
040273 DD 6E 00    0363   	ld l,(ix+0)
040276 DD 66 01    0364   	ld h,(ix+1)
040279 FD 75 00    0365   	ld (iy+0),l
04027C FD 74 01    0366   	ld (iy+1),h
04027F             0367   
04027F DD 21 2E 17 0368   	ld ix,xs2
       04          
040284 FD 21 26 17 0369   	ld iy,x2
       04          
040289 DD 6E 00    0370   	ld l,(ix+0)
04028C DD 66 01    0371   	ld h,(ix+1)
04028F FD 75 00    0372   	ld (iy+0),l
040292 FD 74 01    0373   	ld (iy+1),h
040295             0374   
040295 DD 21 30 17 0375   	ld ix,ys2
       04          
04029A FD 21 28 17 0376   	ld iy,y2
       04          
04029F DD 6E 00    0377   	ld l,(ix+0)
0402A2 DD 66 01    0378   	ld h,(ix+1)
0402A5 FD 75 00    0379   	ld (iy+0),l
0402A8 FD 74 01    0380   	ld (iy+1),h
0402AB             0381   
0402AB             0382   	; draw the sprite's border rectangle
0402AB CD E1 0A 04 0383   	call fn_rect
0402AF             0384   
0402AF             0385   	; update sprite size descriptions
0402AF CD 70 16 04 0386   	call fn_show_spr_descr
0402B3             0387   
0402B3             0388   ; initialize sprite vars
0402B3             0389   init_sprite_vars:
0402B3             0390   	; initialize coordinates before drawing the sprite
0402B3 DD 21 32 17 0391   	ld ix,xpix
       04          
0402B8 AF          0392   	xor a
0402B9 DD 77 00    0393   	ld (ix+0),a ; xpix = 0
0402BC DD 77 01    0394   	ld (ix+1),a	; ypix = 0
0402BF DD 21 38 17 0395   	ld ix,current_pen
       04          
0402C4 3E 0F       0396   	ld a,COLOR_WHITE
0402C6 DD 77 00    0397   	ld (ix+0),a ; current pen -> white
0402C9             0398   
0402C9             0399   	; set vars
0402C9 21 42 18 04 0400   	ld hl,colors_count
0402CD 3E 40       0401   	ld a,MAX_COLORS
0402CF 77          0402   	ld (hl),a
0402D0 21 44 18 04 0403   	ld hl,current_frame
0402D4 AF          0404   	xor a
0402D5 77          0405   	ld (hl),a
0402D6 3C          0406   	inc a
0402D7 21 45 18 04 0407   	ld hl,frames_count
0402DB 77          0408   	ld (hl),a
0402DC             0409   
0402DC             0410   	; fill buffers with zeros
0402DC 01 00 20 00 0411   	ld bc,BUFFER_SIZE
0402E0 21 4D 18 04 0412   	ld hl,sprite_buffer
0402E4             0413   
0402E4             0414   isv_fill_loop:
0402E4 AF          0415   	xor a
0402E5 77          0416   	ld (hl),a
0402E6 0B          0417   	dec bc
0402E7 23          0418   	inc hl
0402E8 78          0419   	ld a,b
0402E9 B1          0420   	or c
0402EA FE 00       0421   	cp 0
0402EC 20 F6       0422   	jr nz,isv_fill_loop
0402EE             0423   
0402EE             0424   ; draw the pixel with a border
0402EE CD 6E 0C 04 0425   	call fn_draw_pixel_with_border
0402F2             0426   
0402F2             0427   ; draw sprite loop
0402F2             0428   draw_sprite_loop:
0402F2 21 9D FF FF 0429   	ld hl,KEY_SPACE
0402F6 CD D4 16 04 0430   	call fn_inkey
0402FA FE 01       0431   	cp 1
0402FC CC 0E 04 04 0432   	call z,dsl_set_pen
040300             0433   
040300 21 C6 FF FF 0434   	ld hl,KEY_UP
040304 CD D4 16 04 0435   	call fn_inkey
040308 FE 01       0436   	cp 1
04030A CC 33 04 04 0437   	call z,dsl_up
04030E             0438   
04030E 21 D6 FF FF 0439   	ld hl,KEY_DOWN
040312 CD D4 16 04 0440   	call fn_inkey
040316 FE 01       0441   	cp 1
040318 CC 5A 04 04 0442   	call z,dsl_down
04031C             0443   
04031C 21 E6 FF FF 0444   	ld hl,KEY_LEFT
040320 CD D4 16 04 0445   	call fn_inkey
040324 FE 01       0446   	cp 1
040326 CC 86 04 04 0447   	call z,dsl_left
04032A             0448   
04032A 21 86 FF FF 0449   	ld hl,KEY_RIGHT
04032E CD D4 16 04 0450   	call fn_inkey
040332 FE 01       0451   	cp 1
040334 CC AD 04 04 0452   	call z,dsl_right
040338             0453   
040338 21 A6 FF FF 0454   	ld hl,KEY_DELETE
04033C CD D4 16 04 0455   	call fn_inkey
040340 FE 01       0456   	cp 1
040342 CC 22 04 04 0457   	call z,dsl_reset_pen
040346             0458   
040346 21 9F FF FF 0459   	ld hl,KEY_TAB
04034A CD D4 16 04 0460   	call fn_inkey
04034E FE 01       0461   	cp 1
040350 CA 85 09 04 0462   	jp z,dsl_palette_tool
040354             0463   
040354 21 AA FF FF 0464   	ld hl,KEY_N
040358 CD D4 16 04 0465   	call fn_inkey
04035C FE 01       0466   	cp 1
04035E CC 2C 05 04 0467   	call z,dsl_add_frame
040362             0468   
040362 21 AD FF FF 0469   	ld hl,KEY_C
040366 CD D4 16 04 0470   	call fn_inkey
04036A FE 01       0471   	cp 1
04036C CC C3 05 04 0472   	call z,dsl_add_and_copy_frame
040370             0473   
040370 21 D0 FF FF 0474   	ld hl,KEY_BACKSPACE
040374 CD D4 16 04 0475   	call fn_inkey
040378 FE 01       0476   	cp 1
04037A CC 2A 06 04 0477   	call z,dsl_delete_frame
04037E             0478   
04037E 21 C0 FF FF 0479   	ld hl,KEY_PGUP
040382 CD D4 16 04 0480   	call fn_inkey
040386 FE 01       0481   	cp 1
040388 CC 23 07 04 0482   	call z,dsl_next_frame
04038C             0483   
04038C 21 B1 FF FF 0484   	ld hl,KEY_PGDOWN
040390 CD D4 16 04 0485   	call fn_inkey
040394 FE 01       0486   	cp 1
040396 CC 04 07 04 0487   	call z,dsl_previous_frame
04039A             0488   
04039A 21 A9 FF FF 0489   	ld hl,KEY_L
04039E CD D4 16 04 0490   	call fn_inkey
0403A2 FE 01       0491   	cp 1
0403A4 CC D9 04 04 0492   	call z,dsl_load_sprite
0403A8             0493   
0403A8 21 AE FF FF 0494   	ld hl,KEY_S
0403AC CD D4 16 04 0495   	call fn_inkey
0403B0 FE 01       0496   	cp 1
0403B2 CC FA 04 04 0497   	call z,dsl_save_sprite
0403B6             0498   
0403B6 21 DD FF FF 0499   	ld hl,KEY_E
0403BA CD D4 16 04 0500   	call fn_inkey
0403BE FE 01       0501   	cp 1
0403C0 CC 13 05 04 0502   	call z,dsl_export_sprite
0403C4             0503   
0403C4 21 CC FF FF 0504   	ld hl,KEY_R
0403C8 CD D4 16 04 0505   	call fn_inkey
0403CC FE 01       0506   	cp 1
0403CE CC 49 07 04 0507   	call z,dsl_rotate_frame
0403D2             0508   
0403D2 21 BC FF FF 0509   	ld hl,KEY_F
0403D6 CD D4 16 04 0510   	call fn_inkey
0403DA FE 01       0511   	cp 1
0403DC CC FE 07 04 0512   	call z,dsl_flip_frame
0403E0             0513   
0403E0 21 9A FF FF 0514   	ld hl,KEY_M
0403E4 CD D4 16 04 0515   	call fn_inkey
0403E8 FE 01       0516   	cp 1
0403EA CC 65 08 04 0517   	call z,dsl_mirror_frame
0403EE             0518   
0403EE 21 B6 FF FF 0519   	ld hl,KEY_RETURN
0403F2 CD D4 16 04 0520   	call fn_inkey
0403F6 FE 01       0521   	cp 1
0403F8 CC E5 08 04 0522   	call z,dsl_flood_fill
0403FC             0523   
0403FC 21 8F FF FF 0524   	ld hl,KEY_ESCAPE
040400 CD D4 16 04 0525   	call fn_inkey
040404 FE 01       0526   	cp 1
040406 CA BD 0A 04 0527   	jp z,exit_program
04040A             0528   
04040A C3 F2 02 04 0529   	jp draw_sprite_loop
04040E             0530   
04040E             0531   ; set the pen of the current pixel
04040E             0532   dsl_set_pen:
04040E CD 98 0C 04 0533   	call fn_get_pixel_color
040412 21 38 17 04 0534   	ld hl,current_pen
040416 BE          0535   	cp (hl)
040417 C8          0536   	ret z
040418 7E          0537   	ld a,(hl)
040419 CD DA 0C 04 0538   	call fn_set_pixel_color
04041D CD 6E 0C 04 0539   	call fn_draw_pixel_with_border
040421 C9          0540   	ret
040422             0541   
040422             0542   ; reset the pen of the current pixel
040422             0543   dsl_reset_pen:
040422 CD 98 0C 04 0544   	call fn_get_pixel_color
040426 FE 00       0545   	cp 0
040428 C8          0546   	ret z
040429 AF          0547   	xor a
04042A CD DA 0C 04 0548   	call fn_set_pixel_color
04042E CD 6E 0C 04 0549   	call fn_draw_pixel_with_border
040432 C9          0550   	ret
040433             0551   
040433             0552   ; move pixel up
040433             0553   dsl_up:
040433 21 33 17 04 0554   	ld hl,ypix
040437 7E          0555   	ld a,(hl)
040438 FE 00       0556   	cp 0
04043A C8          0557   	ret z
04043B             0558   
04043B 21 9D FF FF 0559   	ld hl,KEY_SPACE
04043F CD D4 16 04 0560   	call fn_inkey
040443 FE 01       0561   	cp 1
040445 CC 0E 04 04 0562   	call z,dsl_set_pen
040449             0563   
040449 CD 82 0C 04 0564   	call fn_draw_pixel_without_border
04044D CD 1E 0D 04 0565   	call fn_move_up
040451 CD 6E 0C 04 0566   	call fn_draw_pixel_with_border
040455 CD 4F 16 04 0567   	call fn_slowdown
040459 C9          0568   	ret
04045A             0569   
04045A             0570   ; move pixel down
04045A             0571   dsl_down:
04045A 21 37 17 04 0572   	ld hl,spr_size
04045E 56          0573   	ld d,(hl)
04045F 15          0574   	dec d
040460             0575   
040460 21 33 17 04 0576   	ld hl,ypix
040464 7E          0577   	ld a,(hl)
040465 BA          0578   	cp d
040466 C8          0579   	ret z
040467             0580   
040467 21 9D FF FF 0581   	ld hl,KEY_SPACE
04046B CD D4 16 04 0582   	call fn_inkey
04046F FE 01       0583   	cp 1
040471 CC 0E 04 04 0584   	call z,dsl_set_pen
040475             0585   
040475 CD 82 0C 04 0586   	call fn_draw_pixel_without_border
040479 CD 24 0D 04 0587   	call fn_move_down
04047D CD 6E 0C 04 0588   	call fn_draw_pixel_with_border
040481 CD 4F 16 04 0589   	call fn_slowdown
040485 C9          0590   	ret
040486             0591   
040486             0592   ; move pixel left
040486             0593   dsl_left:
040486 21 32 17 04 0594   	ld hl,xpix
04048A 7E          0595   	ld a,(hl)
04048B FE 00       0596   	cp 0
04048D C8          0597   	ret z
04048E             0598   
04048E 21 9D FF FF 0599   	ld hl,KEY_SPACE
040492 CD D4 16 04 0600   	call fn_inkey
040496 FE 01       0601   	cp 1
040498 CC 0E 04 04 0602   	call z,dsl_set_pen
04049C             0603   
04049C CD 82 0C 04 0604   	call fn_draw_pixel_without_border
0404A0 CD 2A 0D 04 0605   	call fn_move_left
0404A4 CD 6E 0C 04 0606   	call fn_draw_pixel_with_border
0404A8 CD 4F 16 04 0607   	call fn_slowdown
0404AC C9          0608   	ret
0404AD             0609   
0404AD             0610   ; move pixel right
0404AD             0611   dsl_right:
0404AD 21 37 17 04 0612   	ld hl,spr_size
0404B1 56          0613   	ld d,(hl)
0404B2 15          0614   	dec d
0404B3             0615   
0404B3 21 32 17 04 0616   	ld hl,xpix
0404B7 7E          0617   	ld a,(hl)
0404B8 BA          0618   	cp d
0404B9 C8          0619   	ret z
0404BA             0620   
0404BA 21 9D FF FF 0621   	ld hl,KEY_SPACE
0404BE CD D4 16 04 0622   	call fn_inkey
0404C2 FE 01       0623   	cp 1
0404C4 CC 0E 04 04 0624   	call z,dsl_set_pen
0404C8             0625   
0404C8 CD 82 0C 04 0626   	call fn_draw_pixel_without_border
0404CC CD 30 0D 04 0627   	call fn_move_right
0404D0 CD 6E 0C 04 0628   	call fn_draw_pixel_with_border
0404D4 CD 4F 16 04 0629   	call fn_slowdown
0404D8 C9          0630   	ret
0404D9             0631   
0404D9             0632   ; load a sprite
0404D9             0633   dsl_load_sprite:
0404D9 21 A9 FF FF 0634   	ld hl,KEY_L
0404DD CD D4 16 04 0635   	call fn_inkey
0404E1 FE 00       0636   	cp 0
0404E3 20 F4       0637   	jr nz,dsl_load_sprite
0404E5             0638   
0404E5 CD 82 0C 04 0639   	call fn_draw_pixel_without_border
0404E9 CD 7B 11 04 0640   	call fn_load_sprite
0404ED CD C6 15 04 0641   	call fn_refresh_sprite
0404F1 CD 6E 0C 04 0642   	call fn_draw_pixel_with_border
0404F5 CD 06 16 04 0643   	call fn_change_frame
0404F9 C9          0644   	ret
0404FA             0645   
0404FA             0646   ; save a sprite
0404FA             0647   dsl_save_sprite:
0404FA 21 AE FF FF 0648   	ld hl,KEY_S
0404FE CD D4 16 04 0649   	call fn_inkey
040502 FE 00       0650   	cp 0
040504 20 F4       0651   	jr nz,dsl_save_sprite
040506             0652   
040506 CD 82 0C 04 0653   	call fn_draw_pixel_without_border
04050A CD A4 12 04 0654   	call fn_save_sprite
04050E CD C6 15 04 0655   	call fn_refresh_sprite
040512 C9          0656   	ret
040513             0657   
040513             0658   dsl_export_sprite:
040513 21 DD FF FF 0659   	ld hl,KEY_E
040517 CD D4 16 04 0660   	call fn_inkey
04051B FE 00       0661   	cp 0
04051D 20 F4       0662   	jr nz,dsl_export_sprite
04051F             0663   
04051F CD 82 0C 04 0664   	call fn_draw_pixel_without_border
040523 CD A3 13 04 0665   	call fn_export_sprite
040527 CD C6 15 04 0666   	call fn_refresh_sprite
04052B C9          0667   	ret
04052C             0668   
04052C             0669   
04052C             0670   ; add a frame to the animation
04052C             0671   dsl_add_frame:
04052C 21 AA FF FF 0672   	ld hl,KEY_N
040530 CD D4 16 04 0673   	call fn_inkey
040534 FE 00       0674   	cp 0
040536 20 F4       0675   	jr nz,dsl_add_frame
040538             0676   
040538             0677   	; frames limit reached ? exit
040538 21 45 18 04 0678   	ld hl,frames_count
04053C 7E          0679   	ld a,(hl)
04053D FE 08       0680   	cp MAX_FRAMES
04053F C8          0681   	ret z
040540             0682   
040540             0683   	; get the number of frames to copy
040540 21 45 18 04 0684   	ld hl,frames_count
040544 7E          0685   	ld a,(hl)
040545 21 44 18 04 0686   	ld hl,current_frame
040549 46          0687   	ld b,(hl)
04054A 90          0688   	sub b
04054B 3D          0689   	dec a
04054C             0690   
04054C             0691   	; get sprsize² (length of a sprite, in bytes)
04054C 21 37 17 04 0692   	ld hl,spr_size
040550 11 00 00 00 0693   	ld de,$000000
040554 5E          0694   	ld e,(hl)
040555 56          0695   	ld d,(hl)
040556 ED 5C       0696   	mlt de ; DE = sprsize²
040558             0697   
040558             0698   	; prepare for the case we goto af_zap...
040558 21 4D 18 04 0699   	ld hl,sprite_buffer
04055C             0700   
04055C F5          0701   	push af
04055D E5          0702   	push hl
04055E 21 44 18 04 0703   	ld hl,current_frame
040562 7E          0704   	ld a,(hl)
040563 3C          0705   	inc a
040564 47          0706   	ld b,a
040565 E1          0707   	pop hl
040566 F1          0708   	pop af
040567             0709   
040567             0710   af_loop0:
040567 19          0711   	add hl,de ; for if current frame = 0 (prepare to zap!)
040568 10 FD       0712   	djnz af_loop0
04056A             0713   
04056A E5          0714   	push hl ; store HL = sprite buffer + sprsize²
04056B FE 00       0715   	cp 0
04056D CA 95 05 04 0716   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040571 E1          0717   	pop hl ; HL unused in this case
040572             0718   
040572 21 00 00 00 0719   	ld hl,$000000 ; HL is 0 to store the result
040576 47          0720   	ld b,a ; B = frames to copy
040577             0721   
040577             0722   ; multiply number of frames to copy by sprsize²
040577             0723   af_loop1:
040577 19          0724   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040578 10 FD       0725   	djnz af_loop1
04057A             0726   
04057A E5          0727   	push hl
04057B C1          0728   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04057C             0729   
04057C 21 44 18 04 0730   	ld hl,current_frame
040580 7E          0731   	ld a,(hl)
040581 3C          0732   	inc a
040582 21 4D 18 04 0733   	ld hl,sprite_buffer
040586             0734   
040586 C5          0735   	push bc
040587 47          0736   	ld b,a
040588             0737   
040588             0738   af_loop2:
040588 19          0739   	add hl,de ; HL = sprite buffer + length to copy
040589 10 FD       0740   	djnz af_loop2
04058B             0741   
04058B C1          0742   	pop bc
04058C             0743   
04058C E5          0744   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04058D             0745   
04058D 09          0746   	add hl,bc
04058E 2B          0747   	dec hl ; HL = end address to copy to end target address
04058F             0748   
04058F E5          0749   	push hl
040590 19          0750   	add hl,de
040591 EB          0751   	ex de,hl ; DE = end target address
040592 E1          0752   	pop hl
040593             0753   
040593 ED B8       0754   	lddr
040595             0755   
040595             0756   af_zap:
040595             0757   	; multiply number of frames to copy by sprsize²
040595 21 37 17 04 0758   	ld hl,spr_size
040599 01 00 00 00 0759   	ld bc,$000000
04059D 4E          0760   	ld c,(hl)
04059E 46          0761   	ld b,(hl)
04059F ED 4C       0762   	mlt bc ; BC = sprsize²
0405A1             0763   
0405A1 E1          0764   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
0405A2             0765   
0405A2             0766   ; fill frame with 0 color
0405A2             0767   af_loop3:
0405A2 AF          0768   	xor a
0405A3 77          0769   	ld (hl),a
0405A4 23          0770   	inc hl
0405A5 0B          0771   	dec bc
0405A6 78          0772   	ld a,b
0405A7 B1          0773   	or c
0405A8 FE 00       0774   	cp 0
0405AA 20 F6       0775   	jr nz,af_loop3
0405AC             0776   
0405AC             0777   	; increment the frames count and the current frame values
0405AC 21 45 18 04 0778   	ld hl,frames_count
0405B0 34          0779   	inc (hl)
0405B1 21 44 18 04 0780   	ld hl,current_frame
0405B5 34          0781   	inc (hl)
0405B6             0782   
0405B6 CD 06 16 04 0783   	call fn_change_frame
0405BA CD 2B 16 04 0784   	call fn_change_frames_count
0405BE CD C6 15 04 0785   	call fn_refresh_sprite
0405C2 C9          0786   	ret
0405C3             0787   
0405C3             0788   ; add a copy of the current frame to the animation
0405C3             0789   dsl_add_and_copy_frame: ; TODO! debug me!
0405C3 21 AD FF FF 0790   	ld hl,KEY_C
0405C7 CD D4 16 04 0791   	call fn_inkey
0405CB FE 00       0792   	cp 0
0405CD 20 F4       0793   	jr nz,dsl_add_and_copy_frame
0405CF             0794   
0405CF             0795   	; frames limit reached ? exit
0405CF 21 45 18 04 0796   	ld hl,frames_count
0405D3 7E          0797   	ld a,(hl)
0405D4 FE 08       0798   	cp MAX_FRAMES
0405D6 C8          0799   	ret z
0405D7             0800   
0405D7             0801   	; get the number of frames to copy
0405D7 21 45 18 04 0802   	ld hl,frames_count
0405DB 7E          0803   	ld a,(hl)
0405DC 21 44 18 04 0804   	ld hl,current_frame
0405E0 46          0805   	ld b,(hl)
0405E1 90          0806   	sub b
0405E2             0807   
0405E2             0808   	; get sprsize² (length of a sprite, in bytes)
0405E2 21 37 17 04 0809   	ld hl,spr_size
0405E6 11 00 00 00 0810   	ld de,$000000
0405EA 5E          0811   	ld e,(hl)
0405EB 56          0812   	ld d,(hl)
0405EC ED 5C       0813   	mlt de ; DE = sprsize²
0405EE             0814   
0405EE 21 00 00 00 0815   	ld hl,$000000 ; HL is 0 to store the result
0405F2 47          0816   	ld b,a ; B = frames to copy
0405F3             0817   
0405F3             0818   ; multiply number of frames to copy by sprsize²
0405F3             0819   aacf_loop1:
0405F3 19          0820   	add hl,de ; HL = length (in bytes) to copy (a few frames)
0405F4 10 FD       0821   	djnz aacf_loop1
0405F6             0822   
0405F6 E5          0823   	push hl
0405F7 C1          0824   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
0405F8             0825   
0405F8 21 44 18 04 0826   	ld hl,current_frame
0405FC 7E          0827   	ld a,(hl)
0405FD 21 4D 18 04 0828   	ld hl,sprite_buffer
040601 FE 00       0829   	cp 0
040603 28 06       0830   	jr z,aacf_loop_end2
040605             0831   
040605 C5          0832   	push bc
040606 47          0833   	ld b,a
040607             0834   
040607             0835   aacf_loop2:
040607 19          0836   	add hl,de ; HL = sprite buffer + length to copy
040608 10 FD       0837   	djnz aacf_loop2
04060A             0838   
04060A C1          0839   	pop bc
04060B             0840   
04060B             0841   aacf_loop_end2:
04060B 09          0842   	add hl,bc
04060C 2B          0843   	dec hl ; HL = end address to copy to end target address
04060D             0844   
04060D E5          0845   	push hl
04060E 19          0846   	add hl,de
04060F EB          0847   	ex de,hl ; DE = end target address
040610 E1          0848   	pop hl
040611             0849   
040611 ED B8       0850   	lddr
040613             0851   
040613             0852   	; increment the frames count and the current frame values
040613 21 45 18 04 0853   	ld hl,frames_count
040617 34          0854   	inc (hl)
040618 21 44 18 04 0855   	ld hl,current_frame
04061C 34          0856   	inc (hl)
04061D             0857   
04061D CD 06 16 04 0858   	call fn_change_frame
040621 CD 2B 16 04 0859   	call fn_change_frames_count
040625 CD C6 15 04 0860   	call fn_refresh_sprite
040629 C9          0861   	ret
04062A             0862   
04062A             0863   ; delete last frame from animation
04062A             0864   dsl_delete_frame:
04062A 21 D0 FF FF 0865   	ld hl,KEY_BACKSPACE
04062E CD D4 16 04 0866   	call fn_inkey
040632 FE 00       0867   	cp 0
040634 20 F4       0868   	jr nz,dsl_delete_frame
040636             0869   
040636             0870   	; delete current selected frame
040636 21 37 17 04 0871   	ld hl,spr_size
04063A 01 00 00 00 0872   	ld bc,$000000
04063E 4E          0873   	ld c,(hl)
04063F 46          0874   	ld b,(hl)
040640 ED 4C       0875   	mlt bc ; BC = sprsize²
040642 21 44 18 04 0876   	ld hl,current_frame
040646 7E          0877   	ld a,(hl) ; A = current frame
040647 21 4D 18 04 0878   	ld hl,sprite_buffer ; HL = sprite buffer
04064B C5          0879   	push bc
04064C FE 00       0880   	cp 0
04064E 28 06       0881   	jr z,df_loop2
040650             0882   
040650             0883   df_loop1:
040650 09          0884   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
040651 3D          0885   	dec a
040652 FE 00       0886   	cp 0
040654 20 FA       0887   	jr nz,df_loop1
040656             0888   
040656             0889   ; clear the current frame
040656             0890   df_loop2:
040656 AF          0891   	xor a
040657 77          0892   	ld (hl),a
040658 23          0893   	inc hl
040659 0B          0894   	dec bc
04065A 78          0895   	ld a,b
04065B B1          0896   	or c
04065C FE 00       0897   	cp 0
04065E 20 F6       0898   	jr nz,df_loop2
040660             0899   
040660             0900   	; current frame + 1 = frames count ?
040660 E5          0901   	push hl
040661 21 44 18 04 0902   	ld hl,current_frame
040665 5E          0903   	ld e,(hl)
040666 1C          0904   	inc e
040667 21 45 18 04 0905   	ld hl,frames_count
04066B 7E          0906   	ld a,(hl)
04066C BB          0907   	cp e
04066D E1          0908   	pop hl
04066E C1          0909   	pop bc
04066F CA E8 06 04 0910   	jp z,df_exit
040673             0911   
040673 11 45 18 04 0912   	ld de,frames_count
040677 1A          0913   	ld a,(de) ; A = frames count
040678 E5          0914   	push hl
040679 21 44 18 04 0915   	ld hl,current_frame
04067D 5E          0916   	ld e,(hl) ; E = current frame
04067E E1          0917   	pop hl
04067F 93          0918   	sub e
040680 3D          0919   	dec a ; A = number of frames to copy back
040681             0920   
040681 EB          0921   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040682 21 00 00 00 0922   	ld hl,$000000
040686 FE 00       0923   	cp 0 ; 0 frames to copy ?
040688 28 06       0924   	jr z,df_exit_loop3
04068A             0925   
04068A             0926   df_loop3:
04068A 09          0927   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04068B 3D          0928   	dec a
04068C FE 00       0929   	cp 0
04068E 20 FA       0930   	jr nz,df_loop3
040690             0931   
040690             0932   df_exit_loop3:
040690 E5          0933   	push hl
040691 C1          0934   	pop bc ; BC = total length of area to copy
040692 D5          0935   	push de
040693 E1          0936   	pop hl ; HL = DE = start of area to copy
040694             0937   
040694 C5          0938   	push bc
040695 D5          0939   	push de
040696 E5          0940   	push hl
040697 21 37 17 04 0941   	ld hl,spr_size
04069B 11 00 00 00 0942   	ld de,$000000
04069F 5E          0943   	ld e,(hl)
0406A0 56          0944   	ld d,(hl)
0406A1 ED 5C       0945   	mlt de ; DE = one sprite frame length
0406A3 E1          0946   	pop hl
0406A4 B7          0947   	or a
0406A5 ED 52       0948   	sbc hl,de ; HL = target area to copy
0406A7 D1          0949   	pop de
0406A8 EB          0950   	ex de,hl ; DE = target, HL = start
0406A9 C1          0951   	pop bc
0406AA ED B0       0952   	ldir
0406AC             0953   
0406AC 21 37 17 04 0954   	ld hl,spr_size
0406B0 01 00 00 00 0955   	ld bc,$000000
0406B4 4E          0956   	ld c,(hl)
0406B5 46          0957   	ld b,(hl)
0406B6 ED 4C       0958   	mlt bc ; DE = one sprite frame length
0406B8             0959   
0406B8             0960   	; delete last frame data
0406B8 21 45 18 04 0961   	ld hl,frames_count
0406BC 7E          0962   	ld a,(hl) ; A =frames count
0406BD 3D          0963   	dec a ; A = last frame
0406BE 21 4D 18 04 0964   	ld hl,sprite_buffer ; HL = sprite buffer
0406C2 FE 00       0965   	cp 0
0406C4 28 06       0966   	jr z,df_loop5
0406C6             0967   
0406C6             0968   df_loop4:
0406C6 09          0969   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
0406C7 3D          0970   	dec a
0406C8 FE 00       0971   	cp 0
0406CA 20 FA       0972   	jr nz,df_loop4
0406CC             0973   
0406CC             0974   ; clear the current frame
0406CC             0975   df_loop5:
0406CC AF          0976   	xor a
0406CD 77          0977   	ld (hl),a
0406CE 23          0978   	inc hl
0406CF 0B          0979   	dec bc
0406D0 78          0980   	ld a,b
0406D1 B1          0981   	or c
0406D2 FE 00       0982   	cp 0
0406D4 20 F6       0983   	jr nz,df_loop5
0406D6             0984   
0406D6             0985   	; decrement frames count
0406D6 21 45 18 04 0986   	ld hl,frames_count
0406DA 35          0987   	dec (hl)
0406DB             0988   
0406DB CD 06 16 04 0989   	call fn_change_frame
0406DF CD 2B 16 04 0990   	call fn_change_frames_count
0406E3 CD C6 15 04 0991   	call fn_refresh_sprite
0406E7 C9          0992   	ret
0406E8             0993   
0406E8             0994   df_exit:
0406E8 21 45 18 04 0995   	ld hl,frames_count
0406EC 7E          0996   	ld a,(hl)
0406ED FE 01       0997   	cp 1
0406EF 28 06       0998   	jr z,df_exit_end
0406F1 35          0999   	dec (hl)
0406F2 21 44 18 04 1000   	ld hl,current_frame
0406F6 35          1001   	dec (hl)
0406F7             1002   
0406F7             1003   df_exit_end:
0406F7 CD 06 16 04 1004   	call fn_change_frame
0406FB CD 2B 16 04 1005   	call fn_change_frames_count
0406FF CD C6 15 04 1006   	call fn_refresh_sprite
040703 C9          1007   	ret
040704             1008   
040704             1009   ; goto previous frame
040704             1010   dsl_previous_frame:
040704 21 B1 FF FF 1011   	ld hl,KEY_PGDOWN
040708 CD D4 16 04 1012   	call fn_inkey
04070C FE 00       1013   	cp 0
04070E 20 F4       1014   	jr nz,dsl_previous_frame
040710             1015   
040710 21 44 18 04 1016   	ld hl,current_frame
040714 7E          1017   	ld a,(hl)
040715 FE 00       1018   	cp 0
040717 C8          1019   	ret z
040718             1020   
040718 3D          1021   	dec a
040719 77          1022   	ld (hl),a
04071A CD 06 16 04 1023   	call fn_change_frame
04071E CD C6 15 04 1024   	call fn_refresh_sprite
040722 C9          1025   	ret
040723             1026   
040723             1027   ; goto next frame
040723             1028   dsl_next_frame:
040723 21 C0 FF FF 1029   	ld hl,KEY_PGUP
040727 CD D4 16 04 1030   	call fn_inkey
04072B FE 00       1031   	cp 0
04072D 20 F4       1032   	jr nz,dsl_next_frame
04072F             1033   
04072F 21 44 18 04 1034   	ld hl,current_frame
040733 7E          1035   	ld a,(hl)
040734 3C          1036   	inc a
040735 21 45 18 04 1037   	ld hl,frames_count
040739 BE          1038   	cp (hl)
04073A C8          1039   	ret z
04073B             1040   
04073B 21 44 18 04 1041   	ld hl,current_frame
04073F 77          1042   	ld (hl),a
040740 CD 06 16 04 1043   	call fn_change_frame
040744 CD C6 15 04 1044   	call fn_refresh_sprite
040748 C9          1045   	ret
040749             1046   
040749             1047   ; rotate a frame 90° clockwise
040749             1048   dsl_rotate_frame:
040749 21 CC FF FF 1049   	ld hl,KEY_R
04074D CD D4 16 04 1050   	call fn_inkey
040751 FE 00       1051   	cp 0
040753 20 F4       1052   	jr nz,dsl_rotate_frame
040755             1053   
040755             1054   	; find HL as start of the first frame (buffer)
040755 21 37 17 04 1055   	ld hl,spr_size
040759 01 00 00 00 1056   	ld bc,$000000
04075D 11 00 00 00 1057   	ld de,$000000
040761 5E          1058   	ld e,(hl)
040762 56          1059   	ld d,(hl)
040763 4B          1060   	ld c,e
040764 ED 5C       1061   	mlt de ; DE = sprite length in bytes
040766 21 44 18 04 1062   	ld hl,current_frame
04076A 7E          1063   	ld a,(hl) ; A = current frame
04076B 21 4D 18 04 1064   	ld hl,sprite_buffer
04076F FE 00       1065   	cp 0
040771 28 04       1066   	jr z,rf_noloop1
040773 47          1067   	ld b,a
040774             1068   
040774             1069   rf_loop1:
040774 19          1070   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040775 10 FD       1071   	djnz rf_loop1
040777             1072   
040777             1073   rf_noloop1:
040777 C5          1074   	push bc
040778 E5          1075   	push hl
040779             1076   
040779             1077   	; copy current frame to swap sprite buffer
040779 11 B7 3B 04 1078   	ld de,swap_sprite_buffer
04077D 41          1079   	ld b,c
04077E ED 4C       1080   	mlt bc
040780 ED B0       1081   	ldir
040782             1082   
040782 FD E1       1083   	pop iy ; IY: destination
040784 C1          1084   	pop bc
040785             1085   
040785 79          1086   	ld a,c
040786 01 00 00 00 1087   	ld bc,$000000
04078A 4F          1088   	ld c,a ; BC = sprite size
04078B             1089   
04078B             1090   	; turn and copy swap sprite buffer frame to sprite buffer
04078B DD 21 B7 3B 1091   	ld ix,swap_sprite_buffer ; IX: source
       04          
040790 11 00 00 00 1092   	ld de,0 ; x
040794 21 00 00 00 1093   	ld hl,0 ; y
040798             1094   
040798             1095   rf_loop2:
040798 DD E5       1096   	push ix
04079A FD E5       1097   	push iy
04079C             1098   
04079C D5          1099   	push de
04079D E5          1100   	push hl
04079E             1101   
04079E             1102   	; add x
04079E DD 19       1103   	add ix,de
0407A0             1104   
0407A0             1105   	; add y * width
0407A0 7C          1106   	ld a,h
0407A1 B5          1107   	or l
0407A2 FE 00       1108   	cp 0
0407A4 28 09       1109   	jr z,rf_done1
0407A6             1110   rf_loop3:
0407A6 DD 09       1111   	add ix,bc
0407A8 2B          1112   	dec hl
0407A9 7C          1113   	ld a,h
0407AA B5          1114   	or l
0407AB FE 00       1115   	cp 0
0407AD 20 F7       1116   	jr nz,rf_loop3
0407AF             1117   
0407AF             1118   rf_done1:
0407AF             1119   	; found the pixel value
0407AF DD 7E 00    1120   	ld a,(ix+0)
0407B2             1121   
0407B2 E1          1122   	pop hl
0407B3 D1          1123   	pop de
0407B4 D5          1124   	push de
0407B5 E5          1125   	push hl
0407B6             1126   
0407B6             1127   	; add y
0407B6 EB          1128   	ex de,hl
0407B7 FD 09       1129   	add iy,bc
0407B9 B7          1130   	or a
0407BA E5          1131   	push hl
0407BB FD E5       1132   	push iy
0407BD E1          1133   	pop hl
0407BE ED 52       1134   	sbc hl,de
0407C0 E5          1135   	push hl
0407C1 FD E1       1136   	pop iy
0407C3 FD 2B       1137   	dec iy
0407C5 E1          1138   	pop hl
0407C6 EB          1139   	ex de,hl
0407C7             1140   
0407C7             1141   	; add x * width
0407C7 F5          1142   	push af
0407C8 7A          1143   	ld a,d
0407C9 B3          1144   	or e
0407CA FE 00       1145   	cp 0
0407CC 28 09       1146   	jr z,rf_done2
0407CE             1147   rf_loop5:
0407CE FD 09       1148   	add iy,bc
0407D0 1B          1149   	dec de
0407D1 7A          1150   	ld a,d
0407D2 B3          1151   	or e
0407D3 FE 00       1152   	cp 0
0407D5 20 F7       1153   	jr nz,rf_loop5
0407D7             1154   
0407D7             1155   rf_done2:
0407D7 F1          1156   	pop af
0407D8             1157   
0407D8             1158   	; store the pixel value
0407D8 FD 77 00    1159   	ld (iy+0),a
0407DB             1160   
0407DB E1          1161   	pop hl
0407DC D1          1162   	pop de
0407DD             1163   
0407DD FD E1       1164   	pop iy
0407DF DD E1       1165   	pop ix
0407E1             1166   
0407E1 13          1167   	inc de
0407E2 EB          1168   	ex de,hl
0407E3 B7          1169   	or a
0407E4 ED 42       1170   	sbc hl,bc
0407E6 09          1171   	add hl,bc
0407E7 EB          1172   	ex de,hl
0407E8 DA 98 07 04 1173   	jp c,rf_loop2
0407EC             1174   
0407EC 11 00 00 00 1175   	ld de,0
0407F0 23          1176   	inc hl
0407F1 B7          1177   	or a
0407F2 ED 42       1178   	sbc hl,bc
0407F4 09          1179   	add hl,bc
0407F5 DA 98 07 04 1180   	jp c,rf_loop2
0407F9             1181   
0407F9 CD C6 15 04 1182   	call fn_refresh_sprite
0407FD C9          1183   	ret
0407FE             1184   
0407FE             1185   ; flip frame horizontally
0407FE             1186   dsl_flip_frame:
0407FE 21 BC FF FF 1187   	ld hl,KEY_F
040802 CD D4 16 04 1188   	call fn_inkey
040806 FE 00       1189   	cp 0
040808 20 F4       1190   	jr nz,dsl_flip_frame
04080A             1191   
04080A 21 37 17 04 1192   	ld hl,spr_size
04080E 11 00 00 00 1193   	ld de,$000000
040812 5E          1194   	ld e,(hl)
040813 56          1195   	ld d,(hl)
040814 4B          1196   	ld c,e
040815 ED 5C       1197   	mlt de ; DE = sprite length in bytes
040817 21 44 18 04 1198   	ld hl,current_frame
04081B 7E          1199   	ld a,(hl) ; A = current frame
04081C 21 4D 18 04 1200   	ld hl,sprite_buffer
040820 FE 00       1201   	cp 0
040822 28 04       1202   	jr z,ff_noloop1
040824 47          1203   	ld b,a
040825             1204   
040825             1205   ff_loop1:
040825 19          1206   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040826 10 FD       1207   	djnz ff_loop1
040828             1208   
040828             1209   ff_noloop1:
040828 41          1210   	ld b,c ; B = sprite height
040829 11 00 00 00 1211   	ld de,$000000
04082D 59          1212   	ld e,c ; DE = sprite width
04082E 79          1213   	ld a,c ; A = sprite width
04082F CB 3F       1214   	srl a ; A = sprite height / 2
040831             1215   
040831 E5          1216   	push hl
040832 DD E1       1217   	pop ix ; IX = frame address
040834 19          1218   	add hl,de ; HL = frame address + sprite width - 1
040835 2B          1219   	dec hl
040836 E5          1220   	push hl
040837 FD E1       1221   	pop iy ; IY = IX + sprite width - 1
040839             1222   
040839             1223   ff_loop2:
040839 F5          1224   	push af
04083A D5          1225   	push de
04083B DD E5       1226   	push ix
04083D FD E5       1227   	push iy
04083F             1228   ff_loop3:
04083F DD 5E 00    1229   	ld e,(ix+0)
040842 FD 56 00    1230   	ld d,(iy+0)
040845 DD 72 00    1231   	ld (ix+0),d
040848 FD 73 00    1232   	ld (iy+0),e
04084B DD 23       1233   	inc ix
04084D FD 2B       1234   	dec iy
04084F 3D          1235   	dec a
040850 FE 00       1236   	cp 0
040852 20 EB       1237   	jr nz,ff_loop3
040854 FD E1       1238   	pop iy
040856 DD E1       1239   	pop ix
040858 D1          1240   	pop de
040859 F1          1241   	pop af
04085A DD 19       1242   	add ix,de
04085C FD 19       1243   	add iy,de
04085E 10 D9       1244   	djnz ff_loop2
040860             1245   
040860 CD C6 15 04 1246   	call fn_refresh_sprite
040864 C9          1247   	ret
040865             1248   
040865             1249   ; mirror frame vertically
040865             1250   dsl_mirror_frame:
040865 21 9A FF FF 1251   	ld hl,KEY_M
040869 CD D4 16 04 1252   	call fn_inkey
04086D FE 00       1253   	cp 0
04086F 20 F4       1254   	jr nz,dsl_mirror_frame
040871             1255   
040871 21 37 17 04 1256   	ld hl,spr_size
040875 01 00 00 00 1257   	ld bc,$000000
040879 11 00 00 00 1258   	ld de,$000000
04087D 5E          1259   	ld e,(hl)
04087E 56          1260   	ld d,(hl)
04087F 4B          1261   	ld c,e
040880 ED 5C       1262   	mlt de ; DE = sprite length in bytes
040882 21 44 18 04 1263   	ld hl,current_frame
040886 7E          1264   	ld a,(hl) ; A = current frame
040887 21 4D 18 04 1265   	ld hl,sprite_buffer
04088B FE 00       1266   	cp 0
04088D 28 04       1267   	jr z,mf_noloop1
04088F 47          1268   	ld b,a
040890             1269   
040890             1270   mf_loop1:
040890 19          1271   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040891 10 FD       1272   	djnz mf_loop1
040893             1273   
040893             1274   mf_noloop1:
040893 11 00 00 00 1275   	ld de,$000000
040897 59          1276   	ld e,c ; E = sprite height
040898 79          1277   	ld a,c ; A = sprite width
040899 41          1278   	ld b,c ; B = sprite height
04089A CB 38       1279   	srl b ; divide B by 2, so B = sprite height / 2
04089C             1280   
04089C E5          1281   	push hl
04089D DD E1       1282   	pop ix ; IX = frame address
04089F 51          1283   	ld d,c
0408A0 15          1284   	dec d
0408A1 ED 5C       1285   	mlt de ; DE = sprite length - sprite width
0408A3 19          1286   	add hl,de ; HL = frame address + sprite length - sprite width
0408A4 E5          1287   	push hl
0408A5 FD E1       1288   	pop iy ; IY = IX + sprite length - sprite width
0408A7 21 00 00 00 1289   	ld hl,$000000
0408AB 69          1290   	ld l,c ; HL = sprite width
0408AC             1291   
0408AC             1292   mf_loop2:
0408AC F5          1293   	push af
0408AD D5          1294   	push de
0408AE DD E5       1295   	push ix
0408B0 FD E5       1296   	push iy
0408B2             1297   mf_loop3:
0408B2 DD 5E 00    1298   	ld e,(ix+0)
0408B5 FD 56 00    1299   	ld d,(iy+0)
0408B8 DD 72 00    1300   	ld (ix+0),d
0408BB FD 73 00    1301   	ld (iy+0),e
0408BE DD 23       1302   	inc ix
0408C0 FD 23       1303   	inc iy
0408C2 3D          1304   	dec a
0408C3 FE 00       1305   	cp 0
0408C5 20 EB       1306   	jr nz,mf_loop3
0408C7 FD E1       1307   	pop iy
0408C9 DD E1       1308   	pop ix
0408CB D1          1309   	pop de
0408CC F1          1310   	pop af
0408CD EB          1311   	ex de,hl
0408CE DD 19       1312   	add ix,de
0408D0 EB          1313   	ex de,hl
0408D1 E5          1314   	push hl
0408D2 FD E5       1315   	push iy
0408D4 E1          1316   	pop hl
0408D5 D1          1317   	pop de
0408D6 B7          1318   	or a
0408D7 ED 52       1319   	sbc hl,de
0408D9 E5          1320   	push hl
0408DA D5          1321   	push de
0408DB E1          1322   	pop hl
0408DC FD E1       1323   	pop iy
0408DE 10 CC       1324   	djnz mf_loop2
0408E0             1325   
0408E0 CD C6 15 04 1326   	call fn_refresh_sprite
0408E4 C9          1327   	ret
0408E5             1328   
0408E5             1329   dsl_flood_fill:
0408E5 21 B6 FF FF 1330   	ld hl,KEY_RETURN
0408E9 CD D4 16 04 1331   	call fn_inkey
0408ED FE 00       1332   	cp 0
0408EF 20 F4       1333   	jr nz,dsl_flood_fill
0408F1             1334   
0408F1             1335   	; hide the cursor
0408F1 CD 82 0C 04 1336   	call fn_draw_pixel_without_border
0408F5             1337   
0408F5             1338   	; memorize pixel coordinates
0408F5 3A 32 17 04 1339   	ld a,(xpix)
0408F9 32 34 17 04 1340   	ld (memxpix),a
0408FD 3A 33 17 04 1341   	ld a,(ypix)
040901 32 35 17 04 1342   	ld (memypix),a
040905             1343   
040905             1344   	; fill all recursively
040905 3A 32 17 04 1345   	ld a,(xpix)
040909 5F          1346   	ld e,a
04090A 3A 33 17 04 1347   	ld a,(ypix)
04090E 57          1348   	ld d,a
04090F CD 30 09 04 1349   	call dsl_flood_fill_loop
040913             1350   
040913             1351   	; refresh all the sprite
040913 CD C6 15 04 1352   	call fn_refresh_sprite
040917             1353   
040917             1354   	; hide the cursor again
040917 CD 82 0C 04 1355   	call fn_draw_pixel_without_border
04091B             1356   
04091B             1357   	; restore pixel coordinates
04091B             1358   	; and cursor
04091B 3A 34 17 04 1359   	ld a,(memxpix)
04091F 32 32 17 04 1360   	ld (xpix),a
040923 3A 35 17 04 1361   	ld a,(memypix)
040927 32 33 17 04 1362   	ld (ypix),a
04092B CD 6E 0C 04 1363   	call fn_draw_pixel_with_border
04092F C9          1364   	ret
040930             1365   
040930             1366   dsl_flood_fill_loop:
040930 D5          1367   	push de
040931             1368   
040931 DD 21 37 17 1369   	ld ix,spr_size
       04          
040936             1370   
040936             1371   	; out  of the sprite area ?
040936 7B          1372   	ld a,e
040937 DD BE 00    1373   	cp (ix+0)
04093A D2 83 09 04 1374   	jp nc,ffl_exit
04093E             1375   
04093E             1376   	; out  of the sprite area ?
04093E 7A          1377   	ld a,d
04093F DD BE 00    1378   	cp (ix+0)
040942 D2 83 09 04 1379   	jp nc,ffl_exit
040946             1380   
040946             1381   	; replace current pixel, if it is
040946             1382   	; inside the sprite area,
040946             1383   	; and has not the select palette color
040946 7B          1384   	ld a,e
040947 32 32 17 04 1385   	ld (xpix),a
04094B 7A          1386   	ld a,d
04094C 32 33 17 04 1387   	ld (ypix),a
040950 CD 98 0C 04 1388   	call fn_get_pixel_color
040954 21 38 17 04 1389   	ld hl,current_pen
040958 BE          1390   	cp (hl)
040959 CA 83 09 04 1391   	jp z,ffl_exit
04095D 7E          1392   	ld a,(hl)
04095E CD DA 0C 04 1393   	call fn_set_pixel_color
040962             1394   
040962             1395   	; restore coordinates
040962 3A 32 17 04 1396   	ld a,(xpix)
040966 5F          1397   	ld e,a
040967 3A 33 17 04 1398   	ld a,(ypix)
04096B 57          1399   	ld d,a
04096C             1400   
04096C             1401   	; draw pixel at right
04096C 1C          1402   	inc e
04096D CD 30 09 04 1403   	call dsl_flood_fill_loop
040971 1D          1404   	dec e
040972             1405   	; draw pixel at left
040972 1D          1406   	dec e
040973 CD 30 09 04 1407   	call dsl_flood_fill_loop
040977 1C          1408   	inc e
040978             1409   	; draw pixel up
040978 14          1410   	inc d
040979 CD 30 09 04 1411   	call dsl_flood_fill_loop
04097D 15          1412   	dec d
04097E             1413   	; draw pixel down
04097E 15          1414   	dec d
04097F CD 30 09 04 1415   	call dsl_flood_fill_loop
040983             1416   
040983             1417   ffl_exit:
040983 D1          1418   	pop de
040984 C9          1419   	ret
040985             1420   
040985             1421   ; change current tool to palette tool
040985             1422   dsl_palette_tool:
040985 21 9F FF FF 1423   	ld hl,KEY_TAB
040989 CD D4 16 04 1424   	call fn_inkey
04098D FE 00       1425   	cp 0
04098F 20 F4       1426   	jr nz,dsl_palette_tool
040991             1427   
040991             1428   	; hide sprite drawing cursor
040991 CD 82 0C 04 1429   	call fn_draw_pixel_without_border
040995             1430   
040995             1431   	; draw selected palette color
040995 21 38 17 04 1432   	ld hl,current_pen
040999 4E          1433   	ld c,(hl)
04099A CD 36 0D 04 1434   	call fn_draw_palette_with_border
04099E             1435   
04099E             1436   ; select palette color
04099E             1437   dsl_palette_tool_loop:
04099E             1438   	; move to left color in the palette
04099E 21 E6 FF FF 1439   	ld hl,KEY_LEFT
0409A2 CD D4 16 04 1440   	call fn_inkey
0409A6 FE 01       1441   	cp 1
0409A8 CC 67 0A 04 1442   	call z,dsl_dec_pen
0409AC             1443   
0409AC             1444   	; move to right color in the palette
0409AC 21 86 FF FF 1445   	ld hl,KEY_RIGHT
0409B0 CD D4 16 04 1446   	call fn_inkey
0409B4 FE 01       1447   	cp 1
0409B6 CC 92 0A 04 1448   	call z,dsl_inc_pen
0409BA             1449   
0409BA             1450   	; return to draw sprite tool
0409BA 21 9F FF FF 1451   	ld hl,KEY_TAB
0409BE CD D4 16 04 1452   	call fn_inkey
0409C2 FE 01       1453   	cp 1
0409C4 CA 4A 0A 04 1454   	jp z,dsl_draw_sprite_tool
0409C8             1455   
0409C8             1456   	; load palette
0409C8 21 A9 FF FF 1457   	ld hl,KEY_L
0409CC CD D4 16 04 1458   	call fn_inkey
0409D0 FE 01       1459   	cp 1
0409D2 CC F6 09 04 1460   	call z,dslp_load_palette
0409D6             1461   
0409D6             1462   	; save palette
0409D6 21 AE FF FF 1463   	ld hl,KEY_S
0409DA CD D4 16 04 1464   	call fn_inkey
0409DE FE 01       1465   	cp 1
0409E0 CC 24 0A 04 1466   	call z,dslp_save_palette
0409E4             1467   
0409E4             1468   	; exit program
0409E4 21 8F FF FF 1469   	ld hl,KEY_ESCAPE
0409E8 CD D4 16 04 1470   	call fn_inkey
0409EC FE 01       1471   	cp 1
0409EE CA BD 0A 04 1472   	jp z,exit_program
0409F2             1473   
0409F2 C3 9E 09 04 1474   	jp dsl_palette_tool_loop
0409F6             1475   
0409F6             1476   dslp_load_palette:
0409F6 21 A9 FF FF 1477   	ld hl,KEY_L
0409FA CD D4 16 04 1478   	call fn_inkey
0409FE FE 00       1479   	cp 0
040A00 20 F4       1480   	jr nz,dslp_load_palette
040A02             1481   
040A02 21 38 17 04 1482   	ld hl,current_pen
040A06 4E          1483   	ld c,(hl)
040A07 CD 9B 0D 04 1484   	call fn_draw_palette_without_border
040A0B CD 06 0F 04 1485   	call fn_load_palette
040A0F 21 38 17 04 1486   	ld hl,current_pen
040A13 4E          1487   	ld c,(hl)
040A14 CD C6 15 04 1488   	call fn_refresh_sprite
040A18 CD 36 0D 04 1489   	call fn_draw_palette_with_border
040A1C CD 06 16 04 1490   	call fn_change_frame
040A20 C3 9E 09 04 1491   	jp dsl_palette_tool_loop
040A24             1492   
040A24             1493   dslp_save_palette:
040A24 21 AE FF FF 1494   	ld hl,KEY_S
040A28 CD D4 16 04 1495   	call fn_inkey
040A2C FE 00       1496   	cp 0
040A2E 20 F4       1497   	jr nz,dslp_save_palette
040A30             1498   
040A30 21 38 17 04 1499   	ld hl,current_pen
040A34 4E          1500   	ld c,(hl)
040A35 CD 9B 0D 04 1501   	call fn_draw_palette_without_border
040A39 CD 7A 11 04 1502   	call fn_save_palette
040A3D 21 38 17 04 1503   	ld hl,current_pen
040A41 4E          1504   	ld c,(hl)
040A42 CD 36 0D 04 1505   	call fn_draw_palette_with_border
040A46 C3 9E 09 04 1506   	jp dsl_palette_tool_loop
040A4A             1507   
040A4A             1508   dsl_draw_sprite_tool:
040A4A 21 9F FF FF 1509   	ld hl,KEY_TAB
040A4E CD D4 16 04 1510   	call fn_inkey
040A52 FE 00       1511   	cp 0
040A54 20 F4       1512   	jr nz,dsl_draw_sprite_tool
040A56             1513   
040A56             1514   	; unselect palette color
040A56 21 38 17 04 1515   	ld hl,current_pen
040A5A 4E          1516   	ld c,(hl)
040A5B CD 9B 0D 04 1517   	call fn_draw_palette_without_border
040A5F             1518   
040A5F             1519   	; draw the pixel with a border
040A5F CD 6E 0C 04 1520   	call fn_draw_pixel_with_border
040A63             1521   
040A63 C3 F2 02 04 1522   	jp draw_sprite_loop
040A67             1523   
040A67             1524   dsl_dec_pen:
040A67 21 38 17 04 1525   	ld hl,current_pen
040A6B 7E          1526   	ld a,(hl)
040A6C FE 00       1527   	cp COLOR_MIN
040A6E CA 9E 09 04 1528   	jp z,dsl_palette_tool_loop
040A72             1529   
040A72 F5          1530   	push af
040A73 E5          1531   	push hl
040A74             1532   
040A74             1533   	; unselect palette color
040A74 21 38 17 04 1534   	ld hl,current_pen
040A78 4E          1535   	ld c,(hl)
040A79 CD 9B 0D 04 1536   	call fn_draw_palette_without_border
040A7D             1537   
040A7D E1          1538   	pop hl
040A7E F1          1539   	pop af
040A7F             1540   
040A7F             1541   	; dec the pen
040A7F 3D          1542   	dec a
040A80 77          1543   	ld (hl),a
040A81             1544   
040A81             1545   	; select palette color
040A81 21 38 17 04 1546   	ld hl,current_pen
040A85 4E          1547   	ld c,(hl)
040A86 CD 36 0D 04 1548   	call fn_draw_palette_with_border
040A8A CD 4F 16 04 1549   	call fn_slowdown
040A8E C3 9E 09 04 1550   	jp dsl_palette_tool_loop
040A92             1551   
040A92             1552   dsl_inc_pen:
040A92 21 38 17 04 1553   	ld hl,current_pen
040A96 7E          1554   	ld a,(hl)
040A97 FE 3F       1555   	cp COLOR_MAX
040A99 CA 9E 09 04 1556   	jp z,dsl_palette_tool_loop
040A9D             1557   
040A9D F5          1558   	push af
040A9E E5          1559   	push hl
040A9F             1560   
040A9F             1561   	; unselect palette color
040A9F 21 38 17 04 1562   	ld hl,current_pen
040AA3 4E          1563   	ld c,(hl)
040AA4 CD 9B 0D 04 1564   	call fn_draw_palette_without_border
040AA8             1565   
040AA8 E1          1566   	pop hl
040AA9 F1          1567   	pop af
040AAA             1568   
040AAA             1569   	; inc the pen
040AAA 3C          1570   	inc a
040AAB 77          1571   	ld (hl),a
040AAC             1572   
040AAC             1573   	; select palette color
040AAC 21 38 17 04 1574   	ld hl,current_pen
040AB0 4E          1575   	ld c,(hl)
040AB1 CD 36 0D 04 1576   	call fn_draw_palette_with_border
040AB5 CD 4F 16 04 1577   	call fn_slowdown
040AB9 C3 9E 09 04 1578   	jp dsl_palette_tool_loop
040ABD             1579   
040ABD             1580   ; exit program
040ABD             1581   exit_program:
040ABD             1582   	; reset to mode 1
040ABD             1583   	vdu 22
040ABD 3E 16       0001M  		LD	A, function
040ABF 49 D7       0002M  		RST.LIS	10h
040AC1             1584   	vdu 1
040AC1 3E 01       0001M  		LD	A, function
040AC3 49 D7       0002M  		RST.LIS	10h
040AC5             1585   
040AC5             1586   	; position the texte cursor at home
040AC5             1587   	vdu 30
040AC5 3E 1E       0001M  		LD	A, function
040AC7 49 D7       0002M  		RST.LIS	10h
040AC9             1588   
040AC9             1589   	; show cursor
040AC9             1590   	vdu 23
040AC9 3E 17       0001M  		LD	A, function
040ACB 49 D7       0002M  		RST.LIS	10h
040ACD             1591   	vdu 1
040ACD 3E 01       0001M  		LD	A, function
040ACF 49 D7       0002M  		RST.LIS	10h
040AD1             1592   	vdu 1
040AD1 3E 01       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5             1593   
040AD5 FD E1       1594   	pop iy
040AD7 DD E1       1595   	pop ix
040AD9 D1          1596   	pop de
040ADA C1          1597   	pop bc
040ADB F1          1598   	pop af
040ADC 21 00 00 00 1599   	ld hl,0
040AE0             1600   
040AE0 C9          1601   	ret
040AE1             1602   ;======================================================================
040AE1             1603   
040AE1             1604   ; draw a rectangle
040AE1             1605   fn_rect:
040AE1             1606   	vdu 25
040AE1 3E 19       0001M  		LD	A, function
040AE3 49 D7       0002M  		RST.LIS	10h
040AE5             1607   	vdu 4
040AE5 3E 04       0001M  		LD	A, function
040AE7 49 D7       0002M  		RST.LIS	10h
040AE9 DD 21 22 17 1608   	ld ix,x1
       04          
040AEE DD 7E 00    1609   	ld a,(ix + 0)
040AF1             1610   	vdu_a
040AF1 49 D7       0001M  		RST.LIS	10h
040AF3 DD 7E 01    1611   	ld a,(ix + 1)
040AF6             1612   	vdu_a
040AF6 49 D7       0001M  		RST.LIS	10h
040AF8 FD 21 24 17 1613   	ld iy,y1
       04          
040AFD FD 7E 00    1614   	ld a,(iy + 0)
040B00             1615   	vdu_a
040B00 49 D7       0001M  		RST.LIS	10h
040B02 FD 7E 01    1616   	ld a,(iy + 1)
040B05             1617   	vdu_a
040B05 49 D7       0001M  		RST.LIS	10h
040B07             1618   
040B07             1619   	vdu 25
040B07 3E 19       0001M  		LD	A, function
040B09 49 D7       0002M  		RST.LIS	10h
040B0B             1620   	vdu 5
040B0B 3E 05       0001M  		LD	A, function
040B0D 49 D7       0002M  		RST.LIS	10h
040B0F DD 21 26 17 1621   	ld ix,x2
       04          
040B14 DD 7E 00    1622   	ld a,(ix + 0)
040B17             1623   	vdu_a
040B17 49 D7       0001M  		RST.LIS	10h
040B19 DD 7E 01    1624   	ld a,(ix + 1)
040B1C             1625   	vdu_a
040B1C 49 D7       0001M  		RST.LIS	10h
040B1E FD 21 24 17 1626   	ld iy,y1
       04          
040B23 FD 7E 00    1627   	ld a,(iy + 0)
040B26             1628   	vdu_a
040B26 49 D7       0001M  		RST.LIS	10h
040B28 FD 7E 01    1629   	ld a,(iy + 1)
040B2B             1630   	vdu_a
040B2B 49 D7       0001M  		RST.LIS	10h
040B2D             1631   
040B2D             1632   	vdu 25
040B2D 3E 19       0001M  		LD	A, function
040B2F 49 D7       0002M  		RST.LIS	10h
040B31             1633   	vdu 5
040B31 3E 05       0001M  		LD	A, function
040B33 49 D7       0002M  		RST.LIS	10h
040B35 DD 21 26 17 1634   	ld ix,x2
       04          
040B3A DD 7E 00    1635   	ld a,(ix + 0)
040B3D             1636   	vdu_a
040B3D 49 D7       0001M  		RST.LIS	10h
040B3F DD 7E 01    1637   	ld a,(ix + 1)
040B42             1638   	vdu_a
040B42 49 D7       0001M  		RST.LIS	10h
040B44 FD 21 28 17 1639   	ld iy,y2
       04          
040B49 FD 7E 00    1640   	ld a,(iy + 0)
040B4C             1641   	vdu_a
040B4C 49 D7       0001M  		RST.LIS	10h
040B4E FD 7E 01    1642   	ld a,(iy + 1)
040B51             1643   	vdu_a
040B51 49 D7       0001M  		RST.LIS	10h
040B53             1644   
040B53             1645   	vdu 25
040B53 3E 19       0001M  		LD	A, function
040B55 49 D7       0002M  		RST.LIS	10h
040B57             1646   	vdu 5
040B57 3E 05       0001M  		LD	A, function
040B59 49 D7       0002M  		RST.LIS	10h
040B5B DD 21 22 17 1647   	ld ix,x1
       04          
040B60 DD 7E 00    1648   	ld a,(ix + 0)
040B63             1649   	vdu_a
040B63 49 D7       0001M  		RST.LIS	10h
040B65 DD 7E 01    1650   	ld a,(ix + 1)
040B68             1651   	vdu_a
040B68 49 D7       0001M  		RST.LIS	10h
040B6A FD 21 28 17 1652   	ld iy,y2
       04          
040B6F FD 7E 00    1653   	ld a,(iy + 0)
040B72             1654   	vdu_a
040B72 49 D7       0001M  		RST.LIS	10h
040B74 FD 7E 01    1655   	ld a,(iy + 1)
040B77             1656   	vdu_a
040B77 49 D7       0001M  		RST.LIS	10h
040B79             1657   
040B79             1658   	vdu 25
040B79 3E 19       0001M  		LD	A, function
040B7B 49 D7       0002M  		RST.LIS	10h
040B7D             1659   	vdu 5
040B7D 3E 05       0001M  		LD	A, function
040B7F 49 D7       0002M  		RST.LIS	10h
040B81 DD 21 22 17 1660   	ld ix,x1
       04          
040B86 DD 7E 00    1661   	ld a,(ix + 0)
040B89             1662   	vdu_a
040B89 49 D7       0001M  		RST.LIS	10h
040B8B DD 7E 01    1663   	ld a,(ix + 1)
040B8E             1664   	vdu_a
040B8E 49 D7       0001M  		RST.LIS	10h
040B90 FD 21 24 17 1665   	ld iy,y1
       04          
040B95 FD 7E 00    1666   	ld a,(iy + 0)
040B98             1667   	vdu_a
040B98 49 D7       0001M  		RST.LIS	10h
040B9A FD 7E 01    1668   	ld a,(iy + 1)
040B9D             1669   	vdu_a
040B9D 49 D7       0001M  		RST.LIS	10h
040B9F             1670   
040B9F C9          1671   	ret
040BA0             1672   
040BA0             1673   ; draw a filled rectangle
040BA0             1674   fn_rectf:
040BA0 DD 21 22 17 1675   	ld ix,x1
       04          
040BA5 FD 21 24 17 1676   	ld iy,y1
       04          
040BAA             1677   
040BAA             1678   	vdu 25
040BAA 3E 19       0001M  		LD	A, function
040BAC 49 D7       0002M  		RST.LIS	10h
040BAE             1679   	vdu 4
040BAE 3E 04       0001M  		LD	A, function
040BB0 49 D7       0002M  		RST.LIS	10h
040BB2 DD 7E 00    1680   	ld a,(ix+0)
040BB5             1681   	vdu_a
040BB5 49 D7       0001M  		RST.LIS	10h
040BB7 DD 7E 01    1682   	ld a,(ix+1)
040BBA             1683   	vdu_a
040BBA 49 D7       0001M  		RST.LIS	10h
040BBC FD 7E 00    1684   	ld a,(iy+0)
040BBF             1685   	vdu_a
040BBF 49 D7       0001M  		RST.LIS	10h
040BC1 FD 7E 01    1686   	ld a,(iy+1)
040BC4             1687   	vdu_a
040BC4 49 D7       0001M  		RST.LIS	10h
040BC6             1688   
040BC6 DD 21 26 17 1689   	ld ix,x2
       04          
040BCB FD 21 28 17 1690   	ld iy,y2
       04          
040BD0             1691   
040BD0             1692   	vdu 25
040BD0 3E 19       0001M  		LD	A, function
040BD2 49 D7       0002M  		RST.LIS	10h
040BD4             1693   	vdu 101
040BD4 3E 65       0001M  		LD	A, function
040BD6 49 D7       0002M  		RST.LIS	10h
040BD8 DD 7E 00    1694   	ld a,(ix+0)
040BDB             1695   	vdu_a
040BDB 49 D7       0001M  		RST.LIS	10h
040BDD DD 7E 01    1696   	ld a,(ix+1)
040BE0             1697   	vdu_a
040BE0 49 D7       0001M  		RST.LIS	10h
040BE2 FD 7E 00    1698   	ld a,(iy+0)
040BE5             1699   	vdu_a
040BE5 49 D7       0001M  		RST.LIS	10h
040BE7 FD 7E 01    1700   	ld a,(iy+1)
040BEA             1701   	vdu_a
040BEA 49 D7       0001M  		RST.LIS	10h
040BEC             1702   
040BEC C9          1703   	ret
040BED             1704   
040BED             1705   fn_calc_pixel_coords:
040BED 11 00 00 00 1706   	ld de,$000000 ; reset deu
040BF1             1707   
040BF1             1708   	; calculate coordinates x of the resized pixel
040BF1 21 32 17 04 1709   	ld hl,xpix
040BF5 5E          1710   	ld e,(hl) ; E = xpix
040BF6 21 36 17 04 1711   	ld hl,pixel_width
040BFA 56          1712   	ld d,(hl) ; D = pixel_width
040BFB D5          1713   	push de
040BFC E1          1714   	pop hl ; HL = DE
040BFD ED 6C       1715   	mlt hl ; HL = xpix * pixel_width
040BFF DD 21 2A 17 1716   	ld ix,xs1
       04          
040C04 DD 5E 00    1717   	ld e,(ix+0)
040C07 DD 56 01    1718   	ld d,(ix+1)
040C0A 13          1719   	inc de ; DE = xs1 + 1
040C0B 19          1720   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040C0C FD 21 22 17 1721   	ld iy,x1
       04          
040C11 FD 75 00    1722   	ld (iy+0),l
040C14 FD 74 01    1723   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040C17 E5          1724   	push hl
040C18 21 36 17 04 1725   	ld hl,pixel_width
040C1C 16 00       1726   	ld d,0
040C1E 5E          1727   	ld e,(hl)
040C1F E1          1728   	pop hl
040C20 19          1729   	add hl,de
040C21 2B          1730   	dec hl
040C22 FD 21 26 17 1731   	ld iy,x2
       04          
040C27 FD 75 00    1732   	ld (iy+0),l
040C2A FD 74 01    1733   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040C2D             1734   
040C2D 11 00 00 00 1735   	ld de,$000000 ; reset deu
040C31             1736   
040C31             1737   	; calculate coordinates y of the resized pixel
040C31 21 33 17 04 1738   	ld hl,ypix
040C35 5E          1739   	ld e,(hl) ; E = ypix
040C36 21 36 17 04 1740   	ld hl,pixel_width
040C3A 56          1741   	ld d,(hl) ; D = pixel_width
040C3B D5          1742   	push de
040C3C E1          1743   	pop hl ; HL = DE
040C3D ED 6C       1744   	mlt hl ; HL = ypix * pixel_width
040C3F DD 21 2C 17 1745   	ld ix,ys1
       04          
040C44 DD 5E 00    1746   	ld e,(ix+0)
040C47 DD 56 01    1747   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040C4A 13          1748   	inc de ; DE = ys1 + 1
040C4B 19          1749   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040C4C FD 21 24 17 1750   	ld iy,y1
       04          
040C51 FD 75 00    1751   	ld (iy+0),l
040C54 FD 74 01    1752   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040C57 E5          1753   	push hl
040C58 21 36 17 04 1754   	ld hl,pixel_width
040C5C 16 00       1755   	ld d,0
040C5E 5E          1756   	ld e,(hl)
040C5F E1          1757   	pop hl
040C60 19          1758   	add hl,de
040C61 2B          1759   	dec hl
040C62 FD 21 28 17 1760   	ld iy,y2
       04          
040C67 FD 75 00    1761   	ld (iy+0),l
040C6A FD 74 01    1762   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C6D             1763   
040C6D C9          1764   	ret
040C6E             1765   
040C6E             1766   ; draw the resized pixel border, with its color
040C6E             1767   fn_draw_pixel_with_border:
040C6E CD 82 0C 04 1768   	call fn_draw_pixel_without_border
040C72             1769   
040C72             1770   	; set graphics pen
040C72             1771   	vdu 18
040C72 3E 12       0001M  		LD	A, function
040C74 49 D7       0002M  		RST.LIS	10h
040C76             1772   	vdu 0
040C76 3E 00       0001M  		LD	A, function
040C78 49 D7       0002M  		RST.LIS	10h
040C7A             1773   	vdu COLOR_GREY ; grey pen
040C7A 3E 07       0001M  		LD	A, function
040C7C 49 D7       0002M  		RST.LIS	10h
040C7E             1774   
040C7E             1775   	; draw the sprite's border rectangle
040C7E C3 E1 0A 04 1776   	jp fn_rect
040C82             1777   
040C82             1778   ; draw the resized pixel color
040C82             1779   fn_draw_pixel_without_border:
040C82 CD ED 0B 04 1780   	call fn_calc_pixel_coords
040C86             1781   
040C86             1782   	; set graphics pen
040C86             1783   	vdu 18
040C86 3E 12       0001M  		LD	A, function
040C88 49 D7       0002M  		RST.LIS	10h
040C8A             1784   	vdu 0
040C8A 3E 00       0001M  		LD	A, function
040C8C 49 D7       0002M  		RST.LIS	10h
040C8E CD 98 0C 04 1785   	call fn_get_pixel_color
040C92             1786   	vdu_a
040C92 49 D7       0001M  		RST.LIS	10h
040C94             1787   
040C94             1788   	; draw the sprite's color rectangle
040C94 C3 A0 0B 04 1789   	jp fn_rectf
040C98             1790   
040C98             1791   ; get pixel color value in the sprite buffer
040C98             1792   ; returns A: pixel color (0-63)
040C98             1793   fn_get_pixel_color:
040C98 11 00 00 00 1794   	ld de,$000000 ; reset deu
040C9C             1795   
040C9C             1796   	; calculate the offset to add to the address
040C9C 21 33 17 04 1797   	ld hl,ypix
040CA0 5E          1798   	ld e,(hl) ; E = ypix
040CA1 21 37 17 04 1799   	ld hl,spr_size
040CA5 56          1800   	ld d,(hl) ; D = sprsize
040CA6 D5          1801   	push de
040CA7 E1          1802   	pop hl
040CA8 ED 6C       1803   	mlt hl ; HL = ypix * sprsize
040CAA E5          1804   	push hl
040CAB 21 32 17 04 1805   	ld hl,xpix
040CAF 5E          1806   	ld e,(hl)
040CB0 16 00       1807   	ld d,0
040CB2 E1          1808   	pop hl
040CB3 19          1809   	add hl,de ; HL = (ypix * sprsize) + xpix
040CB4             1810   
040CB4 11 44 18 04 1811   	ld de,current_frame
040CB8 1A          1812   	ld a,(de)
040CB9 FE 00       1813   	cp 0
040CBB 28 16       1814   	jr z,gpc_end_loop
040CBD             1815   
040CBD 47          1816   	ld b,a
040CBE E5          1817   	push hl
040CBF 11 00 00 00 1818   	ld de,$000000
040CC3 21 37 17 04 1819   	ld hl,spr_size
040CC7 5E          1820   	ld e,(hl)
040CC8 56          1821   	ld d,(hl)
040CC9 D5          1822   	push de
040CCA E1          1823   	pop hl
040CCB ED 6C       1824   	mlt hl
040CCD E5          1825   	push hl
040CCE D1          1826   	pop de ; DE = sprsize²
040CCF E1          1827   	pop hl
040CD0             1828   
040CD0             1829   gpc_loop:
040CD0 19          1830   	add hl,de
040CD1 10 FD       1831   	djnz gpc_loop
040CD3             1832   
040CD3             1833   gpc_end_loop:
040CD3             1834   	; add the offset to the address
040CD3 11 4D 18 04 1835   	ld de,sprite_buffer
040CD7 19          1836   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CD8             1837   
040CD8             1838   	; get pixel color value
040CD8 7E          1839   	ld a,(hl)
040CD9             1840   
040CD9 C9          1841   	ret
040CDA             1842   
040CDA             1843   ; get pixel color value in the sprite buffer
040CDA             1844   ; A: pixel color (0-63)
040CDA             1845   fn_set_pixel_color:
040CDA 11 00 00 00 1846   	ld de,$000000 ; reset deu
040CDE             1847   
040CDE             1848   	; calculate the offset to add to the address
040CDE 21 33 17 04 1849   	ld hl,ypix
040CE2 5E          1850   	ld e,(hl) ; E = ypix
040CE3 21 37 17 04 1851   	ld hl,spr_size
040CE7 56          1852   	ld d,(hl) ; D = sprsize
040CE8 D5          1853   	push de
040CE9 E1          1854   	pop hl
040CEA ED 6C       1855   	mlt hl ; HL = ypix * sprsize
040CEC E5          1856   	push hl
040CED 21 32 17 04 1857   	ld hl,xpix
040CF1 5E          1858   	ld e,(hl)
040CF2 16 00       1859   	ld d,0
040CF4 E1          1860   	pop hl
040CF5 19          1861   	add hl,de ; HL = (ypix * sprsize) + xpix
040CF6 F5          1862   	push af
040CF7             1863   
040CF7 11 44 18 04 1864   	ld de,current_frame
040CFB 1A          1865   	ld a,(de)
040CFC FE 00       1866   	cp 0
040CFE 28 16       1867   	jr z,spc_end_loop
040D00             1868   
040D00 47          1869   	ld b,a
040D01 E5          1870   	push hl
040D02 11 00 00 00 1871   	ld de,$000000
040D06 21 37 17 04 1872   	ld hl,spr_size
040D0A 5E          1873   	ld e,(hl)
040D0B 56          1874   	ld d,(hl)
040D0C D5          1875   	push de
040D0D E1          1876   	pop hl
040D0E ED 6C       1877   	mlt hl
040D10 E5          1878   	push hl
040D11 D1          1879   	pop de ; DE = sprsize²
040D12 E1          1880   	pop hl
040D13             1881   
040D13             1882   spc_loop:
040D13 19          1883   	add hl,de
040D14 10 FD       1884   	djnz spc_loop
040D16             1885   
040D16             1886   spc_end_loop:
040D16             1887   
040D16             1888   	; add the offset to the address
040D16 11 4D 18 04 1889   	ld de,sprite_buffer
040D1A 19          1890   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040D1B             1891   
040D1B             1892   	; set pixel color value
040D1B F1          1893   	pop af
040D1C 77          1894   	ld (hl),a
040D1D             1895   
040D1D C9          1896   	ret
040D1E             1897   
040D1E             1898   fn_move_up:
040D1E 21 33 17 04 1899   	ld hl,ypix
040D22 35          1900   	dec (hl)
040D23 C9          1901   	ret
040D24             1902   
040D24             1903   fn_move_down:
040D24 21 33 17 04 1904   	ld hl,ypix
040D28 34          1905   	inc (hl)
040D29 C9          1906   	ret
040D2A             1907   
040D2A             1908   fn_move_left:
040D2A 21 32 17 04 1909   	ld hl,xpix
040D2E 35          1910   	dec (hl)
040D2F C9          1911   	ret
040D30             1912   
040D30             1913   fn_move_right:
040D30 21 32 17 04 1914   	ld hl,xpix
040D34 34          1915   	inc (hl)
040D35 C9          1916   	ret
040D36             1917   
040D36             1918   ; draw palette color whit border and selection
040D36             1919   ; C = color number (0-63)
040D36             1920   fn_draw_palette_with_border:
040D36 C5          1921   	push bc
040D37             1922   
040D37             1923   	; choose palette color
040D37             1924   	vdu 18
040D37 3E 12       0001M  		LD	A, function
040D39 49 D7       0002M  		RST.LIS	10h
040D3B             1925   	vdu 0
040D3B 3E 00       0001M  		LD	A, function
040D3D 49 D7       0002M  		RST.LIS	10h
040D3F C1          1926   	pop bc
040D40 C5          1927   	push bc
040D41 79          1928   	ld a,c
040D42             1929   	vdu_a
040D42 49 D7       0001M  		RST.LIS	10h
040D44             1930   
040D44             1931   	; store coordinates for a palette square
040D44 DD 21 22 17 1932   	ld ix,x1
       04          
040D49 E1          1933   	pop hl
040D4A E5          1934   	push hl
040D4B 26 05       1935   	ld h,5
040D4D ED 6C       1936   	mlt hl
040D4F E5          1937   	push hl
040D50 DD 75 00    1938   	ld (ix+0),l
040D53 DD 74 01    1939   	ld (ix+1),h
040D56             1940   
040D56 DD 21 24 17 1941   	ld ix,y1
       04          
040D5B 21 00 00 00 1942   	ld hl,0
040D5F DD 75 00    1943   	ld (ix+0),l
040D62 DD 74 01    1944   	ld (ix+1),h
040D65             1945   
040D65 DD 21 26 17 1946   	ld ix,x2
       04          
040D6A E1          1947   	pop hl
040D6B 11 04 00 00 1948   	ld de,4
040D6F 19          1949   	add hl,de
040D70 DD 75 00    1950   	ld (ix+0),l
040D73 DD 74 01    1951   	ld (ix+1),h
040D76             1952   
040D76 DD 21 28 17 1953   	ld ix,y2
       04          
040D7B 21 0A 00 00 1954   	ld hl,10
040D7F DD 75 00    1955   	ld (ix+0),l
040D82 DD 74 01    1956   	ld (ix+1),h
040D85             1957   
040D85             1958   	; draw the palette filled square
040D85 CD A0 0B 04 1959   	call fn_rectf
040D89             1960   
040D89             1961   	; choose grey color
040D89             1962   	vdu 18
040D89 3E 12       0001M  		LD	A, function
040D8B 49 D7       0002M  		RST.LIS	10h
040D8D             1963   	vdu 0
040D8D 3E 00       0001M  		LD	A, function
040D8F 49 D7       0002M  		RST.LIS	10h
040D91 3E 07       1964   	ld a,COLOR_GREY
040D93             1965   	vdu_a
040D93 49 D7       0001M  		RST.LIS	10h
040D95             1966   
040D95             1967   	; draw the palette square border
040D95 CD E1 0A 04 1968   	call fn_rect
040D99             1969   
040D99             1970   	; next color ?
040D99 C1          1971   	pop bc
040D9A             1972   
040D9A C9          1973   	ret
040D9B             1974   
040D9B             1975   ; draw palette color whitout border and selection
040D9B             1976   ; C = color number (0-63)
040D9B             1977   fn_draw_palette_without_border:
040D9B C5          1978   	push bc
040D9C             1979   
040D9C             1980   	; choose palette color
040D9C             1981   	vdu 18
040D9C 3E 12       0001M  		LD	A, function
040D9E 49 D7       0002M  		RST.LIS	10h
040DA0             1982   	vdu 0
040DA0 3E 00       0001M  		LD	A, function
040DA2 49 D7       0002M  		RST.LIS	10h
040DA4 C1          1983   	pop bc
040DA5 C5          1984   	push bc
040DA6 79          1985   	ld a,c
040DA7             1986   	vdu_a
040DA7 49 D7       0001M  		RST.LIS	10h
040DA9             1987   
040DA9             1988   	; store coordinates for a palette square
040DA9 DD 21 22 17 1989   	ld ix,x1
       04          
040DAE E1          1990   	pop hl
040DAF E5          1991   	push hl
040DB0 26 05       1992   	ld h,5
040DB2 ED 6C       1993   	mlt hl
040DB4 E5          1994   	push hl
040DB5 DD 75 00    1995   	ld (ix+0),l
040DB8 DD 74 01    1996   	ld (ix+1),h
040DBB             1997   
040DBB DD 21 24 17 1998   	ld ix,y1
       04          
040DC0 21 00 00 00 1999   	ld hl,0
040DC4 DD 75 00    2000   	ld (ix+0),l
040DC7 DD 74 01    2001   	ld (ix+1),h
040DCA             2002   
040DCA DD 21 26 17 2003   	ld ix,x2
       04          
040DCF E1          2004   	pop hl
040DD0 11 04 00 00 2005   	ld de,4
040DD4 19          2006   	add hl,de
040DD5 DD 75 00    2007   	ld (ix+0),l
040DD8 DD 74 01    2008   	ld (ix+1),h
040DDB             2009   
040DDB DD 21 28 17 2010   	ld ix,y2
       04          
040DE0 21 0A 00 00 2011   	ld hl,10
040DE4 DD 75 00    2012   	ld (ix+0),l
040DE7 DD 74 01    2013   	ld (ix+1),h
040DEA             2014   
040DEA             2015   	; draw the palette filled square
040DEA CD A0 0B 04 2016   	call fn_rectf
040DEE             2017   
040DEE C1          2018   	pop bc
040DEF             2019   
040DEF C9          2020   	ret
040DF0             2021   
040DF0             2022   ; get an ascii key value
040DF0             2023   fn_input_key:
040DF0 C5          2024   	push bc
040DF1             2025   	moscall mos_getkey
040DF1 3E 00       0001M  		LD	A, function
040DF3 49 CF       0002M  		RST.LIS	08h
040DF5 C1          2026   	pop bc
040DF6 C9          2027   	ret
040DF7             2028   
040DF7             2029   ; input a text of 8 chars
040DF7             2030   fn_input_text8:
040DF7             2031   	; locate x,y
040DF7             2032   	vdu 31
040DF7 3E 1F       0001M  		LD	A, function
040DF9 49 D7       0002M  		RST.LIS	10h
040DFB             2033   	vdu FILENAME_X
040DFB 3E 07       0001M  		LD	A, function
040DFD 49 D7       0002M  		RST.LIS	10h
040DFF             2034   	vdu FILENAME_Y
040DFF 3E 18       0001M  		LD	A, function
040E01 49 D7       0002M  		RST.LIS	10h
040E03             2035   
040E03             2036   	; print text
040E03 21 A4 17 04 2037   	ld hl,filename_label
040E07 01 00 00 00 2038   	ld bc,0
040E0B AF          2039   	xor a
040E0C 49 DF       2040   	rst.lis $18
040E0E             2041   
040E0E             2042   	; show cursor
040E0E             2043   	vdu 23
040E0E 3E 17       0001M  		LD	A, function
040E10 49 D7       0002M  		RST.LIS	10h
040E12             2044   	vdu 1
040E12 3E 01       0001M  		LD	A, function
040E14 49 D7       0002M  		RST.LIS	10h
040E16             2045   	vdu 1
040E16 3E 01       0001M  		LD	A, function
040E18 49 D7       0002M  		RST.LIS	10h
040E1A             2046   
040E1A 0E 00       2047   	ld c,0
040E1C             2048   
040E1C             2049   it8_loop:
040E1C             2050   	; get ascii key
040E1C CD F0 0D 04 2051   	call fn_input_key
040E20 B7          2052   	or a
040E21 CA 1C 0E 04 2053   	jp z,it8_loop
040E25             2054   
040E25 FE 2E       2055   	cp '.'
040E27 CA 71 0E 04 2056   	jp z,it8l_add_char
040E2B             2057   
040E2B FE 2D       2058   	cp '-'
040E2D CA 71 0E 04 2059   	jp z,it8l_add_char
040E31             2060   
040E31 FE 5F       2061   	cp '_'
040E33 CA 71 0E 04 2062   	jp z,it8l_add_char
040E37             2063   
040E37 FE 7F       2064   	cp 127
040E39 CA A5 0E 04 2065   	jp z,it8l_backspace
040E3D             2066   
040E3D FE 0D       2067   	cp 13
040E3F CA D4 0E 04 2068   	jp z,it8l_return
040E43             2069   
040E43 FE 30       2070   	cp '0'
040E45 DA 1C 0E 04 2071   	jp c,it8_loop
040E49             2072   
040E49 16 39       2073   	ld d,'9'
040E4B 14          2074   	inc d
040E4C BA          2075   	cp d
040E4D DA 71 0E 04 2076   	jp c,it8l_add_char
040E51             2077   
040E51 FE 41       2078   	cp 'A'
040E53 DA 1C 0E 04 2079   	jp c,it8_loop
040E57             2080   
040E57 16 5A       2081   	ld d,'Z'
040E59 14          2082   	inc d
040E5A BA          2083   	cp d
040E5B DA 71 0E 04 2084   	jp c,it8l_add_char
040E5F             2085   
040E5F FE 61       2086   	cp 'a'
040E61 DA 1C 0E 04 2087   	jp c,it8_loop
040E65             2088   
040E65 16 7A       2089   	ld d,'z'
040E67 14          2090   	inc d
040E68 BA          2091   	cp d
040E69 DA 71 0E 04 2092   	jp c,it8l_add_char
040E6D             2093   
040E6D C3 1C 0E 04 2094   	jp it8_loop
040E71             2095   
040E71             2096   it8l_add_char:
040E71 F5          2097   	push af
040E72 79          2098   	ld a,c
040E73 FE 0C       2099   	cp 12
040E75 38 05       2100   	jr c,it8l_poke_char
040E77 F1          2101   	pop af
040E78 C3 1C 0E 04 2102   	jp it8_loop
040E7C             2103   
040E7C             2104   it8l_poke_char:
040E7C F1          2105   	pop af
040E7D 21 AE 17 04 2106   	ld hl,filename
040E81 06 00       2107   	ld b,0
040E83 09          2108   	add hl,bc
040E84 77          2109   	ld (hl),a
040E85 0C          2110   	inc c
040E86 F5          2111   	push af
040E87 C5          2112   	push bc
040E88             2113   
040E88             2114   	; locate x,y
040E88             2115   	vdu 31
040E88 3E 1F       0001M  		LD	A, function
040E8A 49 D7       0002M  		RST.LIS	10h
040E8C             2116   	vdu FILENAME_X+10
040E8C 3E 11       0001M  		LD	A, function
040E8E 49 D7       0002M  		RST.LIS	10h
040E90             2117   	vdu FILENAME_Y
040E90 3E 18       0001M  		LD	A, function
040E92 49 D7       0002M  		RST.LIS	10h
040E94             2118   
040E94             2119   	; print text
040E94 21 AE 17 04 2120   	ld hl,filename
040E98 01 00 00 00 2121   	ld bc,0
040E9C AF          2122   	xor a
040E9D 49 DF       2123   	rst.lis $18
040E9F             2124   
040E9F C1          2125   	pop bc
040EA0 F1          2126   	pop af
040EA1             2127   
040EA1 C3 1C 0E 04 2128   	jp it8_loop
040EA5             2129   
040EA5             2130   it8l_backspace:
040EA5 79          2131   	ld a,c
040EA6 FE 00       2132   	cp 0
040EA8 CA 1C 0E 04 2133   	jp z,it8_loop
040EAC             2134   
040EAC             2135   	; delete a character of the filename
040EAC 21 AE 17 04 2136   	ld hl,filename
040EB0 06 00       2137   	ld b,0
040EB2 09          2138   	add hl,bc
040EB3 AF          2139   	xor a
040EB4 77          2140   	ld (hl),a
040EB5 0D          2141   	dec c
040EB6 C5          2142   	push bc
040EB7             2143   
040EB7             2144   	; locate x,y
040EB7             2145   	vdu 31
040EB7 3E 1F       0001M  		LD	A, function
040EB9 49 D7       0002M  		RST.LIS	10h
040EBB 3E 11       2146   	ld a,FILENAME_X+10
040EBD 81          2147   	add a,c
040EBE             2148   	vdu_a
040EBE 49 D7       0001M  		RST.LIS	10h
040EC0             2149   	vdu FILENAME_Y
040EC0 3E 18       0001M  		LD	A, function
040EC2 49 D7       0002M  		RST.LIS	10h
040EC4             2150   
040EC4             2151   	; print text
040EC4 21 CF 17 04 2152   	ld hl,spacechar
040EC8 01 00 00 00 2153   	ld bc,0
040ECC AF          2154   	xor a
040ECD 49 DF       2155   	rst.lis $18
040ECF             2156   
040ECF C1          2157   	pop bc
040ED0 C3 1C 0E 04 2158   	jp it8_loop
040ED4             2159   
040ED4             2160   it8l_return:
040ED4             2161   	; locate x,y
040ED4             2162   	vdu 31
040ED4 3E 1F       0001M  		LD	A, function
040ED6 49 D7       0002M  		RST.LIS	10h
040ED8             2163   	vdu FILENAME_X
040ED8 3E 07       0001M  		LD	A, function
040EDA 49 D7       0002M  		RST.LIS	10h
040EDC             2164   	vdu FILENAME_Y
040EDC 3E 18       0001M  		LD	A, function
040EDE 49 D7       0002M  		RST.LIS	10h
040EE0             2165   
040EE0             2166   	; print text
040EE0 21 D1 17 04 2167   	ld hl,void_filename
040EE4 01 00 00 00 2168   	ld bc,0
040EE8 AF          2169   	xor a
040EE9 49 DF       2170   	rst.lis $18
040EEB             2171   
040EEB             2172   	; hide cursor
040EEB             2173   	vdu 23
040EEB 3E 17       0001M  		LD	A, function
040EED 49 D7       0002M  		RST.LIS	10h
040EEF             2174   	vdu 1
040EEF 3E 01       0001M  		LD	A, function
040EF1 49 D7       0002M  		RST.LIS	10h
040EF3             2175   	vdu 0
040EF3 3E 00       0001M  		LD	A, function
040EF5 49 D7       0002M  		RST.LIS	10h
040EF7             2176   
040EF7             2177   it8l_endloop:
040EF7 21 B6 FF FF 2178   	ld hl,KEY_RETURN
040EFB CD D4 16 04 2179   	call fn_inkey
040EFF FE 01       2180   	CP 1
040F01 CA F7 0E 04 2181   	jp z,it8l_endloop
040F05             2182   
040F05 C9          2183   	ret
040F06             2184   
040F06             2185   ; load a palette
040F06             2186   fn_load_palette:
040F06             2187   	; clear the filename on the screen
040F06 21 AE 17 04 2188   	ld hl,filename
040F0A 06 0C       2189   	ld b,12
040F0C AF          2190   	xor a
040F0D             2191   
040F0D             2192   lp_clear_filename:
040F0D 77          2193   	ld (hl),a
040F0E 23          2194   	inc hl
040F0F 10 FC       2195   	djnz lp_clear_filename
040F11             2196   
040F11             2197   	; get filename
040F11 CD F7 0D 04 2198   	call fn_input_text8
040F15             2199   
040F15             2200   	; set path to 'palettes/'
040F15 21 C3 17 04 2201   	ld hl,palette_path
040F19             2202   	moscall mos_cd
040F19 3E 03       0001M  		LD	A, function
040F1B 49 CF       0002M  		RST.LIS	08h
040F1D             2203   
040F1D             2204   	; exit on folder error
040F1D FE 00       2205   	cp 0
040F1F C2 AB 0F 04 2206   	jp nz,lp_folder_error
040F23             2207   
040F23             2208   	; open the file for read
040F23 21 AE 17 04 2209   	ld hl,filename
040F27 0E 01       2210   	ld c,fa_open_existing|fa_read
040F29             2211   	moscall mos_fopen
040F29 3E 0A       0001M  		LD	A, function
040F2B 49 CF       0002M  		RST.LIS	08h
040F2D             2212   
040F2D             2213   	; exit on file error
040F2D FE 00       2214   	cp 0
040F2F CA D5 10 04 2215   	jp z,lp_file_error
040F33             2216   
040F33             2217   	; filehandle -> C
040F33 4F          2218   	ld c,a
040F34             2219   
040F34             2220   
040F34             2221   	; get palette header
040F34 21 4D 38 04 2222   	ld hl,header_buffer
040F38 11 10 00 00 2223   	ld de,16
040F3C C5          2224   	push bc ; store filehandle
040F3D             2225   	moscall mos_fread
040F3D 3E 1A       0001M  		LD	A, function
040F3F 49 CF       0002M  		RST.LIS	08h
040F41 C1          2226   	pop bc ; restore filehandle
040F42 3E 10       2227   	ld a,16
040F44 BB          2228   	cp e
040F45 C2 8F 0F 04 2229   	jp nz,lp_close_error
040F49             2230   
040F49             2231   	; compare loaded header with needed header
040F49 11 A7 3B 04 2232   	ld de,header
040F4D 21 4D 38 04 2233   	ld hl,header_buffer
040F51 47          2234   	ld b,a
040F52             2235   
040F52             2236   lp_compare:
040F52 1A          2237   	ld a,(de)
040F53 BE          2238   	cp (hl)
040F54 C2 B3 0F 04 2239   	jp nz,lp_header_error
040F58             2240   
040F58 13          2241   	inc de
040F59 23          2242   	inc hl
040F5A 05          2243   	dec b
040F5B             2244   
040F5B 78          2245   	ld a,b
040F5C FE 00       2246   	cp 0
040F5E C2 52 0F 04 2247   	jp nz,lp_compare
040F62             2248   
040F62             2249   	; read number of colors
040F62 11 00 00 00 2250   	ld de,#000000
040F66 21 5D 38 04 2251   	ld hl,palette_buffer
040F6A             2252   
040F6A             2253   lp_load_pal_loop:
040F6A C5          2254   	push bc
040F6B D5          2255   	push de
040F6C E5          2256   	push hl
040F6D             2257   
040F6D             2258   	; read colors data
040F6D             2259   	moscall mos_fgetc
040F6D 3E 0C       0001M  		LD	A, function
040F6F 49 CF       0002M  		RST.LIS	08h
040F71             2260   
040F71             2261   	; exit if file end
040F71 DA 88 0F 04 2262   	jp c,lp_loaded
040F75             2263   
040F75 E1          2264   	pop hl
040F76 D1          2265   	pop de
040F77 C1          2266   	pop bc
040F78 77          2267   	ld (hl),a ; store loaded char
040F79 13          2268   	inc de ; count chars
040F7A 78          2269   	ld a,b
040F7B FE 03       2270   	cp MAX_PAL_DATA_HI
040F7D DA 6A 0F 04 2271   	jp c,lp_load_pal_loop
040F81 78          2272   	ld a,b
040F82 FE 44       2273   	cp MAX_PAL_DATA_LO
040F84 DA 6A 0F 04 2274   	jp c,lp_load_pal_loop
040F88             2275   
040F88             2276   ; end of file
040F88             2277   lp_loaded:
040F88 E1          2278   	pop hl
040F89 D1          2279   	pop de
040F8A C1          2280   	pop bc
040F8B             2281   
040F8B C3 BB 0F 04 2282   	jp lp_close
040F8F             2283   
040F8F             2284   lp_close_error:
040F8F C5          2285   	push bc
040F90             2286   
040F90             2287   	; read error
040F90 CD EA 14 04 2288   	call fn_print_file_error
040F94             2289   
040F94 C1          2290   	pop bc
040F95             2291   
040F95             2292   	; close the file
040F95             2293   	moscall mos_fclose
040F95 3E 0B       0001M  		LD	A, function
040F97 49 CF       0002M  		RST.LIS	08h
040F99             2294   
040F99             2295   	; set path to home
040F99 21 CC 17 04 2296   	ld hl,back_path
040F9D             2297   	moscall mos_cd
040F9D 3E 03       0001M  		LD	A, function
040F9F 49 CF       0002M  		RST.LIS	08h
040FA1             2298   
040FA1             2299   	; exit on error
040FA1 FE 00       2300   	cp 0
040FA3 C2 AB 0F 04 2301   	jp nz,lp_folder_error
040FA7             2302   
040FA7 C3 CF 10 04 2303   	jp lp_exit
040FAB             2304   
040FAB             2305   lp_folder_error:
040FAB             2306   	; write error
040FAB CD 21 15 04 2307   	call fn_print_folder_error
040FAF C3 CF 10 04 2308   	jp lp_exit
040FB3             2309   
040FB3             2310   lp_header_error:
040FB3             2311   	; write error
040FB3 CD 58 15 04 2312   	call fn_print_header_error
040FB7 C3 CF 10 04 2313   	jp lp_exit
040FBB             2314   
040FBB             2315   lp_close:
040FBB C5          2316   	push bc
040FBC             2317   
040FBC             2318   	; close the file
040FBC             2319   	moscall mos_fclose
040FBC 3E 0B       0001M  		LD	A, function
040FBE 49 CF       0002M  		RST.LIS	08h
040FC0             2320   
040FC0 C1          2321   	pop bc
040FC1             2322   
040FC1             2323   	; set path to home
040FC1 21 CC 17 04 2324   	ld hl,back_path
040FC5             2325   	moscall mos_cd
040FC5 3E 03       0001M  		LD	A, function
040FC7 49 CF       0002M  		RST.LIS	08h
040FC9             2326   
040FC9             2327   	; exit on error
040FC9 FE 00       2328   	cp 0
040FCB C2 AB 0F 04 2329   	jp nz,lp_folder_error
040FCF             2330   
040FCF             2331   	; store first color 0
040FCF AF          2332   	xor a
040FD0 21 A6 3B 04 2333   	ld hl,color_byte
040FD4 77          2334   	ld (hl),a
040FD5             2335   
040FD5             2336   	; read number of colors in the palette
040FD5 21 5D 38 04 2337   	ld hl,palette_buffer
040FD9 7E          2338   	ld a,(hl)
040FDA 47          2339   	ld b,a
040FDB 23          2340   	inc hl
040FDC 7E          2341   	ld a,(hl)
040FDD 4F          2342   	ld c,a ; bc = 1st char, 2nd char or 13
040FDE             2343   
040FDE 79          2344   	ld a,c
040FDF FE 30       2345   	cp 48
040FE1 DA EF 0F 04 2346   	jp c,lp_one_number
040FE5 FE 3A       2347   	cp 58
040FE7 D2 1F 10 04 2348   	jp nc,lp_two_number
040FEB C3 D0 10 04 2349   	jp lp_data_error
040FEF             2350   
040FEF             2351   lp_one_number:
040FEF 79          2352   	ld a,c
040FF0 FE 0D       2353   	cp 13
040FF2 C2 D0 10 04 2354   	jp nz,lp_data_error
040FF6             2355   
040FF6 23          2356   	inc hl
040FF7 7E          2357   	ld a,(hl)
040FF8 FE 0A       2358   	cp 10
040FFA C2 D0 10 04 2359   	jp nz,lp_data_error
040FFE             2360   
040FFE 23          2361   	inc hl
040FFF             2362   
040FFF 78          2363   	ld a,b
041000 D6 30       2364   	sub 48
041002             2365   
041002 E5          2366   	push hl
041003 21 43 18 04 2367   	ld hl,new_colors_count
041007 77          2368   	ld (hl),a
041008 E1          2369   	pop hl
041009             2370   
041009 FE 00       2371   	cp 0
04100B CA D0 10 04 2372   	jp z,lp_data_error
04100F FE 03       2373   	cp 3
041011 DA 5A 10 04 2374   	jp c,lp_two_colors
041015 FE 05       2375   	cp 5
041017 DA 6E 10 04 2376   	jp c,lp_four_colors
04101B             2377   
04101B C3 82 10 04 2378   	jp lp_sixteen_colors
04101F             2379   
04101F             2380   lp_two_number:
04101F 23          2381   	inc hl
041020 7E          2382   	ld a,(hl)
041021 FE 0D       2383   	cp 13
041023 C2 D0 10 04 2384   	jp nz,lp_data_error
041027             2385   
041027 23          2386   	inc hl
041028 7E          2387   	ld a,(hl)
041029 FE 0A       2388   	cp 10
04102B C2 D0 10 04 2389   	jp nz,lp_data_error
04102F             2390   
04102F 23          2391   	inc hl
041030             2392   
041030 78          2393   	ld a,b
041031 D6 30       2394   	sub 48
041033 01 00 00 00 2395   	ld bc,#000000
041037 47          2396   	ld b,a
041038 0E 0A       2397   	ld c,10
04103A ED 4C       2398   	mlt bc
04103C 81          2399   	add a,c
04103D             2400   
04103D E5          2401   	push hl
04103E 21 43 18 04 2402   	ld hl,new_colors_count
041042 77          2403   	ld (hl),a
041043 E1          2404   	pop hl
041044             2405   
041044 FE 0A       2406   	cp 10
041046 DA D0 10 04 2407   	jp c,lp_data_error
04104A FE 11       2408   	cp 17
04104C DA 82 10 04 2409   	jp c,lp_sixteen_colors
041050 FE 41       2410   	cp 65
041052 DA 96 10 04 2411   	jp c,lp_sixty_four_colors
041056             2412   
041056 C3 D0 10 04 2413   	jp lp_data_error
04105A             2414   
04105A             2415   lp_two_colors:
04105A E5          2416   	push hl
04105B 21 42 18 04 2417   	ld hl,colors_count
04105F 3E 02       2418   	ld a,2
041061 77          2419   	ld (hl),a
041062 21 43 18 04 2420   	ld hl,new_colors_count
041066 7E          2421   	ld a,(hl)
041067 E1          2422   	pop hl
041068 06 00       2423   	ld b,0 ; start wit color 0
04106A C3 AA 10 04 2424   	jp lp_read_colors
04106E             2425   
04106E             2426   lp_four_colors:
04106E E5          2427   	push hl
04106F 21 42 18 04 2428   	ld hl,colors_count
041073 3E 04       2429   	ld a,4
041075 77          2430   	ld (hl),a
041076 21 43 18 04 2431   	ld hl,new_colors_count
04107A 7E          2432   	ld a,(hl)
04107B E1          2433   	pop hl
04107C 06 00       2434   	ld b,0 ; start wit color 0
04107E C3 AA 10 04 2435   	jp lp_read_colors
041082             2436   
041082             2437   lp_sixteen_colors:
041082 E5          2438   	push hl
041083 21 42 18 04 2439   	ld hl,colors_count
041087 3E 10       2440   	ld a,16
041089 77          2441   	ld (hl),a
04108A 21 43 18 04 2442   	ld hl,new_colors_count
04108E 7E          2443   	ld a,(hl)
04108F E1          2444   	pop hl
041090 06 00       2445   	ld b,0 ; start wit color 0
041092 C3 AA 10 04 2446   	jp lp_read_colors
041096             2447   
041096             2448   lp_sixty_four_colors:
041096 E5          2449   	push hl
041097 21 42 18 04 2450   	ld hl,colors_count
04109B 3E 40       2451   	ld a,64
04109D 77          2452   	ld (hl),a
04109E 21 43 18 04 2453   	ld hl,new_colors_count
0410A2 7E          2454   	ld a,(hl)
0410A3 E1          2455   	pop hl
0410A4 06 00       2456   	ld b,0 ; start wit color 0
0410A6 C3 AA 10 04 2457   	jp lp_read_colors
0410AA             2458   
0410AA             2459   lp_read_colors:
0410AA F5          2460   	push af
0410AB C5          2461   	push bc
0410AC E5          2462   	push hl
0410AD CD E8 10 04 2463   	call lp_read_tint ; read red
0410B1 4F          2464   	ld c,a
0410B2 C5          2465   	push bc
0410B3 CD E8 10 04 2466   	call lp_read_tint ; green red
0410B7 5F          2467   	ld e,a
0410B8 D5          2468   	push de
0410B9 CD E8 10 04 2469   	call lp_read_tint ; blue red
0410BD 6F          2470   	ld l,a
0410BE D1          2471   	pop de
0410BF C1          2472   	pop bc ; RGB = c,e,l
0410C0 CD 5C 11 04 2473   	call lp_set_tint
0410C4 E1          2474   	pop hl
0410C5 C1          2475   	pop bc
0410C6 F1          2476   	pop af
0410C7             2477   
0410C7 04          2478   	inc b
0410C8 3D          2479   	dec a
0410C9 FE 00       2480   	cp 0
0410CB C2 AA 10 04 2481   	jp nz,lp_read_colors
0410CF             2482   
0410CF             2483   lp_exit:
0410CF C9          2484   	ret
0410D0             2485   
0410D0             2486   lp_data_error:
0410D0 CD 8F 15 04 2487   	call fn_print_data_error
0410D4             2488   
0410D4 C9          2489   	ret
0410D5             2490   
0410D5             2491   lp_file_error:
0410D5 CD EA 14 04 2492   	call fn_print_file_error
0410D9             2493   
0410D9             2494   	; set path to home
0410D9 21 CC 17 04 2495   	ld hl,back_path
0410DD             2496   	moscall mos_cd
0410DD 3E 03       0001M  		LD	A, function
0410DF 49 CF       0002M  		RST.LIS	08h
0410E1             2497   
0410E1             2498   	; exit on error
0410E1 FE 00       2499   	cp 0
0410E3 C2 AB 0F 04 2500   	jp nz,lp_folder_error
0410E7             2501   
0410E7 C9          2502   	ret
0410E8             2503   
0410E8             2504   lp_read_tint:
0410E8 0E 00       2505   	ld c,0 ; number of chars readen
0410EA 11 A2 3B 04 2506   	ld de,temp_chars_buffer
0410EE             2507   
0410EE D5          2508   	push de
0410EF             2509   
0410EF             2510   	; read chars
0410EF CD 3C 11 04 2511   	call lprt_read_chars
0410F3             2512   
0410F3 D1          2513   	pop de
0410F4             2514   
0410F4 79          2515   	ld a,c
0410F5 FE 00       2516   	cp 0 ; no numbers
0410F7 CA D0 10 04 2517   	jp z,lp_data_error
0410FB FE 04       2518   	cp 4 ; to many numbers
0410FD D2 D0 10 04 2519   	jp nc,lp_data_error
041101             2520   
041101 FE 03       2521   	cp 3
041103 28 17       2522   	jr z,lprt_three_int
041105             2523   
041105 FE 02       2524   	cp 2
041107 28 02       2525   	jr z,lprt_two_int
041109             2526   
041109             2527   	; one int only
041109 1A          2528   	ld a,(de)
04110A C9          2529   	ret
04110B             2530   
04110B             2531   ; two int
04110B             2532   lprt_two_int:
04110B 1A          2533   	ld a,(de)
04110C D5          2534   	push de
04110D 11 00 00 00 2535   	ld de,#000000
041111 5F          2536   	ld e,a
041112 16 0A       2537   	ld d,10
041114 ED 5C       2538   	mlt de
041116 43          2539   	ld b,e
041117 D1          2540   	pop de
041118 13          2541   	inc de
041119 1A          2542   	ld a,(de)
04111A 80          2543   	add a,b ; full int value is here
04111B C9          2544   	ret
04111C             2545   
04111C             2546   ; three int
04111C             2547   lprt_three_int:
04111C 1A          2548   	ld a,(de)
04111D D5          2549   	push de
04111E 11 00 00 00 2550   	ld de,#000000
041122 5F          2551   	ld e,a
041123 16 64       2552   	ld d,100
041125 ED 5C       2553   	mlt de
041127 43          2554   	ld b,e
041128 D1          2555   	pop de
041129 13          2556   	inc de
04112A 1A          2557   	ld a,(de)
04112B D5          2558   	push de
04112C 11 00 00 00 2559   	ld de,#000000
041130 5F          2560   	ld e,a
041131 16 0A       2561   	ld d,10
041133 ED 5C       2562   	mlt de
041135 4B          2563   	ld c,e
041136 D1          2564   	pop de
041137 13          2565   	inc de
041138 1A          2566   	ld a,(de)
041139 81          2567   	add a,c
04113A 80          2568   	add a,b ; full int value is here
04113B C9          2569   	ret
04113C             2570   
04113C             2571   lprt_read_chars:
04113C 3E 0D       2572   	ld a,13
04113E 12          2573   	ld (de),a ; store eol as default char
04113F             2574   
04113F 7E          2575   	ld a,(hl)
041140 FE 20       2576   	cp ' '
041142 C8          2577   	ret z ; ret if space
041143 FE 0D       2578   	cp 13
041145 C8          2579   	ret z ; ret if cr
041146 FE 0A       2580   	cp 10
041148 C8          2581   	ret z ; ret if lf
041149 FE 30       2582   	cp '0'
04114B D8          2583   	ret c ; ret if not number
04114C FE 39       2584   	cp '9'
04114E 38 03       2585   	jr c,lprt_store
041150 28 01       2586   	jr z,lprt_store
041152 C9          2587   	ret
041153             2588   
041153             2589   ; found a number, store it
041153             2590   lprt_store:
041153 D6 30       2591   	sub 48 ; convert char to byte integer
041155 12          2592   	ld (de),a ; store value
041156 13          2593   	inc de
041157 0C          2594   	inc c
041158 C3 3C 11 04 2595   	jp lprt_read_chars
04115C             2596   
04115C             2597   ; set tint (RGB = c,e,l)
04115C             2598   lp_set_tint:
04115C C5          2599   	push bc
04115D D5          2600   	push de
04115E E5          2601   	push hl
04115F             2602   
04115F C5          2603   	push bc
041160             2604   	vdu 19
041160 3E 13       0001M  		LD	A, function
041162 49 D7       0002M  		RST.LIS	10h
041164 C1          2605   	pop bc
041165 78          2606   	ld a,b
041166             2607   	vdu_a
041166 49 D7       0001M  		RST.LIS	10h
041168             2608   	vdu 255
041168 3E FF       0001M  		LD	A, function
04116A 49 D7       0002M  		RST.LIS	10h
04116C             2609   
04116C E1          2610   	pop hl
04116D 7D          2611   	ld a,l
04116E             2612   	vdu_a
04116E 49 D7       0001M  		RST.LIS	10h
041170 D1          2613   	pop de
041171 7B          2614   	ld a,e
041172             2615   	vdu_a
041172 49 D7       0001M  		RST.LIS	10h
041174 C1          2616   	pop bc
041175 79          2617   	ld a,c
041176             2618   	vdu_a
041176 49 D7       0001M  		RST.LIS	10h
041178             2619   
041178 C1          2620   	pop bc
041179             2621   
041179 C9          2622   	ret
04117A             2623   
04117A             2624   ; save the palette
04117A             2625   fn_save_palette:
04117A C9          2626   	ret
04117B             2627   
04117B             2628   ; load a sprite, giving its full name, with extension
04117B             2629   fn_load_sprite:
04117B             2630   	; clear the filename on the screen
04117B 21 AE 17 04 2631   	ld hl,filename
04117F 06 0C       2632   	ld b,12
041181 AF          2633   	xor a
041182             2634   
041182             2635   ls_clear_filename:
041182 77          2636   	ld (hl),a
041183 23          2637   	inc hl
041184 10 FC       2638   	djnz ls_clear_filename
041186             2639   
041186             2640   	; get filename
041186 CD F7 0D 04 2641   	call fn_input_text8
04118A             2642   
04118A             2643   	; set path to 'sprites/'
04118A 21 BB 17 04 2644   	ld hl,sprite_path
04118E             2645   	moscall mos_cd
04118E 3E 03       0001M  		LD	A, function
041190 49 CF       0002M  		RST.LIS	08h
041192             2646   
041192             2647   	; exit on folder error
041192 FE 00       2648   	cp 0
041194 C2 63 12 04 2649   	jp nz,ls_folder_error
041198             2650   
041198             2651   	; open the file for read
041198 21 AE 17 04 2652   	ld hl,filename
04119C 0E 01       2653   	ld c,fa_open_existing|fa_read
04119E             2654   	moscall mos_fopen
04119E 3E 0A       0001M  		LD	A, function
0411A0 49 CF       0002M  		RST.LIS	08h
0411A2             2655   
0411A2             2656   	; exit on file error
0411A2 FE 00       2657   	cp 0
0411A4 CA 91 12 04 2658   	jp z,ls_file_error
0411A8             2659   
0411A8             2660   	; filehandle -> C
0411A8 4F          2661   	ld c,a
0411A9             2662   
0411A9             2663   	; get colors count
0411A9             2664   	moscall mos_fgetc
0411A9 3E 0C       0001M  		LD	A, function
0411AB 49 CF       0002M  		RST.LIS	08h
0411AD DA 3E 12 04 2665   	jp c,ls_close_error
0411B1             2666   
0411B1 FE 41       2667   	cp MAX_COLORS + 1
0411B3 D2 3E 12 04 2668   	jp nc,ls_close_error
0411B7             2669   
0411B7             2670   	; store colors count
0411B7 21 42 18 04 2671   	ld hl,colors_count
0411BB 77          2672   	ld (hl),a
0411BC             2673   
0411BC             2674   	; get frames count
0411BC             2675   	moscall mos_fgetc
0411BC 3E 0C       0001M  		LD	A, function
0411BE 49 CF       0002M  		RST.LIS	08h
0411C0 DA 3E 12 04 2676   	jp c,ls_close_error
0411C4             2677   
0411C4             2678   	; store frames count
0411C4 21 45 18 04 2679   	ld hl,frames_count
0411C8 77          2680   	ld (hl),a
0411C9             2681   
0411C9             2682   	; set last frame as current frame
0411C9 21 44 18 04 2683   	ld hl,current_frame
0411CD 3D          2684   	dec a
0411CE 77          2685   	ld (hl),a
0411CF             2686   
0411CF             2687   	; get sprite size
0411CF             2688   	moscall mos_fgetc
0411CF 3E 0C       0001M  		LD	A, function
0411D1 49 CF       0002M  		RST.LIS	08h
0411D3 DA 3E 12 04 2689   	jp c,ls_close_error
0411D7             2690   
0411D7             2691   	; store sprite size
0411D7 21 37 17 04 2692   	ld hl,spr_size
0411DB 77          2693   	ld (hl),a
0411DC             2694   
0411DC             2695   	; set 4x4 pixel width
0411DC FE 04       2696   	cp SPR44
0411DE 20 09       2697   	jr nz,ls_next1
0411E0             2698   
0411E0 21 36 17 04 2699   	ld hl,pixel_width
0411E4 06 20       2700   	ld b,SPR44_width
0411E6 70          2701   	ld (hl),b
0411E7 18 21       2702   	jr ls_next4
0411E9             2703   
0411E9             2704   ls_next1:
0411E9             2705   	; set 8x8 pixel width
0411E9 FE 08       2706   	cp SPR88
0411EB 20 09       2707   	jr nz,ls_next2
0411ED             2708   
0411ED 21 36 17 04 2709   	ld hl,pixel_width
0411F1 06 10       2710   	ld b,SPR88_width
0411F3 70          2711   	ld (hl),b
0411F4 18 14       2712   	jr ls_next4
0411F6             2713   
0411F6             2714   ls_next2:
0411F6             2715   
0411F6             2716   	; set 16x16 pixel width
0411F6 FE 10       2717   	cp SPR1616
0411F8 20 09       2718   	jr nz,ls_next3
0411FA             2719   
0411FA 21 36 17 04 2720   	ld hl,pixel_width
0411FE 06 08       2721   	ld b,SPR1616_width
041200 70          2722   	ld (hl),b
041201 18 07       2723   	jr ls_next4
041203             2724   
041203             2725   ls_next3:
041203             2726   
041203 21 36 17 04 2727   	ld hl,pixel_width
041207 06 04       2728   	ld b,SPR3232_width
041209 70          2729   	ld (hl),b
04120A             2730   
04120A             2731   ls_next4:
04120A 21 00 00 00 2732   	ld hl,#000000
04120E 6F          2733   	ld l,a
04120F 67          2734   	ld h,a
041210 ED 6C       2735   	mlt hl ; HL = sprite length
041212 E5          2736   	push hl
041213             2737   
041213             2738   	; get frames count
041213 21 44 18 04 2739   	ld hl,current_frame
041217 46          2740   	ld b,(hl)
041218             2741   
041218 E1          2742   	pop hl
041219             2743   
041219 78          2744   	ld a,b
04121A FE 00       2745   	cp 0
04121C 28 07       2746   	jr z,ls_read_data
04121E             2747   
04121E             2748   	; de = size²
04121E 11 00 04 00 2749   	ld de,ONE_FRAME_BUFFER_SIZE
041222             2750   ls_add_length:
041222 19          2751   	add hl,de
041223 10 FD       2752   	djnz ls_add_length
041225             2753   
041225             2754   ls_read_data:
041225 E5          2755   	push hl
041226 E5          2756   	push hl
041227 D1          2757   	pop de
041228 7B          2758   	ld a,e
041229 21 4D 18 04 2759   	ld hl,sprite_buffer
04122D             2760   	moscall mos_fread
04122D 3E 1A       0001M  		LD	A, function
04122F 49 CF       0002M  		RST.LIS	08h
041231 E1          2761   	pop hl
041232 7C          2762   	ld a,h
041233 BA          2763   	cp d
041234 20 08       2764   	jr nz,ls_close_error
041236 7D          2765   	ld a,l
041237 BB          2766   	cp e
041238 20 04       2767   	jr nz,ls_close_error
04123A C3 6B 12 04 2768   	jp ls_close
04123E             2769   
04123E             2770   ls_close_error:
04123E C5          2771   	push bc
04123F             2772   
04123F             2773   	; read error
04123F CD EA 14 04 2774   	call fn_print_file_error
041243             2775   
041243 C1          2776   	pop bc
041244             2777   
041244             2778   	; close the file
041244             2779   	moscall mos_fclose
041244 3E 0B       0001M  		LD	A, function
041246 49 CF       0002M  		RST.LIS	08h
041248             2780   
041248             2781   	; set path to home
041248 21 CC 17 04 2782   	ld hl,back_path
04124C             2783   	moscall mos_cd
04124C 3E 03       0001M  		LD	A, function
04124E 49 CF       0002M  		RST.LIS	08h
041250             2784   
041250             2785   	; exit on error
041250 FE 00       2786   	cp 0
041252 C2 63 12 04 2787   	jp nz,ls_folder_error
041256             2788   
041256             2789   
041256             2790   	; reset current frame and coordinates of the drawing pixel
041256 21 32 17 04 2791   	ld hl,xpix
04125A AF          2792   	xor a
04125B 77          2793   	ld (hl),a
04125C 21 33 17 04 2794   	ld hl,ypix
041260 77          2795   	ld (hl),a
041261 18 25       2796   	jr ls_exit
041263             2797   
041263             2798   ls_folder_error:
041263             2799   	; write error
041263 CD 21 15 04 2800   	call fn_print_folder_error
041267 C3 88 12 04 2801   	jp ls_exit
04126B             2802   
04126B             2803   ls_close:
04126B             2804   	; close the file
04126B             2805   	moscall mos_fclose
04126B 3E 0B       0001M  		LD	A, function
04126D 49 CF       0002M  		RST.LIS	08h
04126F             2806   
04126F             2807   	; set path to home
04126F 21 CC 17 04 2808   	ld hl,back_path
041273             2809   	moscall mos_cd
041273 3E 03       0001M  		LD	A, function
041275 49 CF       0002M  		RST.LIS	08h
041277             2810   
041277             2811   	; exit on error
041277 FE 00       2812   	cp 0
041279 C2 63 12 04 2813   	jp nz,ls_folder_error
04127D             2814   
04127D             2815   	; reset current frame and coordinates of the drawing pixel
04127D 21 32 17 04 2816   	ld hl,xpix
041281 AF          2817   	xor a
041282 77          2818   	ld (hl),a
041283 21 33 17 04 2819   	ld hl,ypix
041287 77          2820   	ld (hl),a
041288             2821   
041288             2822   ls_exit:
041288 CD 70 16 04 2823   	call fn_show_spr_descr
04128C CD 2B 16 04 2824   	call fn_change_frames_count
041290 C9          2825   	ret
041291             2826   
041291             2827   ls_file_error:
041291 CD EA 14 04 2828   	call fn_print_file_error
041295             2829   
041295             2830   	; set path to home
041295 21 CC 17 04 2831   	ld hl,back_path
041299             2832   	moscall mos_cd
041299 3E 03       0001M  		LD	A, function
04129B 49 CF       0002M  		RST.LIS	08h
04129D             2833   
04129D             2834   	; exit on error
04129D FE 00       2835   	cp 0
04129F C2 63 12 04 2836   	jp nz,ls_folder_error
0412A3             2837   
0412A3 C9          2838   	ret
0412A4             2839   
0412A4             2840   ; save a sprite, giving its name
0412A4             2841   fn_save_sprite:
0412A4             2842   	; clear filename on the screen
0412A4 21 AE 17 04 2843   	ld hl,filename
0412A8 06 0C       2844   	ld b,12
0412AA AF          2845   	xor a
0412AB             2846   
0412AB             2847   ss_clear_filename:
0412AB 77          2848   	ld (hl),a
0412AC 23          2849   	inc hl
0412AD 10 FC       2850   	djnz ss_clear_filename
0412AF             2851   
0412AF             2852   	; get filename
0412AF CD F7 0D 04 2853   	call fn_input_text8
0412B3             2854   
0412B3             2855   	; set path to sprite path
0412B3 21 BB 17 04 2856   	ld hl,sprite_path
0412B7             2857   	moscall mos_cd
0412B7 3E 03       0001M  		LD	A, function
0412B9 49 CF       0002M  		RST.LIS	08h
0412BB             2858   
0412BB             2859   	; create it on error
0412BB FE 00       2860   	cp 0
0412BD F5          2861   	push af
0412BE C4 05 17 04 2862   	call nz,fn_create_sprite_folder
0412C2 F1          2863   	pop af
0412C3 28 08       2864   	jr z,ss_next
0412C5             2865   
0412C5             2866   	; set path to sprite path
0412C5 21 BB 17 04 2867   	ld hl,sprite_path
0412C9             2868   	moscall mos_cd
0412C9 3E 03       0001M  		LD	A, function
0412CB 49 CF       0002M  		RST.LIS	08h
0412CD             2869   
0412CD             2870   ss_next:
0412CD             2871   
0412CD             2872   	; exit on error
0412CD FE 00       2873   	cp 0
0412CF C2 5F 13 04 2874   	jp nz,ss_folder_error
0412D3             2875   
0412D3             2876   	; open the file for write
0412D3 21 AE 17 04 2877   	ld hl,filename
0412D7 0E 0A       2878   	ld c,fa_create_always|fa_write
0412D9             2879   	moscall mos_fopen
0412D9 3E 0A       0001M  		LD	A, function
0412DB 49 CF       0002M  		RST.LIS	08h
0412DD             2880   
0412DD             2881   	; exit on error
0412DD FE 00       2882   	cp 0
0412DF CA 90 13 04 2883   	jp z,ss_file_error
0412E3             2884   
0412E3             2885   	; filehandle -> C
0412E3 4F          2886   	ld c,a
0412E4             2887   
0412E4             2888   	; store colors count in the file
0412E4 06 40       2889   	ld b,MAX_COLORS
0412E6             2890   	moscall mos_fputc
0412E6 3E 0D       0001M  		LD	A, function
0412E8 49 CF       0002M  		RST.LIS	08h
0412EA             2891   
0412EA             2892   	; store frames count in the file
0412EA 21 45 18 04 2893   	ld hl,frames_count
0412EE 46          2894   	ld b,(hl)
0412EF             2895   	moscall mos_fputc
0412EF 3E 0D       0001M  		LD	A, function
0412F1 49 CF       0002M  		RST.LIS	08h
0412F3             2896   
0412F3             2897   	; store sprite size in the file
0412F3 21 37 17 04 2898   	ld hl,spr_size
0412F7 46          2899   	ld b,(hl)
0412F8             2900   	moscall mos_fputc
0412F8 3E 0D       0001M  		LD	A, function
0412FA 49 CF       0002M  		RST.LIS	08h
0412FC             2901   
0412FC             2902   	; de = size²
0412FC 21 00 00 00 2903   	ld hl,#000000
041300 68          2904   	ld l,b
041301 60          2905   	ld h,b
041302 ED 6C       2906   	mlt hl ; HL = sprite length
041304 E5          2907   	push hl
041305             2908   
041305             2909   	; get frames count
041305 21 44 18 04 2910   	ld hl,current_frame
041309 46          2911   	ld b,(hl)
04130A             2912   
04130A E1          2913   	pop hl
04130B             2914   
04130B 78          2915   	ld a,b
04130C FE 00       2916   	cp 0
04130E 28 07       2917   	jr z,ss_write_data
041310             2918   
041310 11 00 04 00 2919   	ld de,ONE_FRAME_BUFFER_SIZE
041314             2920   ss_add_length:
041314 19          2921   	add hl,de
041315 10 FD       2922   	djnz ss_add_length
041317             2923   
041317             2924   ss_write_data:
041317 E5          2925   	push hl
041318 E5          2926   	push hl
041319 D1          2927   	pop de
04131A 21 4D 18 04 2928   	ld hl,sprite_buffer
04131E             2929   	moscall mos_fwrite
04131E 3E 1B       0001M  		LD	A, function
041320 49 CF       0002M  		RST.LIS	08h
041322 E1          2930   	pop hl
041323 7C          2931   	ld a,h
041324 BA          2932   	cp d
041325 20 08       2933   	jr nz,ss_close_error
041327 7D          2934   	ld a,l
041328 BB          2935   	cp e
041329 20 04       2936   	jr nz,ss_close_error
04132B C3 67 13 04 2937   	jp ss_close
04132F             2938   
04132F             2939   ss_close_error:
04132F C5          2940   	push bc
041330             2941   
041330             2942   	; write error
041330 CD EA 14 04 2943   	call fn_print_file_error
041334             2944   
041334 C1          2945   	pop bc
041335             2946   
041335             2947   	; close the file
041335             2948   	moscall mos_fclose
041335 3E 0B       0001M  		LD	A, function
041337 49 CF       0002M  		RST.LIS	08h
041339             2949   
041339             2950   	; set path to home
041339 21 CC 17 04 2951   	ld hl,back_path
04133D             2952   	moscall mos_cd
04133D 3E 03       0001M  		LD	A, function
04133F 49 CF       0002M  		RST.LIS	08h
041341             2953   
041341             2954   	; exit on error
041341 FE 00       2955   	cp 0
041343 C2 5F 13 04 2956   	jp nz,ss_folder_error
041347             2957   
041347             2958   	; reset current frame and coordinates of the drawing pixel
041347 21 45 18 04 2959   	ld hl,frames_count
04134B 7E          2960   	ld a,(hl)
04134C 3D          2961   	dec a
04134D 21 44 18 04 2962   	ld hl,current_frame
041351 77          2963   	ld (hl),a
041352 21 32 17 04 2964   	ld hl,xpix
041356 AF          2965   	xor a
041357 77          2966   	ld (hl),a
041358 21 33 17 04 2967   	ld hl,ypix
04135C 77          2968   	ld (hl),a
04135D 18 30       2969   	jr ss_exit
04135F             2970   
04135F             2971   ss_folder_error:
04135F             2972   	; write error
04135F CD 21 15 04 2973   	call fn_print_folder_error
041363 C3 8F 13 04 2974   	jp ss_exit
041367             2975   
041367             2976   ss_close:
041367             2977   	; close the file
041367             2978   	moscall mos_fclose
041367 3E 0B       0001M  		LD	A, function
041369 49 CF       0002M  		RST.LIS	08h
04136B             2979   
04136B             2980   	; set path to home
04136B 21 CC 17 04 2981   	ld hl,back_path
04136F             2982   	moscall mos_cd
04136F 3E 03       0001M  		LD	A, function
041371 49 CF       0002M  		RST.LIS	08h
041373             2983   
041373             2984   	; exit on error
041373 FE 00       2985   	cp 0
041375 C2 5F 13 04 2986   	jp nz,ss_folder_error
041379             2987   
041379             2988   	; reset current frame and coordinates of the drawing pixel
041379 21 45 18 04 2989   	ld hl,frames_count
04137D 7E          2990   	ld a,(hl)
04137E 3D          2991   	dec a
04137F 21 44 18 04 2992   	ld hl,current_frame
041383 77          2993   	ld (hl),a
041384 21 32 17 04 2994   	ld hl,xpix
041388 AF          2995   	xor a
041389 77          2996   	ld (hl),a
04138A 21 33 17 04 2997   	ld hl,ypix
04138E 77          2998   	ld (hl),a
04138F             2999   
04138F             3000   ss_exit:
04138F C9          3001   	ret
041390             3002   
041390             3003   ss_file_error:
041390 CD EA 14 04 3004   	call fn_print_file_error
041394             3005   
041394             3006   	; set path to home
041394 21 CC 17 04 3007   	ld hl,back_path
041398             3008   	moscall mos_cd
041398 3E 03       0001M  		LD	A, function
04139A 49 CF       0002M  		RST.LIS	08h
04139C             3009   
04139C             3010   	; exit on error
04139C FE 00       3011   	cp 0
04139E C2 5F 13 04 3012   	jp nz,ss_folder_error
0413A2 C9          3013   	ret
0413A3             3014   
0413A3             3015   ; export sprite data in assembly language, giving its name
0413A3             3016   fn_export_sprite:
0413A3             3017   	; clear filename
0413A3 21 AE 17 04 3018   	ld hl,filename
0413A7 06 0C       3019   	ld b,12
0413A9 AF          3020   	xor a
0413AA             3021   
0413AA             3022   es_clear_filename:
0413AA 77          3023   	ld (hl),a
0413AB 23          3024   	inc hl
0413AC 10 FC       3025   	djnz es_clear_filename
0413AE             3026   
0413AE             3027   	; get filename
0413AE CD F7 0D 04 3028   	call fn_input_text8
0413B2             3029   
0413B2             3030   	; set path to sprite path
0413B2 21 BB 17 04 3031   	ld hl,sprite_path
0413B6             3032   	moscall mos_cd
0413B6 3E 03       0001M  		LD	A, function
0413B8 49 CF       0002M  		RST.LIS	08h
0413BA             3033   
0413BA             3034   	; create it on error
0413BA FE 00       3035   	cp 0
0413BC F5          3036   	push af
0413BD C4 05 17 04 3037   	call nz,fn_create_sprite_folder
0413C1 F1          3038   	pop af
0413C2 28 0E       3039   	jr z,es_next
0413C4             3040   
0413C4             3041   	; set path to sprite path
0413C4 21 BB 17 04 3042   	ld hl,sprite_path
0413C8             3043   	moscall mos_cd
0413C8 3E 03       0001M  		LD	A, function
0413CA 49 CF       0002M  		RST.LIS	08h
0413CC             3044   
0413CC             3045   	; exit on error
0413CC FE 00       3046   	cp 0
0413CE C2 CE 14 04 3047   	jp nz,es_folder_error
0413D2             3048   
0413D2             3049   es_next:
0413D2             3050   	; open the file for write
0413D2 21 AE 17 04 3051   	ld hl,filename
0413D6 0E 0A       3052   	ld c,fa_create_always|fa_write
0413D8             3053   	moscall mos_fopen
0413D8 3E 0A       0001M  		LD	A, function
0413DA 49 CF       0002M  		RST.LIS	08h
0413DC             3054   
0413DC             3055   	; exit on error
0413DC FE 00       3056   	cp 0
0413DE CA D7 14 04 3057   	jp z,es_file_error
0413E2             3058   
0413E2             3059   	; filehandle -> C
0413E2 4F          3060   	ld c,a
0413E3             3061   
0413E3             3062   
0413E3             3063   	; L = first frame
0413E3 3E 00       3064   	ld a,0
0413E5 21 4D 18 04 3065   	ld hl,sprite_buffer
0413E9 11 00 00 00 3066   	ld de,$000000
0413ED             3067   
0413ED             3068   es_frames_repeat:
0413ED F5          3069   	push af
0413EE E5          3070   	push hl
0413EF             3071   
0413EF F5          3072   	push af
0413F0             3073   
0413F0             3074   	; start to write...
0413F0 1E 00       3075   	ld e,0 ; rows
0413F2             3076   
0413F2 06 3B       3077   	ld b,';'
0413F4             3078   	moscall mos_fputc
0413F4 3E 0D       0001M  		LD	A, function
0413F6 49 CF       0002M  		RST.LIS	08h
0413F8             3079   
0413F8 06 20       3080   	ld b,' '
0413FA             3081   	moscall mos_fputc
0413FA 3E 0D       0001M  		LD	A, function
0413FC 49 CF       0002M  		RST.LIS	08h
0413FE             3082   
0413FE 06 46       3083   	ld b,'F'
041400             3084   	moscall mos_fputc
041400 3E 0D       0001M  		LD	A, function
041402 49 CF       0002M  		RST.LIS	08h
041404             3085   
041404 06 72       3086   	ld b,'r'
041406             3087   	moscall mos_fputc
041406 3E 0D       0001M  		LD	A, function
041408 49 CF       0002M  		RST.LIS	08h
04140A             3088   
04140A 06 6D       3089   	ld b,'m'
04140C             3090   	moscall mos_fputc
04140C 3E 0D       0001M  		LD	A, function
04140E 49 CF       0002M  		RST.LIS	08h
041410             3091   
041410 06 20       3092   	ld b,' '
041412             3093   	moscall mos_fputc
041412 3E 0D       0001M  		LD	A, function
041414 49 CF       0002M  		RST.LIS	08h
041416             3094   
041416 F1          3095   	pop af
041417 C6 30       3096   	add a,'0'
041419 47          3097   	ld b,a
04141A             3098   	moscall mos_fputc
04141A 3E 0D       0001M  		LD	A, function
04141C 49 CF       0002M  		RST.LIS	08h
04141E             3099   
04141E 06 0D       3100   	ld b,13
041420             3101   	moscall mos_fputc
041420 3E 0D       0001M  		LD	A, function
041422 49 CF       0002M  		RST.LIS	08h
041424             3102   
041424 06 0A       3103   	ld b,10
041426             3104   	moscall mos_fputc
041426 3E 0D       0001M  		LD	A, function
041428 49 CF       0002M  		RST.LIS	08h
04142A             3105   
04142A             3106   es_repeat:
04142A             3107   
04142A 06 44       3108   	ld b,'D'
04142C             3109   	moscall mos_fputc
04142C 3E 0D       0001M  		LD	A, function
04142E 49 CF       0002M  		RST.LIS	08h
041430             3110   
041430 06 42       3111   	ld b,'B'
041432             3112   	moscall mos_fputc
041432 3E 0D       0001M  		LD	A, function
041434 49 CF       0002M  		RST.LIS	08h
041436             3113   
041436 06 20       3114   	ld b,' '
041438             3115   	moscall mos_fputc
041438 3E 0D       0001M  		LD	A, function
04143A 49 CF       0002M  		RST.LIS	08h
04143C             3116   
04143C 16 00       3117   	ld d,0 ; columns
04143E             3118   
04143E             3119   es_repeat_line:
04143E D5          3120   	push de
04143F             3121   
04143F 7E          3122   	ld a,(hl)
041440 23          3123   	inc hl
041441             3124   
041441             3125   	; convert A to BCD
041441 CD 15 17 04 3126   	call fn_hex2bcd
041445             3127   
041445             3128   	; write two numbers (chars)
041445 5F          3129   	ld e,a
041446 E6 F0       3130   	and $f0
041448 0F          3131   	rrca
041449 0F          3132   	rrca
04144A 0F          3133   	rrca
04144B 0F          3134   	rrca
04144C C6 30       3135   	add '0'
04144E             3136   
04144E 47          3137   	ld b,a
04144F             3138   	moscall mos_fputc
04144F 3E 0D       0001M  		LD	A, function
041451 49 CF       0002M  		RST.LIS	08h
041453             3139   
041453 7B          3140   	ld a,e
041454 E6 0F       3141   	and $0f
041456 C6 30       3142   	add '0'
041458             3143   
041458 47          3144   	ld b,a
041459             3145   	moscall mos_fputc
041459 3E 0D       0001M  		LD	A, function
04145B 49 CF       0002M  		RST.LIS	08h
04145D             3146   
04145D D1          3147   	pop de
04145E 14          3148   	inc d
04145F 3A 37 17 04 3149   	ld a,(spr_size)
041463 BA          3150   	cp d
041464 F5          3151   	push af
041465 C4 0E 17 04 3152   	call nz,fn_comma
041469 F1          3153   	pop af
04146A C2 3E 14 04 3154   	jp nz,es_repeat_line
04146E             3155   
04146E 06 0D       3156   	ld b,13 ; CR
041470             3157   	moscall mos_fputc
041470 3E 0D       0001M  		LD	A, function
041472 49 CF       0002M  		RST.LIS	08h
041474             3158   
041474 06 0A       3159   	ld b,10 ; LF
041476             3160   	moscall mos_fputc
041476 3E 0D       0001M  		LD	A, function
041478 49 CF       0002M  		RST.LIS	08h
04147A             3161   
04147A 1C          3162   	inc e
04147B 3A 37 17 04 3163   	ld a,(spr_size)
04147F BB          3164   	cp e
041480 C2 2A 14 04 3165   	jp nz,es_repeat
041484             3166   
041484 06 0D       3167   	ld b,13 ; CR
041486             3168   	moscall mos_fputc
041486 3E 0D       0001M  		LD	A, function
041488 49 CF       0002M  		RST.LIS	08h
04148A             3169   
04148A 06 0A       3170   	ld b,10 ; LF
04148C             3171   	moscall mos_fputc
04148C 3E 0D       0001M  		LD	A, function
04148E 49 CF       0002M  		RST.LIS	08h
041490             3172   
041490 E1          3173   	pop hl
041491 D5          3174   	push de
041492 ED 5C       3175   	mlt de
041494 19          3176   	add hl,de
041495 D1          3177   	pop de
041496 F1          3178   	pop af
041497 3C          3179   	inc a
041498 DD 21 45 18 3180   	ld ix,frames_count
       04          
04149D DD BE 00    3181   	cp (ix+0)
0414A0 C2 ED 13 04 3182   	jp nz,es_frames_repeat
0414A4             3183   
0414A4             3184   	; close the file
0414A4             3185   	moscall mos_fclose
0414A4 3E 0B       0001M  		LD	A, function
0414A6 49 CF       0002M  		RST.LIS	08h
0414A8             3186   
0414A8             3187   	; set path to home
0414A8 21 CC 17 04 3188   	ld hl,back_path
0414AC             3189   	moscall mos_cd
0414AC 3E 03       0001M  		LD	A, function
0414AE 49 CF       0002M  		RST.LIS	08h
0414B0             3190   
0414B0             3191   	; exit on error
0414B0 FE 00       3192   	cp 0
0414B2 C2 CE 14 04 3193   	jp nz,es_folder_error
0414B6             3194   
0414B6             3195   	; reset current frame and coordinates of the drawing pixel
0414B6 21 45 18 04 3196   	ld hl,frames_count
0414BA 7E          3197   	ld a,(hl)
0414BB 3D          3198   	dec a
0414BC 21 44 18 04 3199   	ld hl,current_frame
0414C0 77          3200   	ld (hl),a
0414C1 21 32 17 04 3201   	ld hl,xpix
0414C5 AF          3202   	xor a
0414C6 77          3203   	ld (hl),a
0414C7 21 33 17 04 3204   	ld hl,ypix
0414CB 77          3205   	ld (hl),a
0414CC 18 08       3206   	jr es_exit
0414CE             3207   
0414CE             3208   es_folder_error:
0414CE             3209   	; write error
0414CE CD 21 15 04 3210   	call fn_print_folder_error
0414D2 C3 D6 14 04 3211   	jp es_exit
0414D6             3212   
0414D6             3213   es_exit:
0414D6 C9          3214   	ret
0414D7             3215   
0414D7             3216   es_file_error:
0414D7 CD EA 14 04 3217   	call fn_print_file_error
0414DB             3218   
0414DB             3219   	; set path to home
0414DB 21 CC 17 04 3220   	ld hl,back_path
0414DF             3221   	moscall mos_cd
0414DF 3E 03       0001M  		LD	A, function
0414E1 49 CF       0002M  		RST.LIS	08h
0414E3             3222   
0414E3             3223   	; exit on error
0414E3 FE 00       3224   	cp 0
0414E5 C2 CE 14 04 3225   	jp nz,es_folder_error
0414E9 C9          3226   	ret
0414EA             3227   
0414EA             3228   ; print 'file error'
0414EA             3229   fn_print_file_error:
0414EA             3230   	vdu 7
0414EA 3E 07       0001M  		LD	A, function
0414EC 49 D7       0002M  		RST.LIS	10h
0414EE             3231   
0414EE             3232   	; locate x,y
0414EE             3233   	vdu 31
0414EE 3E 1F       0001M  		LD	A, function
0414F0 49 D7       0002M  		RST.LIS	10h
0414F2             3234   	vdu FILENAME_X
0414F2 3E 07       0001M  		LD	A, function
0414F4 49 D7       0002M  		RST.LIS	10h
0414F6             3235   	vdu FILENAME_Y
0414F6 3E 18       0001M  		LD	A, function
0414F8 49 D7       0002M  		RST.LIS	10h
0414FA             3236   
0414FA             3237   	; print text
0414FA 21 E8 17 04 3238   	ld hl,file_error
0414FE 01 00 00 00 3239   	ld bc,0
041502 AF          3240   	xor a
041503 49 DF       3241   	rst.lis $18
041505             3242   
041505 CD F0 0D 04 3243   	call fn_input_key
041509             3244   
041509             3245   	; locate x,y
041509             3246   	vdu 31
041509 3E 1F       0001M  		LD	A, function
04150B 49 D7       0002M  		RST.LIS	10h
04150D             3247   	vdu FILENAME_X
04150D 3E 07       0001M  		LD	A, function
04150F 49 D7       0002M  		RST.LIS	10h
041511             3248   	vdu FILENAME_Y
041511 3E 18       0001M  		LD	A, function
041513 49 D7       0002M  		RST.LIS	10h
041515             3249   
041515             3250   	; print text
041515 21 D1 17 04 3251   	ld hl,void_filename
041519 01 00 00 00 3252   	ld bc,0
04151D AF          3253   	xor a
04151E 49 DF       3254   	rst.lis $18
041520             3255   
041520 C9          3256   	ret
041521             3257   
041521             3258   ; print 'folder error'
041521             3259   fn_print_folder_error:
041521             3260   	vdu 7
041521 3E 07       0001M  		LD	A, function
041523 49 D7       0002M  		RST.LIS	10h
041525             3261   
041525             3262   	; locate x,y
041525             3263   	vdu 31
041525 3E 1F       0001M  		LD	A, function
041527 49 D7       0002M  		RST.LIS	10h
041529             3264   	vdu FILENAME_X
041529 3E 07       0001M  		LD	A, function
04152B 49 D7       0002M  		RST.LIS	10h
04152D             3265   	vdu FILENAME_Y
04152D 3E 18       0001M  		LD	A, function
04152F 49 D7       0002M  		RST.LIS	10h
041531             3266   
041531             3267   	; print text
041531 21 FF 17 04 3268   	ld hl,folder_error
041535 01 00 00 00 3269   	ld bc,0
041539 AF          3270   	xor a
04153A 49 DF       3271   	rst.lis $18
04153C             3272   
04153C CD F0 0D 04 3273   	call fn_input_key
041540             3274   
041540             3275   	; locate x,y
041540             3276   	vdu 31
041540 3E 1F       0001M  		LD	A, function
041542 49 D7       0002M  		RST.LIS	10h
041544             3277   	vdu FILENAME_X
041544 3E 07       0001M  		LD	A, function
041546 49 D7       0002M  		RST.LIS	10h
041548             3278   	vdu FILENAME_Y
041548 3E 18       0001M  		LD	A, function
04154A 49 D7       0002M  		RST.LIS	10h
04154C             3279   
04154C             3280   	; print text
04154C 21 D1 17 04 3281   	ld hl,void_filename
041550 01 00 00 00 3282   	ld bc,0
041554 AF          3283   	xor a
041555 49 DF       3284   	rst.lis $18
041557             3285   
041557 C9          3286   	ret
041558             3287   
041558             3288   ; print 'header error'
041558             3289   fn_print_header_error:
041558             3290   	vdu 7
041558 3E 07       0001M  		LD	A, function
04155A 49 D7       0002M  		RST.LIS	10h
04155C             3291   
04155C             3292   	; locate x,y
04155C             3293   	vdu 31
04155C 3E 1F       0001M  		LD	A, function
04155E 49 D7       0002M  		RST.LIS	10h
041560             3294   	vdu FILENAME_X
041560 3E 07       0001M  		LD	A, function
041562 49 D7       0002M  		RST.LIS	10h
041564             3295   	vdu FILENAME_Y
041564 3E 18       0001M  		LD	A, function
041566 49 D7       0002M  		RST.LIS	10h
041568             3296   
041568             3297   	; print text
041568 21 16 18 04 3298   	ld hl,header_error
04156C 01 00 00 00 3299   	ld bc,0
041570 AF          3300   	xor a
041571 49 DF       3301   	rst.lis $18
041573             3302   
041573 CD F0 0D 04 3303   	call fn_input_key
041577             3304   
041577             3305   	; locate x,y
041577             3306   	vdu 31
041577 3E 1F       0001M  		LD	A, function
041579 49 D7       0002M  		RST.LIS	10h
04157B             3307   	vdu FILENAME_X
04157B 3E 07       0001M  		LD	A, function
04157D 49 D7       0002M  		RST.LIS	10h
04157F             3308   	vdu FILENAME_Y
04157F 3E 18       0001M  		LD	A, function
041581 49 D7       0002M  		RST.LIS	10h
041583             3309   
041583             3310   	; print text
041583 21 D1 17 04 3311   	ld hl,void_filename
041587 01 00 00 00 3312   	ld bc,0
04158B AF          3313   	xor a
04158C 49 DF       3314   	rst.lis $18
04158E             3315   
04158E C9          3316   	ret
04158F             3317   
04158F             3318   ; print 'data error'
04158F             3319   fn_print_data_error:
04158F             3320   	vdu 7
04158F 3E 07       0001M  		LD	A, function
041591 49 D7       0002M  		RST.LIS	10h
041593             3321   
041593             3322   	; locate x,y
041593             3323   	vdu 31
041593 3E 1F       0001M  		LD	A, function
041595 49 D7       0002M  		RST.LIS	10h
041597             3324   	vdu FILENAME_X
041597 3E 07       0001M  		LD	A, function
041599 49 D7       0002M  		RST.LIS	10h
04159B             3325   	vdu FILENAME_Y
04159B 3E 18       0001M  		LD	A, function
04159D 49 D7       0002M  		RST.LIS	10h
04159F             3326   
04159F             3327   	; print text
04159F 21 2D 18 04 3328   	ld hl,data_error
0415A3 01 00 00 00 3329   	ld bc,0
0415A7 AF          3330   	xor a
0415A8 49 DF       3331   	rst.lis $18
0415AA             3332   
0415AA CD F0 0D 04 3333   	call fn_input_key
0415AE             3334   
0415AE             3335   	; locate x,y
0415AE             3336   	vdu 31
0415AE 3E 1F       0001M  		LD	A, function
0415B0 49 D7       0002M  		RST.LIS	10h
0415B2             3337   	vdu FILENAME_X
0415B2 3E 07       0001M  		LD	A, function
0415B4 49 D7       0002M  		RST.LIS	10h
0415B6             3338   	vdu FILENAME_Y
0415B6 3E 18       0001M  		LD	A, function
0415B8 49 D7       0002M  		RST.LIS	10h
0415BA             3339   
0415BA             3340   	; print text
0415BA 21 D1 17 04 3341   	ld hl,void_filename
0415BE 01 00 00 00 3342   	ld bc,0
0415C2 AF          3343   	xor a
0415C3 49 DF       3344   	rst.lis $18
0415C5             3345   
0415C5 C9          3346   	ret
0415C6             3347   
0415C6             3348   ; refresh all the current sprite frame
0415C6             3349   fn_refresh_sprite:
0415C6 06 00       3350   	ld b,0 ; B -> x cordinate
0415C8 0E 00       3351   	ld c,0 ; C -> y cordinate
0415CA             3352   
0415CA             3353   rs_loop:
0415CA C5          3354   	push bc
0415CB             3355   
0415CB 21 32 17 04 3356   	ld hl,xpix
0415CF 70          3357   	ld (hl),b
0415D0 21 33 17 04 3358   	ld hl,ypix
0415D4 71          3359   	ld (hl),c
0415D5 CD 82 0C 04 3360   	call fn_draw_pixel_without_border
0415D9             3361   
0415D9 C1          3362   	pop bc
0415DA             3363   
0415DA 04          3364   	inc b
0415DB 21 37 17 04 3365   	ld hl,spr_size
0415DF 7E          3366   	ld a,(hl)
0415E0 B8          3367   	cp b
0415E1 28 04       3368   	jr z,rs_next_line
0415E3 C3 CA 15 04 3369   	jp rs_loop
0415E7             3370   
0415E7             3371   rs_next_line:
0415E7 06 00       3372   	ld b,0
0415E9 0C          3373   	inc c
0415EA 21 37 17 04 3374   	ld hl,spr_size
0415EE 7E          3375   	ld a,(hl)
0415EF B9          3376   	cp c
0415F0 28 04       3377   	jr z,rs_end
0415F2 C3 CA 15 04 3378   	jp rs_loop
0415F6             3379   
0415F6             3380   rs_end:
0415F6 AF          3381   	xor a
0415F7 21 32 17 04 3382   	ld hl,xpix
0415FB 77          3383   	ld (hl),a
0415FC 21 33 17 04 3384   	ld hl,ypix
041600 77          3385   	ld (hl),a
041601 CD 6E 0C 04 3386   	call fn_draw_pixel_with_border
041605             3387   
041605 C9          3388   	ret
041606             3389   
041606             3390   fn_change_frame:
041606 21 44 18 04 3391   	ld hl,current_frame
04160A 7E          3392   	ld a,(hl)
04160B 3C          3393   	inc a
04160C C6 30       3394   	add a,48
04160E 21 46 18 04 3395   	ld hl,current_frame_ascii
041612 77          3396   	ld (hl),a
041613             3397   
041613             3398   	; locate 21,3
041613             3399   	vdu 31
041613 3E 1F       0001M  		LD	A, function
041615 49 D7       0002M  		RST.LIS	10h
041617             3400   	vdu 21
041617 3E 15       0001M  		LD	A, function
041619 49 D7       0002M  		RST.LIS	10h
04161B             3401   	vdu 3
04161B 3E 03       0001M  		LD	A, function
04161D 49 D7       0002M  		RST.LIS	10h
04161F             3402   
04161F             3403   	; print text
04161F 21 46 18 04 3404   	ld hl,current_frame_ascii
041623 01 00 00 00 3405   	ld bc,0
041627 AF          3406   	xor a
041628 49 DF       3407   	rst.lis $18
04162A             3408   
04162A C9          3409   	ret
04162B             3410   
04162B             3411   fn_change_frames_count:
04162B 21 45 18 04 3412   	ld hl,frames_count
04162F 7E          3413   	ld a,(hl)
041630 C6 30       3414   	add a,48
041632 21 48 18 04 3415   	ld hl,frames_count_ascii
041636 77          3416   	ld (hl),a
041637             3417   
041637             3418   	; locate 23,3
041637             3419   	vdu 31
041637 3E 1F       0001M  		LD	A, function
041639 49 D7       0002M  		RST.LIS	10h
04163B             3420   	vdu 23
04163B 3E 17       0001M  		LD	A, function
04163D 49 D7       0002M  		RST.LIS	10h
04163F             3421   	vdu 3
04163F 3E 03       0001M  		LD	A, function
041641 49 D7       0002M  		RST.LIS	10h
041643             3422   
041643             3423   	; print text
041643 21 48 18 04 3424   	ld hl,frames_count_ascii
041647 01 00 00 00 3425   	ld bc,0
04164B AF          3426   	xor a
04164C 49 DF       3427   	rst.lis $18
04164E             3428   
04164E C9          3429   	ret
04164F             3430   
04164F             3431   ; slowdown (wait delay)
04164F             3432   fn_slowdown:
04164F DD 21 4A 18 3433   	ld ix,keydata
       04          
041654 DD 7E 02    3434   	ld a,(ix+2)
041657 E6 02       3435   	and 2
041659 FE 02       3436   	cp 2 ; shift key to disable delay
04165B C8          3437   	ret z
04165C             3438   
04165C             3439   	moscall mos_sysvars
04165C 3E 08       0001M  		LD	A, function
04165E 49 CF       0002M  		RST.LIS	08h
041660 DD 4E 00    3440   	ld c,(ix+sysvar_time)
041663             3441   
041663             3442   sd_loop:
041663             3443   	moscall mos_sysvars
041663 3E 08       0001M  		LD	A, function
041665 49 CF       0002M  		RST.LIS	08h
041667 DD 7E 00    3444   	ld a,(ix+sysvar_time)
04166A 91          3445   	sub c
04166B FE 14       3446   	cp SLOWDOWN_DELAY
04166D 20 F4       3447   	jr nz,sd_loop
04166F C9          3448   	ret
041670             3449   
041670             3450   fn_show_spr_descr:
041670             3451   	; locate 15,3
041670             3452   	vdu 31
041670 3E 1F       0001M  		LD	A, function
041672 49 D7       0002M  		RST.LIS	10h
041674             3453   	vdu 15
041674 3E 0F       0001M  		LD	A, function
041676 49 D7       0002M  		RST.LIS	10h
041678             3454   	vdu 3
041678 3E 03       0001M  		LD	A, function
04167A 49 D7       0002M  		RST.LIS	10h
04167C             3455   
04167C             3456   	; print text
04167C 21 82 17 04 3457   	ld hl,spr_descr
041680 01 00 00 00 3458   	ld bc,0
041684 AF          3459   	xor a
041685 49 DF       3460   	rst.lis $18
041687             3461   
041687             3462   	; locate 15,5
041687             3463   	vdu 31
041687 3E 1F       0001M  		LD	A, function
041689 49 D7       0002M  		RST.LIS	10h
04168B             3464   	vdu 15
04168B 3E 0F       0001M  		LD	A, function
04168D 49 D7       0002M  		RST.LIS	10h
04168F             3465   	vdu 5
04168F 3E 05       0001M  		LD	A, function
041691 49 D7       0002M  		RST.LIS	10h
041693             3466   
041693             3467   	; check for sprite size...
041693 21 37 17 04 3468   	ld hl,spr_size
041697 7E          3469   	ld a,(hl)
041698             3470   
041698 FE 04       3471   	cp 4
04169A 20 0C       3472   	jr nz,ssd_8x8
04169C             3473   
04169C             3474   	; print text 4x4
04169C 21 8C 17 04 3475   	ld hl,spr_descr1
0416A0 01 00 00 00 3476   	ld bc,0
0416A4 AF          3477   	xor a
0416A5 49 DF       3478   	rst.lis $18
0416A7 C9          3479   	ret
0416A8             3480   
0416A8             3481   ssd_8x8:
0416A8 FE 08       3482   	cp 8
0416AA 20 0C       3483   	jr nz,ssd_16x16
0416AC             3484   
0416AC             3485   	; print text 8x8
0416AC 21 92 17 04 3486   	ld hl,spr_descr2
0416B0 01 00 00 00 3487   	ld bc,0
0416B4 AF          3488   	xor a
0416B5 49 DF       3489   	rst.lis $18
0416B7 C9          3490   	ret
0416B8             3491   
0416B8             3492   ssd_16x16:
0416B8 FE 10       3493   	cp 16
0416BA 20 0C       3494   	jr nz,ssd_32x32
0416BC             3495   
0416BC             3496   	; print text 16x16
0416BC 21 98 17 04 3497   	ld hl,spr_descr3
0416C0 01 00 00 00 3498   	ld bc,0
0416C4 AF          3499   	xor a
0416C5 49 DF       3500   	rst.lis $18
0416C7 C9          3501   	ret
0416C8             3502   
0416C8             3503   ssd_32x32:
0416C8             3504   	; print text 32x32
0416C8 21 9E 17 04 3505   	ld hl,spr_descr4
0416CC 01 00 00 00 3506   	ld bc,0
0416D0 AF          3507   	xor a
0416D1 49 DF       3508   	rst.lis $18
0416D3             3509   
0416D3 C9          3510   	ret
0416D4             3511   
0416D4             3512   ; input: HL = negative key to check
0416D4             3513   fn_inkey:
0416D4             3514   	moscall mos_getkbmap
0416D4 3E 1E       0001M  		LD	A, function
0416D6 49 CF       0002M  		RST.LIS	08h
0416D8 23          3515   	INC	HL
0416D9 7D          3516   	LD	A, L
0416DA ED 44       3517   	NEG
0416DC 4F          3518   	LD	C, A
0416DD 3E 01       3519   	LD	A, 1
0416DF FA 03 17 04 3520   	JP	M,i_false ; < -128 ?
0416E3             3521   
0416E3 21 45 00 04 3522   	LD	HL,BITLOOKUP
0416E7 11 00 00 00 3523   	LD	DE,0
0416EB 79          3524   	LD	A,C
0416EC E6 07       3525   	AND	00000111b
0416EE 5F          3526   	LD	E,A
0416EF 19          3527   	ADD	HL,DE
0416F0 46          3528   	LD	B,(HL)
0416F1             3529   
0416F1 79          3530   	LD	A,C
0416F2 E6 78       3531   	AND	01111000b
0416F4 0F          3532   	RRCA
0416F5 0F          3533   	RRCA
0416F6 0F          3534   	RRCA
0416F7 5F          3535   	LD	E, A
0416F8 DD 19       3536   	ADD	IX,DE
0416FA DD 7E 00    3537   	LD	A,(IX+0)
0416FD A0          3538   	AND	B
0416FE 28 03       3539   	JR Z,i_false
041700 3E 01       3540   	LD A,1
041702 C9          3541   	RET
041703             3542   i_false:
041703 AF          3543   	XOR A
041704 C9          3544   	RET
041705             3545   
041705             3546   fn_create_sprite_folder:
041705 21 BB 17 04 3547   	ld hl,sprite_path
041709             3548   	moscall mos_mkdir
041709 3E 07       0001M  		LD	A, function
04170B 49 CF       0002M  		RST.LIS	08h
04170D C9          3549   	ret
04170E             3550   
04170E             3551   fn_comma:
04170E 06 2C       3552   	ld b,','
041710             3553   	moscall mos_fputc
041710 3E 0D       0001M  		LD	A, function
041712 49 CF       0002M  		RST.LIS	08h
041714 C9          3554   	ret
041715             3555   
041715             3556   ; Hex to BCD
041715             3557   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
041715             3558   ; Input: a = hex number
041715             3559   ; Output: a = BCD number
041715             3560   ; Clobbers: b,c
041715             3561   fn_hex2bcd:
041715 C5          3562   		push bc
041716 4F          3563   		ld c,a  ; Original (hex) number
041717 06 08       3564   		ld b,8  ; How many bits
041719 AF          3565   		xor a   ; Output (BCD) number, starts at 0
04171A CB 21       3566   htb:	sla c   ; shift c into carry
04171C 8F          3567   		adc a,a
04171D 27          3568   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
04171E 10 FA       3569   		djnz htb  ; Repeat for 8 bits
041720 C1          3570   		pop bc
041721 C9          3571   		ret
041722             3572   
041722             3573   ;======================================================================
041722             3574   
041722             3575   ; coordinates for rectangles
041722             3576   x1:
041722 00 00       3577   	dw $0000
041724             3578   y1:
041724 00 00       3579   	dw $0000
041726             3580   x2:
041726 00 00       3581   	dw $0000
041728             3582   y2:
041728 00 00       3583   	dw $0000
04172A             3584   
04172A             3585   ; coordinates of the edited sprite
04172A             3586   xs1:
04172A 5F 00       3587   	dw 95
04172C             3588   ys1:
04172C 37 00       3589   	dw 55
04172E             3590   xs2:
04172E E0 00       3591   	dw 224
041730             3592   ys2:
041730 B8 00       3593   	dw 184
041732             3594   
041732             3595   ; coordinates of active pixels to draw
041732             3596   xpix:
041732 00          3597   	db 0
041733             3598   ypix:
041733 00          3599   	db 0
041734             3600   
041734             3601   ; memorized coordinates of active pixels to draw
041734             3602   memxpix:
041734 00          3603   	db 0
041735             3604   memypix:
041735 00          3605   	db 0
041736             3606   
041736             3607   ; width of a pixel in the sprite
041736             3608   pixel_width:
041736 00          3609   	db 0
041737             3610   
041737             3611   ; sprite size, in resized pixels
041737             3612   spr_size:
041737 00          3613   	db 0
041738             3614   
041738             3615   ; pen color (0-63)
041738             3616   current_pen:
041738 00          3617   	db 0
041739             3618   
041739             3619   ; texts for 1st menu
041739             3620   title:
041739 53 50 52 2D 3621   	db "SPR-EDIT",0
       45 44 49 54 
       00          
041742             3622   
041742             3623   menu1:
041742 46 31 2E 20 3624   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
041751             3625   menu2:
041751 46 32 2E 20 3626   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041760             3627   menu3:
041760 46 33 2E 20 3628   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
041771             3629   menu4:
041771 46 34 2E 20 3630   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
041782             3631   
041782             3632   ; descriptions of sprites
041782             3633   spr_descr:
041782 46 72 61 6D 3634   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
04178C             3635   spr_descr1:
04178C 34 78 34 20 3636   	db "4x4  ",0
       20 00       
041792             3637   spr_descr2:
041792 38 78 38 20 3638   	db "8x8  ",0
       20 00       
041798             3639   spr_descr3:
041798 31 36 78 31 3640   	db "16x16",0
       36 00       
04179E             3641   spr_descr4:
04179E 33 32 78 33 3642   	db "32x32",0
       32 00       
0417A4             3643   
0417A4             3644   ; label before filename
0417A4             3645   filename_label:
0417A4 46 69 6C 65 3646   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
0417AE             3647   
0417AE             3648   ; filename without extension
0417AE             3649   filename:
0417AE 00 00 00 00 3650   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
0417BB             3651   
0417BB             3652   sprite_path:
0417BB 73 70 72 69 3653   	db "sprites",0
       74 65 73 00 
0417C3             3654   
0417C3             3655   palette_path:
0417C3 70 61 6C 65 3656   	db "palettes",0
       74 74 65 73 
       00          
0417CC             3657   
0417CC             3658   back_path:
0417CC 2E 2E 00    3659   	db "..",0
0417CF             3660   
0417CF             3661   ; single space char to print
0417CF             3662   spacechar:
0417CF 20 00       3663   	db " ",0
0417D1             3664   
0417D1             3665   ; spaces to remove filename label
0417D1             3666   void_filename:
0417D1 20 20 20 20 3667   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0417E8             3668   
0417E8             3669   ; file error message
0417E8             3670   file_error:
0417E8 46 69 6C 65 3671   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0417FF             3672   
0417FF             3673   ; folder error message
0417FF             3674   folder_error:
0417FF 46 6F 6C 64 3675   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
041816             3676   
041816             3677   ; header error message
041816             3678   header_error:
041816 48 65 61 64 3679   	db "Header error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
04182D             3680   
04182D             3681   ; data error message
04182D             3682   data_error:
04182D 44 61 74 61 3683   	db "Data error !        ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       00          
041842             3684   
041842             3685   ; number of colors
041842             3686   colors_count:
041842 00          3687   	db 0
041843             3688   
041843             3689   ; real number of colors
041843             3690   new_colors_count:
041843 00          3691   	db 0
041844             3692   
041844             3693   ; current frame
041844             3694   current_frame:
041844 00          3695   	db 0
041845             3696   
041845             3697   ; frames count
041845             3698   frames_count:
041845 00          3699   	db 0
041846             3700   
041846             3701   current_frame_ascii:
041846 30 00       3702   	db '0',0
041848             3703   
041848             3704   frames_count_ascii:
041848 30 00       3705   	db '0',0
04184A             3706   
04184A             3707   ; keycode, keydown & keymods are stored here
04184A             3708   keydata:
04184A 00 00 00    3709   	db 0,0,0
04184D             3710   
04184D             3711   ; buffer for the current sprite
04184D             3712   sprite_buffer:
04184D             3713   	ds BUFFER_SIZE
04384D             3714   
04384D             3715   header_buffer:
04384D             3716   	ds HEADER_BUFFER_SIZE
04385D             3717   
04385D             3718   palette_buffer:
04385D             3719   	ds MAX_PAL_DATA + 1
043BA2             3720   
043BA2             3721   temp_chars_buffer:
043BA2 00 00 00 00 3722   	db 0,0,0,0
043BA6             3723   
043BA6             3724   color_byte:
043BA6 00          3725   	db 0
043BA7             3726   
043BA7             3727   header:
043BA7 4A 41 53 43 3728   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043BB1 30 31 30 30 3729   	db "0100",13,10
       0D 0A       
043BB7             3730   
043BB7             3731   ; buffer to perform some operations
043BB7             3732   swap_sprite_buffer:
043BB7             3733   	ds ONE_FRAME_BUFFER_SIZE
043FB7             3734   
043FB7             3735   asm_line:
043FB7 44 42 20    3736   	DB "DB "
043FBA             3737   
043FBA             3738   asm_line_length:
043FBA 03          3739   	DB 3
043FBB             3740   
043FBB             3741   rgb_palette:
043FBB 00 00 00    3742   	db $00,$00,$00
043FBE AA 00 00    3743   	db $AA,$00,$00
043FC1 00 AA 00    3744   	db $00,$AA,$00
043FC4 AA AA 00    3745   	db $AA,$AA,$00
043FC7 00 00 AA    3746   	db $00,$00,$AA
043FCA AA 00 AA    3747   	db $AA,$00,$AA
043FCD 00 AA AA    3748   	db $00,$AA,$AA
043FD0 AA AA AA    3749   	db $AA,$AA,$AA
043FD3             3750   
043FD3 55 55 55    3751   	db $55,$55,$55
043FD6 FF 00 00    3752   	db $FF,$00,$00
043FD9 00 FF 00    3753   	db $00,$FF,$00
043FDC FF FF 00    3754   	db $FF,$FF,$00
043FDF 00 00 FF    3755   	db $00,$00,$FF
043FE2 FF 00 FF    3756   	db $FF,$00,$FF
043FE5 00 FF FF    3757   	db $00,$FF,$FF
043FE8 FF FF FF    3758   	db $FF,$FF,$FF
043FEB             3759   
043FEB 00 00 55    3760   	db $00,$00,$55
043FEE 00 55 00    3761   	db $00,$55,$00
043FF1 00 55 55    3762   	db $00,$55,$55
043FF4 00 55 AA    3763   	db $00,$55,$AA
043FF7 00 55 FF    3764   	db $00,$55,$FF
043FFA 00 AA 55    3765   	db $00,$AA,$55
043FFD 00 AA FF    3766   	db $00,$AA,$FF
044000 00 FF 55    3767   	db $00,$FF,$55
044003             3768   
044003 00 FF AA    3769   	db $00,$FF,$AA
044006 55 00 00    3770   	db $55,$00,$00
044009 55 00 55    3771   	db $55,$00,$55
04400C 55 00 AA    3772   	db $55,$00,$AA
04400F 55 00 FF    3773   	db $55,$00,$FF
044012 55 55 00    3774   	db $55,$55,$00
044015 55 55 AA    3775   	db $55,$55,$AA
044018 55 55 FF    3776   	db $55,$55,$FF
04401B             3777   
04401B 55 AA 00    3778   	db $55,$AA,$00
04401E 55 AA 55    3779   	db $55,$AA,$55
044021 55 AA AA    3780   	db $55,$AA,$AA
044024 55 AA FF    3781   	db $55,$AA,$FF
044027 55 FF 00    3782   	db $55,$FF,$00
04402A 55 FF 55    3783   	db $55,$FF,$55
04402D 55 FF AA    3784   	db $55,$FF,$AA
044030 55 FF FF    3785   	db $55,$FF,$FF
044033             3786   
044033 AA 00 55    3787   	db $AA,$00,$55
044036 AA 00 FF    3788   	db $AA,$00,$FF
044039 AA 55 00    3789   	db $AA,$55,$00
04403C AA 55 55    3790   	db $AA,$55,$55
04403F AA 55 AA    3791   	db $AA,$55,$AA
044042 AA 55 FF    3792   	db $AA,$55,$FF
044045 AA AA 55    3793   	db $AA,$AA,$55
044048 AA AA FF    3794   	db $AA,$AA,$FF
04404B             3795   
04404B AA FF 00    3796   	db $AA,$FF,$00
04404E AA FF 55    3797   	db $AA,$FF,$55
044051 AA FF AA    3798   	db $AA,$FF,$AA
044054 AA FF FF    3799   	db $AA,$FF,$FF
044057 FF 00 55    3800   	db $FF,$00,$55
04405A FF 00 AA    3801   	db $FF,$00,$AA
04405D FF 55 00    3802   	db $FF,$55,$00
044060 FF 55 55    3803   	db $FF,$55,$55
044063             3804   
044063 FF 55 AA    3805   	db $FF,$55,$AA
044066 FF 55 FF    3806   	db $FF,$55,$FF
044069 FF AA 00    3807   	db $FF,$AA,$00
04406C FF AA 55    3808   	db $FF,$AA,$55
04406F FF AA AA    3809   	db $FF,$AA,$AA
044072 FF AA FF    3810   	db $FF,$AA,$FF
044075 FF FF 55    3811   	db $FF,$FF,$55
044078 FF FF AA    3812   	db $FF,$FF,$AA
04407B             3813   
04407B             3814   ; sprite structure:
04407B             3815   ; =================
04407B             3816   ; colors_count  :   byte
04407B             3817   ; frames count	:	byte
04407B             3818   ; spr size		:	byte
04407B             3819   ; data			:   width x height bytes of colors
