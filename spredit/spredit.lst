PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   COLOR_MIN:	 		equ 0
040045             0022   COLOR_MAX:	 		equ 63
040045             0023   
040045             0024   MAX_FRAMES:			equ 8
040045             0025   
040045             0026   COLOR_WHITE:		equ 15
040045             0027   COLOR_GREY:			equ 7
040045             0028   COLOR_BLACK:		equ 0
040045             0029   
040045             0030   TITLE_X: 	equ 17
040045             0031   TITLE_Y: 	equ 2
040045             0032   MENU_X: 	equ 13
040045             0033   MENU1_Y: 	equ 8
040045             0034   MENU2_Y: 	equ 12
040045             0035   MENU3_Y: 	equ 16
040045             0036   MENU4_Y: 	equ 20
040045             0037   MENU5_Y: 	equ 24
040045             0038   FILENAME_X: equ 7
040045             0039   FILENAME_Y: equ 24
040045             0040   
040045             0041   SPR44: 		equ 4
040045             0042   SPR88: 		equ 8
040045             0043   SPR1616: 	equ 16
040045             0044   SPR3232: 	equ 32
040045             0045   
040045             0046   SPR44_width: 	equ 32
040045             0047   SPR88_width: 	equ 16
040045             0048   SPR1616_width: 	equ 8
040045             0049   SPR3232_width: 	equ 4
040045             0050   
040045             0051   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0052   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0053   
040045             0054   SLOWDOWN_DELAY:	equ 20
040045             0055   
040045             0056   KEY_SPACE: equ -99
040045             0057   KEY_UP: equ -58
040045             0058   KEY_DOWN: equ -42
040045             0059   KEY_LEFT: equ -26
040045             0060   KEY_RIGHT: equ -122
040045             0061   KEY_DELETE: equ -90
040045             0062   KEY_TAB: equ -97
040045             0063   KEY_N: equ -86
040045             0064   KEY_C: equ -83
040045             0065   KEY_BACKSPACE: equ -48
040045             0066   KEY_PGUP: equ -64
040045             0067   KEY_PGDOWN: equ -79
040045             0068   KEY_L: equ -87
040045             0069   KEY_S: equ -82
040045             0070   KEY_E: equ -35
040045             0071   KEY_R: equ -52
040045             0072   KEY_F: equ -68
040045             0073   KEY_M: equ -102
040045             0074   KEY_ESCAPE: equ -113
040045             0075   KEY_F1: equ -114
040045             0076   KEY_F2: equ -115
040045             0077   KEY_F3: equ -116
040045             0078   KEY_F4: equ -21
040045             0079   KEY_RETURN: equ -74
040045             0080   
040045             0081   BITLOOKUP:
040045 01 02 04 08 0082   	DB 01h,02h,04h,08h
040049 10 20 40 80 0083   	DB 10h,20h,40h,80h
04004D             0084   
04004D             0085   ;======================================================================
04004D             0086   start:
04004D F5          0087   	push af
04004E C5          0088   	push bc
04004F D5          0089   	push de
040050 DD E5       0090   	push ix
040052 FD E5       0091   	push iy
040054             0092   
040054             0093   	; set mode 8 (320x240x64)
040054             0094   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0095   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0096   
04005C             0097   	; disable logical scale coordinates system
04005C             0098   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0099   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0100   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0101   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0102   
04006C             0103   	; set text colors
04006C             0104   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0105   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0106   
040074             0107   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0108   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0109   
04007C             0110   	; set graphics pen
04007C             0111   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0112   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0113   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0114   
040088             0115   	; hide cursor
040088             0116   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0117   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0118   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0119   
040094             0120   	; store coordinates
040094 DD 21 3F 14 0121   	ld ix,x1
       04          
040099 21 00 00 00 0122   	ld hl,0
04009D DD 75 00    0123   	ld (ix+0),l
0400A0 DD 74 01    0124   	ld (ix+1),h
0400A3             0125   
0400A3 DD 21 41 14 0126   	ld ix,y1
       04          
0400A8 21 00 00 00 0127   	ld hl,0
0400AC DD 75 00    0128   	ld (ix+0),l
0400AF DD 74 01    0129   	ld (ix+1),h
0400B2             0130   
0400B2 DD 21 43 14 0131   	ld ix,x2
       04          
0400B7 21 3F 01 00 0132   	ld hl,319
0400BB DD 75 00    0133   	ld (ix+0),l
0400BE DD 74 01    0134   	ld (ix+1),h
0400C1             0135   
0400C1 DD 21 45 14 0136   	ld ix,y2
       04          
0400C6 21 EF 00 00 0137   	ld hl,239
0400CA DD 75 00    0138   	ld (ix+0),l
0400CD DD 74 01    0139   	ld (ix+1),h
0400D0             0140   
0400D0             0141   	; draw the border rectangle
0400D0 CD E1 0A 04 0142   	call fn_rect
0400D4             0143   
0400D4             0144   	; locate x,y
0400D4             0145   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0146   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0147   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0148   
0400E0             0149   	; print text
0400E0 21 56 14 04 0150   	ld hl,title
0400E4 01 00 00 00 0151   	ld bc,0
0400E8 AF          0152   	xor a
0400E9 49 DF       0153   	rst.lis $18
0400EB             0154   
0400EB             0155   	; locate x,y
0400EB             0156   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0157   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0158   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0159   
0400F7             0160   	; print text
0400F7 21 5F 14 04 0161   	ld hl,menu1
0400FB 01 00 00 00 0162   	ld bc,0
0400FF AF          0163   	xor a
040100 49 DF       0164   	rst.lis $18
040102             0165   
040102             0166   	; locate x,y
040102             0167   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0168   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0169   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0170   
04010E             0171   	; print text
04010E 21 6E 14 04 0172   	ld hl,menu2
040112 01 00 00 00 0173   	ld bc,0
040116 AF          0174   	xor a
040117 49 DF       0175   	rst.lis $18
040119             0176   
040119             0177   	; locate x,y
040119             0178   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0179   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0180   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0181   
040125             0182   	; print text
040125 21 7D 14 04 0183   	ld hl,menu3
040129 01 00 00 00 0184   	ld bc,0
04012D AF          0185   	xor a
04012E 49 DF       0186   	rst.lis $18
040130             0187   
040130             0188   	; locate x,y
040130             0189   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0190   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0191   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0192   
04013C             0193   	; print text
04013C 21 8E 14 04 0194   	ld hl,menu4
040140 01 00 00 00 0195   	ld bc,0
040144 AF          0196   	xor a
040145 49 DF       0197   	rst.lis $18
040147             0198   
040147             0199   ; menu loop
040147             0200   menu_loop:
040147 21 8F FF FF 0201   	ld hl,KEY_ESCAPE
04014B CD F1 13 04 0202   	call fn_inkey
04014F FE 01       0203   	CP 1
040151 CA BD 0A 04 0204   	jp z,exit_program
040155             0205   
040155 21 8E FF FF 0206   	ld hl,KEY_F1
040159 CD F1 13 04 0207   	call fn_inkey
04015D FE 01       0208   	CP 1
04015F CA 91 01 04 0209   	jp z,ml_menu1
040163             0210   
040163 21 8D FF FF 0211   	ld hl,KEY_F2
040167 CD F1 13 04 0212   	call fn_inkey
04016B FE 01       0213   	CP 1
04016D CA 97 01 04 0214   	jp z,ml_menu2
040171             0215   
040171 21 8C FF FF 0216   	ld hl,KEY_F3
040175 CD F1 13 04 0217   	call fn_inkey
040179 FE 01       0218   	CP 1
04017B CA 9D 01 04 0219   	jp z,ml_menu3
04017F             0220   
04017F 21 EB FF FF 0221   	ld hl,KEY_F4
040183 CD F1 13 04 0222   	call fn_inkey
040187 FE 01       0223   	CP 1
040189 CA A3 01 04 0224   	jp z,ml_menu4
04018D             0225   
04018D C3 47 01 04 0226   	jp menu_loop
040191             0227   
040191             0228   ml_menu1:
040191 3E 04       0229   	ld a,SPR44
040193 16 20       0230   	ld d,SPR44_width
040195 18 10       0231   	jr exit_menu_loop
040197             0232   
040197             0233   ml_menu2:
040197 3E 08       0234   	ld a,SPR88
040199 16 10       0235   	ld d,SPR88_width
04019B 18 0A       0236   	jr exit_menu_loop
04019D             0237   
04019D             0238   ml_menu3:
04019D 3E 10       0239   	ld a,SPR1616
04019F 16 08       0240   	ld d,SPR1616_width
0401A1 18 04       0241   	jr exit_menu_loop
0401A3             0242   
0401A3             0243   ml_menu4:
0401A3 3E 20       0244   	ld a,SPR3232
0401A5 16 04       0245   	ld d,SPR3232_width
0401A7             0246   
0401A7             0247   exit_menu_loop:
0401A7             0248   	; store edited sprite size
0401A7 21 54 14 04 0249   	ld hl,spr_size
0401AB 77          0250   	ld (hl),a
0401AC 21 53 14 04 0251   	ld hl,pixel_width
0401B0 72          0252   	ld (hl),d
0401B1             0253   
0401B1             0254   	; clear the text screen
0401B1             0255   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0256   
0401B5             0257   	; draw the palette
0401B5 0E 00       0258   	ld c,0
0401B7             0259   
0401B7             0260   palette_loop:
0401B7 C5          0261   	push bc
0401B8             0262   
0401B8             0263   	; choose palette color
0401B8             0264   	vdu 18
0401B8 3E 12       0001M  		LD	A, function
0401BA 49 D7       0002M  		RST.LIS	10h
0401BC             0265   	vdu 0
0401BC 3E 00       0001M  		LD	A, function
0401BE 49 D7       0002M  		RST.LIS	10h
0401C0 C1          0266   	pop bc
0401C1 C5          0267   	push bc
0401C2 79          0268   	ld a,c
0401C3             0269   	vdu_a
0401C3 49 D7       0001M  		RST.LIS	10h
0401C5             0270   
0401C5             0271   	; store coordinates for a palette square
0401C5 DD 21 3F 14 0272   	ld ix,x1
       04          
0401CA E1          0273   	pop hl
0401CB E5          0274   	push hl
0401CC 26 05       0275   	ld h,5
0401CE ED 6C       0276   	mlt hl
0401D0 E5          0277   	push hl
0401D1 DD 75 00    0278   	ld (ix+0),l
0401D4 DD 74 01    0279   	ld (ix+1),h
0401D7             0280   
0401D7 DD 21 41 14 0281   	ld ix,y1
       04          
0401DC 21 00 00 00 0282   	ld hl,0
0401E0 DD 75 00    0283   	ld (ix+0),l
0401E3 DD 74 01    0284   	ld (ix+1),h
0401E6             0285   
0401E6 DD 21 43 14 0286   	ld ix,x2
       04          
0401EB E1          0287   	pop hl
0401EC 11 04 00 00 0288   	ld de,4
0401F0 19          0289   	add hl,de
0401F1 DD 75 00    0290   	ld (ix+0),l
0401F4 DD 74 01    0291   	ld (ix+1),h
0401F7             0292   
0401F7 DD 21 45 14 0293   	ld ix,y2
       04          
0401FC 21 0A 00 00 0294   	ld hl,10
040200 DD 75 00    0295   	ld (ix+0),l
040203 DD 74 01    0296   	ld (ix+1),h
040206             0297   
040206             0298   	; draw the palette filled square
040206 CD A0 0B 04 0299   	call fn_rectf
04020A             0300   
04020A             0301   	; next color ?
04020A C1          0302   	pop bc
04020B 0C          0303   	inc c
04020C 79          0304   	ld a,c
04020D FE 40       0305   	cp MAX_COLORS
04020F C2 B7 01 04 0306   	jp nz,palette_loop
040213             0307   
040213             0308   	; store coordinates
040213 DD 21 3F 14 0309   	ld ix,x1
       04          
040218 21 00 00 00 0310   	ld hl,0
04021C DD 75 00    0311   	ld (ix+0),l
04021F DD 74 01    0312   	ld (ix+1),h
040222             0313   
040222 DD 21 41 14 0314   	ld ix,y1
       04          
040227 21 0B 00 00 0315   	ld hl,11
04022B DD 75 00    0316   	ld (ix+0),l
04022E DD 74 01    0317   	ld (ix+1),h
040231             0318   
040231 DD 21 43 14 0319   	ld ix,x2
       04          
040236 21 3F 01 00 0320   	ld hl,319
04023A DD 75 00    0321   	ld (ix+0),l
04023D DD 74 01    0322   	ld (ix+1),h
040240             0323   
040240 DD 21 45 14 0324   	ld ix,y2
       04          
040245 21 EF 00 00 0325   	ld hl,239
040249 DD 75 00    0326   	ld (ix+0),l
04024C DD 74 01    0327   	ld (ix+1),h
04024F             0328   
04024F             0329   	; draw the border rectangle
04024F CD E1 0A 04 0330   	call fn_rect
040253             0331   
040253             0332   	; store edited sprite coordinates
040253 DD 21 47 14 0333   	ld ix,xs1
       04          
040258 FD 21 3F 14 0334   	ld iy,x1
       04          
04025D DD 6E 00    0335   	ld l,(ix+0)
040260 DD 66 01    0336   	ld h,(ix+1)
040263 FD 75 00    0337   	ld (iy+0),l
040266 FD 74 01    0338   	ld (iy+1),h
040269             0339   
040269 DD 21 49 14 0340   	ld ix,ys1
       04          
04026E FD 21 41 14 0341   	ld iy,y1
       04          
040273 DD 6E 00    0342   	ld l,(ix+0)
040276 DD 66 01    0343   	ld h,(ix+1)
040279 FD 75 00    0344   	ld (iy+0),l
04027C FD 74 01    0345   	ld (iy+1),h
04027F             0346   
04027F DD 21 4B 14 0347   	ld ix,xs2
       04          
040284 FD 21 43 14 0348   	ld iy,x2
       04          
040289 DD 6E 00    0349   	ld l,(ix+0)
04028C DD 66 01    0350   	ld h,(ix+1)
04028F FD 75 00    0351   	ld (iy+0),l
040292 FD 74 01    0352   	ld (iy+1),h
040295             0353   
040295 DD 21 4D 14 0354   	ld ix,ys2
       04          
04029A FD 21 45 14 0355   	ld iy,y2
       04          
04029F DD 6E 00    0356   	ld l,(ix+0)
0402A2 DD 66 01    0357   	ld h,(ix+1)
0402A5 FD 75 00    0358   	ld (iy+0),l
0402A8 FD 74 01    0359   	ld (iy+1),h
0402AB             0360   
0402AB             0361   	; draw the sprite's border rectangle
0402AB CD E1 0A 04 0362   	call fn_rect
0402AF             0363   
0402AF             0364   	; update sprite size descriptions
0402AF CD 8D 13 04 0365   	call fn_show_spr_descr
0402B3             0366   
0402B3             0367   ; initialize sprite vars
0402B3             0368   init_sprite_vars:
0402B3             0369   	; initialize coordinates before drawing the sprite
0402B3 DD 21 4F 14 0370   	ld ix,xpix
       04          
0402B8 AF          0371   	xor a
0402B9 DD 77 00    0372   	ld (ix+0),a ; xpix = 0
0402BC DD 77 01    0373   	ld (ix+1),a	; ypix = 0
0402BF DD 21 55 14 0374   	ld ix,current_pen
       04          
0402C4 3E 0F       0375   	ld a,COLOR_WHITE
0402C6 DD 77 00    0376   	ld (ix+0),a ; current pen -> white
0402C9             0377   
0402C9             0378   	; set vars
0402C9 21 2A 15 04 0379   	ld hl,colors_count
0402CD 3E 40       0380   	ld a,MAX_COLORS
0402CF 77          0381   	ld (hl),a
0402D0 21 2B 15 04 0382   	ld hl,current_frame
0402D4 AF          0383   	xor a
0402D5 77          0384   	ld (hl),a
0402D6 3C          0385   	inc a
0402D7 21 2C 15 04 0386   	ld hl,frames_count
0402DB 77          0387   	ld (hl),a
0402DC             0388   
0402DC             0389   	; fill buffers with zeros
0402DC 01 00 20 00 0390   	ld bc,BUFFER_SIZE
0402E0 21 34 15 04 0391   	ld hl,sprite_buffer
0402E4             0392   
0402E4             0393   isv_fill_loop:
0402E4 AF          0394   	xor a
0402E5 77          0395   	ld (hl),a
0402E6 0B          0396   	dec bc
0402E7 23          0397   	inc hl
0402E8 78          0398   	ld a,b
0402E9 B1          0399   	or c
0402EA FE 00       0400   	cp 0
0402EC 20 F6       0401   	jr nz,isv_fill_loop
0402EE             0402   
0402EE             0403   ; draw the pixel with a border
0402EE CD 6E 0C 04 0404   	call fn_draw_pixel_with_border
0402F2             0405   
0402F2             0406   ; draw sprite loop
0402F2             0407   draw_sprite_loop:
0402F2 21 9D FF FF 0408   	ld hl,KEY_SPACE
0402F6 CD F1 13 04 0409   	call fn_inkey
0402FA FE 01       0410   	cp 1
0402FC CC 0E 04 04 0411   	call z,dsl_set_pen
040300             0412   
040300 21 C6 FF FF 0413   	ld hl,KEY_UP
040304 CD F1 13 04 0414   	call fn_inkey
040308 FE 01       0415   	cp 1
04030A CC 33 04 04 0416   	call z,dsl_up
04030E             0417   
04030E 21 D6 FF FF 0418   	ld hl,KEY_DOWN
040312 CD F1 13 04 0419   	call fn_inkey
040316 FE 01       0420   	cp 1
040318 CC 5A 04 04 0421   	call z,dsl_down
04031C             0422   
04031C 21 E6 FF FF 0423   	ld hl,KEY_LEFT
040320 CD F1 13 04 0424   	call fn_inkey
040324 FE 01       0425   	cp 1
040326 CC 86 04 04 0426   	call z,dsl_left
04032A             0427   
04032A 21 86 FF FF 0428   	ld hl,KEY_RIGHT
04032E CD F1 13 04 0429   	call fn_inkey
040332 FE 01       0430   	cp 1
040334 CC AD 04 04 0431   	call z,dsl_right
040338             0432   
040338 21 A6 FF FF 0433   	ld hl,KEY_DELETE
04033C CD F1 13 04 0434   	call fn_inkey
040340 FE 01       0435   	cp 1
040342 CC 22 04 04 0436   	call z,dsl_reset_pen
040346             0437   
040346 21 9F FF FF 0438   	ld hl,KEY_TAB
04034A CD F1 13 04 0439   	call fn_inkey
04034E FE 01       0440   	cp 1
040350 CA 85 09 04 0441   	jp z,dsl_palette_tool
040354             0442   
040354 21 AA FF FF 0443   	ld hl,KEY_N
040358 CD F1 13 04 0444   	call fn_inkey
04035C FE 01       0445   	cp 1
04035E CC 2C 05 04 0446   	call z,dsl_add_frame
040362             0447   
040362 21 AD FF FF 0448   	ld hl,KEY_C
040366 CD F1 13 04 0449   	call fn_inkey
04036A FE 01       0450   	cp 1
04036C CC C3 05 04 0451   	call z,dsl_add_and_copy_frame
040370             0452   
040370 21 D0 FF FF 0453   	ld hl,KEY_BACKSPACE
040374 CD F1 13 04 0454   	call fn_inkey
040378 FE 01       0455   	cp 1
04037A CC 2A 06 04 0456   	call z,dsl_delete_frame
04037E             0457   
04037E 21 C0 FF FF 0458   	ld hl,KEY_PGUP
040382 CD F1 13 04 0459   	call fn_inkey
040386 FE 01       0460   	cp 1
040388 CC 23 07 04 0461   	call z,dsl_next_frame
04038C             0462   
04038C 21 B1 FF FF 0463   	ld hl,KEY_PGDOWN
040390 CD F1 13 04 0464   	call fn_inkey
040394 FE 01       0465   	cp 1
040396 CC 04 07 04 0466   	call z,dsl_previous_frame
04039A             0467   
04039A 21 A9 FF FF 0468   	ld hl,KEY_L
04039E CD F1 13 04 0469   	call fn_inkey
0403A2 FE 01       0470   	cp 1
0403A4 CC D9 04 04 0471   	call z,dsl_load_sprite
0403A8             0472   
0403A8 21 AE FF FF 0473   	ld hl,KEY_S
0403AC CD F1 13 04 0474   	call fn_inkey
0403B0 FE 01       0475   	cp 1
0403B2 CC FA 04 04 0476   	call z,dsl_save_sprite
0403B6             0477   
0403B6 21 DD FF FF 0478   	ld hl,KEY_E
0403BA CD F1 13 04 0479   	call fn_inkey
0403BE FE 01       0480   	cp 1
0403C0 CC 13 05 04 0481   	call z,dsl_export_sprite
0403C4             0482   
0403C4 21 CC FF FF 0483   	ld hl,KEY_R
0403C8 CD F1 13 04 0484   	call fn_inkey
0403CC FE 01       0485   	cp 1
0403CE CC 49 07 04 0486   	call z,dsl_rotate_frame
0403D2             0487   
0403D2 21 BC FF FF 0488   	ld hl,KEY_F
0403D6 CD F1 13 04 0489   	call fn_inkey
0403DA FE 01       0490   	cp 1
0403DC CC FE 07 04 0491   	call z,dsl_flip_frame
0403E0             0492   
0403E0 21 9A FF FF 0493   	ld hl,KEY_M
0403E4 CD F1 13 04 0494   	call fn_inkey
0403E8 FE 01       0495   	cp 1
0403EA CC 65 08 04 0496   	call z,dsl_mirror_frame
0403EE             0497   
0403EE 21 B6 FF FF 0498   	ld hl,KEY_RETURN
0403F2 CD F1 13 04 0499   	call fn_inkey
0403F6 FE 01       0500   	cp 1
0403F8 CC E5 08 04 0501   	call z,dsl_flood_fill
0403FC             0502   
0403FC 21 8F FF FF 0503   	ld hl,KEY_ESCAPE
040400 CD F1 13 04 0504   	call fn_inkey
040404 FE 01       0505   	cp 1
040406 CA BD 0A 04 0506   	jp z,exit_program
04040A             0507   
04040A C3 F2 02 04 0508   	jp draw_sprite_loop
04040E             0509   
04040E             0510   ; set the pen of the current pixel
04040E             0511   dsl_set_pen:
04040E CD 98 0C 04 0512   	call fn_get_pixel_color
040412 21 55 14 04 0513   	ld hl,current_pen
040416 BE          0514   	cp (hl)
040417 C8          0515   	ret z
040418 7E          0516   	ld a,(hl)
040419 CD DA 0C 04 0517   	call fn_set_pixel_color
04041D CD 6E 0C 04 0518   	call fn_draw_pixel_with_border
040421 C9          0519   	ret
040422             0520   
040422             0521   ; reset the pen of the current pixel
040422             0522   dsl_reset_pen:
040422 CD 98 0C 04 0523   	call fn_get_pixel_color
040426 FE 00       0524   	cp 0
040428 C8          0525   	ret z
040429 AF          0526   	xor a
04042A CD DA 0C 04 0527   	call fn_set_pixel_color
04042E CD 6E 0C 04 0528   	call fn_draw_pixel_with_border
040432 C9          0529   	ret
040433             0530   
040433             0531   ; move pixel up
040433             0532   dsl_up:
040433 21 50 14 04 0533   	ld hl,ypix
040437 7E          0534   	ld a,(hl)
040438 FE 00       0535   	cp 0
04043A C8          0536   	ret z
04043B             0537   
04043B 21 9D FF FF 0538   	ld hl,KEY_SPACE
04043F CD F1 13 04 0539   	call fn_inkey
040443 FE 01       0540   	cp 1
040445 CC 0E 04 04 0541   	call z,dsl_set_pen
040449             0542   
040449 CD 82 0C 04 0543   	call fn_draw_pixel_without_border
04044D CD 1E 0D 04 0544   	call fn_move_up
040451 CD 6E 0C 04 0545   	call fn_draw_pixel_with_border
040455 CD 6C 13 04 0546   	call fn_slowdown
040459 C9          0547   	ret
04045A             0548   
04045A             0549   ; move pixel down
04045A             0550   dsl_down:
04045A 21 54 14 04 0551   	ld hl,spr_size
04045E 56          0552   	ld d,(hl)
04045F 15          0553   	dec d
040460             0554   
040460 21 50 14 04 0555   	ld hl,ypix
040464 7E          0556   	ld a,(hl)
040465 BA          0557   	cp d
040466 C8          0558   	ret z
040467             0559   
040467 21 9D FF FF 0560   	ld hl,KEY_SPACE
04046B CD F1 13 04 0561   	call fn_inkey
04046F FE 01       0562   	cp 1
040471 CC 0E 04 04 0563   	call z,dsl_set_pen
040475             0564   
040475 CD 82 0C 04 0565   	call fn_draw_pixel_without_border
040479 CD 24 0D 04 0566   	call fn_move_down
04047D CD 6E 0C 04 0567   	call fn_draw_pixel_with_border
040481 CD 6C 13 04 0568   	call fn_slowdown
040485 C9          0569   	ret
040486             0570   
040486             0571   ; move pixel left
040486             0572   dsl_left:
040486 21 4F 14 04 0573   	ld hl,xpix
04048A 7E          0574   	ld a,(hl)
04048B FE 00       0575   	cp 0
04048D C8          0576   	ret z
04048E             0577   
04048E 21 9D FF FF 0578   	ld hl,KEY_SPACE
040492 CD F1 13 04 0579   	call fn_inkey
040496 FE 01       0580   	cp 1
040498 CC 0E 04 04 0581   	call z,dsl_set_pen
04049C             0582   
04049C CD 82 0C 04 0583   	call fn_draw_pixel_without_border
0404A0 CD 2A 0D 04 0584   	call fn_move_left
0404A4 CD 6E 0C 04 0585   	call fn_draw_pixel_with_border
0404A8 CD 6C 13 04 0586   	call fn_slowdown
0404AC C9          0587   	ret
0404AD             0588   
0404AD             0589   ; move pixel right
0404AD             0590   dsl_right:
0404AD 21 54 14 04 0591   	ld hl,spr_size
0404B1 56          0592   	ld d,(hl)
0404B2 15          0593   	dec d
0404B3             0594   
0404B3 21 4F 14 04 0595   	ld hl,xpix
0404B7 7E          0596   	ld a,(hl)
0404B8 BA          0597   	cp d
0404B9 C8          0598   	ret z
0404BA             0599   
0404BA 21 9D FF FF 0600   	ld hl,KEY_SPACE
0404BE CD F1 13 04 0601   	call fn_inkey
0404C2 FE 01       0602   	cp 1
0404C4 CC 0E 04 04 0603   	call z,dsl_set_pen
0404C8             0604   
0404C8 CD 82 0C 04 0605   	call fn_draw_pixel_without_border
0404CC CD 30 0D 04 0606   	call fn_move_right
0404D0 CD 6E 0C 04 0607   	call fn_draw_pixel_with_border
0404D4 CD 6C 13 04 0608   	call fn_slowdown
0404D8 C9          0609   	ret
0404D9             0610   
0404D9             0611   ; load a sprite
0404D9             0612   dsl_load_sprite:
0404D9 21 A9 FF FF 0613   	ld hl,KEY_L
0404DD CD F1 13 04 0614   	call fn_inkey
0404E1 FE 00       0615   	cp 0
0404E3 20 F4       0616   	jr nz,dsl_load_sprite
0404E5             0617   
0404E5 CD 82 0C 04 0618   	call fn_draw_pixel_without_border
0404E9 CD 06 0F 04 0619   	call fn_load_sprite
0404ED CD E3 12 04 0620   	call fn_refresh_sprite
0404F1 CD 6E 0C 04 0621   	call fn_draw_pixel_with_border
0404F5 CD 23 13 04 0622   	call fn_change_frame
0404F9 C9          0623   	ret
0404FA             0624   
0404FA             0625   ; save a sprite
0404FA             0626   dsl_save_sprite:
0404FA 21 AE FF FF 0627   	ld hl,KEY_S
0404FE CD F1 13 04 0628   	call fn_inkey
040502 FE 00       0629   	cp 0
040504 20 F4       0630   	jr nz,dsl_save_sprite
040506             0631   
040506 CD 82 0C 04 0632   	call fn_draw_pixel_without_border
04050A CD 2F 10 04 0633   	call fn_save_sprite
04050E CD E3 12 04 0634   	call fn_refresh_sprite
040512 C9          0635   	ret
040513             0636   
040513             0637   dsl_export_sprite:
040513 21 DD FF FF 0638   	ld hl,KEY_E
040517 CD F1 13 04 0639   	call fn_inkey
04051B FE 00       0640   	cp 0
04051D 20 F4       0641   	jr nz,dsl_export_sprite
04051F             0642   
04051F CD 82 0C 04 0643   	call fn_draw_pixel_without_border
040523 CD 2E 11 04 0644   	call fn_export_sprite
040527 CD E3 12 04 0645   	call fn_refresh_sprite
04052B C9          0646   	ret
04052C             0647   
04052C             0648   
04052C             0649   ; add a frame to the animation
04052C             0650   dsl_add_frame:
04052C 21 AA FF FF 0651   	ld hl,KEY_N
040530 CD F1 13 04 0652   	call fn_inkey
040534 FE 00       0653   	cp 0
040536 20 F4       0654   	jr nz,dsl_add_frame
040538             0655   
040538             0656   	; frames limit reached ? exit
040538 21 2C 15 04 0657   	ld hl,frames_count
04053C 7E          0658   	ld a,(hl)
04053D FE 08       0659   	cp MAX_FRAMES
04053F C8          0660   	ret z
040540             0661   
040540             0662   	; get the number of frames to copy
040540 21 2C 15 04 0663   	ld hl,frames_count
040544 7E          0664   	ld a,(hl)
040545 21 2B 15 04 0665   	ld hl,current_frame
040549 46          0666   	ld b,(hl)
04054A 90          0667   	sub b
04054B 3D          0668   	dec a
04054C             0669   
04054C             0670   	; get sprsize² (length of a sprite, in bytes)
04054C 21 54 14 04 0671   	ld hl,spr_size
040550 11 00 00 00 0672   	ld de,$000000
040554 5E          0673   	ld e,(hl)
040555 56          0674   	ld d,(hl)
040556 ED 5C       0675   	mlt de ; DE = sprsize²
040558             0676   
040558             0677   	; prepare for the case we goto af_zap...
040558 21 34 15 04 0678   	ld hl,sprite_buffer
04055C             0679   
04055C F5          0680   	push af
04055D E5          0681   	push hl
04055E 21 2B 15 04 0682   	ld hl,current_frame
040562 7E          0683   	ld a,(hl)
040563 3C          0684   	inc a
040564 47          0685   	ld b,a
040565 E1          0686   	pop hl
040566 F1          0687   	pop af
040567             0688   
040567             0689   af_loop0:
040567 19          0690   	add hl,de ; for if current frame = 0 (prepare to zap!)
040568 10 FD       0691   	djnz af_loop0
04056A             0692   
04056A E5          0693   	push hl ; store HL = sprite buffer + sprsize²
04056B FE 00       0694   	cp 0
04056D CA 95 05 04 0695   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040571 E1          0696   	pop hl ; HL unused in this case
040572             0697   
040572 21 00 00 00 0698   	ld hl,$000000 ; HL is 0 to store the result
040576 47          0699   	ld b,a ; B = frames to copy
040577             0700   
040577             0701   ; multiply number of frames to copy by sprsize²
040577             0702   af_loop1:
040577 19          0703   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040578 10 FD       0704   	djnz af_loop1
04057A             0705   
04057A E5          0706   	push hl
04057B C1          0707   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04057C             0708   
04057C 21 2B 15 04 0709   	ld hl,current_frame
040580 7E          0710   	ld a,(hl)
040581 3C          0711   	inc a
040582 21 34 15 04 0712   	ld hl,sprite_buffer
040586             0713   
040586 C5          0714   	push bc
040587 47          0715   	ld b,a
040588             0716   
040588             0717   af_loop2:
040588 19          0718   	add hl,de ; HL = sprite buffer + length to copy
040589 10 FD       0719   	djnz af_loop2
04058B             0720   
04058B C1          0721   	pop bc
04058C             0722   
04058C E5          0723   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04058D             0724   
04058D 09          0725   	add hl,bc
04058E 2B          0726   	dec hl ; HL = end address to copy to end target address
04058F             0727   
04058F E5          0728   	push hl
040590 19          0729   	add hl,de
040591 EB          0730   	ex de,hl ; DE = end target address
040592 E1          0731   	pop hl
040593             0732   
040593 ED B8       0733   	lddr
040595             0734   
040595             0735   af_zap:
040595             0736   	; multiply number of frames to copy by sprsize²
040595 21 54 14 04 0737   	ld hl,spr_size
040599 01 00 00 00 0738   	ld bc,$000000
04059D 4E          0739   	ld c,(hl)
04059E 46          0740   	ld b,(hl)
04059F ED 4C       0741   	mlt bc ; BC = sprsize²
0405A1             0742   
0405A1 E1          0743   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
0405A2             0744   
0405A2             0745   ; fill frame with 0 color
0405A2             0746   af_loop3:
0405A2 AF          0747   	xor a
0405A3 77          0748   	ld (hl),a
0405A4 23          0749   	inc hl
0405A5 0B          0750   	dec bc
0405A6 78          0751   	ld a,b
0405A7 B1          0752   	or c
0405A8 FE 00       0753   	cp 0
0405AA 20 F6       0754   	jr nz,af_loop3
0405AC             0755   
0405AC             0756   	; increment the frames count and the current frame values
0405AC 21 2C 15 04 0757   	ld hl,frames_count
0405B0 34          0758   	inc (hl)
0405B1 21 2B 15 04 0759   	ld hl,current_frame
0405B5 34          0760   	inc (hl)
0405B6             0761   
0405B6 CD 23 13 04 0762   	call fn_change_frame
0405BA CD 48 13 04 0763   	call fn_change_frames_count
0405BE CD E3 12 04 0764   	call fn_refresh_sprite
0405C2 C9          0765   	ret
0405C3             0766   
0405C3             0767   ; add a copy of the current frame to the animation
0405C3             0768   dsl_add_and_copy_frame: ; TODO! debug me!
0405C3 21 AD FF FF 0769   	ld hl,KEY_C
0405C7 CD F1 13 04 0770   	call fn_inkey
0405CB FE 00       0771   	cp 0
0405CD 20 F4       0772   	jr nz,dsl_add_and_copy_frame
0405CF             0773   
0405CF             0774   	; frames limit reached ? exit
0405CF 21 2C 15 04 0775   	ld hl,frames_count
0405D3 7E          0776   	ld a,(hl)
0405D4 FE 08       0777   	cp MAX_FRAMES
0405D6 C8          0778   	ret z
0405D7             0779   
0405D7             0780   	; get the number of frames to copy
0405D7 21 2C 15 04 0781   	ld hl,frames_count
0405DB 7E          0782   	ld a,(hl)
0405DC 21 2B 15 04 0783   	ld hl,current_frame
0405E0 46          0784   	ld b,(hl)
0405E1 90          0785   	sub b
0405E2             0786   
0405E2             0787   	; get sprsize² (length of a sprite, in bytes)
0405E2 21 54 14 04 0788   	ld hl,spr_size
0405E6 11 00 00 00 0789   	ld de,$000000
0405EA 5E          0790   	ld e,(hl)
0405EB 56          0791   	ld d,(hl)
0405EC ED 5C       0792   	mlt de ; DE = sprsize²
0405EE             0793   
0405EE 21 00 00 00 0794   	ld hl,$000000 ; HL is 0 to store the result
0405F2 47          0795   	ld b,a ; B = frames to copy
0405F3             0796   
0405F3             0797   ; multiply number of frames to copy by sprsize²
0405F3             0798   aacf_loop1:
0405F3 19          0799   	add hl,de ; HL = length (in bytes) to copy (a few frames)
0405F4 10 FD       0800   	djnz aacf_loop1
0405F6             0801   
0405F6 E5          0802   	push hl
0405F7 C1          0803   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
0405F8             0804   
0405F8 21 2B 15 04 0805   	ld hl,current_frame
0405FC 7E          0806   	ld a,(hl)
0405FD 21 34 15 04 0807   	ld hl,sprite_buffer
040601 FE 00       0808   	cp 0
040603 28 06       0809   	jr z,aacf_loop_end2
040605             0810   
040605 C5          0811   	push bc
040606 47          0812   	ld b,a
040607             0813   
040607             0814   aacf_loop2:
040607 19          0815   	add hl,de ; HL = sprite buffer + length to copy
040608 10 FD       0816   	djnz aacf_loop2
04060A             0817   
04060A C1          0818   	pop bc
04060B             0819   
04060B             0820   aacf_loop_end2:
04060B 09          0821   	add hl,bc
04060C 2B          0822   	dec hl ; HL = end address to copy to end target address
04060D             0823   
04060D E5          0824   	push hl
04060E 19          0825   	add hl,de
04060F EB          0826   	ex de,hl ; DE = end target address
040610 E1          0827   	pop hl
040611             0828   
040611 ED B8       0829   	lddr
040613             0830   
040613             0831   	; increment the frames count and the current frame values
040613 21 2C 15 04 0832   	ld hl,frames_count
040617 34          0833   	inc (hl)
040618 21 2B 15 04 0834   	ld hl,current_frame
04061C 34          0835   	inc (hl)
04061D             0836   
04061D CD 23 13 04 0837   	call fn_change_frame
040621 CD 48 13 04 0838   	call fn_change_frames_count
040625 CD E3 12 04 0839   	call fn_refresh_sprite
040629 C9          0840   	ret
04062A             0841   
04062A             0842   ; delete last frame from animation
04062A             0843   dsl_delete_frame:
04062A 21 D0 FF FF 0844   	ld hl,KEY_BACKSPACE
04062E CD F1 13 04 0845   	call fn_inkey
040632 FE 00       0846   	cp 0
040634 20 F4       0847   	jr nz,dsl_delete_frame
040636             0848   
040636             0849   	; delete current selected frame
040636 21 54 14 04 0850   	ld hl,spr_size
04063A 01 00 00 00 0851   	ld bc,$000000
04063E 4E          0852   	ld c,(hl)
04063F 46          0853   	ld b,(hl)
040640 ED 4C       0854   	mlt bc ; BC = sprsize²
040642 21 2B 15 04 0855   	ld hl,current_frame
040646 7E          0856   	ld a,(hl) ; A = current frame
040647 21 34 15 04 0857   	ld hl,sprite_buffer ; HL = sprite buffer
04064B C5          0858   	push bc
04064C FE 00       0859   	cp 0
04064E 28 06       0860   	jr z,df_loop2
040650             0861   
040650             0862   df_loop1:
040650 09          0863   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
040651 3D          0864   	dec a
040652 FE 00       0865   	cp 0
040654 20 FA       0866   	jr nz,df_loop1
040656             0867   
040656             0868   ; clear the current frame
040656             0869   df_loop2:
040656 AF          0870   	xor a
040657 77          0871   	ld (hl),a
040658 23          0872   	inc hl
040659 0B          0873   	dec bc
04065A 78          0874   	ld a,b
04065B B1          0875   	or c
04065C FE 00       0876   	cp 0
04065E 20 F6       0877   	jr nz,df_loop2
040660             0878   
040660             0879   	; current frame + 1 = frames count ?
040660 E5          0880   	push hl
040661 21 2B 15 04 0881   	ld hl,current_frame
040665 5E          0882   	ld e,(hl)
040666 1C          0883   	inc e
040667 21 2C 15 04 0884   	ld hl,frames_count
04066B 7E          0885   	ld a,(hl)
04066C BB          0886   	cp e
04066D E1          0887   	pop hl
04066E C1          0888   	pop bc
04066F CA E8 06 04 0889   	jp z,df_exit
040673             0890   
040673 11 2C 15 04 0891   	ld de,frames_count
040677 1A          0892   	ld a,(de) ; A = frames count
040678 E5          0893   	push hl
040679 21 2B 15 04 0894   	ld hl,current_frame
04067D 5E          0895   	ld e,(hl) ; E = current frame
04067E E1          0896   	pop hl
04067F 93          0897   	sub e
040680 3D          0898   	dec a ; A = number of frames to copy back
040681             0899   
040681 EB          0900   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040682 21 00 00 00 0901   	ld hl,$000000
040686 FE 00       0902   	cp 0 ; 0 frames to copy ?
040688 28 06       0903   	jr z,df_exit_loop3
04068A             0904   
04068A             0905   df_loop3:
04068A 09          0906   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04068B 3D          0907   	dec a
04068C FE 00       0908   	cp 0
04068E 20 FA       0909   	jr nz,df_loop3
040690             0910   
040690             0911   df_exit_loop3:
040690 E5          0912   	push hl
040691 C1          0913   	pop bc ; BC = total length of area to copy
040692 D5          0914   	push de
040693 E1          0915   	pop hl ; HL = DE = start of area to copy
040694             0916   
040694 C5          0917   	push bc
040695 D5          0918   	push de
040696 E5          0919   	push hl
040697 21 54 14 04 0920   	ld hl,spr_size
04069B 11 00 00 00 0921   	ld de,$000000
04069F 5E          0922   	ld e,(hl)
0406A0 56          0923   	ld d,(hl)
0406A1 ED 5C       0924   	mlt de ; DE = one sprite frame length
0406A3 E1          0925   	pop hl
0406A4 B7          0926   	or a
0406A5 ED 52       0927   	sbc hl,de ; HL = target area to copy
0406A7 D1          0928   	pop de
0406A8 EB          0929   	ex de,hl ; DE = target, HL = start
0406A9 C1          0930   	pop bc
0406AA ED B0       0931   	ldir
0406AC             0932   
0406AC 21 54 14 04 0933   	ld hl,spr_size
0406B0 01 00 00 00 0934   	ld bc,$000000
0406B4 4E          0935   	ld c,(hl)
0406B5 46          0936   	ld b,(hl)
0406B6 ED 4C       0937   	mlt bc ; DE = one sprite frame length
0406B8             0938   
0406B8             0939   	; delete last frame data
0406B8 21 2C 15 04 0940   	ld hl,frames_count
0406BC 7E          0941   	ld a,(hl) ; A =frames count
0406BD 3D          0942   	dec a ; A = last frame
0406BE 21 34 15 04 0943   	ld hl,sprite_buffer ; HL = sprite buffer
0406C2 FE 00       0944   	cp 0
0406C4 28 06       0945   	jr z,df_loop5
0406C6             0946   
0406C6             0947   df_loop4:
0406C6 09          0948   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
0406C7 3D          0949   	dec a
0406C8 FE 00       0950   	cp 0
0406CA 20 FA       0951   	jr nz,df_loop4
0406CC             0952   
0406CC             0953   ; clear the current frame
0406CC             0954   df_loop5:
0406CC AF          0955   	xor a
0406CD 77          0956   	ld (hl),a
0406CE 23          0957   	inc hl
0406CF 0B          0958   	dec bc
0406D0 78          0959   	ld a,b
0406D1 B1          0960   	or c
0406D2 FE 00       0961   	cp 0
0406D4 20 F6       0962   	jr nz,df_loop5
0406D6             0963   
0406D6             0964   	; decrement frames count
0406D6 21 2C 15 04 0965   	ld hl,frames_count
0406DA 35          0966   	dec (hl)
0406DB             0967   
0406DB CD 23 13 04 0968   	call fn_change_frame
0406DF CD 48 13 04 0969   	call fn_change_frames_count
0406E3 CD E3 12 04 0970   	call fn_refresh_sprite
0406E7 C9          0971   	ret
0406E8             0972   
0406E8             0973   df_exit:
0406E8 21 2C 15 04 0974   	ld hl,frames_count
0406EC 7E          0975   	ld a,(hl)
0406ED FE 01       0976   	cp 1
0406EF 28 06       0977   	jr z,df_exit_end
0406F1 35          0978   	dec (hl)
0406F2 21 2B 15 04 0979   	ld hl,current_frame
0406F6 35          0980   	dec (hl)
0406F7             0981   
0406F7             0982   df_exit_end:
0406F7 CD 23 13 04 0983   	call fn_change_frame
0406FB CD 48 13 04 0984   	call fn_change_frames_count
0406FF CD E3 12 04 0985   	call fn_refresh_sprite
040703 C9          0986   	ret
040704             0987   
040704             0988   ; goto previous frame
040704             0989   dsl_previous_frame:
040704 21 B1 FF FF 0990   	ld hl,KEY_PGDOWN
040708 CD F1 13 04 0991   	call fn_inkey
04070C FE 00       0992   	cp 0
04070E 20 F4       0993   	jr nz,dsl_previous_frame
040710             0994   
040710 21 2B 15 04 0995   	ld hl,current_frame
040714 7E          0996   	ld a,(hl)
040715 FE 00       0997   	cp 0
040717 C8          0998   	ret z
040718             0999   
040718 3D          1000   	dec a
040719 77          1001   	ld (hl),a
04071A CD 23 13 04 1002   	call fn_change_frame
04071E CD E3 12 04 1003   	call fn_refresh_sprite
040722 C9          1004   	ret
040723             1005   
040723             1006   ; goto next frame
040723             1007   dsl_next_frame:
040723 21 C0 FF FF 1008   	ld hl,KEY_PGUP
040727 CD F1 13 04 1009   	call fn_inkey
04072B FE 00       1010   	cp 0
04072D 20 F4       1011   	jr nz,dsl_next_frame
04072F             1012   
04072F 21 2B 15 04 1013   	ld hl,current_frame
040733 7E          1014   	ld a,(hl)
040734 3C          1015   	inc a
040735 21 2C 15 04 1016   	ld hl,frames_count
040739 BE          1017   	cp (hl)
04073A C8          1018   	ret z
04073B             1019   
04073B 21 2B 15 04 1020   	ld hl,current_frame
04073F 77          1021   	ld (hl),a
040740 CD 23 13 04 1022   	call fn_change_frame
040744 CD E3 12 04 1023   	call fn_refresh_sprite
040748 C9          1024   	ret
040749             1025   
040749             1026   ; rotate a frame 90° clockwise
040749             1027   dsl_rotate_frame:
040749 21 CC FF FF 1028   	ld hl,KEY_R
04074D CD F1 13 04 1029   	call fn_inkey
040751 FE 00       1030   	cp 0
040753 20 F4       1031   	jr nz,dsl_rotate_frame
040755             1032   
040755             1033   	; find HL as start of the first frame (buffer)
040755 21 54 14 04 1034   	ld hl,spr_size
040759 01 00 00 00 1035   	ld bc,$000000
04075D 11 00 00 00 1036   	ld de,$000000
040761 5E          1037   	ld e,(hl)
040762 56          1038   	ld d,(hl)
040763 4B          1039   	ld c,e
040764 ED 5C       1040   	mlt de ; DE = sprite length in bytes
040766 21 2B 15 04 1041   	ld hl,current_frame
04076A 7E          1042   	ld a,(hl) ; A = current frame
04076B 21 34 15 04 1043   	ld hl,sprite_buffer
04076F FE 00       1044   	cp 0
040771 28 04       1045   	jr z,rf_noloop1
040773 47          1046   	ld b,a
040774             1047   
040774             1048   rf_loop1:
040774 19          1049   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040775 10 FD       1050   	djnz rf_loop1
040777             1051   
040777             1052   rf_noloop1:
040777 C5          1053   	push bc
040778 E5          1054   	push hl
040779             1055   
040779             1056   	; copy current frame to swap sprite buffer
040779 11 34 35 04 1057   	ld de,swap_sprite_buffer
04077D 41          1058   	ld b,c
04077E ED 4C       1059   	mlt bc
040780 ED B0       1060   	ldir
040782             1061   
040782 FD E1       1062   	pop iy ; IY: destination
040784 C1          1063   	pop bc
040785             1064   
040785 79          1065   	ld a,c
040786 01 00 00 00 1066   	ld bc,$000000
04078A 4F          1067   	ld c,a ; BC = sprite size
04078B             1068   
04078B             1069   	; turn and copy swap sprite buffer frame to sprite buffer
04078B DD 21 34 35 1070   	ld ix,swap_sprite_buffer ; IX: source
       04          
040790 11 00 00 00 1071   	ld de,0 ; x
040794 21 00 00 00 1072   	ld hl,0 ; y
040798             1073   
040798             1074   rf_loop2:
040798 DD E5       1075   	push ix
04079A FD E5       1076   	push iy
04079C             1077   
04079C D5          1078   	push de
04079D E5          1079   	push hl
04079E             1080   
04079E             1081   	; add x
04079E DD 19       1082   	add ix,de
0407A0             1083   
0407A0             1084   	; add y * width
0407A0 7C          1085   	ld a,h
0407A1 B5          1086   	or l
0407A2 FE 00       1087   	cp 0
0407A4 28 09       1088   	jr z,rf_done1
0407A6             1089   rf_loop3:
0407A6 DD 09       1090   	add ix,bc
0407A8 2B          1091   	dec hl
0407A9 7C          1092   	ld a,h
0407AA B5          1093   	or l
0407AB FE 00       1094   	cp 0
0407AD 20 F7       1095   	jr nz,rf_loop3
0407AF             1096   
0407AF             1097   rf_done1:
0407AF             1098   	; found the pixel value
0407AF DD 7E 00    1099   	ld a,(ix+0)
0407B2             1100   
0407B2 E1          1101   	pop hl
0407B3 D1          1102   	pop de
0407B4 D5          1103   	push de
0407B5 E5          1104   	push hl
0407B6             1105   
0407B6             1106   	; add y
0407B6 EB          1107   	ex de,hl
0407B7 FD 09       1108   	add iy,bc
0407B9 B7          1109   	or a
0407BA E5          1110   	push hl
0407BB FD E5       1111   	push iy
0407BD E1          1112   	pop hl
0407BE ED 52       1113   	sbc hl,de
0407C0 E5          1114   	push hl
0407C1 FD E1       1115   	pop iy
0407C3 FD 2B       1116   	dec iy
0407C5 E1          1117   	pop hl
0407C6 EB          1118   	ex de,hl
0407C7             1119   
0407C7             1120   	; add x * width
0407C7 F5          1121   	push af
0407C8 7A          1122   	ld a,d
0407C9 B3          1123   	or e
0407CA FE 00       1124   	cp 0
0407CC 28 09       1125   	jr z,rf_done2
0407CE             1126   rf_loop5:
0407CE FD 09       1127   	add iy,bc
0407D0 1B          1128   	dec de
0407D1 7A          1129   	ld a,d
0407D2 B3          1130   	or e
0407D3 FE 00       1131   	cp 0
0407D5 20 F7       1132   	jr nz,rf_loop5
0407D7             1133   
0407D7             1134   rf_done2:
0407D7 F1          1135   	pop af
0407D8             1136   
0407D8             1137   	; store the pixel value
0407D8 FD 77 00    1138   	ld (iy+0),a
0407DB             1139   
0407DB E1          1140   	pop hl
0407DC D1          1141   	pop de
0407DD             1142   
0407DD FD E1       1143   	pop iy
0407DF DD E1       1144   	pop ix
0407E1             1145   
0407E1 13          1146   	inc de
0407E2 EB          1147   	ex de,hl
0407E3 B7          1148   	or a
0407E4 ED 42       1149   	sbc hl,bc
0407E6 09          1150   	add hl,bc
0407E7 EB          1151   	ex de,hl
0407E8 DA 98 07 04 1152   	jp c,rf_loop2
0407EC             1153   
0407EC 11 00 00 00 1154   	ld de,0
0407F0 23          1155   	inc hl
0407F1 B7          1156   	or a
0407F2 ED 42       1157   	sbc hl,bc
0407F4 09          1158   	add hl,bc
0407F5 DA 98 07 04 1159   	jp c,rf_loop2
0407F9             1160   
0407F9 CD E3 12 04 1161   	call fn_refresh_sprite
0407FD C9          1162   	ret
0407FE             1163   
0407FE             1164   ; flip frame horizontally
0407FE             1165   dsl_flip_frame:
0407FE 21 BC FF FF 1166   	ld hl,KEY_F
040802 CD F1 13 04 1167   	call fn_inkey
040806 FE 00       1168   	cp 0
040808 20 F4       1169   	jr nz,dsl_flip_frame
04080A             1170   
04080A 21 54 14 04 1171   	ld hl,spr_size
04080E 11 00 00 00 1172   	ld de,$000000
040812 5E          1173   	ld e,(hl)
040813 56          1174   	ld d,(hl)
040814 4B          1175   	ld c,e
040815 ED 5C       1176   	mlt de ; DE = sprite length in bytes
040817 21 2B 15 04 1177   	ld hl,current_frame
04081B 7E          1178   	ld a,(hl) ; A = current frame
04081C 21 34 15 04 1179   	ld hl,sprite_buffer
040820 FE 00       1180   	cp 0
040822 28 04       1181   	jr z,ff_noloop1
040824 47          1182   	ld b,a
040825             1183   
040825             1184   ff_loop1:
040825 19          1185   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040826 10 FD       1186   	djnz ff_loop1
040828             1187   
040828             1188   ff_noloop1:
040828 41          1189   	ld b,c ; B = sprite height
040829 11 00 00 00 1190   	ld de,$000000
04082D 59          1191   	ld e,c ; DE = sprite width
04082E 79          1192   	ld a,c ; A = sprite width
04082F CB 3F       1193   	srl a ; A = sprite height / 2
040831             1194   
040831 E5          1195   	push hl
040832 DD E1       1196   	pop ix ; IX = frame address
040834 19          1197   	add hl,de ; HL = frame address + sprite width - 1
040835 2B          1198   	dec hl
040836 E5          1199   	push hl
040837 FD E1       1200   	pop iy ; IY = IX + sprite width - 1
040839             1201   
040839             1202   ff_loop2:
040839 F5          1203   	push af
04083A D5          1204   	push de
04083B DD E5       1205   	push ix
04083D FD E5       1206   	push iy
04083F             1207   ff_loop3:
04083F DD 5E 00    1208   	ld e,(ix+0)
040842 FD 56 00    1209   	ld d,(iy+0)
040845 DD 72 00    1210   	ld (ix+0),d
040848 FD 73 00    1211   	ld (iy+0),e
04084B DD 23       1212   	inc ix
04084D FD 2B       1213   	dec iy
04084F 3D          1214   	dec a
040850 FE 00       1215   	cp 0
040852 20 EB       1216   	jr nz,ff_loop3
040854 FD E1       1217   	pop iy
040856 DD E1       1218   	pop ix
040858 D1          1219   	pop de
040859 F1          1220   	pop af
04085A DD 19       1221   	add ix,de
04085C FD 19       1222   	add iy,de
04085E 10 D9       1223   	djnz ff_loop2
040860             1224   
040860 CD E3 12 04 1225   	call fn_refresh_sprite
040864 C9          1226   	ret
040865             1227   
040865             1228   ; mirror frame vertically
040865             1229   dsl_mirror_frame:
040865 21 9A FF FF 1230   	ld hl,KEY_M
040869 CD F1 13 04 1231   	call fn_inkey
04086D FE 00       1232   	cp 0
04086F 20 F4       1233   	jr nz,dsl_mirror_frame
040871             1234   
040871 21 54 14 04 1235   	ld hl,spr_size
040875 01 00 00 00 1236   	ld bc,$000000
040879 11 00 00 00 1237   	ld de,$000000
04087D 5E          1238   	ld e,(hl)
04087E 56          1239   	ld d,(hl)
04087F 4B          1240   	ld c,e
040880 ED 5C       1241   	mlt de ; DE = sprite length in bytes
040882 21 2B 15 04 1242   	ld hl,current_frame
040886 7E          1243   	ld a,(hl) ; A = current frame
040887 21 34 15 04 1244   	ld hl,sprite_buffer
04088B FE 00       1245   	cp 0
04088D 28 04       1246   	jr z,mf_noloop1
04088F 47          1247   	ld b,a
040890             1248   
040890             1249   mf_loop1:
040890 19          1250   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040891 10 FD       1251   	djnz mf_loop1
040893             1252   
040893             1253   mf_noloop1:
040893 11 00 00 00 1254   	ld de,$000000
040897 59          1255   	ld e,c ; E = sprite height
040898 79          1256   	ld a,c ; A = sprite width
040899 41          1257   	ld b,c ; B = sprite height
04089A CB 38       1258   	srl b ; divide B by 2, so B = sprite height / 2
04089C             1259   
04089C E5          1260   	push hl
04089D DD E1       1261   	pop ix ; IX = frame address
04089F 51          1262   	ld d,c
0408A0 15          1263   	dec d
0408A1 ED 5C       1264   	mlt de ; DE = sprite length - sprite width
0408A3 19          1265   	add hl,de ; HL = frame address + sprite length - sprite width
0408A4 E5          1266   	push hl
0408A5 FD E1       1267   	pop iy ; IY = IX + sprite length - sprite width
0408A7 21 00 00 00 1268   	ld hl,$000000
0408AB 69          1269   	ld l,c ; HL = sprite width
0408AC             1270   
0408AC             1271   mf_loop2:
0408AC F5          1272   	push af
0408AD D5          1273   	push de
0408AE DD E5       1274   	push ix
0408B0 FD E5       1275   	push iy
0408B2             1276   mf_loop3:
0408B2 DD 5E 00    1277   	ld e,(ix+0)
0408B5 FD 56 00    1278   	ld d,(iy+0)
0408B8 DD 72 00    1279   	ld (ix+0),d
0408BB FD 73 00    1280   	ld (iy+0),e
0408BE DD 23       1281   	inc ix
0408C0 FD 23       1282   	inc iy
0408C2 3D          1283   	dec a
0408C3 FE 00       1284   	cp 0
0408C5 20 EB       1285   	jr nz,mf_loop3
0408C7 FD E1       1286   	pop iy
0408C9 DD E1       1287   	pop ix
0408CB D1          1288   	pop de
0408CC F1          1289   	pop af
0408CD EB          1290   	ex de,hl
0408CE DD 19       1291   	add ix,de
0408D0 EB          1292   	ex de,hl
0408D1 E5          1293   	push hl
0408D2 FD E5       1294   	push iy
0408D4 E1          1295   	pop hl
0408D5 D1          1296   	pop de
0408D6 B7          1297   	or a
0408D7 ED 52       1298   	sbc hl,de
0408D9 E5          1299   	push hl
0408DA D5          1300   	push de
0408DB E1          1301   	pop hl
0408DC FD E1       1302   	pop iy
0408DE 10 CC       1303   	djnz mf_loop2
0408E0             1304   
0408E0 CD E3 12 04 1305   	call fn_refresh_sprite
0408E4 C9          1306   	ret
0408E5             1307   
0408E5             1308   dsl_flood_fill:
0408E5 21 B6 FF FF 1309   	ld hl,KEY_RETURN
0408E9 CD F1 13 04 1310   	call fn_inkey
0408ED FE 00       1311   	cp 0
0408EF 20 F4       1312   	jr nz,dsl_flood_fill
0408F1             1313   
0408F1             1314   	; hide the cursor
0408F1 CD 82 0C 04 1315   	call fn_draw_pixel_without_border
0408F5             1316   
0408F5             1317   	; memorize pixel coordinates
0408F5 3A 4F 14 04 1318   	ld a,(xpix)
0408F9 32 51 14 04 1319   	ld (memxpix),a
0408FD 3A 50 14 04 1320   	ld a,(ypix)
040901 32 52 14 04 1321   	ld (memypix),a
040905             1322   
040905             1323   	; fill all recursively
040905 3A 4F 14 04 1324   	ld a,(xpix)
040909 5F          1325   	ld e,a
04090A 3A 50 14 04 1326   	ld a,(ypix)
04090E 57          1327   	ld d,a
04090F CD 30 09 04 1328   	call dsl_flood_fill_loop
040913             1329   
040913             1330   	; refresh all the sprite
040913 CD E3 12 04 1331   	call fn_refresh_sprite
040917             1332   
040917             1333   	; hide the cursor again
040917 CD 82 0C 04 1334   	call fn_draw_pixel_without_border
04091B             1335   
04091B             1336   	; restore pixel coordinates
04091B             1337   	; and cursor
04091B 3A 51 14 04 1338   	ld a,(memxpix)
04091F 32 4F 14 04 1339   	ld (xpix),a
040923 3A 52 14 04 1340   	ld a,(memypix)
040927 32 50 14 04 1341   	ld (ypix),a
04092B CD 6E 0C 04 1342   	call fn_draw_pixel_with_border
04092F C9          1343   	ret
040930             1344   
040930             1345   dsl_flood_fill_loop:
040930 D5          1346   	push de
040931             1347   
040931 DD 21 54 14 1348   	ld ix,spr_size
       04          
040936             1349   
040936             1350   	; out  of the sprite area ?
040936 7B          1351   	ld a,e
040937 DD BE 00    1352   	cp (ix+0)
04093A D2 83 09 04 1353   	jp nc,ffl_exit
04093E             1354   
04093E             1355   	; out  of the sprite area ?
04093E 7A          1356   	ld a,d
04093F DD BE 00    1357   	cp (ix+0)
040942 D2 83 09 04 1358   	jp nc,ffl_exit
040946             1359   
040946             1360   	; replace current pixel, if it is
040946             1361   	; inside the sprite area,
040946             1362   	; and has not the select palette color
040946 7B          1363   	ld a,e
040947 32 4F 14 04 1364   	ld (xpix),a
04094B 7A          1365   	ld a,d
04094C 32 50 14 04 1366   	ld (ypix),a
040950 CD 98 0C 04 1367   	call fn_get_pixel_color
040954 21 55 14 04 1368   	ld hl,current_pen
040958 BE          1369   	cp (hl)
040959 CA 83 09 04 1370   	jp z,ffl_exit
04095D 7E          1371   	ld a,(hl)
04095E CD DA 0C 04 1372   	call fn_set_pixel_color
040962             1373   
040962             1374   	; restore coordinates
040962 3A 4F 14 04 1375   	ld a,(xpix)
040966 5F          1376   	ld e,a
040967 3A 50 14 04 1377   	ld a,(ypix)
04096B 57          1378   	ld d,a
04096C             1379   
04096C             1380   	; draw pixel at right
04096C 1C          1381   	inc e
04096D CD 30 09 04 1382   	call dsl_flood_fill_loop
040971 1D          1383   	dec e
040972             1384   	; draw pixel at left
040972 1D          1385   	dec e
040973 CD 30 09 04 1386   	call dsl_flood_fill_loop
040977 1C          1387   	inc e
040978             1388   	; draw pixel up
040978 14          1389   	inc d
040979 CD 30 09 04 1390   	call dsl_flood_fill_loop
04097D 15          1391   	dec d
04097E             1392   	; draw pixel down
04097E 15          1393   	dec d
04097F CD 30 09 04 1394   	call dsl_flood_fill_loop
040983             1395   
040983             1396   ffl_exit:
040983 D1          1397   	pop de
040984 C9          1398   	ret
040985             1399   
040985             1400   ; change current tool to palette
040985             1401   dsl_palette_tool:
040985 21 9F FF FF 1402   	ld hl,KEY_TAB
040989 CD F1 13 04 1403   	call fn_inkey
04098D FE 00       1404   	cp 0
04098F 20 F4       1405   	jr nz,dsl_palette_tool
040991             1406   
040991             1407   	; hide sprite drawing cursor
040991 CD 82 0C 04 1408   	call fn_draw_pixel_without_border
040995             1409   
040995             1410   	; draw selected palette color
040995 21 55 14 04 1411   	ld hl,current_pen
040999 4E          1412   	ld c,(hl)
04099A CD 36 0D 04 1413   	call fn_draw_palette_with_border
04099E             1414   
04099E             1415   ; select palette color
04099E             1416   dsl_palette_tool_loop:
04099E 21 E6 FF FF 1417   	ld hl,KEY_LEFT
0409A2 CD F1 13 04 1418   	call fn_inkey
0409A6 FE 01       1419   	cp 1
0409A8 CC 67 0A 04 1420   	call z,dsl_dec_pen
0409AC             1421   
0409AC 21 86 FF FF 1422   	ld hl,KEY_RIGHT
0409B0 CD F1 13 04 1423   	call fn_inkey
0409B4 FE 01       1424   	cp 1
0409B6 CC 92 0A 04 1425   	call z,dsl_inc_pen
0409BA             1426   
0409BA 21 9F FF FF 1427   	ld hl,KEY_TAB
0409BE CD F1 13 04 1428   	call fn_inkey
0409C2 FE 01       1429   	cp 1
0409C4 CA 4A 0A 04 1430   	jp z,dsl_draw_sprite_tool
0409C8             1431   
0409C8 21 A9 FF FF 1432   	ld hl,KEY_L
0409CC CD F1 13 04 1433   	call fn_inkey
0409D0 FE 01       1434   	cp 1
0409D2 CC F6 09 04 1435   	call z,dslp_load_sprite
0409D6             1436   
0409D6 21 AE FF FF 1437   	ld hl,KEY_S
0409DA CD F1 13 04 1438   	call fn_inkey
0409DE FE 01       1439   	cp 1
0409E0 CC 24 0A 04 1440   	call z,dslp_save_sprite
0409E4             1441   
0409E4 21 8F FF FF 1442   	ld hl,KEY_ESCAPE
0409E8 CD F1 13 04 1443   	call fn_inkey
0409EC FE 01       1444   	cp 1
0409EE CA BD 0A 04 1445   	jp z,exit_program
0409F2             1446   
0409F2 C3 9E 09 04 1447   	jp dsl_palette_tool_loop
0409F6             1448   
0409F6             1449   dslp_load_sprite:
0409F6 21 A9 FF FF 1450   	ld hl,KEY_L
0409FA CD F1 13 04 1451   	call fn_inkey
0409FE FE 00       1452   	cp 0
040A00 20 F4       1453   	jr nz,dslp_load_sprite
040A02             1454   
040A02 21 55 14 04 1455   	ld hl,current_pen
040A06 4E          1456   	ld c,(hl)
040A07 CD 9B 0D 04 1457   	call fn_draw_palette_without_border
040A0B CD 06 0F 04 1458   	call fn_load_sprite
040A0F 21 55 14 04 1459   	ld hl,current_pen
040A13 4E          1460   	ld c,(hl)
040A14 CD E3 12 04 1461   	call fn_refresh_sprite
040A18 CD 36 0D 04 1462   	call fn_draw_palette_with_border
040A1C CD 23 13 04 1463   	call fn_change_frame
040A20 C3 9E 09 04 1464   	jp dsl_palette_tool_loop
040A24             1465   
040A24             1466   dslp_save_sprite:
040A24 21 AE FF FF 1467   	ld hl,KEY_S
040A28 CD F1 13 04 1468   	call fn_inkey
040A2C FE 00       1469   	cp 0
040A2E 20 F4       1470   	jr nz,dslp_save_sprite
040A30             1471   
040A30 21 55 14 04 1472   	ld hl,current_pen
040A34 4E          1473   	ld c,(hl)
040A35 CD 9B 0D 04 1474   	call fn_draw_palette_without_border
040A39 CD 2F 10 04 1475   	call fn_save_sprite
040A3D 21 55 14 04 1476   	ld hl,current_pen
040A41 4E          1477   	ld c,(hl)
040A42 CD 36 0D 04 1478   	call fn_draw_palette_with_border
040A46 C3 9E 09 04 1479   	jp dsl_palette_tool_loop
040A4A             1480   
040A4A             1481   dsl_draw_sprite_tool:
040A4A 21 9F FF FF 1482   	ld hl,KEY_TAB
040A4E CD F1 13 04 1483   	call fn_inkey
040A52 FE 00       1484   	cp 0
040A54 20 F4       1485   	jr nz,dsl_draw_sprite_tool
040A56             1486   
040A56             1487   	; unselect palette color
040A56 21 55 14 04 1488   	ld hl,current_pen
040A5A 4E          1489   	ld c,(hl)
040A5B CD 9B 0D 04 1490   	call fn_draw_palette_without_border
040A5F             1491   
040A5F             1492   	; draw the pixel with a border
040A5F CD 6E 0C 04 1493   	call fn_draw_pixel_with_border
040A63             1494   
040A63 C3 F2 02 04 1495   	jp draw_sprite_loop
040A67             1496   
040A67             1497   dsl_dec_pen:
040A67 21 55 14 04 1498   	ld hl,current_pen
040A6B 7E          1499   	ld a,(hl)
040A6C FE 00       1500   	cp COLOR_MIN
040A6E CA 9E 09 04 1501   	jp z,dsl_palette_tool_loop
040A72             1502   
040A72 F5          1503   	push af
040A73 E5          1504   	push hl
040A74             1505   
040A74             1506   	; unselect palette color
040A74 21 55 14 04 1507   	ld hl,current_pen
040A78 4E          1508   	ld c,(hl)
040A79 CD 9B 0D 04 1509   	call fn_draw_palette_without_border
040A7D             1510   
040A7D E1          1511   	pop hl
040A7E F1          1512   	pop af
040A7F             1513   
040A7F             1514   	; dec the pen
040A7F 3D          1515   	dec a
040A80 77          1516   	ld (hl),a
040A81             1517   
040A81             1518   	; select palette color
040A81 21 55 14 04 1519   	ld hl,current_pen
040A85 4E          1520   	ld c,(hl)
040A86 CD 36 0D 04 1521   	call fn_draw_palette_with_border
040A8A CD 6C 13 04 1522   	call fn_slowdown
040A8E C3 9E 09 04 1523   	jp dsl_palette_tool_loop
040A92             1524   
040A92             1525   dsl_inc_pen:
040A92 21 55 14 04 1526   	ld hl,current_pen
040A96 7E          1527   	ld a,(hl)
040A97 FE 3F       1528   	cp COLOR_MAX
040A99 CA 9E 09 04 1529   	jp z,dsl_palette_tool_loop
040A9D             1530   
040A9D F5          1531   	push af
040A9E E5          1532   	push hl
040A9F             1533   
040A9F             1534   	; unselect palette color
040A9F 21 55 14 04 1535   	ld hl,current_pen
040AA3 4E          1536   	ld c,(hl)
040AA4 CD 9B 0D 04 1537   	call fn_draw_palette_without_border
040AA8             1538   
040AA8 E1          1539   	pop hl
040AA9 F1          1540   	pop af
040AAA             1541   
040AAA             1542   	; inc the pen
040AAA 3C          1543   	inc a
040AAB 77          1544   	ld (hl),a
040AAC             1545   
040AAC             1546   	; select palette color
040AAC 21 55 14 04 1547   	ld hl,current_pen
040AB0 4E          1548   	ld c,(hl)
040AB1 CD 36 0D 04 1549   	call fn_draw_palette_with_border
040AB5 CD 6C 13 04 1550   	call fn_slowdown
040AB9 C3 9E 09 04 1551   	jp dsl_palette_tool_loop
040ABD             1552   
040ABD             1553   ; exit program
040ABD             1554   exit_program:
040ABD             1555   	; reset to mode 1
040ABD             1556   	vdu 22
040ABD 3E 16       0001M  		LD	A, function
040ABF 49 D7       0002M  		RST.LIS	10h
040AC1             1557   	vdu 1
040AC1 3E 01       0001M  		LD	A, function
040AC3 49 D7       0002M  		RST.LIS	10h
040AC5             1558   
040AC5             1559   	; position the texte cursor at home
040AC5             1560   	vdu 30
040AC5 3E 1E       0001M  		LD	A, function
040AC7 49 D7       0002M  		RST.LIS	10h
040AC9             1561   
040AC9             1562   	; show cursor
040AC9             1563   	vdu 23
040AC9 3E 17       0001M  		LD	A, function
040ACB 49 D7       0002M  		RST.LIS	10h
040ACD             1564   	vdu 1
040ACD 3E 01       0001M  		LD	A, function
040ACF 49 D7       0002M  		RST.LIS	10h
040AD1             1565   	vdu 1
040AD1 3E 01       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5             1566   
040AD5 FD E1       1567   	pop iy
040AD7 DD E1       1568   	pop ix
040AD9 D1          1569   	pop de
040ADA C1          1570   	pop bc
040ADB F1          1571   	pop af
040ADC 21 00 00 00 1572   	ld hl,0
040AE0             1573   
040AE0 C9          1574   	ret
040AE1             1575   ;======================================================================
040AE1             1576   
040AE1             1577   ; draw a rectangle
040AE1             1578   fn_rect:
040AE1             1579   	vdu 25
040AE1 3E 19       0001M  		LD	A, function
040AE3 49 D7       0002M  		RST.LIS	10h
040AE5             1580   	vdu 4
040AE5 3E 04       0001M  		LD	A, function
040AE7 49 D7       0002M  		RST.LIS	10h
040AE9 DD 21 3F 14 1581   	ld ix,x1
       04          
040AEE DD 7E 00    1582   	ld a,(ix + 0)
040AF1             1583   	vdu_a
040AF1 49 D7       0001M  		RST.LIS	10h
040AF3 DD 7E 01    1584   	ld a,(ix + 1)
040AF6             1585   	vdu_a
040AF6 49 D7       0001M  		RST.LIS	10h
040AF8 FD 21 41 14 1586   	ld iy,y1
       04          
040AFD FD 7E 00    1587   	ld a,(iy + 0)
040B00             1588   	vdu_a
040B00 49 D7       0001M  		RST.LIS	10h
040B02 FD 7E 01    1589   	ld a,(iy + 1)
040B05             1590   	vdu_a
040B05 49 D7       0001M  		RST.LIS	10h
040B07             1591   
040B07             1592   	vdu 25
040B07 3E 19       0001M  		LD	A, function
040B09 49 D7       0002M  		RST.LIS	10h
040B0B             1593   	vdu 5
040B0B 3E 05       0001M  		LD	A, function
040B0D 49 D7       0002M  		RST.LIS	10h
040B0F DD 21 43 14 1594   	ld ix,x2
       04          
040B14 DD 7E 00    1595   	ld a,(ix + 0)
040B17             1596   	vdu_a
040B17 49 D7       0001M  		RST.LIS	10h
040B19 DD 7E 01    1597   	ld a,(ix + 1)
040B1C             1598   	vdu_a
040B1C 49 D7       0001M  		RST.LIS	10h
040B1E FD 21 41 14 1599   	ld iy,y1
       04          
040B23 FD 7E 00    1600   	ld a,(iy + 0)
040B26             1601   	vdu_a
040B26 49 D7       0001M  		RST.LIS	10h
040B28 FD 7E 01    1602   	ld a,(iy + 1)
040B2B             1603   	vdu_a
040B2B 49 D7       0001M  		RST.LIS	10h
040B2D             1604   
040B2D             1605   	vdu 25
040B2D 3E 19       0001M  		LD	A, function
040B2F 49 D7       0002M  		RST.LIS	10h
040B31             1606   	vdu 5
040B31 3E 05       0001M  		LD	A, function
040B33 49 D7       0002M  		RST.LIS	10h
040B35 DD 21 43 14 1607   	ld ix,x2
       04          
040B3A DD 7E 00    1608   	ld a,(ix + 0)
040B3D             1609   	vdu_a
040B3D 49 D7       0001M  		RST.LIS	10h
040B3F DD 7E 01    1610   	ld a,(ix + 1)
040B42             1611   	vdu_a
040B42 49 D7       0001M  		RST.LIS	10h
040B44 FD 21 45 14 1612   	ld iy,y2
       04          
040B49 FD 7E 00    1613   	ld a,(iy + 0)
040B4C             1614   	vdu_a
040B4C 49 D7       0001M  		RST.LIS	10h
040B4E FD 7E 01    1615   	ld a,(iy + 1)
040B51             1616   	vdu_a
040B51 49 D7       0001M  		RST.LIS	10h
040B53             1617   
040B53             1618   	vdu 25
040B53 3E 19       0001M  		LD	A, function
040B55 49 D7       0002M  		RST.LIS	10h
040B57             1619   	vdu 5
040B57 3E 05       0001M  		LD	A, function
040B59 49 D7       0002M  		RST.LIS	10h
040B5B DD 21 3F 14 1620   	ld ix,x1
       04          
040B60 DD 7E 00    1621   	ld a,(ix + 0)
040B63             1622   	vdu_a
040B63 49 D7       0001M  		RST.LIS	10h
040B65 DD 7E 01    1623   	ld a,(ix + 1)
040B68             1624   	vdu_a
040B68 49 D7       0001M  		RST.LIS	10h
040B6A FD 21 45 14 1625   	ld iy,y2
       04          
040B6F FD 7E 00    1626   	ld a,(iy + 0)
040B72             1627   	vdu_a
040B72 49 D7       0001M  		RST.LIS	10h
040B74 FD 7E 01    1628   	ld a,(iy + 1)
040B77             1629   	vdu_a
040B77 49 D7       0001M  		RST.LIS	10h
040B79             1630   
040B79             1631   	vdu 25
040B79 3E 19       0001M  		LD	A, function
040B7B 49 D7       0002M  		RST.LIS	10h
040B7D             1632   	vdu 5
040B7D 3E 05       0001M  		LD	A, function
040B7F 49 D7       0002M  		RST.LIS	10h
040B81 DD 21 3F 14 1633   	ld ix,x1
       04          
040B86 DD 7E 00    1634   	ld a,(ix + 0)
040B89             1635   	vdu_a
040B89 49 D7       0001M  		RST.LIS	10h
040B8B DD 7E 01    1636   	ld a,(ix + 1)
040B8E             1637   	vdu_a
040B8E 49 D7       0001M  		RST.LIS	10h
040B90 FD 21 41 14 1638   	ld iy,y1
       04          
040B95 FD 7E 00    1639   	ld a,(iy + 0)
040B98             1640   	vdu_a
040B98 49 D7       0001M  		RST.LIS	10h
040B9A FD 7E 01    1641   	ld a,(iy + 1)
040B9D             1642   	vdu_a
040B9D 49 D7       0001M  		RST.LIS	10h
040B9F             1643   
040B9F C9          1644   	ret
040BA0             1645   
040BA0             1646   ; draw a filled rectangle
040BA0             1647   fn_rectf:
040BA0 DD 21 3F 14 1648   	ld ix,x1
       04          
040BA5 FD 21 41 14 1649   	ld iy,y1
       04          
040BAA             1650   
040BAA             1651   	vdu 25
040BAA 3E 19       0001M  		LD	A, function
040BAC 49 D7       0002M  		RST.LIS	10h
040BAE             1652   	vdu 4
040BAE 3E 04       0001M  		LD	A, function
040BB0 49 D7       0002M  		RST.LIS	10h
040BB2 DD 7E 00    1653   	ld a,(ix+0)
040BB5             1654   	vdu_a
040BB5 49 D7       0001M  		RST.LIS	10h
040BB7 DD 7E 01    1655   	ld a,(ix+1)
040BBA             1656   	vdu_a
040BBA 49 D7       0001M  		RST.LIS	10h
040BBC FD 7E 00    1657   	ld a,(iy+0)
040BBF             1658   	vdu_a
040BBF 49 D7       0001M  		RST.LIS	10h
040BC1 FD 7E 01    1659   	ld a,(iy+1)
040BC4             1660   	vdu_a
040BC4 49 D7       0001M  		RST.LIS	10h
040BC6             1661   
040BC6 DD 21 43 14 1662   	ld ix,x2
       04          
040BCB FD 21 45 14 1663   	ld iy,y2
       04          
040BD0             1664   
040BD0             1665   	vdu 25
040BD0 3E 19       0001M  		LD	A, function
040BD2 49 D7       0002M  		RST.LIS	10h
040BD4             1666   	vdu 101
040BD4 3E 65       0001M  		LD	A, function
040BD6 49 D7       0002M  		RST.LIS	10h
040BD8 DD 7E 00    1667   	ld a,(ix+0)
040BDB             1668   	vdu_a
040BDB 49 D7       0001M  		RST.LIS	10h
040BDD DD 7E 01    1669   	ld a,(ix+1)
040BE0             1670   	vdu_a
040BE0 49 D7       0001M  		RST.LIS	10h
040BE2 FD 7E 00    1671   	ld a,(iy+0)
040BE5             1672   	vdu_a
040BE5 49 D7       0001M  		RST.LIS	10h
040BE7 FD 7E 01    1673   	ld a,(iy+1)
040BEA             1674   	vdu_a
040BEA 49 D7       0001M  		RST.LIS	10h
040BEC             1675   
040BEC C9          1676   	ret
040BED             1677   
040BED             1678   fn_calc_pixel_coords:
040BED 11 00 00 00 1679   	ld de,$000000 ; reset deu
040BF1             1680   
040BF1             1681   	; calculate coordinates x of the resized pixel
040BF1 21 4F 14 04 1682   	ld hl,xpix
040BF5 5E          1683   	ld e,(hl) ; E = xpix
040BF6 21 53 14 04 1684   	ld hl,pixel_width
040BFA 56          1685   	ld d,(hl) ; D = pixel_width
040BFB D5          1686   	push de
040BFC E1          1687   	pop hl ; HL = DE
040BFD ED 6C       1688   	mlt hl ; HL = xpix * pixel_width
040BFF DD 21 47 14 1689   	ld ix,xs1
       04          
040C04 DD 5E 00    1690   	ld e,(ix+0)
040C07 DD 56 01    1691   	ld d,(ix+1)
040C0A 13          1692   	inc de ; DE = xs1 + 1
040C0B 19          1693   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040C0C FD 21 3F 14 1694   	ld iy,x1
       04          
040C11 FD 75 00    1695   	ld (iy+0),l
040C14 FD 74 01    1696   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040C17 E5          1697   	push hl
040C18 21 53 14 04 1698   	ld hl,pixel_width
040C1C 16 00       1699   	ld d,0
040C1E 5E          1700   	ld e,(hl)
040C1F E1          1701   	pop hl
040C20 19          1702   	add hl,de
040C21 2B          1703   	dec hl
040C22 FD 21 43 14 1704   	ld iy,x2
       04          
040C27 FD 75 00    1705   	ld (iy+0),l
040C2A FD 74 01    1706   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040C2D             1707   
040C2D 11 00 00 00 1708   	ld de,$000000 ; reset deu
040C31             1709   
040C31             1710   	; calculate coordinates y of the resized pixel
040C31 21 50 14 04 1711   	ld hl,ypix
040C35 5E          1712   	ld e,(hl) ; E = ypix
040C36 21 53 14 04 1713   	ld hl,pixel_width
040C3A 56          1714   	ld d,(hl) ; D = pixel_width
040C3B D5          1715   	push de
040C3C E1          1716   	pop hl ; HL = DE
040C3D ED 6C       1717   	mlt hl ; HL = ypix * pixel_width
040C3F DD 21 49 14 1718   	ld ix,ys1
       04          
040C44 DD 5E 00    1719   	ld e,(ix+0)
040C47 DD 56 01    1720   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040C4A 13          1721   	inc de ; DE = ys1 + 1
040C4B 19          1722   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040C4C FD 21 41 14 1723   	ld iy,y1
       04          
040C51 FD 75 00    1724   	ld (iy+0),l
040C54 FD 74 01    1725   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040C57 E5          1726   	push hl
040C58 21 53 14 04 1727   	ld hl,pixel_width
040C5C 16 00       1728   	ld d,0
040C5E 5E          1729   	ld e,(hl)
040C5F E1          1730   	pop hl
040C60 19          1731   	add hl,de
040C61 2B          1732   	dec hl
040C62 FD 21 45 14 1733   	ld iy,y2
       04          
040C67 FD 75 00    1734   	ld (iy+0),l
040C6A FD 74 01    1735   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C6D             1736   
040C6D C9          1737   	ret
040C6E             1738   
040C6E             1739   ; draw the resized pixel border, with its color
040C6E             1740   fn_draw_pixel_with_border:
040C6E CD 82 0C 04 1741   	call fn_draw_pixel_without_border
040C72             1742   
040C72             1743   	; set graphics pen
040C72             1744   	vdu 18
040C72 3E 12       0001M  		LD	A, function
040C74 49 D7       0002M  		RST.LIS	10h
040C76             1745   	vdu 0
040C76 3E 00       0001M  		LD	A, function
040C78 49 D7       0002M  		RST.LIS	10h
040C7A             1746   	vdu COLOR_GREY ; grey pen
040C7A 3E 07       0001M  		LD	A, function
040C7C 49 D7       0002M  		RST.LIS	10h
040C7E             1747   
040C7E             1748   	; draw the sprite's border rectangle
040C7E C3 E1 0A 04 1749   	jp fn_rect
040C82             1750   
040C82             1751   ; draw the resized pixel color
040C82             1752   fn_draw_pixel_without_border:
040C82 CD ED 0B 04 1753   	call fn_calc_pixel_coords
040C86             1754   
040C86             1755   	; set graphics pen
040C86             1756   	vdu 18
040C86 3E 12       0001M  		LD	A, function
040C88 49 D7       0002M  		RST.LIS	10h
040C8A             1757   	vdu 0
040C8A 3E 00       0001M  		LD	A, function
040C8C 49 D7       0002M  		RST.LIS	10h
040C8E CD 98 0C 04 1758   	call fn_get_pixel_color
040C92             1759   	vdu_a
040C92 49 D7       0001M  		RST.LIS	10h
040C94             1760   
040C94             1761   	; draw the sprite's color rectangle
040C94 C3 A0 0B 04 1762   	jp fn_rectf
040C98             1763   
040C98             1764   ; get pixel color value in the sprite buffer
040C98             1765   ; returns A: pixel color (0-63)
040C98             1766   fn_get_pixel_color:
040C98 11 00 00 00 1767   	ld de,$000000 ; reset deu
040C9C             1768   
040C9C             1769   	; calculate the offset to add to the address
040C9C 21 50 14 04 1770   	ld hl,ypix
040CA0 5E          1771   	ld e,(hl) ; E = ypix
040CA1 21 54 14 04 1772   	ld hl,spr_size
040CA5 56          1773   	ld d,(hl) ; D = sprsize
040CA6 D5          1774   	push de
040CA7 E1          1775   	pop hl
040CA8 ED 6C       1776   	mlt hl ; HL = ypix * sprsize
040CAA E5          1777   	push hl
040CAB 21 4F 14 04 1778   	ld hl,xpix
040CAF 5E          1779   	ld e,(hl)
040CB0 16 00       1780   	ld d,0
040CB2 E1          1781   	pop hl
040CB3 19          1782   	add hl,de ; HL = (ypix * sprsize) + xpix
040CB4             1783   
040CB4 11 2B 15 04 1784   	ld de,current_frame
040CB8 1A          1785   	ld a,(de)
040CB9 FE 00       1786   	cp 0
040CBB 28 16       1787   	jr z,gpc_end_loop
040CBD             1788   
040CBD 47          1789   	ld b,a
040CBE E5          1790   	push hl
040CBF 11 00 00 00 1791   	ld de,$000000
040CC3 21 54 14 04 1792   	ld hl,spr_size
040CC7 5E          1793   	ld e,(hl)
040CC8 56          1794   	ld d,(hl)
040CC9 D5          1795   	push de
040CCA E1          1796   	pop hl
040CCB ED 6C       1797   	mlt hl
040CCD E5          1798   	push hl
040CCE D1          1799   	pop de ; DE = sprsize²
040CCF E1          1800   	pop hl
040CD0             1801   
040CD0             1802   gpc_loop:
040CD0 19          1803   	add hl,de
040CD1 10 FD       1804   	djnz gpc_loop
040CD3             1805   
040CD3             1806   gpc_end_loop:
040CD3             1807   	; add the offset to the address
040CD3 11 34 15 04 1808   	ld de,sprite_buffer
040CD7 19          1809   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CD8             1810   
040CD8             1811   	; get pixel color value
040CD8 7E          1812   	ld a,(hl)
040CD9             1813   
040CD9 C9          1814   	ret
040CDA             1815   
040CDA             1816   ; get pixel color value in the sprite buffer
040CDA             1817   ; A: pixel color (0-63)
040CDA             1818   fn_set_pixel_color:
040CDA 11 00 00 00 1819   	ld de,$000000 ; reset deu
040CDE             1820   
040CDE             1821   	; calculate the offset to add to the address
040CDE 21 50 14 04 1822   	ld hl,ypix
040CE2 5E          1823   	ld e,(hl) ; E = ypix
040CE3 21 54 14 04 1824   	ld hl,spr_size
040CE7 56          1825   	ld d,(hl) ; D = sprsize
040CE8 D5          1826   	push de
040CE9 E1          1827   	pop hl
040CEA ED 6C       1828   	mlt hl ; HL = ypix * sprsize
040CEC E5          1829   	push hl
040CED 21 4F 14 04 1830   	ld hl,xpix
040CF1 5E          1831   	ld e,(hl)
040CF2 16 00       1832   	ld d,0
040CF4 E1          1833   	pop hl
040CF5 19          1834   	add hl,de ; HL = (ypix * sprsize) + xpix
040CF6 F5          1835   	push af
040CF7             1836   
040CF7 11 2B 15 04 1837   	ld de,current_frame
040CFB 1A          1838   	ld a,(de)
040CFC FE 00       1839   	cp 0
040CFE 28 16       1840   	jr z,spc_end_loop
040D00             1841   
040D00 47          1842   	ld b,a
040D01 E5          1843   	push hl
040D02 11 00 00 00 1844   	ld de,$000000
040D06 21 54 14 04 1845   	ld hl,spr_size
040D0A 5E          1846   	ld e,(hl)
040D0B 56          1847   	ld d,(hl)
040D0C D5          1848   	push de
040D0D E1          1849   	pop hl
040D0E ED 6C       1850   	mlt hl
040D10 E5          1851   	push hl
040D11 D1          1852   	pop de ; DE = sprsize²
040D12 E1          1853   	pop hl
040D13             1854   
040D13             1855   spc_loop:
040D13 19          1856   	add hl,de
040D14 10 FD       1857   	djnz spc_loop
040D16             1858   
040D16             1859   spc_end_loop:
040D16             1860   
040D16             1861   	; add the offset to the address
040D16 11 34 15 04 1862   	ld de,sprite_buffer
040D1A 19          1863   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040D1B             1864   
040D1B             1865   	; set pixel color value
040D1B F1          1866   	pop af
040D1C 77          1867   	ld (hl),a
040D1D             1868   
040D1D C9          1869   	ret
040D1E             1870   
040D1E             1871   fn_move_up:
040D1E 21 50 14 04 1872   	ld hl,ypix
040D22 35          1873   	dec (hl)
040D23 C9          1874   	ret
040D24             1875   
040D24             1876   fn_move_down:
040D24 21 50 14 04 1877   	ld hl,ypix
040D28 34          1878   	inc (hl)
040D29 C9          1879   	ret
040D2A             1880   
040D2A             1881   fn_move_left:
040D2A 21 4F 14 04 1882   	ld hl,xpix
040D2E 35          1883   	dec (hl)
040D2F C9          1884   	ret
040D30             1885   
040D30             1886   fn_move_right:
040D30 21 4F 14 04 1887   	ld hl,xpix
040D34 34          1888   	inc (hl)
040D35 C9          1889   	ret
040D36             1890   
040D36             1891   ; draw palette color whit border and selection
040D36             1892   ; C = color number (0-63)
040D36             1893   fn_draw_palette_with_border:
040D36 C5          1894   	push bc
040D37             1895   
040D37             1896   	; choose palette color
040D37             1897   	vdu 18
040D37 3E 12       0001M  		LD	A, function
040D39 49 D7       0002M  		RST.LIS	10h
040D3B             1898   	vdu 0
040D3B 3E 00       0001M  		LD	A, function
040D3D 49 D7       0002M  		RST.LIS	10h
040D3F C1          1899   	pop bc
040D40 C5          1900   	push bc
040D41 79          1901   	ld a,c
040D42             1902   	vdu_a
040D42 49 D7       0001M  		RST.LIS	10h
040D44             1903   
040D44             1904   	; store coordinates for a palette square
040D44 DD 21 3F 14 1905   	ld ix,x1
       04          
040D49 E1          1906   	pop hl
040D4A E5          1907   	push hl
040D4B 26 05       1908   	ld h,5
040D4D ED 6C       1909   	mlt hl
040D4F E5          1910   	push hl
040D50 DD 75 00    1911   	ld (ix+0),l
040D53 DD 74 01    1912   	ld (ix+1),h
040D56             1913   
040D56 DD 21 41 14 1914   	ld ix,y1
       04          
040D5B 21 00 00 00 1915   	ld hl,0
040D5F DD 75 00    1916   	ld (ix+0),l
040D62 DD 74 01    1917   	ld (ix+1),h
040D65             1918   
040D65 DD 21 43 14 1919   	ld ix,x2
       04          
040D6A E1          1920   	pop hl
040D6B 11 04 00 00 1921   	ld de,4
040D6F 19          1922   	add hl,de
040D70 DD 75 00    1923   	ld (ix+0),l
040D73 DD 74 01    1924   	ld (ix+1),h
040D76             1925   
040D76 DD 21 45 14 1926   	ld ix,y2
       04          
040D7B 21 0A 00 00 1927   	ld hl,10
040D7F DD 75 00    1928   	ld (ix+0),l
040D82 DD 74 01    1929   	ld (ix+1),h
040D85             1930   
040D85             1931   	; draw the palette filled square
040D85 CD A0 0B 04 1932   	call fn_rectf
040D89             1933   
040D89             1934   	; choose grey color
040D89             1935   	vdu 18
040D89 3E 12       0001M  		LD	A, function
040D8B 49 D7       0002M  		RST.LIS	10h
040D8D             1936   	vdu 0
040D8D 3E 00       0001M  		LD	A, function
040D8F 49 D7       0002M  		RST.LIS	10h
040D91 3E 07       1937   	ld a,COLOR_GREY
040D93             1938   	vdu_a
040D93 49 D7       0001M  		RST.LIS	10h
040D95             1939   
040D95             1940   	; draw the palette square border
040D95 CD E1 0A 04 1941   	call fn_rect
040D99             1942   
040D99             1943   	; next color ?
040D99 C1          1944   	pop bc
040D9A             1945   
040D9A C9          1946   	ret
040D9B             1947   
040D9B             1948   ; draw palette color whitout border and selection
040D9B             1949   ; C = color number (0-63)
040D9B             1950   fn_draw_palette_without_border:
040D9B C5          1951   	push bc
040D9C             1952   
040D9C             1953   	; choose palette color
040D9C             1954   	vdu 18
040D9C 3E 12       0001M  		LD	A, function
040D9E 49 D7       0002M  		RST.LIS	10h
040DA0             1955   	vdu 0
040DA0 3E 00       0001M  		LD	A, function
040DA2 49 D7       0002M  		RST.LIS	10h
040DA4 C1          1956   	pop bc
040DA5 C5          1957   	push bc
040DA6 79          1958   	ld a,c
040DA7             1959   	vdu_a
040DA7 49 D7       0001M  		RST.LIS	10h
040DA9             1960   
040DA9             1961   	; store coordinates for a palette square
040DA9 DD 21 3F 14 1962   	ld ix,x1
       04          
040DAE E1          1963   	pop hl
040DAF E5          1964   	push hl
040DB0 26 05       1965   	ld h,5
040DB2 ED 6C       1966   	mlt hl
040DB4 E5          1967   	push hl
040DB5 DD 75 00    1968   	ld (ix+0),l
040DB8 DD 74 01    1969   	ld (ix+1),h
040DBB             1970   
040DBB DD 21 41 14 1971   	ld ix,y1
       04          
040DC0 21 00 00 00 1972   	ld hl,0
040DC4 DD 75 00    1973   	ld (ix+0),l
040DC7 DD 74 01    1974   	ld (ix+1),h
040DCA             1975   
040DCA DD 21 43 14 1976   	ld ix,x2
       04          
040DCF E1          1977   	pop hl
040DD0 11 04 00 00 1978   	ld de,4
040DD4 19          1979   	add hl,de
040DD5 DD 75 00    1980   	ld (ix+0),l
040DD8 DD 74 01    1981   	ld (ix+1),h
040DDB             1982   
040DDB DD 21 45 14 1983   	ld ix,y2
       04          
040DE0 21 0A 00 00 1984   	ld hl,10
040DE4 DD 75 00    1985   	ld (ix+0),l
040DE7 DD 74 01    1986   	ld (ix+1),h
040DEA             1987   
040DEA             1988   	; draw the palette filled square
040DEA CD A0 0B 04 1989   	call fn_rectf
040DEE             1990   
040DEE C1          1991   	pop bc
040DEF             1992   
040DEF C9          1993   	ret
040DF0             1994   
040DF0             1995   ; get an ascii key value
040DF0             1996   fn_input_key:
040DF0 C5          1997   	push bc
040DF1             1998   	moscall mos_getkey
040DF1 3E 00       0001M  		LD	A, function
040DF3 49 CF       0002M  		RST.LIS	08h
040DF5 C1          1999   	pop bc
040DF6 C9          2000   	ret
040DF7             2001   
040DF7             2002   ; input a text of 8 chars
040DF7             2003   fn_input_text8:
040DF7             2004   	; locate x,y
040DF7             2005   	vdu 31
040DF7 3E 1F       0001M  		LD	A, function
040DF9 49 D7       0002M  		RST.LIS	10h
040DFB             2006   	vdu FILENAME_X
040DFB 3E 07       0001M  		LD	A, function
040DFD 49 D7       0002M  		RST.LIS	10h
040DFF             2007   	vdu FILENAME_Y
040DFF 3E 18       0001M  		LD	A, function
040E01 49 D7       0002M  		RST.LIS	10h
040E03             2008   
040E03             2009   	; print text
040E03 21 C1 14 04 2010   	ld hl,filename_label
040E07 01 00 00 00 2011   	ld bc,0
040E0B AF          2012   	xor a
040E0C 49 DF       2013   	rst.lis $18
040E0E             2014   
040E0E             2015   	; show cursor
040E0E             2016   	vdu 23
040E0E 3E 17       0001M  		LD	A, function
040E10 49 D7       0002M  		RST.LIS	10h
040E12             2017   	vdu 1
040E12 3E 01       0001M  		LD	A, function
040E14 49 D7       0002M  		RST.LIS	10h
040E16             2018   	vdu 1
040E16 3E 01       0001M  		LD	A, function
040E18 49 D7       0002M  		RST.LIS	10h
040E1A             2019   
040E1A 0E 00       2020   	ld c,0
040E1C             2021   
040E1C             2022   it8_loop:
040E1C             2023   	; get ascii key
040E1C CD F0 0D 04 2024   	call fn_input_key
040E20 B7          2025   	or a
040E21 CA 1C 0E 04 2026   	jp z,it8_loop
040E25             2027   
040E25 FE 2E       2028   	cp '.'
040E27 CA 71 0E 04 2029   	jp z,it8l_add_char
040E2B             2030   
040E2B FE 2D       2031   	cp '-'
040E2D CA 71 0E 04 2032   	jp z,it8l_add_char
040E31             2033   
040E31 FE 5F       2034   	cp '_'
040E33 CA 71 0E 04 2035   	jp z,it8l_add_char
040E37             2036   
040E37 FE 7F       2037   	cp 127
040E39 CA A5 0E 04 2038   	jp z,it8l_backspace
040E3D             2039   
040E3D FE 0D       2040   	cp 13
040E3F CA D4 0E 04 2041   	jp z,it8l_return
040E43             2042   
040E43 FE 30       2043   	cp '0'
040E45 DA 1C 0E 04 2044   	jp c,it8_loop
040E49             2045   
040E49 16 39       2046   	ld d,'9'
040E4B 14          2047   	inc d
040E4C BA          2048   	cp d
040E4D DA 71 0E 04 2049   	jp c,it8l_add_char
040E51             2050   
040E51 FE 41       2051   	cp 'A'
040E53 DA 1C 0E 04 2052   	jp c,it8_loop
040E57             2053   
040E57 16 5A       2054   	ld d,'Z'
040E59 14          2055   	inc d
040E5A BA          2056   	cp d
040E5B DA 71 0E 04 2057   	jp c,it8l_add_char
040E5F             2058   
040E5F FE 61       2059   	cp 'a'
040E61 DA 1C 0E 04 2060   	jp c,it8_loop
040E65             2061   
040E65 16 7A       2062   	ld d,'z'
040E67 14          2063   	inc d
040E68 BA          2064   	cp d
040E69 DA 71 0E 04 2065   	jp c,it8l_add_char
040E6D             2066   
040E6D C3 1C 0E 04 2067   	jp it8_loop
040E71             2068   
040E71             2069   it8l_add_char:
040E71 F5          2070   	push af
040E72 79          2071   	ld a,c
040E73 FE 0C       2072   	cp 12
040E75 38 05       2073   	jr c,it8l_poke_char
040E77 F1          2074   	pop af
040E78 C3 1C 0E 04 2075   	jp it8_loop
040E7C             2076   
040E7C             2077   it8l_poke_char:
040E7C F1          2078   	pop af
040E7D 21 CB 14 04 2079   	ld hl,filename
040E81 06 00       2080   	ld b,0
040E83 09          2081   	add hl,bc
040E84 77          2082   	ld (hl),a
040E85 0C          2083   	inc c
040E86 F5          2084   	push af
040E87 C5          2085   	push bc
040E88             2086   
040E88             2087   	; locate x,y
040E88             2088   	vdu 31
040E88 3E 1F       0001M  		LD	A, function
040E8A 49 D7       0002M  		RST.LIS	10h
040E8C             2089   	vdu FILENAME_X+10
040E8C 3E 11       0001M  		LD	A, function
040E8E 49 D7       0002M  		RST.LIS	10h
040E90             2090   	vdu FILENAME_Y
040E90 3E 18       0001M  		LD	A, function
040E92 49 D7       0002M  		RST.LIS	10h
040E94             2091   
040E94             2092   	; print text
040E94 21 CB 14 04 2093   	ld hl,filename
040E98 01 00 00 00 2094   	ld bc,0
040E9C AF          2095   	xor a
040E9D 49 DF       2096   	rst.lis $18
040E9F             2097   
040E9F C1          2098   	pop bc
040EA0 F1          2099   	pop af
040EA1             2100   
040EA1 C3 1C 0E 04 2101   	jp it8_loop
040EA5             2102   
040EA5             2103   it8l_backspace:
040EA5 79          2104   	ld a,c
040EA6 FE 00       2105   	cp 0
040EA8 CA 1C 0E 04 2106   	jp z,it8_loop
040EAC             2107   
040EAC             2108   	; delete a character of the filename
040EAC 21 CB 14 04 2109   	ld hl,filename
040EB0 06 00       2110   	ld b,0
040EB2 09          2111   	add hl,bc
040EB3 AF          2112   	xor a
040EB4 77          2113   	ld (hl),a
040EB5 0D          2114   	dec c
040EB6 C5          2115   	push bc
040EB7             2116   
040EB7             2117   	; locate x,y
040EB7             2118   	vdu 31
040EB7 3E 1F       0001M  		LD	A, function
040EB9 49 D7       0002M  		RST.LIS	10h
040EBB 3E 11       2119   	ld a,FILENAME_X+10
040EBD 81          2120   	add a,c
040EBE             2121   	vdu_a
040EBE 49 D7       0001M  		RST.LIS	10h
040EC0             2122   	vdu FILENAME_Y
040EC0 3E 18       0001M  		LD	A, function
040EC2 49 D7       0002M  		RST.LIS	10h
040EC4             2123   
040EC4             2124   	; print text
040EC4 21 E3 14 04 2125   	ld hl,spacechar
040EC8 01 00 00 00 2126   	ld bc,0
040ECC AF          2127   	xor a
040ECD 49 DF       2128   	rst.lis $18
040ECF             2129   
040ECF C1          2130   	pop bc
040ED0 C3 1C 0E 04 2131   	jp it8_loop
040ED4             2132   
040ED4             2133   it8l_return:
040ED4             2134   	; locate x,y
040ED4             2135   	vdu 31
040ED4 3E 1F       0001M  		LD	A, function
040ED6 49 D7       0002M  		RST.LIS	10h
040ED8             2136   	vdu FILENAME_X
040ED8 3E 07       0001M  		LD	A, function
040EDA 49 D7       0002M  		RST.LIS	10h
040EDC             2137   	vdu FILENAME_Y
040EDC 3E 18       0001M  		LD	A, function
040EDE 49 D7       0002M  		RST.LIS	10h
040EE0             2138   
040EE0             2139   	; print text
040EE0 21 E5 14 04 2140   	ld hl,void_filename
040EE4 01 00 00 00 2141   	ld bc,0
040EE8 AF          2142   	xor a
040EE9 49 DF       2143   	rst.lis $18
040EEB             2144   
040EEB             2145   	; hide cursor
040EEB             2146   	vdu 23
040EEB 3E 17       0001M  		LD	A, function
040EED 49 D7       0002M  		RST.LIS	10h
040EEF             2147   	vdu 1
040EEF 3E 01       0001M  		LD	A, function
040EF1 49 D7       0002M  		RST.LIS	10h
040EF3             2148   	vdu 0
040EF3 3E 00       0001M  		LD	A, function
040EF5 49 D7       0002M  		RST.LIS	10h
040EF7             2149   
040EF7             2150   it8l_endloop:
040EF7 21 B6 FF FF 2151   	ld hl,KEY_RETURN
040EFB CD F1 13 04 2152   	call fn_inkey
040EFF FE 01       2153   	CP 1
040F01 CA F7 0E 04 2154   	jp z,it8l_endloop
040F05             2155   
040F05 C9          2156   	ret
040F06             2157   
040F06             2158   ; load a sprite, giving its full name, with extension
040F06             2159   fn_load_sprite:
040F06             2160   	; clear the filename on the screen
040F06 21 CB 14 04 2161   	ld hl,filename
040F0A 06 0C       2162   	ld b,12
040F0C AF          2163   	xor a
040F0D             2164   
040F0D             2165   ls_clear_filename:
040F0D 77          2166   	ld (hl),a
040F0E 23          2167   	inc hl
040F0F 10 FC       2168   	djnz ls_clear_filename
040F11             2169   
040F11             2170   	; get filename
040F11 CD F7 0D 04 2171   	call fn_input_text8
040F15             2172   
040F15             2173   	; set path to 'sprites/'
040F15 21 D8 14 04 2174   	ld hl,sprite_path
040F19             2175   	moscall mos_cd
040F19 3E 03       0001M  		LD	A, function
040F1B 49 CF       0002M  		RST.LIS	08h
040F1D             2176   
040F1D             2177   	; exit on folder error
040F1D FE 00       2178   	cp 0
040F1F C2 EE 0F 04 2179   	jp nz,ls_folder_error
040F23             2180   
040F23             2181   	; open the file for read
040F23 21 CB 14 04 2182   	ld hl,filename
040F27 0E 01       2183   	ld c,fa_open_existing|fa_read
040F29             2184   	moscall mos_fopen
040F29 3E 0A       0001M  		LD	A, function
040F2B 49 CF       0002M  		RST.LIS	08h
040F2D             2185   
040F2D             2186   	; exit on file error
040F2D FE 00       2187   	cp 0
040F2F CA 1C 10 04 2188   	jp z,ls_file_error
040F33             2189   
040F33             2190   	; filehandle -> C
040F33 4F          2191   	ld c,a
040F34             2192   
040F34             2193   	; get colors count
040F34             2194   	moscall mos_fgetc
040F34 3E 0C       0001M  		LD	A, function
040F36 49 CF       0002M  		RST.LIS	08h
040F38 DA C9 0F 04 2195   	jp c,ls_close_error
040F3C             2196   
040F3C FE 41       2197   	cp MAX_COLORS + 1
040F3E D2 C9 0F 04 2198   	jp nc,ls_close_error
040F42             2199   
040F42             2200   	; store colors count
040F42 21 2A 15 04 2201   	ld hl,colors_count
040F46 77          2202   	ld (hl),a
040F47             2203   
040F47             2204   	; get frames count
040F47             2205   	moscall mos_fgetc
040F47 3E 0C       0001M  		LD	A, function
040F49 49 CF       0002M  		RST.LIS	08h
040F4B DA C9 0F 04 2206   	jp c,ls_close_error
040F4F             2207   
040F4F             2208   	; store frames count
040F4F 21 2C 15 04 2209   	ld hl,frames_count
040F53 77          2210   	ld (hl),a
040F54             2211   
040F54             2212   	; set last frame as current frame
040F54 21 2B 15 04 2213   	ld hl,current_frame
040F58 3D          2214   	dec a
040F59 77          2215   	ld (hl),a
040F5A             2216   
040F5A             2217   	; get sprite size
040F5A             2218   	moscall mos_fgetc
040F5A 3E 0C       0001M  		LD	A, function
040F5C 49 CF       0002M  		RST.LIS	08h
040F5E DA C9 0F 04 2219   	jp c,ls_close_error
040F62             2220   
040F62             2221   	; store sprite size
040F62 21 54 14 04 2222   	ld hl,spr_size
040F66 77          2223   	ld (hl),a
040F67             2224   
040F67             2225   	; set 4x4 pixel width
040F67 FE 04       2226   	cp SPR44
040F69 20 09       2227   	jr nz,ls_next1
040F6B             2228   
040F6B 21 53 14 04 2229   	ld hl,pixel_width
040F6F 06 20       2230   	ld b,SPR44_width
040F71 70          2231   	ld (hl),b
040F72 18 21       2232   	jr ls_next4
040F74             2233   
040F74             2234   ls_next1:
040F74             2235   	; set 8x8 pixel width
040F74 FE 08       2236   	cp SPR88
040F76 20 09       2237   	jr nz,ls_next2
040F78             2238   
040F78 21 53 14 04 2239   	ld hl,pixel_width
040F7C 06 10       2240   	ld b,SPR88_width
040F7E 70          2241   	ld (hl),b
040F7F 18 14       2242   	jr ls_next4
040F81             2243   
040F81             2244   ls_next2:
040F81             2245   
040F81             2246   	; set 16x16 pixel width
040F81 FE 10       2247   	cp SPR1616
040F83 20 09       2248   	jr nz,ls_next3
040F85             2249   
040F85 21 53 14 04 2250   	ld hl,pixel_width
040F89 06 08       2251   	ld b,SPR1616_width
040F8B 70          2252   	ld (hl),b
040F8C 18 07       2253   	jr ls_next4
040F8E             2254   
040F8E             2255   ls_next3:
040F8E             2256   
040F8E 21 53 14 04 2257   	ld hl,pixel_width
040F92 06 04       2258   	ld b,SPR3232_width
040F94 70          2259   	ld (hl),b
040F95             2260   
040F95             2261   ls_next4:
040F95 21 00 00 00 2262   	ld hl,#000000
040F99 6F          2263   	ld l,a
040F9A 67          2264   	ld h,a
040F9B ED 6C       2265   	mlt hl ; HL = sprite length
040F9D E5          2266   	push hl
040F9E             2267   
040F9E             2268   	; get frames count
040F9E 21 2B 15 04 2269   	ld hl,current_frame
040FA2 46          2270   	ld b,(hl)
040FA3             2271   
040FA3 E1          2272   	pop hl
040FA4             2273   
040FA4 78          2274   	ld a,b
040FA5 FE 00       2275   	cp 0
040FA7 28 07       2276   	jr z,ls_read_data
040FA9             2277   
040FA9             2278   	; de = size²
040FA9 11 00 04 00 2279   	ld de,ONE_FRAME_BUFFER_SIZE
040FAD             2280   ls_add_length:
040FAD 19          2281   	add hl,de
040FAE 10 FD       2282   	djnz ls_add_length
040FB0             2283   
040FB0             2284   ls_read_data:
040FB0 E5          2285   	push hl
040FB1 E5          2286   	push hl
040FB2 D1          2287   	pop de
040FB3 7B          2288   	ld a,e
040FB4 21 34 15 04 2289   	ld hl,sprite_buffer
040FB8             2290   	moscall mos_fread
040FB8 3E 1A       0001M  		LD	A, function
040FBA 49 CF       0002M  		RST.LIS	08h
040FBC E1          2291   	pop hl
040FBD 7C          2292   	ld a,h
040FBE BA          2293   	cp d
040FBF 20 08       2294   	jr nz,ls_close_error
040FC1 7D          2295   	ld a,l
040FC2 BB          2296   	cp e
040FC3 20 04       2297   	jr nz,ls_close_error
040FC5 C3 F6 0F 04 2298   	jp ls_close
040FC9             2299   
040FC9             2300   ls_close_error:
040FC9 C5          2301   	push bc
040FCA             2302   
040FCA             2303   	; read error
040FCA CD 75 12 04 2304   	call fn_print_file_error
040FCE             2305   
040FCE C1          2306   	pop bc
040FCF             2307   
040FCF             2308   	; close the file
040FCF             2309   	moscall mos_fclose
040FCF 3E 0B       0001M  		LD	A, function
040FD1 49 CF       0002M  		RST.LIS	08h
040FD3             2310   
040FD3             2311   	; set path to home
040FD3 21 E0 14 04 2312   	ld hl,back_path
040FD7             2313   	moscall mos_cd
040FD7 3E 03       0001M  		LD	A, function
040FD9 49 CF       0002M  		RST.LIS	08h
040FDB             2314   
040FDB             2315   	; exit on error
040FDB FE 00       2316   	cp 0
040FDD C2 EE 0F 04 2317   	jp nz,ls_folder_error
040FE1             2318   
040FE1             2319   
040FE1             2320   	; reset current frame and coordinates of the drawing pixel
040FE1 21 4F 14 04 2321   	ld hl,xpix
040FE5 AF          2322   	xor a
040FE6 77          2323   	ld (hl),a
040FE7 21 50 14 04 2324   	ld hl,ypix
040FEB 77          2325   	ld (hl),a
040FEC 18 25       2326   	jr ls_exit
040FEE             2327   
040FEE             2328   ls_folder_error:
040FEE             2329   	; write error
040FEE CD AC 12 04 2330   	call fn_print_folder_error
040FF2 C3 13 10 04 2331   	jp ls_exit
040FF6             2332   
040FF6             2333   ls_close:
040FF6             2334   	; close the file
040FF6             2335   	moscall mos_fclose
040FF6 3E 0B       0001M  		LD	A, function
040FF8 49 CF       0002M  		RST.LIS	08h
040FFA             2336   
040FFA             2337   	; set path to home
040FFA 21 E0 14 04 2338   	ld hl,back_path
040FFE             2339   	moscall mos_cd
040FFE 3E 03       0001M  		LD	A, function
041000 49 CF       0002M  		RST.LIS	08h
041002             2340   
041002             2341   	; exit on error
041002 FE 00       2342   	cp 0
041004 C2 EE 0F 04 2343   	jp nz,ls_folder_error
041008             2344   
041008             2345   	; reset current frame and coordinates of the drawing pixel
041008 21 4F 14 04 2346   	ld hl,xpix
04100C AF          2347   	xor a
04100D 77          2348   	ld (hl),a
04100E 21 50 14 04 2349   	ld hl,ypix
041012 77          2350   	ld (hl),a
041013             2351   
041013             2352   ls_exit:
041013 CD 8D 13 04 2353   	call fn_show_spr_descr
041017 CD 48 13 04 2354   	call fn_change_frames_count
04101B C9          2355   	ret
04101C             2356   
04101C             2357   ls_file_error:
04101C CD 75 12 04 2358   	call fn_print_file_error
041020             2359   
041020             2360   	; set path to home
041020 21 E0 14 04 2361   	ld hl,back_path
041024             2362   	moscall mos_cd
041024 3E 03       0001M  		LD	A, function
041026 49 CF       0002M  		RST.LIS	08h
041028             2363   
041028             2364   	; exit on error
041028 FE 00       2365   	cp 0
04102A C2 EE 0F 04 2366   	jp nz,ls_folder_error
04102E             2367   
04102E C9          2368   	ret
04102F             2369   
04102F             2370   ; save a sprite, giving its name
04102F             2371   fn_save_sprite:
04102F             2372   	; clear filename on the screen
04102F 21 CB 14 04 2373   	ld hl,filename
041033 06 0C       2374   	ld b,12
041035 AF          2375   	xor a
041036             2376   
041036             2377   ss_clear_filename:
041036 77          2378   	ld (hl),a
041037 23          2379   	inc hl
041038 10 FC       2380   	djnz ss_clear_filename
04103A             2381   
04103A             2382   	; get filename
04103A CD F7 0D 04 2383   	call fn_input_text8
04103E             2384   
04103E             2385   	; set path to sprite path
04103E 21 D8 14 04 2386   	ld hl,sprite_path
041042             2387   	moscall mos_cd
041042 3E 03       0001M  		LD	A, function
041044 49 CF       0002M  		RST.LIS	08h
041046             2388   
041046             2389   	; create it on error
041046 FE 00       2390   	cp 0
041048 F5          2391   	push af
041049 C4 22 14 04 2392   	call nz,fn_create_sprite_folder
04104D F1          2393   	pop af
04104E 28 08       2394   	jr z,ss_next
041050             2395   
041050             2396   	; set path to sprite path
041050 21 D8 14 04 2397   	ld hl,sprite_path
041054             2398   	moscall mos_cd
041054 3E 03       0001M  		LD	A, function
041056 49 CF       0002M  		RST.LIS	08h
041058             2399   
041058             2400   ss_next:
041058             2401   
041058             2402   	; exit on error
041058 FE 00       2403   	cp 0
04105A C2 EA 10 04 2404   	jp nz,ss_folder_error
04105E             2405   
04105E             2406   	; open the file for write
04105E 21 CB 14 04 2407   	ld hl,filename
041062 0E 0A       2408   	ld c,fa_create_always|fa_write
041064             2409   	moscall mos_fopen
041064 3E 0A       0001M  		LD	A, function
041066 49 CF       0002M  		RST.LIS	08h
041068             2410   
041068             2411   	; exit on error
041068 FE 00       2412   	cp 0
04106A CA 1B 11 04 2413   	jp z,ss_file_error
04106E             2414   
04106E             2415   	; filehandle -> C
04106E 4F          2416   	ld c,a
04106F             2417   
04106F             2418   	; store colors count in the file
04106F 06 40       2419   	ld b,MAX_COLORS
041071             2420   	moscall mos_fputc
041071 3E 0D       0001M  		LD	A, function
041073 49 CF       0002M  		RST.LIS	08h
041075             2421   
041075             2422   	; store frames count in the file
041075 21 2C 15 04 2423   	ld hl,frames_count
041079 46          2424   	ld b,(hl)
04107A             2425   	moscall mos_fputc
04107A 3E 0D       0001M  		LD	A, function
04107C 49 CF       0002M  		RST.LIS	08h
04107E             2426   
04107E             2427   	; store sprite size in the file
04107E 21 54 14 04 2428   	ld hl,spr_size
041082 46          2429   	ld b,(hl)
041083             2430   	moscall mos_fputc
041083 3E 0D       0001M  		LD	A, function
041085 49 CF       0002M  		RST.LIS	08h
041087             2431   
041087             2432   	; de = size²
041087 21 00 00 00 2433   	ld hl,#000000
04108B 68          2434   	ld l,b
04108C 60          2435   	ld h,b
04108D ED 6C       2436   	mlt hl ; HL = sprite length
04108F E5          2437   	push hl
041090             2438   
041090             2439   	; get frames count
041090 21 2B 15 04 2440   	ld hl,current_frame
041094 46          2441   	ld b,(hl)
041095             2442   
041095 E1          2443   	pop hl
041096             2444   
041096 78          2445   	ld a,b
041097 FE 00       2446   	cp 0
041099 28 07       2447   	jr z,ss_write_data
04109B             2448   
04109B 11 00 04 00 2449   	ld de,ONE_FRAME_BUFFER_SIZE
04109F             2450   ss_add_length:
04109F 19          2451   	add hl,de
0410A0 10 FD       2452   	djnz ss_add_length
0410A2             2453   
0410A2             2454   ss_write_data:
0410A2 E5          2455   	push hl
0410A3 E5          2456   	push hl
0410A4 D1          2457   	pop de
0410A5 21 34 15 04 2458   	ld hl,sprite_buffer
0410A9             2459   	moscall mos_fwrite
0410A9 3E 1B       0001M  		LD	A, function
0410AB 49 CF       0002M  		RST.LIS	08h
0410AD E1          2460   	pop hl
0410AE 7C          2461   	ld a,h
0410AF BA          2462   	cp d
0410B0 20 08       2463   	jr nz,ss_close_error
0410B2 7D          2464   	ld a,l
0410B3 BB          2465   	cp e
0410B4 20 04       2466   	jr nz,ss_close_error
0410B6 C3 F2 10 04 2467   	jp ss_close
0410BA             2468   
0410BA             2469   ss_close_error:
0410BA C5          2470   	push bc
0410BB             2471   
0410BB             2472   	; write error
0410BB CD 75 12 04 2473   	call fn_print_file_error
0410BF             2474   
0410BF C1          2475   	pop bc
0410C0             2476   
0410C0             2477   	; close the file
0410C0             2478   	moscall mos_fclose
0410C0 3E 0B       0001M  		LD	A, function
0410C2 49 CF       0002M  		RST.LIS	08h
0410C4             2479   
0410C4             2480   	; set path to home
0410C4 21 E0 14 04 2481   	ld hl,back_path
0410C8             2482   	moscall mos_cd
0410C8 3E 03       0001M  		LD	A, function
0410CA 49 CF       0002M  		RST.LIS	08h
0410CC             2483   
0410CC             2484   	; exit on error
0410CC FE 00       2485   	cp 0
0410CE C2 EA 10 04 2486   	jp nz,ss_folder_error
0410D2             2487   
0410D2             2488   	; reset current frame and coordinates of the drawing pixel
0410D2 21 2C 15 04 2489   	ld hl,frames_count
0410D6 7E          2490   	ld a,(hl)
0410D7 3D          2491   	dec a
0410D8 21 2B 15 04 2492   	ld hl,current_frame
0410DC 77          2493   	ld (hl),a
0410DD 21 4F 14 04 2494   	ld hl,xpix
0410E1 AF          2495   	xor a
0410E2 77          2496   	ld (hl),a
0410E3 21 50 14 04 2497   	ld hl,ypix
0410E7 77          2498   	ld (hl),a
0410E8 18 30       2499   	jr ss_exit
0410EA             2500   
0410EA             2501   ss_folder_error:
0410EA             2502   	; write error
0410EA CD AC 12 04 2503   	call fn_print_folder_error
0410EE C3 1A 11 04 2504   	jp ss_exit
0410F2             2505   
0410F2             2506   ss_close:
0410F2             2507   	; close the file
0410F2             2508   	moscall mos_fclose
0410F2 3E 0B       0001M  		LD	A, function
0410F4 49 CF       0002M  		RST.LIS	08h
0410F6             2509   
0410F6             2510   	; set path to home
0410F6 21 E0 14 04 2511   	ld hl,back_path
0410FA             2512   	moscall mos_cd
0410FA 3E 03       0001M  		LD	A, function
0410FC 49 CF       0002M  		RST.LIS	08h
0410FE             2513   
0410FE             2514   	; exit on error
0410FE FE 00       2515   	cp 0
041100 C2 EA 10 04 2516   	jp nz,ss_folder_error
041104             2517   
041104             2518   	; reset current frame and coordinates of the drawing pixel
041104 21 2C 15 04 2519   	ld hl,frames_count
041108 7E          2520   	ld a,(hl)
041109 3D          2521   	dec a
04110A 21 2B 15 04 2522   	ld hl,current_frame
04110E 77          2523   	ld (hl),a
04110F 21 4F 14 04 2524   	ld hl,xpix
041113 AF          2525   	xor a
041114 77          2526   	ld (hl),a
041115 21 50 14 04 2527   	ld hl,ypix
041119 77          2528   	ld (hl),a
04111A             2529   
04111A             2530   ss_exit:
04111A C9          2531   	ret
04111B             2532   
04111B             2533   ss_file_error:
04111B CD 75 12 04 2534   	call fn_print_file_error
04111F             2535   
04111F             2536   	; set path to home
04111F 21 E0 14 04 2537   	ld hl,back_path
041123             2538   	moscall mos_cd
041123 3E 03       0001M  		LD	A, function
041125 49 CF       0002M  		RST.LIS	08h
041127             2539   
041127             2540   	; exit on error
041127 FE 00       2541   	cp 0
041129 C2 EA 10 04 2542   	jp nz,ss_folder_error
04112D C9          2543   	ret
04112E             2544   
04112E             2545   ; export sprite data in assembly language, giving its name
04112E             2546   fn_export_sprite:
04112E             2547   	; clear filename
04112E 21 CB 14 04 2548   	ld hl,filename
041132 06 0C       2549   	ld b,12
041134 AF          2550   	xor a
041135             2551   
041135             2552   es_clear_filename:
041135 77          2553   	ld (hl),a
041136 23          2554   	inc hl
041137 10 FC       2555   	djnz es_clear_filename
041139             2556   
041139             2557   	; get filename
041139 CD F7 0D 04 2558   	call fn_input_text8
04113D             2559   
04113D             2560   	; set path to sprite path
04113D 21 D8 14 04 2561   	ld hl,sprite_path
041141             2562   	moscall mos_cd
041141 3E 03       0001M  		LD	A, function
041143 49 CF       0002M  		RST.LIS	08h
041145             2563   
041145             2564   	; create it on error
041145 FE 00       2565   	cp 0
041147 F5          2566   	push af
041148 C4 22 14 04 2567   	call nz,fn_create_sprite_folder
04114C F1          2568   	pop af
04114D 28 0E       2569   	jr z,es_next
04114F             2570   
04114F             2571   	; set path to sprite path
04114F 21 D8 14 04 2572   	ld hl,sprite_path
041153             2573   	moscall mos_cd
041153 3E 03       0001M  		LD	A, function
041155 49 CF       0002M  		RST.LIS	08h
041157             2574   
041157             2575   	; exit on error
041157 FE 00       2576   	cp 0
041159 C2 59 12 04 2577   	jp nz,es_folder_error
04115D             2578   
04115D             2579   es_next:
04115D             2580   	; open the file for write
04115D 21 CB 14 04 2581   	ld hl,filename
041161 0E 0A       2582   	ld c,fa_create_always|fa_write
041163             2583   	moscall mos_fopen
041163 3E 0A       0001M  		LD	A, function
041165 49 CF       0002M  		RST.LIS	08h
041167             2584   
041167             2585   	; exit on error
041167 FE 00       2586   	cp 0
041169 CA 62 12 04 2587   	jp z,es_file_error
04116D             2588   
04116D             2589   	; filehandle -> C
04116D 4F          2590   	ld c,a
04116E             2591   
04116E             2592   
04116E             2593   	; L = first frame
04116E 3E 00       2594   	ld a,0
041170 21 34 15 04 2595   	ld hl,sprite_buffer
041174 11 00 00 00 2596   	ld de,$000000
041178             2597   
041178             2598   es_frames_repeat:
041178 F5          2599   	push af
041179 E5          2600   	push hl
04117A             2601   
04117A F5          2602   	push af
04117B             2603   
04117B             2604   	; start to write...
04117B 1E 00       2605   	ld e,0 ; rows
04117D             2606   
04117D 06 3B       2607   	ld b,';'
04117F             2608   	moscall mos_fputc
04117F 3E 0D       0001M  		LD	A, function
041181 49 CF       0002M  		RST.LIS	08h
041183             2609   
041183 06 20       2610   	ld b,' '
041185             2611   	moscall mos_fputc
041185 3E 0D       0001M  		LD	A, function
041187 49 CF       0002M  		RST.LIS	08h
041189             2612   
041189 06 46       2613   	ld b,'F'
04118B             2614   	moscall mos_fputc
04118B 3E 0D       0001M  		LD	A, function
04118D 49 CF       0002M  		RST.LIS	08h
04118F             2615   
04118F 06 72       2616   	ld b,'r'
041191             2617   	moscall mos_fputc
041191 3E 0D       0001M  		LD	A, function
041193 49 CF       0002M  		RST.LIS	08h
041195             2618   
041195 06 6D       2619   	ld b,'m'
041197             2620   	moscall mos_fputc
041197 3E 0D       0001M  		LD	A, function
041199 49 CF       0002M  		RST.LIS	08h
04119B             2621   
04119B 06 20       2622   	ld b,' '
04119D             2623   	moscall mos_fputc
04119D 3E 0D       0001M  		LD	A, function
04119F 49 CF       0002M  		RST.LIS	08h
0411A1             2624   
0411A1 F1          2625   	pop af
0411A2 C6 30       2626   	add a,'0'
0411A4 47          2627   	ld b,a
0411A5             2628   	moscall mos_fputc
0411A5 3E 0D       0001M  		LD	A, function
0411A7 49 CF       0002M  		RST.LIS	08h
0411A9             2629   
0411A9 06 0D       2630   	ld b,13
0411AB             2631   	moscall mos_fputc
0411AB 3E 0D       0001M  		LD	A, function
0411AD 49 CF       0002M  		RST.LIS	08h
0411AF             2632   
0411AF 06 0A       2633   	ld b,10
0411B1             2634   	moscall mos_fputc
0411B1 3E 0D       0001M  		LD	A, function
0411B3 49 CF       0002M  		RST.LIS	08h
0411B5             2635   
0411B5             2636   es_repeat:
0411B5             2637   
0411B5 06 44       2638   	ld b,'D'
0411B7             2639   	moscall mos_fputc
0411B7 3E 0D       0001M  		LD	A, function
0411B9 49 CF       0002M  		RST.LIS	08h
0411BB             2640   
0411BB 06 42       2641   	ld b,'B'
0411BD             2642   	moscall mos_fputc
0411BD 3E 0D       0001M  		LD	A, function
0411BF 49 CF       0002M  		RST.LIS	08h
0411C1             2643   
0411C1 06 20       2644   	ld b,' '
0411C3             2645   	moscall mos_fputc
0411C3 3E 0D       0001M  		LD	A, function
0411C5 49 CF       0002M  		RST.LIS	08h
0411C7             2646   
0411C7 16 00       2647   	ld d,0 ; columns
0411C9             2648   
0411C9             2649   es_repeat_line:
0411C9 D5          2650   	push de
0411CA             2651   
0411CA 7E          2652   	ld a,(hl)
0411CB 23          2653   	inc hl
0411CC             2654   
0411CC             2655   	; convert A to BCD
0411CC CD 32 14 04 2656   	call fn_hex2bcd
0411D0             2657   
0411D0             2658   	; write two numbers (chars)
0411D0 5F          2659   	ld e,a
0411D1 E6 F0       2660   	and $f0
0411D3 0F          2661   	rrca
0411D4 0F          2662   	rrca
0411D5 0F          2663   	rrca
0411D6 0F          2664   	rrca
0411D7 C6 30       2665   	add '0'
0411D9             2666   
0411D9 47          2667   	ld b,a
0411DA             2668   	moscall mos_fputc
0411DA 3E 0D       0001M  		LD	A, function
0411DC 49 CF       0002M  		RST.LIS	08h
0411DE             2669   
0411DE 7B          2670   	ld a,e
0411DF E6 0F       2671   	and $0f
0411E1 C6 30       2672   	add '0'
0411E3             2673   
0411E3 47          2674   	ld b,a
0411E4             2675   	moscall mos_fputc
0411E4 3E 0D       0001M  		LD	A, function
0411E6 49 CF       0002M  		RST.LIS	08h
0411E8             2676   
0411E8 D1          2677   	pop de
0411E9 14          2678   	inc d
0411EA 3A 54 14 04 2679   	ld a,(spr_size)
0411EE BA          2680   	cp d
0411EF F5          2681   	push af
0411F0 C4 2B 14 04 2682   	call nz,fn_comma
0411F4 F1          2683   	pop af
0411F5 C2 C9 11 04 2684   	jp nz,es_repeat_line
0411F9             2685   
0411F9 06 0D       2686   	ld b,13 ; CR
0411FB             2687   	moscall mos_fputc
0411FB 3E 0D       0001M  		LD	A, function
0411FD 49 CF       0002M  		RST.LIS	08h
0411FF             2688   
0411FF 06 0A       2689   	ld b,10 ; LF
041201             2690   	moscall mos_fputc
041201 3E 0D       0001M  		LD	A, function
041203 49 CF       0002M  		RST.LIS	08h
041205             2691   
041205 1C          2692   	inc e
041206 3A 54 14 04 2693   	ld a,(spr_size)
04120A BB          2694   	cp e
04120B C2 B5 11 04 2695   	jp nz,es_repeat
04120F             2696   
04120F 06 0D       2697   	ld b,13 ; CR
041211             2698   	moscall mos_fputc
041211 3E 0D       0001M  		LD	A, function
041213 49 CF       0002M  		RST.LIS	08h
041215             2699   
041215 06 0A       2700   	ld b,10 ; LF
041217             2701   	moscall mos_fputc
041217 3E 0D       0001M  		LD	A, function
041219 49 CF       0002M  		RST.LIS	08h
04121B             2702   
04121B E1          2703   	pop hl
04121C D5          2704   	push de
04121D ED 5C       2705   	mlt de
04121F 19          2706   	add hl,de
041220 D1          2707   	pop de
041221 F1          2708   	pop af
041222 3C          2709   	inc a
041223 DD 21 2C 15 2710   	ld ix,frames_count
       04          
041228 DD BE 00    2711   	cp (ix+0)
04122B C2 78 11 04 2712   	jp nz,es_frames_repeat
04122F             2713   
04122F             2714   	; close the file
04122F             2715   	moscall mos_fclose
04122F 3E 0B       0001M  		LD	A, function
041231 49 CF       0002M  		RST.LIS	08h
041233             2716   
041233             2717   	; set path to home
041233 21 E0 14 04 2718   	ld hl,back_path
041237             2719   	moscall mos_cd
041237 3E 03       0001M  		LD	A, function
041239 49 CF       0002M  		RST.LIS	08h
04123B             2720   
04123B             2721   	; exit on error
04123B FE 00       2722   	cp 0
04123D C2 59 12 04 2723   	jp nz,es_folder_error
041241             2724   
041241             2725   	; reset current frame and coordinates of the drawing pixel
041241 21 2C 15 04 2726   	ld hl,frames_count
041245 7E          2727   	ld a,(hl)
041246 3D          2728   	dec a
041247 21 2B 15 04 2729   	ld hl,current_frame
04124B 77          2730   	ld (hl),a
04124C 21 4F 14 04 2731   	ld hl,xpix
041250 AF          2732   	xor a
041251 77          2733   	ld (hl),a
041252 21 50 14 04 2734   	ld hl,ypix
041256 77          2735   	ld (hl),a
041257 18 08       2736   	jr es_exit
041259             2737   
041259             2738   es_folder_error:
041259             2739   	; write error
041259 CD AC 12 04 2740   	call fn_print_folder_error
04125D C3 61 12 04 2741   	jp es_exit
041261             2742   
041261             2743   es_exit:
041261 C9          2744   	ret
041262             2745   
041262             2746   es_file_error:
041262 CD 75 12 04 2747   	call fn_print_file_error
041266             2748   
041266             2749   	; set path to home
041266 21 E0 14 04 2750   	ld hl,back_path
04126A             2751   	moscall mos_cd
04126A 3E 03       0001M  		LD	A, function
04126C 49 CF       0002M  		RST.LIS	08h
04126E             2752   
04126E             2753   	; exit on error
04126E FE 00       2754   	cp 0
041270 C2 59 12 04 2755   	jp nz,es_folder_error
041274 C9          2756   	ret
041275             2757   
041275             2758   ; print 'file error'
041275             2759   fn_print_file_error:
041275             2760   	vdu 7
041275 3E 07       0001M  		LD	A, function
041277 49 D7       0002M  		RST.LIS	10h
041279             2761   
041279             2762   	; locate x,y
041279             2763   	vdu 31
041279 3E 1F       0001M  		LD	A, function
04127B 49 D7       0002M  		RST.LIS	10h
04127D             2764   	vdu FILENAME_X
04127D 3E 07       0001M  		LD	A, function
04127F 49 D7       0002M  		RST.LIS	10h
041281             2765   	vdu FILENAME_Y
041281 3E 18       0001M  		LD	A, function
041283 49 D7       0002M  		RST.LIS	10h
041285             2766   
041285             2767   	; print text
041285 21 FC 14 04 2768   	ld hl,file_error
041289 01 00 00 00 2769   	ld bc,0
04128D AF          2770   	xor a
04128E 49 DF       2771   	rst.lis $18
041290             2772   
041290 CD F0 0D 04 2773   	call fn_input_key
041294             2774   
041294             2775   	; locate x,y
041294             2776   	vdu 31
041294 3E 1F       0001M  		LD	A, function
041296 49 D7       0002M  		RST.LIS	10h
041298             2777   	vdu FILENAME_X
041298 3E 07       0001M  		LD	A, function
04129A 49 D7       0002M  		RST.LIS	10h
04129C             2778   	vdu FILENAME_Y
04129C 3E 18       0001M  		LD	A, function
04129E 49 D7       0002M  		RST.LIS	10h
0412A0             2779   
0412A0             2780   	; print text
0412A0 21 E5 14 04 2781   	ld hl,void_filename
0412A4 01 00 00 00 2782   	ld bc,0
0412A8 AF          2783   	xor a
0412A9 49 DF       2784   	rst.lis $18
0412AB             2785   
0412AB C9          2786   	ret
0412AC             2787   
0412AC             2788   ; print 'folder error'
0412AC             2789   fn_print_folder_error:
0412AC             2790   	vdu 7
0412AC 3E 07       0001M  		LD	A, function
0412AE 49 D7       0002M  		RST.LIS	10h
0412B0             2791   
0412B0             2792   	; locate x,y
0412B0             2793   	vdu 31
0412B0 3E 1F       0001M  		LD	A, function
0412B2 49 D7       0002M  		RST.LIS	10h
0412B4             2794   	vdu FILENAME_X
0412B4 3E 07       0001M  		LD	A, function
0412B6 49 D7       0002M  		RST.LIS	10h
0412B8             2795   	vdu FILENAME_Y
0412B8 3E 18       0001M  		LD	A, function
0412BA 49 D7       0002M  		RST.LIS	10h
0412BC             2796   
0412BC             2797   	; print text
0412BC 21 13 15 04 2798   	ld hl,folder_error
0412C0 01 00 00 00 2799   	ld bc,0
0412C4 AF          2800   	xor a
0412C5 49 DF       2801   	rst.lis $18
0412C7             2802   
0412C7 CD F0 0D 04 2803   	call fn_input_key
0412CB             2804   
0412CB             2805   	; locate x,y
0412CB             2806   	vdu 31
0412CB 3E 1F       0001M  		LD	A, function
0412CD 49 D7       0002M  		RST.LIS	10h
0412CF             2807   	vdu FILENAME_X
0412CF 3E 07       0001M  		LD	A, function
0412D1 49 D7       0002M  		RST.LIS	10h
0412D3             2808   	vdu FILENAME_Y
0412D3 3E 18       0001M  		LD	A, function
0412D5 49 D7       0002M  		RST.LIS	10h
0412D7             2809   
0412D7             2810   	; print text
0412D7 21 E5 14 04 2811   	ld hl,void_filename
0412DB 01 00 00 00 2812   	ld bc,0
0412DF AF          2813   	xor a
0412E0 49 DF       2814   	rst.lis $18
0412E2             2815   
0412E2 C9          2816   	ret
0412E3             2817   
0412E3             2818   ; refresh all the current sprite frame
0412E3             2819   fn_refresh_sprite:
0412E3 06 00       2820   	ld b,0 ; B -> x cordinate
0412E5 0E 00       2821   	ld c,0 ; C -> y cordinate
0412E7             2822   
0412E7             2823   rs_loop:
0412E7 C5          2824   	push bc
0412E8             2825   
0412E8 21 4F 14 04 2826   	ld hl,xpix
0412EC 70          2827   	ld (hl),b
0412ED 21 50 14 04 2828   	ld hl,ypix
0412F1 71          2829   	ld (hl),c
0412F2 CD 82 0C 04 2830   	call fn_draw_pixel_without_border
0412F6             2831   
0412F6 C1          2832   	pop bc
0412F7             2833   
0412F7 04          2834   	inc b
0412F8 21 54 14 04 2835   	ld hl,spr_size
0412FC 7E          2836   	ld a,(hl)
0412FD B8          2837   	cp b
0412FE 28 04       2838   	jr z,rs_next_line
041300 C3 E7 12 04 2839   	jp rs_loop
041304             2840   
041304             2841   rs_next_line:
041304 06 00       2842   	ld b,0
041306 0C          2843   	inc c
041307 21 54 14 04 2844   	ld hl,spr_size
04130B 7E          2845   	ld a,(hl)
04130C B9          2846   	cp c
04130D 28 04       2847   	jr z,rs_end
04130F C3 E7 12 04 2848   	jp rs_loop
041313             2849   
041313             2850   rs_end:
041313 AF          2851   	xor a
041314 21 4F 14 04 2852   	ld hl,xpix
041318 77          2853   	ld (hl),a
041319 21 50 14 04 2854   	ld hl,ypix
04131D 77          2855   	ld (hl),a
04131E CD 6E 0C 04 2856   	call fn_draw_pixel_with_border
041322             2857   
041322 C9          2858   	ret
041323             2859   
041323             2860   fn_change_frame:
041323 21 2B 15 04 2861   	ld hl,current_frame
041327 7E          2862   	ld a,(hl)
041328 3C          2863   	inc a
041329 C6 30       2864   	add a,48
04132B 21 2D 15 04 2865   	ld hl,current_frame_ascii
04132F 77          2866   	ld (hl),a
041330             2867   
041330             2868   	; locate 21,3
041330             2869   	vdu 31
041330 3E 1F       0001M  		LD	A, function
041332 49 D7       0002M  		RST.LIS	10h
041334             2870   	vdu 21
041334 3E 15       0001M  		LD	A, function
041336 49 D7       0002M  		RST.LIS	10h
041338             2871   	vdu 3
041338 3E 03       0001M  		LD	A, function
04133A 49 D7       0002M  		RST.LIS	10h
04133C             2872   
04133C             2873   	; print text
04133C 21 2D 15 04 2874   	ld hl,current_frame_ascii
041340 01 00 00 00 2875   	ld bc,0
041344 AF          2876   	xor a
041345 49 DF       2877   	rst.lis $18
041347             2878   
041347 C9          2879   	ret
041348             2880   
041348             2881   fn_change_frames_count:
041348 21 2C 15 04 2882   	ld hl,frames_count
04134C 7E          2883   	ld a,(hl)
04134D C6 30       2884   	add a,48
04134F 21 2F 15 04 2885   	ld hl,frames_count_ascii
041353 77          2886   	ld (hl),a
041354             2887   
041354             2888   	; locate 23,3
041354             2889   	vdu 31
041354 3E 1F       0001M  		LD	A, function
041356 49 D7       0002M  		RST.LIS	10h
041358             2890   	vdu 23
041358 3E 17       0001M  		LD	A, function
04135A 49 D7       0002M  		RST.LIS	10h
04135C             2891   	vdu 3
04135C 3E 03       0001M  		LD	A, function
04135E 49 D7       0002M  		RST.LIS	10h
041360             2892   
041360             2893   	; print text
041360 21 2F 15 04 2894   	ld hl,frames_count_ascii
041364 01 00 00 00 2895   	ld bc,0
041368 AF          2896   	xor a
041369 49 DF       2897   	rst.lis $18
04136B             2898   
04136B C9          2899   	ret
04136C             2900   
04136C             2901   ; slowdown (wait delay)
04136C             2902   fn_slowdown:
04136C DD 21 31 15 2903   	ld ix,keydata
       04          
041371 DD 7E 02    2904   	ld a,(ix+2)
041374 E6 02       2905   	and 2
041376 FE 02       2906   	cp 2 ; shift key to disable delay
041378 C8          2907   	ret z
041379             2908   
041379             2909   	moscall mos_sysvars
041379 3E 08       0001M  		LD	A, function
04137B 49 CF       0002M  		RST.LIS	08h
04137D DD 4E 00    2910   	ld c,(ix+sysvar_time)
041380             2911   
041380             2912   sd_loop:
041380             2913   	moscall mos_sysvars
041380 3E 08       0001M  		LD	A, function
041382 49 CF       0002M  		RST.LIS	08h
041384 DD 7E 00    2914   	ld a,(ix+sysvar_time)
041387 91          2915   	sub c
041388 FE 14       2916   	cp SLOWDOWN_DELAY
04138A 20 F4       2917   	jr nz,sd_loop
04138C C9          2918   	ret
04138D             2919   
04138D             2920   fn_show_spr_descr:
04138D             2921   	; locate 15,3
04138D             2922   	vdu 31
04138D 3E 1F       0001M  		LD	A, function
04138F 49 D7       0002M  		RST.LIS	10h
041391             2923   	vdu 15
041391 3E 0F       0001M  		LD	A, function
041393 49 D7       0002M  		RST.LIS	10h
041395             2924   	vdu 3
041395 3E 03       0001M  		LD	A, function
041397 49 D7       0002M  		RST.LIS	10h
041399             2925   
041399             2926   	; print text
041399 21 9F 14 04 2927   	ld hl,spr_descr
04139D 01 00 00 00 2928   	ld bc,0
0413A1 AF          2929   	xor a
0413A2 49 DF       2930   	rst.lis $18
0413A4             2931   
0413A4             2932   	; locate 15,5
0413A4             2933   	vdu 31
0413A4 3E 1F       0001M  		LD	A, function
0413A6 49 D7       0002M  		RST.LIS	10h
0413A8             2934   	vdu 15
0413A8 3E 0F       0001M  		LD	A, function
0413AA 49 D7       0002M  		RST.LIS	10h
0413AC             2935   	vdu 5
0413AC 3E 05       0001M  		LD	A, function
0413AE 49 D7       0002M  		RST.LIS	10h
0413B0             2936   
0413B0             2937   	; check for sprite size...
0413B0 21 54 14 04 2938   	ld hl,spr_size
0413B4 7E          2939   	ld a,(hl)
0413B5             2940   
0413B5 FE 04       2941   	cp 4
0413B7 20 0C       2942   	jr nz,ssd_8x8
0413B9             2943   
0413B9             2944   	; print text 4x4
0413B9 21 A9 14 04 2945   	ld hl,spr_descr1
0413BD 01 00 00 00 2946   	ld bc,0
0413C1 AF          2947   	xor a
0413C2 49 DF       2948   	rst.lis $18
0413C4 C9          2949   	ret
0413C5             2950   
0413C5             2951   ssd_8x8:
0413C5 FE 08       2952   	cp 8
0413C7 20 0C       2953   	jr nz,ssd_16x16
0413C9             2954   
0413C9             2955   	; print text 8x8
0413C9 21 AF 14 04 2956   	ld hl,spr_descr2
0413CD 01 00 00 00 2957   	ld bc,0
0413D1 AF          2958   	xor a
0413D2 49 DF       2959   	rst.lis $18
0413D4 C9          2960   	ret
0413D5             2961   
0413D5             2962   ssd_16x16:
0413D5 FE 10       2963   	cp 16
0413D7 20 0C       2964   	jr nz,ssd_32x32
0413D9             2965   
0413D9             2966   	; print text 16x16
0413D9 21 B5 14 04 2967   	ld hl,spr_descr3
0413DD 01 00 00 00 2968   	ld bc,0
0413E1 AF          2969   	xor a
0413E2 49 DF       2970   	rst.lis $18
0413E4 C9          2971   	ret
0413E5             2972   
0413E5             2973   ssd_32x32:
0413E5             2974   	; print text 32x32
0413E5 21 BB 14 04 2975   	ld hl,spr_descr4
0413E9 01 00 00 00 2976   	ld bc,0
0413ED AF          2977   	xor a
0413EE 49 DF       2978   	rst.lis $18
0413F0             2979   
0413F0 C9          2980   	ret
0413F1             2981   
0413F1             2982   ; input: HL = negative key to check
0413F1             2983   fn_inkey:
0413F1             2984   	moscall mos_getkbmap
0413F1 3E 1E       0001M  		LD	A, function
0413F3 49 CF       0002M  		RST.LIS	08h
0413F5 23          2985   	INC	HL
0413F6 7D          2986   	LD	A, L
0413F7 ED 44       2987   	NEG
0413F9 4F          2988   	LD	C, A
0413FA 3E 01       2989   	LD	A, 1
0413FC FA 20 14 04 2990   	JP	M,i_false ; < -128 ?
041400             2991   
041400 21 45 00 04 2992   	LD	HL,BITLOOKUP
041404 11 00 00 00 2993   	LD	DE,0
041408 79          2994   	LD	A,C
041409 E6 07       2995   	AND	00000111b
04140B 5F          2996   	LD	E,A
04140C 19          2997   	ADD	HL,DE
04140D 46          2998   	LD	B,(HL)
04140E             2999   
04140E 79          3000   	LD	A,C
04140F E6 78       3001   	AND	01111000b
041411 0F          3002   	RRCA
041412 0F          3003   	RRCA
041413 0F          3004   	RRCA
041414 5F          3005   	LD	E, A
041415 DD 19       3006   	ADD	IX,DE
041417 DD 7E 00    3007   	LD	A,(IX+0)
04141A A0          3008   	AND	B
04141B 28 03       3009   	JR Z,i_false
04141D 3E 01       3010   	LD A,1
04141F C9          3011   	RET
041420             3012   i_false:
041420 AF          3013   	XOR A
041421 C9          3014   	RET
041422             3015   
041422             3016   fn_create_sprite_folder:
041422 21 D8 14 04 3017   	ld hl,sprite_path
041426             3018   	moscall mos_mkdir
041426 3E 07       0001M  		LD	A, function
041428 49 CF       0002M  		RST.LIS	08h
04142A C9          3019   	ret
04142B             3020   
04142B             3021   fn_comma:
04142B 06 2C       3022   	ld b,','
04142D             3023   	moscall mos_fputc
04142D 3E 0D       0001M  		LD	A, function
04142F 49 CF       0002M  		RST.LIS	08h
041431 C9          3024   	ret
041432             3025   
041432             3026   ; Hex to BCD
041432             3027   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
041432             3028   ; Input: a = hex number
041432             3029   ; Output: a = BCD number
041432             3030   ; Clobbers: b,c
041432             3031   fn_hex2bcd:
041432 C5          3032   		push bc
041433 4F          3033   		ld c,a  ; Original (hex) number
041434 06 08       3034   		ld b,8  ; How many bits
041436 AF          3035   		xor a   ; Output (BCD) number, starts at 0
041437 CB 21       3036   htb:	sla c   ; shift c into carry
041439 8F          3037   		adc a,a
04143A 27          3038   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
04143B 10 FA       3039   		djnz htb  ; Repeat for 8 bits
04143D C1          3040   		pop bc
04143E C9          3041   		ret
04143F             3042   
04143F             3043   ;======================================================================
04143F             3044   
04143F             3045   ; coordinates for rectangles
04143F             3046   x1:
04143F 00 00       3047   	dw $0000
041441             3048   y1:
041441 00 00       3049   	dw $0000
041443             3050   x2:
041443 00 00       3051   	dw $0000
041445             3052   y2:
041445 00 00       3053   	dw $0000
041447             3054   
041447             3055   ; coordinates of the edited sprite
041447             3056   xs1:
041447 5F 00       3057   	dw 95
041449             3058   ys1:
041449 37 00       3059   	dw 55
04144B             3060   xs2:
04144B E0 00       3061   	dw 224
04144D             3062   ys2:
04144D B8 00       3063   	dw 184
04144F             3064   
04144F             3065   ; coordinates of active pixels to draw
04144F             3066   xpix:
04144F 00          3067   	db 0
041450             3068   ypix:
041450 00          3069   	db 0
041451             3070   
041451             3071   ; memorized coordinates of active pixels to draw
041451             3072   memxpix:
041451 00          3073   	db 0
041452             3074   memypix:
041452 00          3075   	db 0
041453             3076   
041453             3077   ; width of a pixel in the sprite
041453             3078   pixel_width:
041453 00          3079   	db 0
041454             3080   
041454             3081   ; sprite size, in resized pixels
041454             3082   spr_size:
041454 00          3083   	db 0
041455             3084   
041455             3085   ; pen color (0-63)
041455             3086   current_pen:
041455 00          3087   	db 0
041456             3088   
041456             3089   ; texts for 1st menu
041456             3090   title:
041456 53 50 52 2D 3091   	db "SPR-EDIT",0
       45 44 49 54 
       00          
04145F             3092   
04145F             3093   menu1:
04145F 46 31 2E 20 3094   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
04146E             3095   menu2:
04146E 46 32 2E 20 3096   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
04147D             3097   menu3:
04147D 46 33 2E 20 3098   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
04148E             3099   menu4:
04148E 46 34 2E 20 3100   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
04149F             3101   
04149F             3102   ; descriptions of sprites
04149F             3103   spr_descr:
04149F 46 72 61 6D 3104   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
0414A9             3105   spr_descr1:
0414A9 34 78 34 20 3106   	db "4x4  ",0
       20 00       
0414AF             3107   spr_descr2:
0414AF 38 78 38 20 3108   	db "8x8  ",0
       20 00       
0414B5             3109   spr_descr3:
0414B5 31 36 78 31 3110   	db "16x16",0
       36 00       
0414BB             3111   spr_descr4:
0414BB 33 32 78 33 3112   	db "32x32",0
       32 00       
0414C1             3113   
0414C1             3114   ; label before filename
0414C1             3115   filename_label:
0414C1 46 69 6C 65 3116   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
0414CB             3117   
0414CB             3118   ; filename without extension
0414CB             3119   filename:
0414CB 00 00 00 00 3120   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
0414D8             3121   
0414D8             3122   sprite_path:
0414D8 73 70 72 69 3123   	db "sprites",0
       74 65 73 00 
0414E0             3124   
0414E0             3125   back_path:
0414E0 2E 2E 00    3126   	db "..",0
0414E3             3127   
0414E3             3128   ; single space char to print
0414E3             3129   spacechar:
0414E3 20 00       3130   	db " ",0
0414E5             3131   
0414E5             3132   ; spaces to remove filename label
0414E5             3133   void_filename:
0414E5 20 20 20 20 3134   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0414FC             3135   
0414FC             3136   ; file error message
0414FC             3137   file_error:
0414FC 46 69 6C 65 3138   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
041513             3139   
041513             3140   ; folder error message
041513             3141   folder_error:
041513 46 6F 6C 64 3142   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
04152A             3143   
04152A             3144   ; number of colors
04152A             3145   colors_count:
04152A 00          3146   	db 0
04152B             3147   
04152B             3148   ; current frame
04152B             3149   current_frame:
04152B 00          3150   	db 0
04152C             3151   
04152C             3152   ; frames count
04152C             3153   frames_count:
04152C 00          3154   	db 0
04152D             3155   
04152D             3156   current_frame_ascii:
04152D 30 00       3157   	db '0',0
04152F             3158   
04152F             3159   frames_count_ascii:
04152F 30 00       3160   	db '0',0
041531             3161   
041531             3162   ; keycode, keydown & keymods are stored here
041531             3163   keydata:
041531 00 00 00    3164   	db 0,0,0
041534             3165   
041534             3166   ; buffer for the current sprite
041534             3167   sprite_buffer:
041534             3168   	ds BUFFER_SIZE
043534             3169   
043534             3170   ; buffer to perform some operations
043534             3171   swap_sprite_buffer:
043534             3172   	ds ONE_FRAME_BUFFER_SIZE
043934             3173   
043934             3174   asm_line:
043934 44 42 20    3175   	DB "DB "
043937             3176   
043937             3177   asm_line_length:
043937 03          3178   	DB 3
043938             3179   
043938             3180   rgb_palette:
043938 00 00 00    3181   	db $00,$00,$00
04393B AA 00 00    3182   	db $AA,$00,$00
04393E 00 AA 00    3183   	db $00,$AA,$00
043941 AA AA 00    3184   	db $AA,$AA,$00
043944 00 00 AA    3185   	db $00,$00,$AA
043947 AA 00 AA    3186   	db $AA,$00,$AA
04394A 00 AA AA    3187   	db $00,$AA,$AA
04394D AA AA AA    3188   	db $AA,$AA,$AA
043950             3189   
043950 55 55 55    3190   	db $55,$55,$55
043953 FF 00 00    3191   	db $FF,$00,$00
043956 00 FF 00    3192   	db $00,$FF,$00
043959 FF FF 00    3193   	db $FF,$FF,$00
04395C 00 00 FF    3194   	db $00,$00,$FF
04395F FF 00 FF    3195   	db $FF,$00,$FF
043962 00 FF FF    3196   	db $00,$FF,$FF
043965 FF FF FF    3197   	db $FF,$FF,$FF
043968             3198   
043968 00 00 55    3199   	db $00,$00,$55
04396B 00 55 00    3200   	db $00,$55,$00
04396E 00 55 55    3201   	db $00,$55,$55
043971 00 55 AA    3202   	db $00,$55,$AA
043974 00 55 FF    3203   	db $00,$55,$FF
043977 00 AA 55    3204   	db $00,$AA,$55
04397A 00 AA FF    3205   	db $00,$AA,$FF
04397D 00 FF 55    3206   	db $00,$FF,$55
043980             3207   
043980 00 FF AA    3208   	db $00,$FF,$AA
043983 55 00 00    3209   	db $55,$00,$00
043986 55 00 55    3210   	db $55,$00,$55
043989 55 00 AA    3211   	db $55,$00,$AA
04398C 55 00 FF    3212   	db $55,$00,$FF
04398F 55 55 00    3213   	db $55,$55,$00
043992 55 55 AA    3214   	db $55,$55,$AA
043995 55 55 FF    3215   	db $55,$55,$FF
043998             3216   
043998 55 AA 00    3217   	db $55,$AA,$00
04399B 55 AA 55    3218   	db $55,$AA,$55
04399E 55 AA AA    3219   	db $55,$AA,$AA
0439A1 55 AA FF    3220   	db $55,$AA,$FF
0439A4 55 FF 00    3221   	db $55,$FF,$00
0439A7 55 FF 55    3222   	db $55,$FF,$55
0439AA 55 FF AA    3223   	db $55,$FF,$AA
0439AD 55 FF FF    3224   	db $55,$FF,$FF
0439B0             3225   
0439B0 AA 00 55    3226   	db $AA,$00,$55
0439B3 AA 00 FF    3227   	db $AA,$00,$FF
0439B6 AA 55 00    3228   	db $AA,$55,$00
0439B9 AA 55 55    3229   	db $AA,$55,$55
0439BC AA 55 AA    3230   	db $AA,$55,$AA
0439BF AA 55 FF    3231   	db $AA,$55,$FF
0439C2 AA AA 55    3232   	db $AA,$AA,$55
0439C5 AA AA FF    3233   	db $AA,$AA,$FF
0439C8             3234   
0439C8 AA FF 00    3235   	db $AA,$FF,$00
0439CB AA FF 55    3236   	db $AA,$FF,$55
0439CE AA FF AA    3237   	db $AA,$FF,$AA
0439D1 AA FF FF    3238   	db $AA,$FF,$FF
0439D4 FF 00 55    3239   	db $FF,$00,$55
0439D7 FF 00 AA    3240   	db $FF,$00,$AA
0439DA FF 55 00    3241   	db $FF,$55,$00
0439DD FF 55 55    3242   	db $FF,$55,$55
0439E0             3243   
0439E0 FF 55 AA    3244   	db $FF,$55,$AA
0439E3 FF 55 FF    3245   	db $FF,$55,$FF
0439E6 FF AA 00    3246   	db $FF,$AA,$00
0439E9 FF AA 55    3247   	db $FF,$AA,$55
0439EC FF AA AA    3248   	db $FF,$AA,$AA
0439EF FF AA FF    3249   	db $FF,$AA,$FF
0439F2 FF FF 55    3250   	db $FF,$FF,$55
0439F5 FF FF AA    3251   	db $FF,$FF,$AA
0439F8             3252   
0439F8             3253   ; sprite structure:
0439F8             3254   ; =================
0439F8             3255   ; colors_count  :   byte
0439F8             3256   ; frames count	:	byte
0439F8             3257   ; spr size		:	byte
0439F8             3258   ; data			:   width x height bytes of colors
0439F8             3259   
0439F8             3260   
0439F8             3261   ; TODO:
0439F8             3262   ;---------
0439F8             3263   ; add/remove frames must be done correctly
0439F8             3264   ; read animations with 'p' key
0439F8             3265   ; create a help text file with keyboard shorcuts list
0439F8             3266   ; solve the 'copy frame' bug
0439F8             3267   ; solve the bug of frames in fn_load/save sprite
