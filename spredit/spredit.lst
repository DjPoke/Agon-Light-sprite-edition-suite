PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023-2024
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   
040045             0022   MAX_FRAMES:			equ 8
040045             0023   
040045             0024   COLOR_WHITE:		equ 15
040045             0025   COLOR_BLACK:		equ 0
040045             0026   
040045             0027   TITLE_X: 	equ 17
040045             0028   TITLE_Y: 	equ 2
040045             0029   MENU_X: 	equ 13
040045             0030   MENU1_Y: 	equ 8
040045             0031   MENU2_Y: 	equ 12
040045             0032   MENU3_Y: 	equ 16
040045             0033   MENU4_Y: 	equ 20
040045             0034   MENU5_Y: 	equ 24
040045             0035   FILENAME_X: equ 7
040045             0036   FILENAME_Y: equ 24
040045             0037   
040045             0038   SPR44: 		equ 4
040045             0039   SPR88: 		equ 8
040045             0040   SPR1616: 	equ 16
040045             0041   SPR3232: 	equ 32
040045             0042   
040045             0043   SPR44_width: 	equ 32
040045             0044   SPR88_width: 	equ 16
040045             0045   SPR1616_width: 	equ 8
040045             0046   SPR3232_width: 	equ 4
040045             0047   
040045             0048   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0049   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0050   
040045             0051   FILENAME_LENGTH:	equ 16
040045             0052   
040045             0053   HEADER_BUFFER_SIZE:		equ 16
040045             0054   
040045             0055   SLOWDOWN_DELAY:	equ 20
040045             0056   
040045             0057   KEY_SPACE: equ -99 ; draw with color
040045             0058   KEY_UP: equ -58 ; move
040045             0059   KEY_DOWN: equ -42
040045             0060   KEY_LEFT: equ -26
040045             0061   KEY_RIGHT: equ -122
040045             0062   KEY_DELETE: equ -90 ; remove color with black
040045             0063   KEY_N: equ -86 ; add a new void frame
040045             0064   KEY_C: equ -83 ; copy current frame to a new frame
040045             0065   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0066   KEY_PGUP: equ -64 ; select frame
040045             0067   KEY_PGDOWN: equ -79
040045             0068   KEY_L: equ -87 ; load sprite
040045             0069   KEY_S: equ -82 ; save sprite
040045             0070   KEY_E: equ -35 ; export sprite as assembler data
040045             0071   KEY_R: equ -52 ; rotate frame clockwise
040045             0072   KEY_F: equ -68 ; flip frame horizontally
040045             0073   KEY_M: equ -102 ; mirror frame vertically
040045             0074   KEY_ESCAPE: equ -113
040045             0075   KEY_F1: equ -114 ; select 4x4 sprite
040045             0076   KEY_F2: equ -115 ; select 8x8 sprite
040045             0077   KEY_F3: equ -116 ; select 16x16 sprite
040045             0078   KEY_F4: equ -21 ; select 32x32 sprite
040045             0079   KEY_RETURN: equ -74 ; floodfill
040045             0080   
040045             0081   ; play mode:
040045             0082   KEY_P:	equ -56 ; switch to play mode
040045             0083   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0084   
040045             0085   ; palette mode:
040045             0086   KEY_TAB: equ -97 ; switch to palette mode
040045             0087   KEY_1:	equ -49 ; red+
040045             0088   KEY_2:	equ -50 ; green+
040045             0089   KEY_3:	equ -18 ; blue+
040045             0090   KEY_4:	equ -19 ; red-
040045             0091   KEY_5:	equ -20 ; green-
040045             0092   KEY_6:	equ -53; blue-
040045             0093   KEY_7:	equ -37 ; reset color to black
040045             0094   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0095   ; KEY_S: save palette file
040045             0096   
040045             0097   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0098   MAX_PAL_DATA_HI: equ 03h
040045             0099   MAX_PAL_DATA_LO: equ 44h
040045             0100   
040045             0101   BITLOOKUP:
040045 01 02 04 08 0102   	DB 01h,02h,04h,08h
040049 10 20 40 80 0103   	DB 10h,20h,40h,80h
04004D             0104   
04004D             0105   ;======================================================================
04004D             0106   start:
04004D F5          0107   	push af
04004E C5          0108   	push bc
04004F D5          0109   	push de
040050 DD E5       0110   	push ix
040052 FD E5       0111   	push iy
040054             0112   
040054             0113   	; set mode 8 (320x240x64)
040054             0114   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0115   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0116   
04005C             0117   	; disable logical scale coordinates system
04005C             0118   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0119   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0120   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0121   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0122   
04006C             0123   	; set text colors
04006C             0124   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0125   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0126   
040074             0127   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0128   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0129   
04007C             0130   	; set graphics pen
04007C             0131   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0132   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0133   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0134   
040088             0135   	; hide cursor
040088             0136   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0137   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0138   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0139   
040094             0140   	; store coordinates
040094 DD 21 4C 1A 0141   	ld ix,x1
       04          
040099 21 00 00 00 0142   	ld hl,0
04009D DD 75 00    0143   	ld (ix+0),l
0400A0 DD 74 01    0144   	ld (ix+1),h
0400A3             0145   
0400A3 DD 21 4E 1A 0146   	ld ix,y1
       04          
0400A8 21 00 00 00 0147   	ld hl,0
0400AC DD 75 00    0148   	ld (ix+0),l
0400AF DD 74 01    0149   	ld (ix+1),h
0400B2             0150   
0400B2 DD 21 50 1A 0151   	ld ix,x2
       04          
0400B7 21 3F 01 00 0152   	ld hl,319
0400BB DD 75 00    0153   	ld (ix+0),l
0400BE DD 74 01    0154   	ld (ix+1),h
0400C1             0155   
0400C1 DD 21 52 1A 0156   	ld ix,y2
       04          
0400C6 21 EF 00 00 0157   	ld hl,239
0400CA DD 75 00    0158   	ld (ix+0),l
0400CD DD 74 01    0159   	ld (ix+1),h
0400D0             0160   
0400D0             0161   	; draw the border rectangle
0400D0 CD 5E 0C 04 0162   	call fn_rect
0400D4             0163   
0400D4             0164   	; locate x,y
0400D4             0165   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0166   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0167   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0168   
0400E0             0169   	; print text
0400E0 21 63 1A 04 0170   	ld hl,title
0400E4 01 00 00 00 0171   	ld bc,0
0400E8 AF          0172   	xor a
0400E9 49 DF       0173   	rst.lis $18
0400EB             0174   
0400EB             0175   	; locate x,y
0400EB             0176   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0177   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0178   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0179   
0400F7             0180   	; print text
0400F7 21 6C 1A 04 0181   	ld hl,menu1
0400FB 01 00 00 00 0182   	ld bc,0
0400FF AF          0183   	xor a
040100 49 DF       0184   	rst.lis $18
040102             0185   
040102             0186   	; locate x,y
040102             0187   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0188   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0189   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0190   
04010E             0191   	; print text
04010E 21 7B 1A 04 0192   	ld hl,menu2
040112 01 00 00 00 0193   	ld bc,0
040116 AF          0194   	xor a
040117 49 DF       0195   	rst.lis $18
040119             0196   
040119             0197   	; locate x,y
040119             0198   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0199   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0200   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0201   
040125             0202   	; print text
040125 21 8A 1A 04 0203   	ld hl,menu3
040129 01 00 00 00 0204   	ld bc,0
04012D AF          0205   	xor a
04012E 49 DF       0206   	rst.lis $18
040130             0207   
040130             0208   	; locate x,y
040130             0209   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0210   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0211   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0212   
04013C             0213   	; print text
04013C 21 9B 1A 04 0214   	ld hl,menu4
040140 01 00 00 00 0215   	ld bc,0
040144 AF          0216   	xor a
040145 49 DF       0217   	rst.lis $18
040147             0218   
040147             0219   ; menu loop
040147             0220   menu_loop:
040147 21 8F FF FF 0221   	ld hl,KEY_ESCAPE
04014B CD F5 18 04 0222   	call fn_inkey
04014F FE 01       0223   	CP 1
040151 CA 3A 0C 04 0224   	jp z,exit_program
040155             0225   
040155 21 8E FF FF 0226   	ld hl,KEY_F1
040159 CD F5 18 04 0227   	call fn_inkey
04015D FE 01       0228   	CP 1
04015F CA 91 01 04 0229   	jp z,ml_menu1
040163             0230   
040163 21 8D FF FF 0231   	ld hl,KEY_F2
040167 CD F5 18 04 0232   	call fn_inkey
04016B FE 01       0233   	CP 1
04016D CA 97 01 04 0234   	jp z,ml_menu2
040171             0235   
040171 21 8C FF FF 0236   	ld hl,KEY_F3
040175 CD F5 18 04 0237   	call fn_inkey
040179 FE 01       0238   	CP 1
04017B CA 9D 01 04 0239   	jp z,ml_menu3
04017F             0240   
04017F 21 EB FF FF 0241   	ld hl,KEY_F4
040183 CD F5 18 04 0242   	call fn_inkey
040187 FE 01       0243   	CP 1
040189 CA A3 01 04 0244   	jp z,ml_menu4
04018D             0245   
04018D C3 47 01 04 0246   	jp menu_loop
040191             0247   
040191             0248   ml_menu1:
040191 3E 04       0249   	ld a,SPR44
040193 16 20       0250   	ld d,SPR44_width
040195 18 10       0251   	jr exit_menu_loop
040197             0252   
040197             0253   ml_menu2:
040197 3E 08       0254   	ld a,SPR88
040199 16 10       0255   	ld d,SPR88_width
04019B 18 0A       0256   	jr exit_menu_loop
04019D             0257   
04019D             0258   ml_menu3:
04019D 3E 10       0259   	ld a,SPR1616
04019F 16 08       0260   	ld d,SPR1616_width
0401A1 18 04       0261   	jr exit_menu_loop
0401A3             0262   
0401A3             0263   ml_menu4:
0401A3 3E 20       0264   	ld a,SPR3232
0401A5 16 04       0265   	ld d,SPR3232_width
0401A7             0266   
0401A7             0267   exit_menu_loop:
0401A7             0268   	; store edited sprite size
0401A7 21 61 1A 04 0269   	ld hl,spr_size
0401AB 77          0270   	ld (hl),a
0401AC 21 60 1A 04 0271   	ld hl,pixel_width
0401B0 72          0272   	ld (hl),d
0401B1             0273   
0401B1             0274   	; clear the text screen
0401B1             0275   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0276   
0401B5             0277   	; set colors count to max colors
0401B5 21 81 1B 04 0278   	ld hl,colors_count
0401B9 3E 40       0279   	ld a,MAX_COLORS
0401BB 77          0280   	ld (hl),a
0401BC             0281   
0401BC CD 2F 19 04 0282   	call fn_draw_the_palette
0401C0             0283   
0401C0             0284   	; store coordinates
0401C0 DD 21 4C 1A 0285   	ld ix,x1
       04          
0401C5 21 00 00 00 0286   	ld hl,0
0401C9 DD 75 00    0287   	ld (ix+0),l
0401CC DD 74 01    0288   	ld (ix+1),h
0401CF             0289   
0401CF DD 21 4E 1A 0290   	ld ix,y1
       04          
0401D4 21 0B 00 00 0291   	ld hl,11
0401D8 DD 75 00    0292   	ld (ix+0),l
0401DB DD 74 01    0293   	ld (ix+1),h
0401DE             0294   
0401DE DD 21 50 1A 0295   	ld ix,x2
       04          
0401E3 21 3F 01 00 0296   	ld hl,319
0401E7 DD 75 00    0297   	ld (ix+0),l
0401EA DD 74 01    0298   	ld (ix+1),h
0401ED             0299   
0401ED DD 21 52 1A 0300   	ld ix,y2
       04          
0401F2 21 EF 00 00 0301   	ld hl,239
0401F6 DD 75 00    0302   	ld (ix+0),l
0401F9 DD 74 01    0303   	ld (ix+1),h
0401FC             0304   
0401FC             0305   	; draw the border rectangle
0401FC CD 5E 0C 04 0306   	call fn_rect
040200             0307   
040200             0308   	; store edited sprite coordinates
040200 DD 21 54 1A 0309   	ld ix,xs1
       04          
040205 FD 21 4C 1A 0310   	ld iy,x1
       04          
04020A DD 6E 00    0311   	ld l,(ix+0)
04020D DD 66 01    0312   	ld h,(ix+1)
040210 FD 75 00    0313   	ld (iy+0),l
040213 FD 74 01    0314   	ld (iy+1),h
040216             0315   
040216 DD 21 56 1A 0316   	ld ix,ys1
       04          
04021B FD 21 4E 1A 0317   	ld iy,y1
       04          
040220 DD 6E 00    0318   	ld l,(ix+0)
040223 DD 66 01    0319   	ld h,(ix+1)
040226 FD 75 00    0320   	ld (iy+0),l
040229 FD 74 01    0321   	ld (iy+1),h
04022C             0322   
04022C DD 21 58 1A 0323   	ld ix,xs2
       04          
040231 FD 21 50 1A 0324   	ld iy,x2
       04          
040236 DD 6E 00    0325   	ld l,(ix+0)
040239 DD 66 01    0326   	ld h,(ix+1)
04023C FD 75 00    0327   	ld (iy+0),l
04023F FD 74 01    0328   	ld (iy+1),h
040242             0329   
040242 DD 21 5A 1A 0330   	ld ix,ys2
       04          
040247 FD 21 52 1A 0331   	ld iy,y2
       04          
04024C DD 6E 00    0332   	ld l,(ix+0)
04024F DD 66 01    0333   	ld h,(ix+1)
040252 FD 75 00    0334   	ld (iy+0),l
040255 FD 74 01    0335   	ld (iy+1),h
040258             0336   
040258             0337   	; draw the sprite's border rectangle
040258 CD 5E 0C 04 0338   	call fn_rect
04025C             0339   
04025C             0340   	; update sprite size descriptions
04025C CD 91 18 04 0341   	call fn_show_spr_descr
040260             0342   
040260             0343   ; initialize sprite vars
040260             0344   init_sprite_vars:
040260             0345   	; initialize coordinates before drawing the sprite
040260 DD 21 5C 1A 0346   	ld ix,xpix
       04          
040265 AF          0347   	xor a
040266 DD 77 00    0348   	ld (ix+0),a ; xpix = 0
040269 DD 77 01    0349   	ld (ix+1),a	; ypix = 0
04026C DD 21 62 1A 0350   	ld ix,current_pen
       04          
040271 3E 0F       0351   	ld a,COLOR_WHITE
040273 DD 77 00    0352   	ld (ix+0),a ; current pen -> white
040276             0353   
040276             0354   	; set vars
040276 21 87 1B 04 0355   	ld hl,current_frame
04027A AF          0356   	xor a
04027B 77          0357   	ld (hl),a
04027C 3C          0358   	inc a
04027D 21 88 1B 04 0359   	ld hl,frames_count
040281 77          0360   	ld (hl),a
040282             0361   
040282             0362   	; fill buffers with zeros
040282 01 00 20 00 0363   	ld bc,BUFFER_SIZE
040286 21 90 1B 04 0364   	ld hl,sprite_buffer
04028A             0365   
04028A             0366   isv_fill_loop:
04028A AF          0367   	xor a
04028B 77          0368   	ld (hl),a
04028C 0B          0369   	dec bc
04028D 23          0370   	inc hl
04028E 78          0371   	ld a,b
04028F B1          0372   	or c
040290 FE 00       0373   	cp 0
040292 20 F6       0374   	jr nz,isv_fill_loop
040294             0375   
040294             0376   ; draw the pixel with a border
040294 CD EB 0D 04 0377   	call fn_draw_pixel_with_border
040298             0378   
040298             0379   ; draw sprite loop
040298             0380   draw_sprite_loop:
040298 21 9D FF FF 0381   	ld hl,KEY_SPACE
04029C CD F5 18 04 0382   	call fn_inkey
0402A0 FE 01       0383   	cp 1
0402A2 CC B4 03 04 0384   	call z,dsl_set_pen
0402A6             0385   
0402A6 21 C6 FF FF 0386   	ld hl,KEY_UP
0402AA CD F5 18 04 0387   	call fn_inkey
0402AE FE 01       0388   	cp 1
0402B0 CC D9 03 04 0389   	call z,dsl_up
0402B4             0390   
0402B4 21 D6 FF FF 0391   	ld hl,KEY_DOWN
0402B8 CD F5 18 04 0392   	call fn_inkey
0402BC FE 01       0393   	cp 1
0402BE CC 00 04 04 0394   	call z,dsl_down
0402C2             0395   
0402C2 21 E6 FF FF 0396   	ld hl,KEY_LEFT
0402C6 CD F5 18 04 0397   	call fn_inkey
0402CA FE 01       0398   	cp 1
0402CC CC 2C 04 04 0399   	call z,dsl_left
0402D0             0400   
0402D0 21 86 FF FF 0401   	ld hl,KEY_RIGHT
0402D4 CD F5 18 04 0402   	call fn_inkey
0402D8 FE 01       0403   	cp 1
0402DA CC 53 04 04 0404   	call z,dsl_right
0402DE             0405   
0402DE 21 A6 FF FF 0406   	ld hl,KEY_DELETE
0402E2 CD F5 18 04 0407   	call fn_inkey
0402E6 FE 01       0408   	cp 1
0402E8 CC C8 03 04 0409   	call z,dsl_reset_pen
0402EC             0410   
0402EC 21 9F FF FF 0411   	ld hl,KEY_TAB
0402F0 CD F5 18 04 0412   	call fn_inkey
0402F4 FE 01       0413   	cp 1
0402F6 CA 27 09 04 0414   	jp z,dsl_palette_tool
0402FA             0415   
0402FA 21 AA FF FF 0416   	ld hl,KEY_N
0402FE CD F5 18 04 0417   	call fn_inkey
040302 FE 01       0418   	cp 1
040304 CC CE 04 04 0419   	call z,dsl_add_frame
040308             0420   
040308 21 AD FF FF 0421   	ld hl,KEY_C
04030C CD F5 18 04 0422   	call fn_inkey
040310 FE 01       0423   	cp 1
040312 CC 65 05 04 0424   	call z,dsl_add_and_copy_frame
040316             0425   
040316 21 D0 FF FF 0426   	ld hl,KEY_BACKSPACE
04031A CD F5 18 04 0427   	call fn_inkey
04031E FE 01       0428   	cp 1
040320 CC CC 05 04 0429   	call z,dsl_delete_frame
040324             0430   
040324 21 C0 FF FF 0431   	ld hl,KEY_PGUP
040328 CD F5 18 04 0432   	call fn_inkey
04032C FE 01       0433   	cp 1
04032E CC C5 06 04 0434   	call z,dsl_next_frame
040332             0435   
040332 21 B1 FF FF 0436   	ld hl,KEY_PGDOWN
040336 CD F5 18 04 0437   	call fn_inkey
04033A FE 01       0438   	cp 1
04033C CC A6 06 04 0439   	call z,dsl_previous_frame
040340             0440   
040340 21 A9 FF FF 0441   	ld hl,KEY_L
040344 CD F5 18 04 0442   	call fn_inkey
040348 FE 01       0443   	cp 1
04034A CC 7F 04 04 0444   	call z,dsl_load_sprite
04034E             0445   
04034E 21 AE FF FF 0446   	ld hl,KEY_S
040352 CD F5 18 04 0447   	call fn_inkey
040356 FE 01       0448   	cp 1
040358 CC 9C 04 04 0449   	call z,dsl_save_sprite
04035C             0450   
04035C 21 DD FF FF 0451   	ld hl,KEY_E
040360 CD F5 18 04 0452   	call fn_inkey
040364 FE 01       0453   	cp 1
040366 CC B5 04 04 0454   	call z,dsl_export_sprite
04036A             0455   
04036A 21 CC FF FF 0456   	ld hl,KEY_R
04036E CD F5 18 04 0457   	call fn_inkey
040372 FE 01       0458   	cp 1
040374 CC EB 06 04 0459   	call z,dsl_rotate_frame
040378             0460   
040378 21 BC FF FF 0461   	ld hl,KEY_F
04037C CD F5 18 04 0462   	call fn_inkey
040380 FE 01       0463   	cp 1
040382 CC A0 07 04 0464   	call z,dsl_flip_frame
040386             0465   
040386 21 9A FF FF 0466   	ld hl,KEY_M
04038A CD F5 18 04 0467   	call fn_inkey
04038E FE 01       0468   	cp 1
040390 CC 07 08 04 0469   	call z,dsl_mirror_frame
040394             0470   
040394 21 B6 FF FF 0471   	ld hl,KEY_RETURN
040398 CD F5 18 04 0472   	call fn_inkey
04039C FE 01       0473   	cp 1
04039E CC 87 08 04 0474   	call z,dsl_flood_fill
0403A2             0475   
0403A2 21 8F FF FF 0476   	ld hl,KEY_ESCAPE
0403A6 CD F5 18 04 0477   	call fn_inkey
0403AA FE 01       0478   	cp 1
0403AC CA 3A 0C 04 0479   	jp z,exit_program
0403B0             0480   
0403B0 C3 98 02 04 0481   	jp draw_sprite_loop
0403B4             0482   
0403B4             0483   ; set the pen of the current pixel
0403B4             0484   dsl_set_pen:
0403B4 CD 15 0E 04 0485   	call fn_get_pixel_color
0403B8 21 62 1A 04 0486   	ld hl,current_pen
0403BC BE          0487   	cp (hl)
0403BD C8          0488   	ret z
0403BE 7E          0489   	ld a,(hl)
0403BF CD 57 0E 04 0490   	call fn_set_pixel_color
0403C3 CD EB 0D 04 0491   	call fn_draw_pixel_with_border
0403C7 C9          0492   	ret
0403C8             0493   
0403C8             0494   ; reset the pen of the current pixel
0403C8             0495   dsl_reset_pen:
0403C8 CD 15 0E 04 0496   	call fn_get_pixel_color
0403CC FE 00       0497   	cp 0
0403CE C8          0498   	ret z
0403CF AF          0499   	xor a
0403D0 CD 57 0E 04 0500   	call fn_set_pixel_color
0403D4 CD EB 0D 04 0501   	call fn_draw_pixel_with_border
0403D8 C9          0502   	ret
0403D9             0503   
0403D9             0504   ; move pixel up
0403D9             0505   dsl_up:
0403D9 21 5D 1A 04 0506   	ld hl,ypix
0403DD 7E          0507   	ld a,(hl)
0403DE FE 00       0508   	cp 0
0403E0 C8          0509   	ret z
0403E1             0510   
0403E1 21 9D FF FF 0511   	ld hl,KEY_SPACE
0403E5 CD F5 18 04 0512   	call fn_inkey
0403E9 FE 01       0513   	cp 1
0403EB CC B4 03 04 0514   	call z,dsl_set_pen
0403EF             0515   
0403EF CD FF 0D 04 0516   	call fn_draw_pixel_without_border
0403F3 CD 9B 0E 04 0517   	call fn_move_up
0403F7 CD EB 0D 04 0518   	call fn_draw_pixel_with_border
0403FB CD 70 18 04 0519   	call fn_slowdown
0403FF C9          0520   	ret
040400             0521   
040400             0522   ; move pixel down
040400             0523   dsl_down:
040400 21 61 1A 04 0524   	ld hl,spr_size
040404 56          0525   	ld d,(hl)
040405 15          0526   	dec d
040406             0527   
040406 21 5D 1A 04 0528   	ld hl,ypix
04040A 7E          0529   	ld a,(hl)
04040B BA          0530   	cp d
04040C C8          0531   	ret z
04040D             0532   
04040D 21 9D FF FF 0533   	ld hl,KEY_SPACE
040411 CD F5 18 04 0534   	call fn_inkey
040415 FE 01       0535   	cp 1
040417 CC B4 03 04 0536   	call z,dsl_set_pen
04041B             0537   
04041B CD FF 0D 04 0538   	call fn_draw_pixel_without_border
04041F CD A1 0E 04 0539   	call fn_move_down
040423 CD EB 0D 04 0540   	call fn_draw_pixel_with_border
040427 CD 70 18 04 0541   	call fn_slowdown
04042B C9          0542   	ret
04042C             0543   
04042C             0544   ; move pixel left
04042C             0545   dsl_left:
04042C 21 5C 1A 04 0546   	ld hl,xpix
040430 7E          0547   	ld a,(hl)
040431 FE 00       0548   	cp 0
040433 C8          0549   	ret z
040434             0550   
040434 21 9D FF FF 0551   	ld hl,KEY_SPACE
040438 CD F5 18 04 0552   	call fn_inkey
04043C FE 01       0553   	cp 1
04043E CC B4 03 04 0554   	call z,dsl_set_pen
040442             0555   
040442 CD FF 0D 04 0556   	call fn_draw_pixel_without_border
040446 CD A7 0E 04 0557   	call fn_move_left
04044A CD EB 0D 04 0558   	call fn_draw_pixel_with_border
04044E CD 70 18 04 0559   	call fn_slowdown
040452 C9          0560   	ret
040453             0561   
040453             0562   ; move pixel right
040453             0563   dsl_right:
040453 21 61 1A 04 0564   	ld hl,spr_size
040457 56          0565   	ld d,(hl)
040458 15          0566   	dec d
040459             0567   
040459 21 5C 1A 04 0568   	ld hl,xpix
04045D 7E          0569   	ld a,(hl)
04045E BA          0570   	cp d
04045F C8          0571   	ret z
040460             0572   
040460 21 9D FF FF 0573   	ld hl,KEY_SPACE
040464 CD F5 18 04 0574   	call fn_inkey
040468 FE 01       0575   	cp 1
04046A CC B4 03 04 0576   	call z,dsl_set_pen
04046E             0577   
04046E CD FF 0D 04 0578   	call fn_draw_pixel_without_border
040472 CD AD 0E 04 0579   	call fn_move_right
040476 CD EB 0D 04 0580   	call fn_draw_pixel_with_border
04047A CD 70 18 04 0581   	call fn_slowdown
04047E C9          0582   	ret
04047F             0583   
04047F             0584   ; load a sprite
04047F             0585   dsl_load_sprite:
04047F 21 A9 FF FF 0586   	ld hl,KEY_L
040483 CD F5 18 04 0587   	call fn_inkey
040487 FE 00       0588   	cp 0
040489 20 F4       0589   	jr nz,dsl_load_sprite
04048B             0590   
04048B CD FF 0D 04 0591   	call fn_draw_pixel_without_border
04048F CD 8A 13 04 0592   	call fn_load_sprite
040493 CD E7 17 04 0593   	call fn_refresh_sprite
040497 CD EB 0D 04 0594   	call fn_draw_pixel_with_border
04049B C9          0595   	ret
04049C             0596   
04049C             0597   ; save a sprite
04049C             0598   dsl_save_sprite:
04049C 21 AE FF FF 0599   	ld hl,KEY_S
0404A0 CD F5 18 04 0600   	call fn_inkey
0404A4 FE 00       0601   	cp 0
0404A6 20 F4       0602   	jr nz,dsl_save_sprite
0404A8             0603   
0404A8 CD FF 0D 04 0604   	call fn_draw_pixel_without_border
0404AC CD B9 14 04 0605   	call fn_save_sprite
0404B0 CD E7 17 04 0606   	call fn_refresh_sprite
0404B4 C9          0607   	ret
0404B5             0608   
0404B5             0609   dsl_export_sprite:
0404B5 21 DD FF FF 0610   	ld hl,KEY_E
0404B9 CD F5 18 04 0611   	call fn_inkey
0404BD FE 00       0612   	cp 0
0404BF 20 F4       0613   	jr nz,dsl_export_sprite
0404C1             0614   
0404C1 CD FF 0D 04 0615   	call fn_draw_pixel_without_border
0404C5 CD C4 15 04 0616   	call fn_export_sprite
0404C9 CD E7 17 04 0617   	call fn_refresh_sprite
0404CD C9          0618   	ret
0404CE             0619   
0404CE             0620   
0404CE             0621   ; add a frame to the animation
0404CE             0622   dsl_add_frame:
0404CE 21 AA FF FF 0623   	ld hl,KEY_N
0404D2 CD F5 18 04 0624   	call fn_inkey
0404D6 FE 00       0625   	cp 0
0404D8 20 F4       0626   	jr nz,dsl_add_frame
0404DA             0627   
0404DA             0628   	; frames limit reached ? exit
0404DA 21 88 1B 04 0629   	ld hl,frames_count
0404DE 7E          0630   	ld a,(hl)
0404DF FE 08       0631   	cp MAX_FRAMES
0404E1 C8          0632   	ret z
0404E2             0633   
0404E2             0634   	; get the number of frames to copy
0404E2 21 88 1B 04 0635   	ld hl,frames_count
0404E6 7E          0636   	ld a,(hl)
0404E7 21 87 1B 04 0637   	ld hl,current_frame
0404EB 46          0638   	ld b,(hl)
0404EC 90          0639   	sub b
0404ED 3D          0640   	dec a
0404EE             0641   
0404EE             0642   	; get sprsize² (length of a sprite, in bytes)
0404EE 21 61 1A 04 0643   	ld hl,spr_size
0404F2 11 00 00 00 0644   	ld de,$000000
0404F6 5E          0645   	ld e,(hl)
0404F7 56          0646   	ld d,(hl)
0404F8 ED 5C       0647   	mlt de ; DE = sprsize²
0404FA             0648   
0404FA             0649   	; prepare for the case we goto af_zap...
0404FA 21 90 1B 04 0650   	ld hl,sprite_buffer
0404FE             0651   
0404FE F5          0652   	push af
0404FF E5          0653   	push hl
040500 21 87 1B 04 0654   	ld hl,current_frame
040504 7E          0655   	ld a,(hl)
040505 3C          0656   	inc a
040506 47          0657   	ld b,a
040507 E1          0658   	pop hl
040508 F1          0659   	pop af
040509             0660   
040509             0661   af_loop0:
040509 19          0662   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050A 10 FD       0663   	djnz af_loop0
04050C             0664   
04050C E5          0665   	push hl ; store HL = sprite buffer + sprsize²
04050D FE 00       0666   	cp 0
04050F CA 37 05 04 0667   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040513 E1          0668   	pop hl ; HL unused in this case
040514             0669   
040514 21 00 00 00 0670   	ld hl,$000000 ; HL is 0 to store the result
040518 47          0671   	ld b,a ; B = frames to copy
040519             0672   
040519             0673   ; multiply number of frames to copy by sprsize²
040519             0674   af_loop1:
040519 19          0675   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051A 10 FD       0676   	djnz af_loop1
04051C             0677   
04051C E5          0678   	push hl
04051D C1          0679   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04051E             0680   
04051E 21 87 1B 04 0681   	ld hl,current_frame
040522 7E          0682   	ld a,(hl)
040523 3C          0683   	inc a
040524 21 90 1B 04 0684   	ld hl,sprite_buffer
040528             0685   
040528 C5          0686   	push bc
040529 47          0687   	ld b,a
04052A             0688   
04052A             0689   af_loop2:
04052A 19          0690   	add hl,de ; HL = sprite buffer + length to copy
04052B 10 FD       0691   	djnz af_loop2
04052D             0692   
04052D C1          0693   	pop bc
04052E             0694   
04052E E5          0695   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04052F             0696   
04052F 09          0697   	add hl,bc
040530 2B          0698   	dec hl ; HL = end address to copy to end target address
040531             0699   
040531 E5          0700   	push hl
040532 19          0701   	add hl,de
040533 EB          0702   	ex de,hl ; DE = end target address
040534 E1          0703   	pop hl
040535             0704   
040535 ED B8       0705   	lddr
040537             0706   
040537             0707   af_zap:
040537             0708   	; multiply number of frames to copy by sprsize²
040537 21 61 1A 04 0709   	ld hl,spr_size
04053B 01 00 00 00 0710   	ld bc,$000000
04053F 4E          0711   	ld c,(hl)
040540 46          0712   	ld b,(hl)
040541 ED 4C       0713   	mlt bc ; BC = sprsize²
040543             0714   
040543 E1          0715   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040544             0716   
040544             0717   ; fill frame with 0 color
040544             0718   af_loop3:
040544 AF          0719   	xor a
040545 77          0720   	ld (hl),a
040546 23          0721   	inc hl
040547 0B          0722   	dec bc
040548 78          0723   	ld a,b
040549 B1          0724   	or c
04054A FE 00       0725   	cp 0
04054C 20 F6       0726   	jr nz,af_loop3
04054E             0727   
04054E             0728   	; increment the frames count and the current frame values
04054E 21 88 1B 04 0729   	ld hl,frames_count
040552 34          0730   	inc (hl)
040553 21 87 1B 04 0731   	ld hl,current_frame
040557 34          0732   	inc (hl)
040558             0733   
040558 CD 27 18 04 0734   	call fn_change_frame
04055C CD 4C 18 04 0735   	call fn_change_frames_count
040560 CD E7 17 04 0736   	call fn_refresh_sprite
040564 C9          0737   	ret
040565             0738   
040565             0739   ; add a copy of the current frame to the animation
040565             0740   dsl_add_and_copy_frame:
040565 21 AD FF FF 0741   	ld hl,KEY_C
040569 CD F5 18 04 0742   	call fn_inkey
04056D FE 00       0743   	cp 0
04056F 20 F4       0744   	jr nz,dsl_add_and_copy_frame
040571             0745   
040571             0746   	; frames limit reached ? exit
040571 21 88 1B 04 0747   	ld hl,frames_count
040575 7E          0748   	ld a,(hl)
040576 FE 08       0749   	cp MAX_FRAMES
040578 C8          0750   	ret z
040579             0751   
040579             0752   	; get the number of frames to copy
040579 21 88 1B 04 0753   	ld hl,frames_count
04057D 7E          0754   	ld a,(hl)
04057E 21 87 1B 04 0755   	ld hl,current_frame
040582 46          0756   	ld b,(hl)
040583 90          0757   	sub b
040584             0758   
040584             0759   	; get sprsize² (length of a sprite, in bytes)
040584 21 61 1A 04 0760   	ld hl,spr_size
040588 11 00 00 00 0761   	ld de,$000000
04058C 5E          0762   	ld e,(hl)
04058D 56          0763   	ld d,(hl)
04058E ED 5C       0764   	mlt de ; DE = sprsize²
040590             0765   
040590 21 00 00 00 0766   	ld hl,$000000 ; HL is 0 to store the result
040594 47          0767   	ld b,a ; B = frames to copy
040595             0768   
040595             0769   ; multiply number of frames to copy by sprsize²
040595             0770   aacf_loop1:
040595 19          0771   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040596 10 FD       0772   	djnz aacf_loop1
040598             0773   
040598 E5          0774   	push hl
040599 C1          0775   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059A             0776   
04059A 21 87 1B 04 0777   	ld hl,current_frame
04059E 7E          0778   	ld a,(hl)
04059F 21 90 1B 04 0779   	ld hl,sprite_buffer
0405A3 FE 00       0780   	cp 0
0405A5 28 06       0781   	jr z,aacf_loop_end2
0405A7             0782   
0405A7 C5          0783   	push bc
0405A8 47          0784   	ld b,a
0405A9             0785   
0405A9             0786   aacf_loop2:
0405A9 19          0787   	add hl,de ; HL = sprite buffer + length to copy
0405AA 10 FD       0788   	djnz aacf_loop2
0405AC             0789   
0405AC C1          0790   	pop bc
0405AD             0791   
0405AD             0792   aacf_loop_end2:
0405AD 09          0793   	add hl,bc
0405AE 2B          0794   	dec hl ; HL = end address to copy to end target address
0405AF             0795   
0405AF E5          0796   	push hl
0405B0 19          0797   	add hl,de
0405B1 EB          0798   	ex de,hl ; DE = end target address
0405B2 E1          0799   	pop hl
0405B3             0800   
0405B3 ED B8       0801   	lddr
0405B5             0802   
0405B5             0803   	; increment the frames count and the current frame values
0405B5 21 88 1B 04 0804   	ld hl,frames_count
0405B9 34          0805   	inc (hl)
0405BA 21 87 1B 04 0806   	ld hl,current_frame
0405BE 34          0807   	inc (hl)
0405BF             0808   
0405BF CD 27 18 04 0809   	call fn_change_frame
0405C3 CD 4C 18 04 0810   	call fn_change_frames_count
0405C7 CD E7 17 04 0811   	call fn_refresh_sprite
0405CB C9          0812   	ret
0405CC             0813   
0405CC             0814   ; delete last frame from animation
0405CC             0815   dsl_delete_frame:
0405CC 21 D0 FF FF 0816   	ld hl,KEY_BACKSPACE
0405D0 CD F5 18 04 0817   	call fn_inkey
0405D4 FE 00       0818   	cp 0
0405D6 20 F4       0819   	jr nz,dsl_delete_frame
0405D8             0820   
0405D8             0821   	; delete current selected frame
0405D8 21 61 1A 04 0822   	ld hl,spr_size
0405DC 01 00 00 00 0823   	ld bc,$000000
0405E0 4E          0824   	ld c,(hl)
0405E1 46          0825   	ld b,(hl)
0405E2 ED 4C       0826   	mlt bc ; BC = sprsize²
0405E4 21 87 1B 04 0827   	ld hl,current_frame
0405E8 7E          0828   	ld a,(hl) ; A = current frame
0405E9 21 90 1B 04 0829   	ld hl,sprite_buffer ; HL = sprite buffer
0405ED C5          0830   	push bc
0405EE FE 00       0831   	cp 0
0405F0 28 06       0832   	jr z,df_loop2
0405F2             0833   
0405F2             0834   df_loop1:
0405F2 09          0835   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F3 3D          0836   	dec a
0405F4 FE 00       0837   	cp 0
0405F6 20 FA       0838   	jr nz,df_loop1
0405F8             0839   
0405F8             0840   ; clear the current frame
0405F8             0841   df_loop2:
0405F8 AF          0842   	xor a
0405F9 77          0843   	ld (hl),a
0405FA 23          0844   	inc hl
0405FB 0B          0845   	dec bc
0405FC 78          0846   	ld a,b
0405FD B1          0847   	or c
0405FE FE 00       0848   	cp 0
040600 20 F6       0849   	jr nz,df_loop2
040602             0850   
040602             0851   	; current frame + 1 = frames count ?
040602 E5          0852   	push hl
040603 21 87 1B 04 0853   	ld hl,current_frame
040607 5E          0854   	ld e,(hl)
040608 1C          0855   	inc e
040609 21 88 1B 04 0856   	ld hl,frames_count
04060D 7E          0857   	ld a,(hl)
04060E BB          0858   	cp e
04060F E1          0859   	pop hl
040610 C1          0860   	pop bc
040611 CA 8A 06 04 0861   	jp z,df_exit
040615             0862   
040615 11 88 1B 04 0863   	ld de,frames_count
040619 1A          0864   	ld a,(de) ; A = frames count
04061A E5          0865   	push hl
04061B 21 87 1B 04 0866   	ld hl,current_frame
04061F 5E          0867   	ld e,(hl) ; E = current frame
040620 E1          0868   	pop hl
040621 93          0869   	sub e
040622 3D          0870   	dec a ; A = number of frames to copy back
040623             0871   
040623 EB          0872   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040624 21 00 00 00 0873   	ld hl,$000000
040628 FE 00       0874   	cp 0 ; 0 frames to copy ?
04062A 28 06       0875   	jr z,df_exit_loop3
04062C             0876   
04062C             0877   df_loop3:
04062C 09          0878   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04062D 3D          0879   	dec a
04062E FE 00       0880   	cp 0
040630 20 FA       0881   	jr nz,df_loop3
040632             0882   
040632             0883   df_exit_loop3:
040632 E5          0884   	push hl
040633 C1          0885   	pop bc ; BC = total length of area to copy
040634 D5          0886   	push de
040635 E1          0887   	pop hl ; HL = DE = start of area to copy
040636             0888   
040636 C5          0889   	push bc
040637 D5          0890   	push de
040638 E5          0891   	push hl
040639 21 61 1A 04 0892   	ld hl,spr_size
04063D 11 00 00 00 0893   	ld de,$000000
040641 5E          0894   	ld e,(hl)
040642 56          0895   	ld d,(hl)
040643 ED 5C       0896   	mlt de ; DE = one sprite frame length
040645 E1          0897   	pop hl
040646 B7          0898   	or a
040647 ED 52       0899   	sbc hl,de ; HL = target area to copy
040649 D1          0900   	pop de
04064A EB          0901   	ex de,hl ; DE = target, HL = start
04064B C1          0902   	pop bc
04064C ED B0       0903   	ldir
04064E             0904   
04064E 21 61 1A 04 0905   	ld hl,spr_size
040652 01 00 00 00 0906   	ld bc,$000000
040656 4E          0907   	ld c,(hl)
040657 46          0908   	ld b,(hl)
040658 ED 4C       0909   	mlt bc ; DE = one sprite frame length
04065A             0910   
04065A             0911   	; delete last frame data
04065A 21 88 1B 04 0912   	ld hl,frames_count
04065E 7E          0913   	ld a,(hl) ; A =frames count
04065F 3D          0914   	dec a ; A = last frame
040660 21 90 1B 04 0915   	ld hl,sprite_buffer ; HL = sprite buffer
040664 FE 00       0916   	cp 0
040666 28 06       0917   	jr z,df_loop5
040668             0918   
040668             0919   df_loop4:
040668 09          0920   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
040669 3D          0921   	dec a
04066A FE 00       0922   	cp 0
04066C 20 FA       0923   	jr nz,df_loop4
04066E             0924   
04066E             0925   ; clear the current frame
04066E             0926   df_loop5:
04066E AF          0927   	xor a
04066F 77          0928   	ld (hl),a
040670 23          0929   	inc hl
040671 0B          0930   	dec bc
040672 78          0931   	ld a,b
040673 B1          0932   	or c
040674 FE 00       0933   	cp 0
040676 20 F6       0934   	jr nz,df_loop5
040678             0935   
040678             0936   	; decrement frames count
040678 21 88 1B 04 0937   	ld hl,frames_count
04067C 35          0938   	dec (hl)
04067D             0939   
04067D CD 27 18 04 0940   	call fn_change_frame
040681 CD 4C 18 04 0941   	call fn_change_frames_count
040685 CD E7 17 04 0942   	call fn_refresh_sprite
040689 C9          0943   	ret
04068A             0944   
04068A             0945   df_exit:
04068A 21 88 1B 04 0946   	ld hl,frames_count
04068E 7E          0947   	ld a,(hl)
04068F FE 01       0948   	cp 1
040691 28 06       0949   	jr z,df_exit_end
040693 35          0950   	dec (hl)
040694 21 87 1B 04 0951   	ld hl,current_frame
040698 35          0952   	dec (hl)
040699             0953   
040699             0954   df_exit_end:
040699 CD 27 18 04 0955   	call fn_change_frame
04069D CD 4C 18 04 0956   	call fn_change_frames_count
0406A1 CD E7 17 04 0957   	call fn_refresh_sprite
0406A5 C9          0958   	ret
0406A6             0959   
0406A6             0960   ; goto previous frame
0406A6             0961   dsl_previous_frame:
0406A6 21 B1 FF FF 0962   	ld hl,KEY_PGDOWN
0406AA CD F5 18 04 0963   	call fn_inkey
0406AE FE 00       0964   	cp 0
0406B0 20 F4       0965   	jr nz,dsl_previous_frame
0406B2             0966   
0406B2 21 87 1B 04 0967   	ld hl,current_frame
0406B6 7E          0968   	ld a,(hl)
0406B7 FE 00       0969   	cp 0
0406B9 C8          0970   	ret z
0406BA             0971   
0406BA 3D          0972   	dec a
0406BB 77          0973   	ld (hl),a
0406BC CD 27 18 04 0974   	call fn_change_frame
0406C0 CD E7 17 04 0975   	call fn_refresh_sprite
0406C4 C9          0976   	ret
0406C5             0977   
0406C5             0978   ; goto next frame
0406C5             0979   dsl_next_frame:
0406C5 21 C0 FF FF 0980   	ld hl,KEY_PGUP
0406C9 CD F5 18 04 0981   	call fn_inkey
0406CD FE 00       0982   	cp 0
0406CF 20 F4       0983   	jr nz,dsl_next_frame
0406D1             0984   
0406D1 21 87 1B 04 0985   	ld hl,current_frame
0406D5 7E          0986   	ld a,(hl)
0406D6 3C          0987   	inc a
0406D7 21 88 1B 04 0988   	ld hl,frames_count
0406DB BE          0989   	cp (hl)
0406DC C8          0990   	ret z
0406DD             0991   
0406DD 21 87 1B 04 0992   	ld hl,current_frame
0406E1 77          0993   	ld (hl),a
0406E2 CD 27 18 04 0994   	call fn_change_frame
0406E6 CD E7 17 04 0995   	call fn_refresh_sprite
0406EA C9          0996   	ret
0406EB             0997   
0406EB             0998   ; rotate a frame 90° clockwise
0406EB             0999   dsl_rotate_frame:
0406EB 21 CC FF FF 1000   	ld hl,KEY_R
0406EF CD F5 18 04 1001   	call fn_inkey
0406F3 FE 00       1002   	cp 0
0406F5 20 F4       1003   	jr nz,dsl_rotate_frame
0406F7             1004   
0406F7             1005   	; find HL as start of the first frame (buffer)
0406F7 21 61 1A 04 1006   	ld hl,spr_size
0406FB 01 00 00 00 1007   	ld bc,$000000
0406FF 11 00 00 00 1008   	ld de,$000000
040703 5E          1009   	ld e,(hl)
040704 56          1010   	ld d,(hl)
040705 4B          1011   	ld c,e
040706 ED 5C       1012   	mlt de ; DE = sprite length in bytes
040708 21 87 1B 04 1013   	ld hl,current_frame
04070C 7E          1014   	ld a,(hl) ; A = current frame
04070D 21 90 1B 04 1015   	ld hl,sprite_buffer
040711 FE 00       1016   	cp 0
040713 28 04       1017   	jr z,rf_noloop1
040715 47          1018   	ld b,a
040716             1019   
040716             1020   rf_loop1:
040716 19          1021   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040717 10 FD       1022   	djnz rf_loop1
040719             1023   
040719             1024   rf_noloop1:
040719 C5          1025   	push bc
04071A E5          1026   	push hl
04071B             1027   
04071B             1028   	; copy current frame to swap sprite buffer
04071B 11 FC 3E 04 1029   	ld de,swap_sprite_buffer
04071F 41          1030   	ld b,c
040720 ED 4C       1031   	mlt bc
040722 ED B0       1032   	ldir
040724             1033   
040724 FD E1       1034   	pop iy ; IY: destination
040726 C1          1035   	pop bc
040727             1036   
040727 79          1037   	ld a,c
040728 01 00 00 00 1038   	ld bc,$000000
04072C 4F          1039   	ld c,a ; BC = sprite size
04072D             1040   
04072D             1041   	; turn and copy swap sprite buffer frame to sprite buffer
04072D DD 21 FC 3E 1042   	ld ix,swap_sprite_buffer ; IX: source
       04          
040732 11 00 00 00 1043   	ld de,0 ; x
040736 21 00 00 00 1044   	ld hl,0 ; y
04073A             1045   
04073A             1046   rf_loop2:
04073A DD E5       1047   	push ix
04073C FD E5       1048   	push iy
04073E             1049   
04073E D5          1050   	push de
04073F E5          1051   	push hl
040740             1052   
040740             1053   	; add x
040740 DD 19       1054   	add ix,de
040742             1055   
040742             1056   	; add y * width
040742 7C          1057   	ld a,h
040743 B5          1058   	or l
040744 FE 00       1059   	cp 0
040746 28 09       1060   	jr z,rf_done1
040748             1061   rf_loop3:
040748 DD 09       1062   	add ix,bc
04074A 2B          1063   	dec hl
04074B 7C          1064   	ld a,h
04074C B5          1065   	or l
04074D FE 00       1066   	cp 0
04074F 20 F7       1067   	jr nz,rf_loop3
040751             1068   
040751             1069   rf_done1:
040751             1070   	; found the pixel value
040751 DD 7E 00    1071   	ld a,(ix+0)
040754             1072   
040754 E1          1073   	pop hl
040755 D1          1074   	pop de
040756 D5          1075   	push de
040757 E5          1076   	push hl
040758             1077   
040758             1078   	; add y
040758 EB          1079   	ex de,hl
040759 FD 09       1080   	add iy,bc
04075B B7          1081   	or a
04075C E5          1082   	push hl
04075D FD E5       1083   	push iy
04075F E1          1084   	pop hl
040760 ED 52       1085   	sbc hl,de
040762 E5          1086   	push hl
040763 FD E1       1087   	pop iy
040765 FD 2B       1088   	dec iy
040767 E1          1089   	pop hl
040768 EB          1090   	ex de,hl
040769             1091   
040769             1092   	; add x * width
040769 F5          1093   	push af
04076A 7A          1094   	ld a,d
04076B B3          1095   	or e
04076C FE 00       1096   	cp 0
04076E 28 09       1097   	jr z,rf_done2
040770             1098   rf_loop5:
040770 FD 09       1099   	add iy,bc
040772 1B          1100   	dec de
040773 7A          1101   	ld a,d
040774 B3          1102   	or e
040775 FE 00       1103   	cp 0
040777 20 F7       1104   	jr nz,rf_loop5
040779             1105   
040779             1106   rf_done2:
040779 F1          1107   	pop af
04077A             1108   
04077A             1109   	; store the pixel value
04077A FD 77 00    1110   	ld (iy+0),a
04077D             1111   
04077D E1          1112   	pop hl
04077E D1          1113   	pop de
04077F             1114   
04077F FD E1       1115   	pop iy
040781 DD E1       1116   	pop ix
040783             1117   
040783 13          1118   	inc de
040784 EB          1119   	ex de,hl
040785 B7          1120   	or a
040786 ED 42       1121   	sbc hl,bc
040788 09          1122   	add hl,bc
040789 EB          1123   	ex de,hl
04078A DA 3A 07 04 1124   	jp c,rf_loop2
04078E             1125   
04078E 11 00 00 00 1126   	ld de,0
040792 23          1127   	inc hl
040793 B7          1128   	or a
040794 ED 42       1129   	sbc hl,bc
040796 09          1130   	add hl,bc
040797 DA 3A 07 04 1131   	jp c,rf_loop2
04079B             1132   
04079B CD E7 17 04 1133   	call fn_refresh_sprite
04079F C9          1134   	ret
0407A0             1135   
0407A0             1136   ; flip frame horizontally
0407A0             1137   dsl_flip_frame:
0407A0 21 BC FF FF 1138   	ld hl,KEY_F
0407A4 CD F5 18 04 1139   	call fn_inkey
0407A8 FE 00       1140   	cp 0
0407AA 20 F4       1141   	jr nz,dsl_flip_frame
0407AC             1142   
0407AC 21 61 1A 04 1143   	ld hl,spr_size
0407B0 11 00 00 00 1144   	ld de,$000000
0407B4 5E          1145   	ld e,(hl)
0407B5 56          1146   	ld d,(hl)
0407B6 4B          1147   	ld c,e
0407B7 ED 5C       1148   	mlt de ; DE = sprite length in bytes
0407B9 21 87 1B 04 1149   	ld hl,current_frame
0407BD 7E          1150   	ld a,(hl) ; A = current frame
0407BE 21 90 1B 04 1151   	ld hl,sprite_buffer
0407C2 FE 00       1152   	cp 0
0407C4 28 04       1153   	jr z,ff_noloop1
0407C6 47          1154   	ld b,a
0407C7             1155   
0407C7             1156   ff_loop1:
0407C7 19          1157   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407C8 10 FD       1158   	djnz ff_loop1
0407CA             1159   
0407CA             1160   ff_noloop1:
0407CA 41          1161   	ld b,c ; B = sprite height
0407CB 11 00 00 00 1162   	ld de,$000000
0407CF 59          1163   	ld e,c ; DE = sprite width
0407D0 79          1164   	ld a,c ; A = sprite width
0407D1 CB 3F       1165   	srl a ; A = sprite height / 2
0407D3             1166   
0407D3 E5          1167   	push hl
0407D4 DD E1       1168   	pop ix ; IX = frame address
0407D6 19          1169   	add hl,de ; HL = frame address + sprite width - 1
0407D7 2B          1170   	dec hl
0407D8 E5          1171   	push hl
0407D9 FD E1       1172   	pop iy ; IY = IX + sprite width - 1
0407DB             1173   
0407DB             1174   ff_loop2:
0407DB F5          1175   	push af
0407DC D5          1176   	push de
0407DD DD E5       1177   	push ix
0407DF FD E5       1178   	push iy
0407E1             1179   ff_loop3:
0407E1 DD 5E 00    1180   	ld e,(ix+0)
0407E4 FD 56 00    1181   	ld d,(iy+0)
0407E7 DD 72 00    1182   	ld (ix+0),d
0407EA FD 73 00    1183   	ld (iy+0),e
0407ED DD 23       1184   	inc ix
0407EF FD 2B       1185   	dec iy
0407F1 3D          1186   	dec a
0407F2 FE 00       1187   	cp 0
0407F4 20 EB       1188   	jr nz,ff_loop3
0407F6 FD E1       1189   	pop iy
0407F8 DD E1       1190   	pop ix
0407FA D1          1191   	pop de
0407FB F1          1192   	pop af
0407FC DD 19       1193   	add ix,de
0407FE FD 19       1194   	add iy,de
040800 10 D9       1195   	djnz ff_loop2
040802             1196   
040802 CD E7 17 04 1197   	call fn_refresh_sprite
040806 C9          1198   	ret
040807             1199   
040807             1200   ; mirror frame vertically
040807             1201   dsl_mirror_frame:
040807 21 9A FF FF 1202   	ld hl,KEY_M
04080B CD F5 18 04 1203   	call fn_inkey
04080F FE 00       1204   	cp 0
040811 20 F4       1205   	jr nz,dsl_mirror_frame
040813             1206   
040813 21 61 1A 04 1207   	ld hl,spr_size
040817 01 00 00 00 1208   	ld bc,$000000
04081B 11 00 00 00 1209   	ld de,$000000
04081F 5E          1210   	ld e,(hl)
040820 56          1211   	ld d,(hl)
040821 4B          1212   	ld c,e
040822 ED 5C       1213   	mlt de ; DE = sprite length in bytes
040824 21 87 1B 04 1214   	ld hl,current_frame
040828 7E          1215   	ld a,(hl) ; A = current frame
040829 21 90 1B 04 1216   	ld hl,sprite_buffer
04082D FE 00       1217   	cp 0
04082F 28 04       1218   	jr z,mf_noloop1
040831 47          1219   	ld b,a
040832             1220   
040832             1221   mf_loop1:
040832 19          1222   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040833 10 FD       1223   	djnz mf_loop1
040835             1224   
040835             1225   mf_noloop1:
040835 11 00 00 00 1226   	ld de,$000000
040839 59          1227   	ld e,c ; E = sprite height
04083A 79          1228   	ld a,c ; A = sprite width
04083B 41          1229   	ld b,c ; B = sprite height
04083C CB 38       1230   	srl b ; divide B by 2, so B = sprite height / 2
04083E             1231   
04083E E5          1232   	push hl
04083F DD E1       1233   	pop ix ; IX = frame address
040841 51          1234   	ld d,c
040842 15          1235   	dec d
040843 ED 5C       1236   	mlt de ; DE = sprite length - sprite width
040845 19          1237   	add hl,de ; HL = frame address + sprite length - sprite width
040846 E5          1238   	push hl
040847 FD E1       1239   	pop iy ; IY = IX + sprite length - sprite width
040849 21 00 00 00 1240   	ld hl,$000000
04084D 69          1241   	ld l,c ; HL = sprite width
04084E             1242   
04084E             1243   mf_loop2:
04084E F5          1244   	push af
04084F D5          1245   	push de
040850 DD E5       1246   	push ix
040852 FD E5       1247   	push iy
040854             1248   mf_loop3:
040854 DD 5E 00    1249   	ld e,(ix+0)
040857 FD 56 00    1250   	ld d,(iy+0)
04085A DD 72 00    1251   	ld (ix+0),d
04085D FD 73 00    1252   	ld (iy+0),e
040860 DD 23       1253   	inc ix
040862 FD 23       1254   	inc iy
040864 3D          1255   	dec a
040865 FE 00       1256   	cp 0
040867 20 EB       1257   	jr nz,mf_loop3
040869 FD E1       1258   	pop iy
04086B DD E1       1259   	pop ix
04086D D1          1260   	pop de
04086E F1          1261   	pop af
04086F EB          1262   	ex de,hl
040870 DD 19       1263   	add ix,de
040872 EB          1264   	ex de,hl
040873 E5          1265   	push hl
040874 FD E5       1266   	push iy
040876 E1          1267   	pop hl
040877 D1          1268   	pop de
040878 B7          1269   	or a
040879 ED 52       1270   	sbc hl,de
04087B E5          1271   	push hl
04087C D5          1272   	push de
04087D E1          1273   	pop hl
04087E FD E1       1274   	pop iy
040880 10 CC       1275   	djnz mf_loop2
040882             1276   
040882 CD E7 17 04 1277   	call fn_refresh_sprite
040886 C9          1278   	ret
040887             1279   
040887             1280   dsl_flood_fill:
040887 21 B6 FF FF 1281   	ld hl,KEY_RETURN
04088B CD F5 18 04 1282   	call fn_inkey
04088F FE 00       1283   	cp 0
040891 20 F4       1284   	jr nz,dsl_flood_fill
040893             1285   
040893             1286   	; hide the cursor
040893 CD FF 0D 04 1287   	call fn_draw_pixel_without_border
040897             1288   
040897             1289   	; memorize pixel coordinates
040897 3A 5C 1A 04 1290   	ld a,(xpix)
04089B 32 5E 1A 04 1291   	ld (memxpix),a
04089F 3A 5D 1A 04 1292   	ld a,(ypix)
0408A3 32 5F 1A 04 1293   	ld (memypix),a
0408A7             1294   
0408A7             1295   	; fill all recursively
0408A7 3A 5C 1A 04 1296   	ld a,(xpix)
0408AB 5F          1297   	ld e,a
0408AC 3A 5D 1A 04 1298   	ld a,(ypix)
0408B0 57          1299   	ld d,a
0408B1 CD D2 08 04 1300   	call dsl_flood_fill_loop
0408B5             1301   
0408B5             1302   	; refresh all the sprite
0408B5 CD E7 17 04 1303   	call fn_refresh_sprite
0408B9             1304   
0408B9             1305   	; hide the cursor again
0408B9 CD FF 0D 04 1306   	call fn_draw_pixel_without_border
0408BD             1307   
0408BD             1308   	; restore pixel coordinates
0408BD             1309   	; and cursor
0408BD 3A 5E 1A 04 1310   	ld a,(memxpix)
0408C1 32 5C 1A 04 1311   	ld (xpix),a
0408C5 3A 5F 1A 04 1312   	ld a,(memypix)
0408C9 32 5D 1A 04 1313   	ld (ypix),a
0408CD CD EB 0D 04 1314   	call fn_draw_pixel_with_border
0408D1 C9          1315   	ret
0408D2             1316   
0408D2             1317   dsl_flood_fill_loop:
0408D2 D5          1318   	push de
0408D3             1319   
0408D3 DD 21 61 1A 1320   	ld ix,spr_size
       04          
0408D8             1321   
0408D8             1322   	; out  of the sprite area ?
0408D8 7B          1323   	ld a,e
0408D9 DD BE 00    1324   	cp (ix+0)
0408DC D2 25 09 04 1325   	jp nc,ffl_exit
0408E0             1326   
0408E0             1327   	; out  of the sprite area ?
0408E0 7A          1328   	ld a,d
0408E1 DD BE 00    1329   	cp (ix+0)
0408E4 D2 25 09 04 1330   	jp nc,ffl_exit
0408E8             1331   
0408E8             1332   	; replace current pixel, if it is
0408E8             1333   	; inside the sprite area,
0408E8             1334   	; and has not the select palette color
0408E8 7B          1335   	ld a,e
0408E9 32 5C 1A 04 1336   	ld (xpix),a
0408ED 7A          1337   	ld a,d
0408EE 32 5D 1A 04 1338   	ld (ypix),a
0408F2 CD 15 0E 04 1339   	call fn_get_pixel_color
0408F6 21 62 1A 04 1340   	ld hl,current_pen
0408FA BE          1341   	cp (hl)
0408FB CA 25 09 04 1342   	jp z,ffl_exit
0408FF 7E          1343   	ld a,(hl)
040900 CD 57 0E 04 1344   	call fn_set_pixel_color
040904             1345   
040904             1346   	; restore coordinates
040904 3A 5C 1A 04 1347   	ld a,(xpix)
040908 5F          1348   	ld e,a
040909 3A 5D 1A 04 1349   	ld a,(ypix)
04090D 57          1350   	ld d,a
04090E             1351   
04090E             1352   	; draw pixel at right
04090E 1C          1353   	inc e
04090F CD D2 08 04 1354   	call dsl_flood_fill_loop
040913 1D          1355   	dec e
040914             1356   	; draw pixel at left
040914 1D          1357   	dec e
040915 CD D2 08 04 1358   	call dsl_flood_fill_loop
040919 1C          1359   	inc e
04091A             1360   	; draw pixel up
04091A 14          1361   	inc d
04091B CD D2 08 04 1362   	call dsl_flood_fill_loop
04091F 15          1363   	dec d
040920             1364   	; draw pixel down
040920 15          1365   	dec d
040921 CD D2 08 04 1366   	call dsl_flood_fill_loop
040925             1367   
040925             1368   ffl_exit:
040925 D1          1369   	pop de
040926 C9          1370   	ret
040927             1371   
040927             1372   ; change current tool to palette tool
040927             1373   dsl_palette_tool:
040927 21 9F FF FF 1374   	ld hl,KEY_TAB
04092B CD F5 18 04 1375   	call fn_inkey
04092F FE 00       1376   	cp 0
040931 20 F4       1377   	jr nz,dsl_palette_tool
040933             1378   
040933             1379   	; hide sprite drawing cursor
040933 CD FF 0D 04 1380   	call fn_draw_pixel_without_border
040937             1381   
040937             1382   	; draw selected palette color
040937 21 62 1A 04 1383   	ld hl,current_pen
04093B 4E          1384   	ld c,(hl)
04093C CD B3 0E 04 1385   	call fn_draw_palette_with_border
040940             1386   
040940             1387   ; select palette color
040940             1388   dsl_palette_tool_loop:
040940             1389   	; move to left color in the palette
040940 21 E6 FF FF 1390   	ld hl,KEY_LEFT
040944 CD F5 18 04 1391   	call fn_inkey
040948 FE 01       1392   	cp 1
04094A CC EA 0B 04 1393   	call z,dsl_dec_pen
04094E             1394   
04094E             1395   	; move to right color in the palette
04094E 21 86 FF FF 1396   	ld hl,KEY_RIGHT
040952 CD F5 18 04 1397   	call fn_inkey
040956 FE 01       1398   	cp 1
040958 CC 11 0C 04 1399   	call z,dsl_inc_pen
04095C             1400   
04095C             1401   	; return to draw sprite tool
04095C 21 9F FF FF 1402   	ld hl,KEY_TAB
040960 CD F5 18 04 1403   	call fn_inkey
040964 FE 01       1404   	cp 1
040966 CA CD 0B 04 1405   	jp z,dsl_draw_sprite_tool
04096A             1406   
04096A             1407   	; load palette
04096A 21 A9 FF FF 1408   	ld hl,KEY_L
04096E CD F5 18 04 1409   	call fn_inkey
040972 FE 01       1410   	cp 1
040974 CC 75 0B 04 1411   	call z,dslp_load_palette
040978             1412   
040978             1413   	; save palette
040978 21 AE FF FF 1414   	ld hl,KEY_S
04097C CD F5 18 04 1415   	call fn_inkey
040980 FE 01       1416   	cp 1
040982 CC A7 0B 04 1417   	call z,dslp_save_palette
040986             1418   
040986             1419   	; red up
040986 21 CF FF FF 1420   	ld hl,KEY_1
04098A CD F5 18 04 1421   	call fn_inkey
04098E FE 01       1422   	cp 1
040990 CC FA 09 04 1423   	call z,dslp_red_up
040994             1424   
040994             1425   	; green up
040994 21 CE FF FF 1426   	ld hl,KEY_2
040998 CD F5 18 04 1427   	call fn_inkey
04099C FE 01       1428   	cp 1
04099E CC 31 0A 04 1429   	call z,dslp_green_up
0409A2             1430   
0409A2             1431   	; blue up
0409A2 21 EE FF FF 1432   	ld hl,KEY_3
0409A6 CD F5 18 04 1433   	call fn_inkey
0409AA FE 01       1434   	cp 1
0409AC CC 68 0A 04 1435   	call z,dslp_blue_up
0409B0             1436   
0409B0             1437   	; red down
0409B0 21 ED FF FF 1438   	ld hl,KEY_4
0409B4 CD F5 18 04 1439   	call fn_inkey
0409B8 FE 01       1440   	cp 1
0409BA CC 9F 0A 04 1441   	call z,dslp_red_down
0409BE             1442   
0409BE             1443   	; green down
0409BE 21 EC FF FF 1444   	ld hl,KEY_5
0409C2 CD F5 18 04 1445   	call fn_inkey
0409C6 FE 01       1446   	cp 1
0409C8 CC D6 0A 04 1447   	call z,dslp_green_down
0409CC             1448   
0409CC             1449   	; blue down
0409CC 21 CB FF FF 1450   	ld hl,KEY_6
0409D0 CD F5 18 04 1451   	call fn_inkey
0409D4 FE 01       1452   	cp 1
0409D6 CC 0D 0B 04 1453   	call z,dslp_blue_down
0409DA             1454   
0409DA             1455   	; reset to black
0409DA 21 DB FF FF 1456   	ld hl,KEY_7
0409DE CD F5 18 04 1457   	call fn_inkey
0409E2 FE 01       1458   	cp 1
0409E4 CC 44 0B 04 1459   	call z,dslp_reset_color
0409E8             1460   
0409E8             1461   	; exit program
0409E8 21 8F FF FF 1462   	ld hl,KEY_ESCAPE
0409EC CD F5 18 04 1463   	call fn_inkey
0409F0 FE 01       1464   	cp 1
0409F2 CA 3A 0C 04 1465   	jp z,exit_program
0409F6             1466   
0409F6 C3 40 09 04 1467   	jp dsl_palette_tool_loop
0409FA             1468   
0409FA             1469   dslp_red_up:
0409FA 21 62 1A 04 1470   	ld hl,current_pen
0409FE 4E          1471   	ld c,(hl)
0409FF CD 18 0F 04 1472   	call fn_draw_palette_without_border
040A03 21 62 1A 04 1473   	ld hl,current_pen
040A07 46          1474   	ld b,(hl)
040A08 CD 15 1A 04 1475   	call fn_get_color
040A0C 79          1476   	ld a,c
040A0D FE FF       1477   	cp #ff
040A0F 30 03       1478   	jr nc,dslp_not_inc1
040A11 C6 55       1479   	add a,#55
040A13 4F          1480   	ld c,a
040A14             1481   dslp_not_inc1:
040A14 CD B8 19 04 1482   	call fn_set_color
040A18 CD 2F 19 04 1483   	call fn_draw_the_palette
040A1C CD E7 17 04 1484   	call fn_refresh_sprite
040A20 21 62 1A 04 1485   	ld hl,current_pen
040A24 4E          1486   	ld c,(hl)
040A25 CD B3 0E 04 1487   	call fn_draw_palette_with_border
040A29 CD 70 18 04 1488   	call fn_slowdown
040A2D C3 40 09 04 1489   	jp dsl_palette_tool_loop
040A31             1490   
040A31             1491   dslp_green_up:
040A31 21 62 1A 04 1492   	ld hl,current_pen
040A35 4E          1493   	ld c,(hl)
040A36 CD 18 0F 04 1494   	call fn_draw_palette_without_border
040A3A 21 62 1A 04 1495   	ld hl,current_pen
040A3E 46          1496   	ld b,(hl)
040A3F CD 15 1A 04 1497   	call fn_get_color
040A43 7B          1498   	ld a,e
040A44 FE FF       1499   	cp #ff
040A46 30 03       1500   	jr nc,dslp_not_inc2
040A48 C6 55       1501   	add a,#55
040A4A 5F          1502   	ld e,a
040A4B             1503   dslp_not_inc2:
040A4B CD B8 19 04 1504   	call fn_set_color
040A4F CD 2F 19 04 1505   	call fn_draw_the_palette
040A53 CD E7 17 04 1506   	call fn_refresh_sprite
040A57 21 62 1A 04 1507   	ld hl,current_pen
040A5B 4E          1508   	ld c,(hl)
040A5C CD B3 0E 04 1509   	call fn_draw_palette_with_border
040A60 CD 70 18 04 1510   	call fn_slowdown
040A64 C3 40 09 04 1511   	jp dsl_palette_tool_loop
040A68             1512   
040A68             1513   dslp_blue_up:
040A68 21 62 1A 04 1514   	ld hl,current_pen
040A6C 4E          1515   	ld c,(hl)
040A6D CD 18 0F 04 1516   	call fn_draw_palette_without_border
040A71 21 62 1A 04 1517   	ld hl,current_pen
040A75 46          1518   	ld b,(hl)
040A76 CD 15 1A 04 1519   	call fn_get_color
040A7A 7D          1520   	ld a,l
040A7B FE FF       1521   	cp #ff
040A7D 30 03       1522   	jr nc,dslp_not_inc3
040A7F C6 55       1523   	add a,#55
040A81 6F          1524   	ld l,a
040A82             1525   dslp_not_inc3:
040A82 CD B8 19 04 1526   	call fn_set_color
040A86 CD 2F 19 04 1527   	call fn_draw_the_palette
040A8A CD E7 17 04 1528   	call fn_refresh_sprite
040A8E 21 62 1A 04 1529   	ld hl,current_pen
040A92 4E          1530   	ld c,(hl)
040A93 CD B3 0E 04 1531   	call fn_draw_palette_with_border
040A97 CD 70 18 04 1532   	call fn_slowdown
040A9B C3 40 09 04 1533   	jp dsl_palette_tool_loop
040A9F             1534   
040A9F             1535   dslp_red_down:
040A9F 21 62 1A 04 1536   	ld hl,current_pen
040AA3 4E          1537   	ld c,(hl)
040AA4 CD 18 0F 04 1538   	call fn_draw_palette_without_border
040AA8 21 62 1A 04 1539   	ld hl,current_pen
040AAC 46          1540   	ld b,(hl)
040AAD CD 15 1A 04 1541   	call fn_get_color
040AB1 79          1542   	ld a,c
040AB2 FE 01       1543   	cp #01
040AB4 38 03       1544   	jr c,dslp_not_dec1
040AB6 D6 55       1545   	sub a,#55
040AB8 4F          1546   	ld c,a
040AB9             1547   dslp_not_dec1:
040AB9 CD B8 19 04 1548   	call fn_set_color
040ABD CD 2F 19 04 1549   	call fn_draw_the_palette
040AC1 CD E7 17 04 1550   	call fn_refresh_sprite
040AC5 21 62 1A 04 1551   	ld hl,current_pen
040AC9 4E          1552   	ld c,(hl)
040ACA CD B3 0E 04 1553   	call fn_draw_palette_with_border
040ACE CD 70 18 04 1554   	call fn_slowdown
040AD2 C3 40 09 04 1555   	jp dsl_palette_tool_loop
040AD6             1556   
040AD6             1557   dslp_green_down:
040AD6 21 62 1A 04 1558   	ld hl,current_pen
040ADA 4E          1559   	ld c,(hl)
040ADB CD 18 0F 04 1560   	call fn_draw_palette_without_border
040ADF 21 62 1A 04 1561   	ld hl,current_pen
040AE3 46          1562   	ld b,(hl)
040AE4 CD 15 1A 04 1563   	call fn_get_color
040AE8 7B          1564   	ld a,e
040AE9 FE 01       1565   	cp #01
040AEB 38 03       1566   	jr c,dslp_not_dec2
040AED D6 55       1567   	sub a,#55
040AEF 5F          1568   	ld e,a
040AF0             1569   dslp_not_dec2:
040AF0 CD B8 19 04 1570   	call fn_set_color
040AF4 CD 2F 19 04 1571   	call fn_draw_the_palette
040AF8 CD E7 17 04 1572   	call fn_refresh_sprite
040AFC 21 62 1A 04 1573   	ld hl,current_pen
040B00 4E          1574   	ld c,(hl)
040B01 CD B3 0E 04 1575   	call fn_draw_palette_with_border
040B05 CD 70 18 04 1576   	call fn_slowdown
040B09 C3 40 09 04 1577   	jp dsl_palette_tool_loop
040B0D             1578   
040B0D             1579   dslp_blue_down:
040B0D 21 62 1A 04 1580   	ld hl,current_pen
040B11 4E          1581   	ld c,(hl)
040B12 CD 18 0F 04 1582   	call fn_draw_palette_without_border
040B16 21 62 1A 04 1583   	ld hl,current_pen
040B1A 46          1584   	ld b,(hl)
040B1B CD 15 1A 04 1585   	call fn_get_color
040B1F 7D          1586   	ld a,l
040B20 FE 01       1587   	cp #01
040B22 38 03       1588   	jr c,dslp_not_dec3
040B24 D6 55       1589   	sub a,#55
040B26 6F          1590   	ld l,a
040B27             1591   dslp_not_dec3:
040B27 CD B8 19 04 1592   	call fn_set_color
040B2B CD 2F 19 04 1593   	call fn_draw_the_palette
040B2F CD E7 17 04 1594   	call fn_refresh_sprite
040B33 21 62 1A 04 1595   	ld hl,current_pen
040B37 4E          1596   	ld c,(hl)
040B38 CD B3 0E 04 1597   	call fn_draw_palette_with_border
040B3C CD 70 18 04 1598   	call fn_slowdown
040B40 C3 40 09 04 1599   	jp dsl_palette_tool_loop
040B44             1600   
040B44             1601   dslp_reset_color:
040B44 21 62 1A 04 1602   	ld hl,current_pen
040B48 4E          1603   	ld c,(hl)
040B49 CD 18 0F 04 1604   	call fn_draw_palette_without_border
040B4D 21 62 1A 04 1605   	ld hl,current_pen
040B51 46          1606   	ld b,(hl)
040B52 0E 00       1607   	ld c,0
040B54 1E 00       1608   	ld e,0
040B56 2E 00       1609   	ld l,0
040B58 CD B8 19 04 1610   	call fn_set_color
040B5C CD 2F 19 04 1611   	call fn_draw_the_palette
040B60 CD E7 17 04 1612   	call fn_refresh_sprite
040B64 21 62 1A 04 1613   	ld hl,current_pen
040B68 4E          1614   	ld c,(hl)
040B69 CD B3 0E 04 1615   	call fn_draw_palette_with_border
040B6D CD 70 18 04 1616   	call fn_slowdown
040B71 C3 40 09 04 1617   	jp dsl_palette_tool_loop
040B75             1618   
040B75             1619   dslp_load_palette:
040B75 21 A9 FF FF 1620   	ld hl,KEY_L
040B79 CD F5 18 04 1621   	call fn_inkey
040B7D FE 00       1622   	cp 0
040B7F 20 F4       1623   	jr nz,dslp_load_palette
040B81             1624   
040B81 21 62 1A 04 1625   	ld hl,current_pen
040B85 4E          1626   	ld c,(hl)
040B86 CD 18 0F 04 1627   	call fn_draw_palette_without_border
040B8A CD 92 10 04 1628   	call fn_load_palette
040B8E CD 2F 19 04 1629   	call fn_draw_the_palette
040B92 CD E7 17 04 1630   	call fn_refresh_sprite
040B96 21 62 1A 04 1631   	ld hl,current_pen
040B9A 4E          1632   	ld c,(hl)
040B9B CD B3 0E 04 1633   	call fn_draw_palette_with_border
040B9F CD 27 18 04 1634   	call fn_change_frame
040BA3 C3 40 09 04 1635   	jp dsl_palette_tool_loop
040BA7             1636   
040BA7             1637   dslp_save_palette:
040BA7 21 AE FF FF 1638   	ld hl,KEY_S
040BAB CD F5 18 04 1639   	call fn_inkey
040BAF FE 00       1640   	cp 0
040BB1 20 F4       1641   	jr nz,dslp_save_palette
040BB3             1642   
040BB3 21 62 1A 04 1643   	ld hl,current_pen
040BB7 4E          1644   	ld c,(hl)
040BB8 CD 18 0F 04 1645   	call fn_draw_palette_without_border
040BBC CD 89 13 04 1646   	call fn_save_palette
040BC0 21 62 1A 04 1647   	ld hl,current_pen
040BC4 4E          1648   	ld c,(hl)
040BC5 CD B3 0E 04 1649   	call fn_draw_palette_with_border
040BC9 C3 40 09 04 1650   	jp dsl_palette_tool_loop
040BCD             1651   
040BCD             1652   dsl_draw_sprite_tool:
040BCD 21 9F FF FF 1653   	ld hl,KEY_TAB
040BD1 CD F5 18 04 1654   	call fn_inkey
040BD5 FE 00       1655   	cp 0
040BD7 20 F4       1656   	jr nz,dsl_draw_sprite_tool
040BD9             1657   
040BD9             1658   	; unselect palette color
040BD9 21 62 1A 04 1659   	ld hl,current_pen
040BDD 4E          1660   	ld c,(hl)
040BDE CD 18 0F 04 1661   	call fn_draw_palette_without_border
040BE2             1662   
040BE2             1663   	; draw the pixel with a border
040BE2 CD EB 0D 04 1664   	call fn_draw_pixel_with_border
040BE6             1665   
040BE6 C3 98 02 04 1666   	jp draw_sprite_loop
040BEA             1667   
040BEA             1668   dsl_dec_pen:
040BEA 21 62 1A 04 1669   	ld hl,current_pen
040BEE 7E          1670   	ld a,(hl)
040BEF FE 00       1671   	cp 0
040BF1 C8          1672   	ret z
040BF2 FE 40       1673   	cp MAX_COLORS
040BF4 D0          1674   	ret nc
040BF5             1675   
040BF5 4F          1676   	ld c,a ; c is the old pen
040BF6 3D          1677   	dec a ; a is the new pen
040BF7             1678   
040BF7 F5          1679   	push af
040BF8 C5          1680   	push bc
040BF9             1681   
040BF9             1682   	; unselect palette color
040BF9 CD 18 0F 04 1683   	call fn_draw_palette_without_border
040BFD             1684   
040BFD C1          1685   	pop bc
040BFE F1          1686   	pop af
040BFF             1687   
040BFF             1688   	; replace current pen value
040BFF 21 62 1A 04 1689   	ld hl,current_pen
040C03 77          1690   	ld (hl),a
040C04             1691   
040C04             1692   	; select palette color
040C04 4F          1693   	ld c,a
040C05 CD B3 0E 04 1694   	call fn_draw_palette_with_border
040C09 CD 70 18 04 1695   	call fn_slowdown
040C0D C3 40 09 04 1696   	jp dsl_palette_tool_loop
040C11             1697   
040C11             1698   dsl_inc_pen:
040C11 21 62 1A 04 1699   	ld hl,current_pen
040C15 7E          1700   	ld a,(hl)
040C16 21 81 1B 04 1701   	ld hl,colors_count
040C1A 4E          1702   	ld c,(hl)
040C1B 0D          1703   	dec c
040C1C B9          1704   	cp c
040C1D D0          1705   	ret nc
040C1E             1706   
040C1E 4F          1707   	ld c,a ; c is the old pen
040C1F 3C          1708   	inc a ; a is the new pen
040C20             1709   
040C20 F5          1710   	push af
040C21 C5          1711   	push bc
040C22             1712   
040C22             1713   	; unselect palette color
040C22 CD 18 0F 04 1714   	call fn_draw_palette_without_border
040C26             1715   
040C26 C1          1716   	pop bc
040C27 F1          1717   	pop af
040C28             1718   
040C28             1719   	; replace current pen value
040C28 21 62 1A 04 1720   	ld hl,current_pen
040C2C 77          1721   	ld (hl),a
040C2D             1722   
040C2D             1723   	; select palette color
040C2D 4F          1724   	ld c,a
040C2E CD B3 0E 04 1725   	call fn_draw_palette_with_border
040C32 CD 70 18 04 1726   	call fn_slowdown
040C36 C3 40 09 04 1727   	jp dsl_palette_tool_loop
040C3A             1728   
040C3A             1729   ; exit program
040C3A             1730   exit_program:
040C3A             1731   	; reset to mode 1
040C3A             1732   	vdu 22
040C3A 3E 16       0001M  		LD	A, function
040C3C 49 D7       0002M  		RST.LIS	10h
040C3E             1733   	vdu 1
040C3E 3E 01       0001M  		LD	A, function
040C40 49 D7       0002M  		RST.LIS	10h
040C42             1734   
040C42             1735   	; position the texte cursor at home
040C42             1736   	vdu 30
040C42 3E 1E       0001M  		LD	A, function
040C44 49 D7       0002M  		RST.LIS	10h
040C46             1737   
040C46             1738   	; show cursor
040C46             1739   	vdu 23
040C46 3E 17       0001M  		LD	A, function
040C48 49 D7       0002M  		RST.LIS	10h
040C4A             1740   	vdu 1
040C4A 3E 01       0001M  		LD	A, function
040C4C 49 D7       0002M  		RST.LIS	10h
040C4E             1741   	vdu 1
040C4E 3E 01       0001M  		LD	A, function
040C50 49 D7       0002M  		RST.LIS	10h
040C52             1742   
040C52 FD E1       1743   	pop iy
040C54 DD E1       1744   	pop ix
040C56 D1          1745   	pop de
040C57 C1          1746   	pop bc
040C58 F1          1747   	pop af
040C59 21 00 00 00 1748   	ld hl,0
040C5D             1749   
040C5D C9          1750   	ret
040C5E             1751   ;======================================================================
040C5E             1752   
040C5E             1753   ; draw a rectangle
040C5E             1754   fn_rect:
040C5E             1755   	vdu 25
040C5E 3E 19       0001M  		LD	A, function
040C60 49 D7       0002M  		RST.LIS	10h
040C62             1756   	vdu 4
040C62 3E 04       0001M  		LD	A, function
040C64 49 D7       0002M  		RST.LIS	10h
040C66 DD 21 4C 1A 1757   	ld ix,x1
       04          
040C6B DD 7E 00    1758   	ld a,(ix + 0)
040C6E             1759   	vdu_a
040C6E 49 D7       0001M  		RST.LIS	10h
040C70 DD 7E 01    1760   	ld a,(ix + 1)
040C73             1761   	vdu_a
040C73 49 D7       0001M  		RST.LIS	10h
040C75 FD 21 4E 1A 1762   	ld iy,y1
       04          
040C7A FD 7E 00    1763   	ld a,(iy + 0)
040C7D             1764   	vdu_a
040C7D 49 D7       0001M  		RST.LIS	10h
040C7F FD 7E 01    1765   	ld a,(iy + 1)
040C82             1766   	vdu_a
040C82 49 D7       0001M  		RST.LIS	10h
040C84             1767   
040C84             1768   	vdu 25
040C84 3E 19       0001M  		LD	A, function
040C86 49 D7       0002M  		RST.LIS	10h
040C88             1769   	vdu 5
040C88 3E 05       0001M  		LD	A, function
040C8A 49 D7       0002M  		RST.LIS	10h
040C8C DD 21 50 1A 1770   	ld ix,x2
       04          
040C91 DD 7E 00    1771   	ld a,(ix + 0)
040C94             1772   	vdu_a
040C94 49 D7       0001M  		RST.LIS	10h
040C96 DD 7E 01    1773   	ld a,(ix + 1)
040C99             1774   	vdu_a
040C99 49 D7       0001M  		RST.LIS	10h
040C9B FD 21 4E 1A 1775   	ld iy,y1
       04          
040CA0 FD 7E 00    1776   	ld a,(iy + 0)
040CA3             1777   	vdu_a
040CA3 49 D7       0001M  		RST.LIS	10h
040CA5 FD 7E 01    1778   	ld a,(iy + 1)
040CA8             1779   	vdu_a
040CA8 49 D7       0001M  		RST.LIS	10h
040CAA             1780   
040CAA             1781   	vdu 25
040CAA 3E 19       0001M  		LD	A, function
040CAC 49 D7       0002M  		RST.LIS	10h
040CAE             1782   	vdu 5
040CAE 3E 05       0001M  		LD	A, function
040CB0 49 D7       0002M  		RST.LIS	10h
040CB2 DD 21 50 1A 1783   	ld ix,x2
       04          
040CB7 DD 7E 00    1784   	ld a,(ix + 0)
040CBA             1785   	vdu_a
040CBA 49 D7       0001M  		RST.LIS	10h
040CBC DD 7E 01    1786   	ld a,(ix + 1)
040CBF             1787   	vdu_a
040CBF 49 D7       0001M  		RST.LIS	10h
040CC1 FD 21 52 1A 1788   	ld iy,y2
       04          
040CC6 FD 7E 00    1789   	ld a,(iy + 0)
040CC9             1790   	vdu_a
040CC9 49 D7       0001M  		RST.LIS	10h
040CCB FD 7E 01    1791   	ld a,(iy + 1)
040CCE             1792   	vdu_a
040CCE 49 D7       0001M  		RST.LIS	10h
040CD0             1793   
040CD0             1794   	vdu 25
040CD0 3E 19       0001M  		LD	A, function
040CD2 49 D7       0002M  		RST.LIS	10h
040CD4             1795   	vdu 5
040CD4 3E 05       0001M  		LD	A, function
040CD6 49 D7       0002M  		RST.LIS	10h
040CD8 DD 21 4C 1A 1796   	ld ix,x1
       04          
040CDD DD 7E 00    1797   	ld a,(ix + 0)
040CE0             1798   	vdu_a
040CE0 49 D7       0001M  		RST.LIS	10h
040CE2 DD 7E 01    1799   	ld a,(ix + 1)
040CE5             1800   	vdu_a
040CE5 49 D7       0001M  		RST.LIS	10h
040CE7 FD 21 52 1A 1801   	ld iy,y2
       04          
040CEC FD 7E 00    1802   	ld a,(iy + 0)
040CEF             1803   	vdu_a
040CEF 49 D7       0001M  		RST.LIS	10h
040CF1 FD 7E 01    1804   	ld a,(iy + 1)
040CF4             1805   	vdu_a
040CF4 49 D7       0001M  		RST.LIS	10h
040CF6             1806   
040CF6             1807   	vdu 25
040CF6 3E 19       0001M  		LD	A, function
040CF8 49 D7       0002M  		RST.LIS	10h
040CFA             1808   	vdu 5
040CFA 3E 05       0001M  		LD	A, function
040CFC 49 D7       0002M  		RST.LIS	10h
040CFE DD 21 4C 1A 1809   	ld ix,x1
       04          
040D03 DD 7E 00    1810   	ld a,(ix + 0)
040D06             1811   	vdu_a
040D06 49 D7       0001M  		RST.LIS	10h
040D08 DD 7E 01    1812   	ld a,(ix + 1)
040D0B             1813   	vdu_a
040D0B 49 D7       0001M  		RST.LIS	10h
040D0D FD 21 4E 1A 1814   	ld iy,y1
       04          
040D12 FD 7E 00    1815   	ld a,(iy + 0)
040D15             1816   	vdu_a
040D15 49 D7       0001M  		RST.LIS	10h
040D17 FD 7E 01    1817   	ld a,(iy + 1)
040D1A             1818   	vdu_a
040D1A 49 D7       0001M  		RST.LIS	10h
040D1C             1819   
040D1C C9          1820   	ret
040D1D             1821   
040D1D             1822   ; draw a filled rectangle
040D1D             1823   fn_rectf:
040D1D DD 21 4C 1A 1824   	ld ix,x1
       04          
040D22 FD 21 4E 1A 1825   	ld iy,y1
       04          
040D27             1826   
040D27             1827   	vdu 25
040D27 3E 19       0001M  		LD	A, function
040D29 49 D7       0002M  		RST.LIS	10h
040D2B             1828   	vdu 4
040D2B 3E 04       0001M  		LD	A, function
040D2D 49 D7       0002M  		RST.LIS	10h
040D2F DD 7E 00    1829   	ld a,(ix+0)
040D32             1830   	vdu_a
040D32 49 D7       0001M  		RST.LIS	10h
040D34 DD 7E 01    1831   	ld a,(ix+1)
040D37             1832   	vdu_a
040D37 49 D7       0001M  		RST.LIS	10h
040D39 FD 7E 00    1833   	ld a,(iy+0)
040D3C             1834   	vdu_a
040D3C 49 D7       0001M  		RST.LIS	10h
040D3E FD 7E 01    1835   	ld a,(iy+1)
040D41             1836   	vdu_a
040D41 49 D7       0001M  		RST.LIS	10h
040D43             1837   
040D43 DD 21 50 1A 1838   	ld ix,x2
       04          
040D48 FD 21 52 1A 1839   	ld iy,y2
       04          
040D4D             1840   
040D4D             1841   	vdu 25
040D4D 3E 19       0001M  		LD	A, function
040D4F 49 D7       0002M  		RST.LIS	10h
040D51             1842   	vdu 101
040D51 3E 65       0001M  		LD	A, function
040D53 49 D7       0002M  		RST.LIS	10h
040D55 DD 7E 00    1843   	ld a,(ix+0)
040D58             1844   	vdu_a
040D58 49 D7       0001M  		RST.LIS	10h
040D5A DD 7E 01    1845   	ld a,(ix+1)
040D5D             1846   	vdu_a
040D5D 49 D7       0001M  		RST.LIS	10h
040D5F FD 7E 00    1847   	ld a,(iy+0)
040D62             1848   	vdu_a
040D62 49 D7       0001M  		RST.LIS	10h
040D64 FD 7E 01    1849   	ld a,(iy+1)
040D67             1850   	vdu_a
040D67 49 D7       0001M  		RST.LIS	10h
040D69             1851   
040D69 C9          1852   	ret
040D6A             1853   
040D6A             1854   fn_calc_pixel_coords:
040D6A 11 00 00 00 1855   	ld de,$000000 ; reset deu
040D6E             1856   
040D6E             1857   	; calculate coordinates x of the resized pixel
040D6E 21 5C 1A 04 1858   	ld hl,xpix
040D72 5E          1859   	ld e,(hl) ; E = xpix
040D73 21 60 1A 04 1860   	ld hl,pixel_width
040D77 56          1861   	ld d,(hl) ; D = pixel_width
040D78 D5          1862   	push de
040D79 E1          1863   	pop hl ; HL = DE
040D7A ED 6C       1864   	mlt hl ; HL = xpix * pixel_width
040D7C DD 21 54 1A 1865   	ld ix,xs1
       04          
040D81 DD 5E 00    1866   	ld e,(ix+0)
040D84 DD 56 01    1867   	ld d,(ix+1)
040D87 13          1868   	inc de ; DE = xs1 + 1
040D88 19          1869   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040D89 FD 21 4C 1A 1870   	ld iy,x1
       04          
040D8E FD 75 00    1871   	ld (iy+0),l
040D91 FD 74 01    1872   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040D94 E5          1873   	push hl
040D95 21 60 1A 04 1874   	ld hl,pixel_width
040D99 16 00       1875   	ld d,0
040D9B 5E          1876   	ld e,(hl)
040D9C E1          1877   	pop hl
040D9D 19          1878   	add hl,de
040D9E 2B          1879   	dec hl
040D9F FD 21 50 1A 1880   	ld iy,x2
       04          
040DA4 FD 75 00    1881   	ld (iy+0),l
040DA7 FD 74 01    1882   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040DAA             1883   
040DAA 11 00 00 00 1884   	ld de,$000000 ; reset deu
040DAE             1885   
040DAE             1886   	; calculate coordinates y of the resized pixel
040DAE 21 5D 1A 04 1887   	ld hl,ypix
040DB2 5E          1888   	ld e,(hl) ; E = ypix
040DB3 21 60 1A 04 1889   	ld hl,pixel_width
040DB7 56          1890   	ld d,(hl) ; D = pixel_width
040DB8 D5          1891   	push de
040DB9 E1          1892   	pop hl ; HL = DE
040DBA ED 6C       1893   	mlt hl ; HL = ypix * pixel_width
040DBC DD 21 56 1A 1894   	ld ix,ys1
       04          
040DC1 DD 5E 00    1895   	ld e,(ix+0)
040DC4 DD 56 01    1896   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040DC7 13          1897   	inc de ; DE = ys1 + 1
040DC8 19          1898   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040DC9 FD 21 4E 1A 1899   	ld iy,y1
       04          
040DCE FD 75 00    1900   	ld (iy+0),l
040DD1 FD 74 01    1901   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040DD4 E5          1902   	push hl
040DD5 21 60 1A 04 1903   	ld hl,pixel_width
040DD9 16 00       1904   	ld d,0
040DDB 5E          1905   	ld e,(hl)
040DDC E1          1906   	pop hl
040DDD 19          1907   	add hl,de
040DDE 2B          1908   	dec hl
040DDF FD 21 52 1A 1909   	ld iy,y2
       04          
040DE4 FD 75 00    1910   	ld (iy+0),l
040DE7 FD 74 01    1911   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040DEA             1912   
040DEA C9          1913   	ret
040DEB             1914   
040DEB             1915   ; draw the resized pixel border, with its color
040DEB             1916   fn_draw_pixel_with_border:
040DEB CD FF 0D 04 1917   	call fn_draw_pixel_without_border
040DEF             1918   
040DEF             1919   	; set graphics pen
040DEF             1920   	vdu 18
040DEF 3E 12       0001M  		LD	A, function
040DF1 49 D7       0002M  		RST.LIS	10h
040DF3             1921   	vdu 0
040DF3 3E 00       0001M  		LD	A, function
040DF5 49 D7       0002M  		RST.LIS	10h
040DF7             1922   	vdu 1 ; pen 1
040DF7 3E 01       0001M  		LD	A, function
040DF9 49 D7       0002M  		RST.LIS	10h
040DFB             1923   
040DFB             1924   	; draw the sprite's border rectangle
040DFB C3 5E 0C 04 1925   	jp fn_rect
040DFF             1926   
040DFF             1927   ; draw the resized pixel color
040DFF             1928   fn_draw_pixel_without_border:
040DFF CD 6A 0D 04 1929   	call fn_calc_pixel_coords
040E03             1930   
040E03             1931   	; set graphics pen
040E03             1932   	vdu 18
040E03 3E 12       0001M  		LD	A, function
040E05 49 D7       0002M  		RST.LIS	10h
040E07             1933   	vdu 0
040E07 3E 00       0001M  		LD	A, function
040E09 49 D7       0002M  		RST.LIS	10h
040E0B CD 15 0E 04 1934   	call fn_get_pixel_color
040E0F             1935   	vdu_a
040E0F 49 D7       0001M  		RST.LIS	10h
040E11             1936   
040E11             1937   	; draw the sprite's color rectangle
040E11 C3 1D 0D 04 1938   	jp fn_rectf
040E15             1939   
040E15             1940   ; get pixel color value in the sprite buffer
040E15             1941   ; returns A: pixel color (0-63)
040E15             1942   fn_get_pixel_color:
040E15 11 00 00 00 1943   	ld de,$000000 ; reset deu
040E19             1944   
040E19             1945   	; calculate the offset to add to the address
040E19 21 5D 1A 04 1946   	ld hl,ypix
040E1D 5E          1947   	ld e,(hl) ; E = ypix
040E1E 21 61 1A 04 1948   	ld hl,spr_size
040E22 56          1949   	ld d,(hl) ; D = sprsize
040E23 D5          1950   	push de
040E24 E1          1951   	pop hl
040E25 ED 6C       1952   	mlt hl ; HL = ypix * sprsize
040E27 E5          1953   	push hl
040E28 21 5C 1A 04 1954   	ld hl,xpix
040E2C 5E          1955   	ld e,(hl)
040E2D 16 00       1956   	ld d,0
040E2F E1          1957   	pop hl
040E30 19          1958   	add hl,de ; HL = (ypix * sprsize) + xpix
040E31             1959   
040E31 11 87 1B 04 1960   	ld de,current_frame
040E35 1A          1961   	ld a,(de)
040E36 FE 00       1962   	cp 0
040E38 28 16       1963   	jr z,gpc_end_loop
040E3A             1964   
040E3A 47          1965   	ld b,a
040E3B E5          1966   	push hl
040E3C 11 00 00 00 1967   	ld de,$000000
040E40 21 61 1A 04 1968   	ld hl,spr_size
040E44 5E          1969   	ld e,(hl)
040E45 56          1970   	ld d,(hl)
040E46 D5          1971   	push de
040E47 E1          1972   	pop hl
040E48 ED 6C       1973   	mlt hl
040E4A E5          1974   	push hl
040E4B D1          1975   	pop de ; DE = sprsize²
040E4C E1          1976   	pop hl
040E4D             1977   
040E4D             1978   gpc_loop:
040E4D 19          1979   	add hl,de
040E4E 10 FD       1980   	djnz gpc_loop
040E50             1981   
040E50             1982   gpc_end_loop:
040E50             1983   	; add the offset to the address
040E50 11 90 1B 04 1984   	ld de,sprite_buffer
040E54 19          1985   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040E55             1986   
040E55             1987   	; get pixel color value
040E55 7E          1988   	ld a,(hl)
040E56             1989   
040E56 C9          1990   	ret
040E57             1991   
040E57             1992   ; get pixel color value in the sprite buffer
040E57             1993   ; A: pixel color (0-63)
040E57             1994   fn_set_pixel_color:
040E57 11 00 00 00 1995   	ld de,$000000 ; reset deu
040E5B             1996   
040E5B             1997   	; calculate the offset to add to the address
040E5B 21 5D 1A 04 1998   	ld hl,ypix
040E5F 5E          1999   	ld e,(hl) ; E = ypix
040E60 21 61 1A 04 2000   	ld hl,spr_size
040E64 56          2001   	ld d,(hl) ; D = sprsize
040E65 D5          2002   	push de
040E66 E1          2003   	pop hl
040E67 ED 6C       2004   	mlt hl ; HL = ypix * sprsize
040E69 E5          2005   	push hl
040E6A 21 5C 1A 04 2006   	ld hl,xpix
040E6E 5E          2007   	ld e,(hl)
040E6F 16 00       2008   	ld d,0
040E71 E1          2009   	pop hl
040E72 19          2010   	add hl,de ; HL = (ypix * sprsize) + xpix
040E73 F5          2011   	push af
040E74             2012   
040E74 11 87 1B 04 2013   	ld de,current_frame
040E78 1A          2014   	ld a,(de)
040E79 FE 00       2015   	cp 0
040E7B 28 16       2016   	jr z,spc_end_loop
040E7D             2017   
040E7D 47          2018   	ld b,a
040E7E E5          2019   	push hl
040E7F 11 00 00 00 2020   	ld de,$000000
040E83 21 61 1A 04 2021   	ld hl,spr_size
040E87 5E          2022   	ld e,(hl)
040E88 56          2023   	ld d,(hl)
040E89 D5          2024   	push de
040E8A E1          2025   	pop hl
040E8B ED 6C       2026   	mlt hl
040E8D E5          2027   	push hl
040E8E D1          2028   	pop de ; DE = sprsize²
040E8F E1          2029   	pop hl
040E90             2030   
040E90             2031   spc_loop:
040E90 19          2032   	add hl,de
040E91 10 FD       2033   	djnz spc_loop
040E93             2034   
040E93             2035   spc_end_loop:
040E93             2036   
040E93             2037   	; add the offset to the address
040E93 11 90 1B 04 2038   	ld de,sprite_buffer
040E97 19          2039   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040E98             2040   
040E98             2041   	; set pixel color value
040E98 F1          2042   	pop af
040E99 77          2043   	ld (hl),a
040E9A             2044   
040E9A C9          2045   	ret
040E9B             2046   
040E9B             2047   fn_move_up:
040E9B 21 5D 1A 04 2048   	ld hl,ypix
040E9F 35          2049   	dec (hl)
040EA0 C9          2050   	ret
040EA1             2051   
040EA1             2052   fn_move_down:
040EA1 21 5D 1A 04 2053   	ld hl,ypix
040EA5 34          2054   	inc (hl)
040EA6 C9          2055   	ret
040EA7             2056   
040EA7             2057   fn_move_left:
040EA7 21 5C 1A 04 2058   	ld hl,xpix
040EAB 35          2059   	dec (hl)
040EAC C9          2060   	ret
040EAD             2061   
040EAD             2062   fn_move_right:
040EAD 21 5C 1A 04 2063   	ld hl,xpix
040EB1 34          2064   	inc (hl)
040EB2 C9          2065   	ret
040EB3             2066   
040EB3             2067   ; draw palette color whit border and selection
040EB3             2068   ; C = color number (0-63)
040EB3             2069   fn_draw_palette_with_border:
040EB3 C5          2070   	push bc
040EB4             2071   
040EB4             2072   	; choose palette color
040EB4             2073   	vdu 18
040EB4 3E 12       0001M  		LD	A, function
040EB6 49 D7       0002M  		RST.LIS	10h
040EB8             2074   	vdu 0
040EB8 3E 00       0001M  		LD	A, function
040EBA 49 D7       0002M  		RST.LIS	10h
040EBC C1          2075   	pop bc
040EBD C5          2076   	push bc
040EBE 79          2077   	ld a,c
040EBF             2078   	vdu_a
040EBF 49 D7       0001M  		RST.LIS	10h
040EC1             2079   
040EC1             2080   	; store coordinates for a palette square
040EC1 DD 21 4C 1A 2081   	ld ix,x1
       04          
040EC6 E1          2082   	pop hl
040EC7 E5          2083   	push hl
040EC8 26 05       2084   	ld h,5
040ECA ED 6C       2085   	mlt hl
040ECC E5          2086   	push hl
040ECD DD 75 00    2087   	ld (ix+0),l
040ED0 DD 74 01    2088   	ld (ix+1),h
040ED3             2089   
040ED3 DD 21 4E 1A 2090   	ld ix,y1
       04          
040ED8 21 00 00 00 2091   	ld hl,0
040EDC DD 75 00    2092   	ld (ix+0),l
040EDF DD 74 01    2093   	ld (ix+1),h
040EE2             2094   
040EE2 DD 21 50 1A 2095   	ld ix,x2
       04          
040EE7 E1          2096   	pop hl
040EE8 11 04 00 00 2097   	ld de,4
040EEC 19          2098   	add hl,de
040EED DD 75 00    2099   	ld (ix+0),l
040EF0 DD 74 01    2100   	ld (ix+1),h
040EF3             2101   
040EF3 DD 21 52 1A 2102   	ld ix,y2
       04          
040EF8 21 0A 00 00 2103   	ld hl,10
040EFC DD 75 00    2104   	ld (ix+0),l
040EFF DD 74 01    2105   	ld (ix+1),h
040F02             2106   
040F02             2107   	; draw the palette filled square
040F02 CD 1D 0D 04 2108   	call fn_rectf
040F06             2109   
040F06             2110   	; choose pen 1
040F06             2111   	vdu 18
040F06 3E 12       0001M  		LD	A, function
040F08 49 D7       0002M  		RST.LIS	10h
040F0A             2112   	vdu 0
040F0A 3E 00       0001M  		LD	A, function
040F0C 49 D7       0002M  		RST.LIS	10h
040F0E 3E 01       2113   	ld a,1
040F10             2114   	vdu_a
040F10 49 D7       0001M  		RST.LIS	10h
040F12             2115   
040F12             2116   	; draw the palette square border
040F12 CD 5E 0C 04 2117   	call fn_rect
040F16             2118   
040F16             2119   	; next color ?
040F16 C1          2120   	pop bc
040F17             2121   
040F17 C9          2122   	ret
040F18             2123   
040F18             2124   ; draw palette color whitout border and selection
040F18             2125   ; C = color number (0-63)
040F18             2126   fn_draw_palette_without_border:
040F18 C5          2127   	push bc
040F19             2128   
040F19             2129   	; choose palette color
040F19             2130   	vdu 18
040F19 3E 12       0001M  		LD	A, function
040F1B 49 D7       0002M  		RST.LIS	10h
040F1D             2131   	vdu 0
040F1D 3E 00       0001M  		LD	A, function
040F1F 49 D7       0002M  		RST.LIS	10h
040F21 C1          2132   	pop bc
040F22 C5          2133   	push bc
040F23 79          2134   	ld a,c
040F24             2135   	vdu_a
040F24 49 D7       0001M  		RST.LIS	10h
040F26             2136   
040F26             2137   	; store coordinates for a palette square
040F26 DD 21 4C 1A 2138   	ld ix,x1
       04          
040F2B E1          2139   	pop hl
040F2C E5          2140   	push hl
040F2D 26 05       2141   	ld h,5
040F2F ED 6C       2142   	mlt hl
040F31 E5          2143   	push hl
040F32 DD 75 00    2144   	ld (ix+0),l
040F35 DD 74 01    2145   	ld (ix+1),h
040F38             2146   
040F38 DD 21 4E 1A 2147   	ld ix,y1
       04          
040F3D 21 00 00 00 2148   	ld hl,0
040F41 DD 75 00    2149   	ld (ix+0),l
040F44 DD 74 01    2150   	ld (ix+1),h
040F47             2151   
040F47 DD 21 50 1A 2152   	ld ix,x2
       04          
040F4C E1          2153   	pop hl
040F4D 11 04 00 00 2154   	ld de,4
040F51 19          2155   	add hl,de
040F52 DD 75 00    2156   	ld (ix+0),l
040F55 DD 74 01    2157   	ld (ix+1),h
040F58             2158   
040F58 DD 21 52 1A 2159   	ld ix,y2
       04          
040F5D 21 0A 00 00 2160   	ld hl,10
040F61 DD 75 00    2161   	ld (ix+0),l
040F64 DD 74 01    2162   	ld (ix+1),h
040F67             2163   
040F67             2164   	; draw the palette filled square
040F67 CD 1D 0D 04 2165   	call fn_rectf
040F6B             2166   
040F6B C1          2167   	pop bc
040F6C             2168   
040F6C C9          2169   	ret
040F6D             2170   
040F6D             2171   ; get an ascii key value
040F6D             2172   fn_input_key:
040F6D C5          2173   	push bc
040F6E             2174   	moscall mos_getkey
040F6E 3E 00       0001M  		LD	A, function
040F70 49 CF       0002M  		RST.LIS	08h
040F72 C1          2175   	pop bc
040F73 C9          2176   	ret
040F74             2177   
040F74             2178   ; input a text of 8 chars
040F74             2179   fn_input_text8:
040F74             2180   	; locate x,y
040F74             2181   	vdu 31
040F74 3E 1F       0001M  		LD	A, function
040F76 49 D7       0002M  		RST.LIS	10h
040F78             2182   	vdu FILENAME_X
040F78 3E 07       0001M  		LD	A, function
040F7A 49 D7       0002M  		RST.LIS	10h
040F7C             2183   	vdu FILENAME_Y
040F7C 3E 18       0001M  		LD	A, function
040F7E 49 D7       0002M  		RST.LIS	10h
040F80             2184   
040F80             2185   	; print text
040F80 21 CE 1A 04 2186   	ld hl,filename_label
040F84 01 00 00 00 2187   	ld bc,0
040F88 AF          2188   	xor a
040F89 49 DF       2189   	rst.lis $18
040F8B             2190   
040F8B             2191   	; show cursor
040F8B             2192   	vdu 23
040F8B 3E 17       0001M  		LD	A, function
040F8D 49 D7       0002M  		RST.LIS	10h
040F8F             2193   	vdu 1
040F8F 3E 01       0001M  		LD	A, function
040F91 49 D7       0002M  		RST.LIS	10h
040F93             2194   	vdu 1
040F93 3E 01       0001M  		LD	A, function
040F95 49 D7       0002M  		RST.LIS	10h
040F97             2195   
040F97 0E 00       2196   	ld c,0
040F99             2197   
040F99             2198   it8_loop:
040F99             2199   	; get ascii key
040F99 CD 6D 0F 04 2200   	call fn_input_key
040F9D B7          2201   	or a
040F9E CA 99 0F 04 2202   	jp z,it8_loop
040FA2             2203   
040FA2 FE 2E       2204   	cp '.'
040FA4 CA EE 0F 04 2205   	jp z,it8l_add_char
040FA8             2206   
040FA8 FE 2D       2207   	cp '-'
040FAA CA EE 0F 04 2208   	jp z,it8l_add_char
040FAE             2209   
040FAE FE 5F       2210   	cp '_'
040FB0 CA EE 0F 04 2211   	jp z,it8l_add_char
040FB4             2212   
040FB4 FE 7F       2213   	cp 127
040FB6 CA 22 10 04 2214   	jp z,it8l_backspace
040FBA             2215   
040FBA FE 0D       2216   	cp 13
040FBC CA 60 10 04 2217   	jp z,it8l_return
040FC0             2218   
040FC0 FE 30       2219   	cp '0'
040FC2 DA 99 0F 04 2220   	jp c,it8_loop
040FC6             2221   
040FC6 16 39       2222   	ld d,'9'
040FC8 14          2223   	inc d
040FC9 BA          2224   	cp d
040FCA DA EE 0F 04 2225   	jp c,it8l_add_char
040FCE             2226   
040FCE FE 41       2227   	cp 'A'
040FD0 DA 99 0F 04 2228   	jp c,it8_loop
040FD4             2229   
040FD4 16 5A       2230   	ld d,'Z'
040FD6 14          2231   	inc d
040FD7 BA          2232   	cp d
040FD8 DA EE 0F 04 2233   	jp c,it8l_add_char
040FDC             2234   
040FDC FE 61       2235   	cp 'a'
040FDE DA 99 0F 04 2236   	jp c,it8_loop
040FE2             2237   
040FE2 16 7A       2238   	ld d,'z'
040FE4 14          2239   	inc d
040FE5 BA          2240   	cp d
040FE6 DA EE 0F 04 2241   	jp c,it8l_add_char
040FEA             2242   
040FEA C3 99 0F 04 2243   	jp it8_loop
040FEE             2244   
040FEE             2245   it8l_add_char:
040FEE F5          2246   	push af
040FEF 79          2247   	ld a,c
040FF0 FE 10       2248   	cp 16
040FF2 38 05       2249   	jr c,it8l_poke_char
040FF4 F1          2250   	pop af
040FF5 C3 99 0F 04 2251   	jp it8_loop
040FF9             2252   
040FF9             2253   it8l_poke_char:
040FF9 F1          2254   	pop af
040FFA 21 D8 1A 04 2255   	ld hl,filename
040FFE 06 00       2256   	ld b,0
041000 09          2257   	add hl,bc
041001 77          2258   	ld (hl),a
041002 0C          2259   	inc c
041003 F5          2260   	push af
041004 C5          2261   	push bc
041005             2262   
041005             2263   	; locate x,y
041005             2264   	vdu 31
041005 3E 1F       0001M  		LD	A, function
041007 49 D7       0002M  		RST.LIS	10h
041009             2265   	vdu FILENAME_X+9
041009 3E 10       0001M  		LD	A, function
04100B 49 D7       0002M  		RST.LIS	10h
04100D             2266   	vdu FILENAME_Y
04100D 3E 18       0001M  		LD	A, function
04100F 49 D7       0002M  		RST.LIS	10h
041011             2267   
041011             2268   	; print text
041011 21 D8 1A 04 2269   	ld hl,filename
041015 01 00 00 00 2270   	ld bc,0
041019 AF          2271   	xor a
04101A 49 DF       2272   	rst.lis $18
04101C             2273   
04101C C1          2274   	pop bc
04101D F1          2275   	pop af
04101E             2276   
04101E C3 99 0F 04 2277   	jp it8_loop
041022             2278   
041022             2279   it8l_backspace:
041022 79          2280   	ld a,c
041023 FE 00       2281   	cp 0
041025 CA 99 0F 04 2282   	jp z,it8_loop
041029             2283   
041029             2284   	; delete a character of the filename
041029 21 D8 1A 04 2285   	ld hl,filename
04102D 06 00       2286   	ld b,0
04102F 09          2287   	add hl,bc
041030 AF          2288   	xor a
041031 77          2289   	ld (hl),a
041032 0D          2290   	dec c
041033 C5          2291   	push bc
041034             2292   
041034             2293   	; locate x,y
041034             2294   	vdu 31
041034 3E 1F       0001M  		LD	A, function
041036 49 D7       0002M  		RST.LIS	10h
041038 3E 10       2295   	ld a,FILENAME_X+9
04103A 81          2296   	add a,c
04103B             2297   	vdu_a
04103B 49 D7       0001M  		RST.LIS	10h
04103D             2298   	vdu FILENAME_Y
04103D 3E 18       0001M  		LD	A, function
04103F 49 D7       0002M  		RST.LIS	10h
041041             2299   
041041 C5          2300   	push bc
041042             2301   
041042             2302   	; print text
041042 21 FD 1A 04 2303   	ld hl,spacechar
041046 01 00 00 00 2304   	ld bc,0
04104A AF          2305   	xor a
04104B 49 DF       2306   	rst.lis $18
04104D             2307   
04104D C1          2308   	pop bc
04104E             2309   
04104E             2310   	; locate x,y
04104E             2311   	vdu 31
04104E 3E 1F       0001M  		LD	A, function
041050 49 D7       0002M  		RST.LIS	10h
041052 3E 10       2312   	ld a,FILENAME_X+9
041054 81          2313   	add a,c
041055             2314   	vdu_a
041055 49 D7       0001M  		RST.LIS	10h
041057             2315   	vdu FILENAME_Y
041057 3E 18       0001M  		LD	A, function
041059 49 D7       0002M  		RST.LIS	10h
04105B             2316   
04105B C1          2317   	pop bc
04105C C3 99 0F 04 2318   	jp it8_loop
041060             2319   
041060             2320   it8l_return:
041060             2321   	; locate x,y
041060             2322   	vdu 31
041060 3E 1F       0001M  		LD	A, function
041062 49 D7       0002M  		RST.LIS	10h
041064             2323   	vdu FILENAME_X
041064 3E 07       0001M  		LD	A, function
041066 49 D7       0002M  		RST.LIS	10h
041068             2324   	vdu FILENAME_Y
041068 3E 18       0001M  		LD	A, function
04106A 49 D7       0002M  		RST.LIS	10h
04106C             2325   
04106C             2326   	; print text
04106C 21 FF 1A 04 2327   	ld hl,void_filename
041070 01 00 00 00 2328   	ld bc,0
041074 AF          2329   	xor a
041075 49 DF       2330   	rst.lis $18
041077             2331   
041077             2332   	; hide cursor
041077             2333   	vdu 23
041077 3E 17       0001M  		LD	A, function
041079 49 D7       0002M  		RST.LIS	10h
04107B             2334   	vdu 1
04107B 3E 01       0001M  		LD	A, function
04107D 49 D7       0002M  		RST.LIS	10h
04107F             2335   	vdu 0
04107F 3E 00       0001M  		LD	A, function
041081 49 D7       0002M  		RST.LIS	10h
041083             2336   
041083             2337   it8l_endloop:
041083 21 B6 FF FF 2338   	ld hl,KEY_RETURN
041087 CD F5 18 04 2339   	call fn_inkey
04108B FE 01       2340   	CP 1
04108D CA 83 10 04 2341   	jp z,it8l_endloop
041091             2342   
041091 C9          2343   	ret
041092             2344   
041092             2345   ; load a palette
041092             2346   fn_load_palette:
041092             2347   	; clear the filename on the screen
041092 21 D8 1A 04 2348   	ld hl,filename
041096 06 10       2349   	ld b,FILENAME_LENGTH
041098 AF          2350   	xor a
041099             2351   
041099             2352   lp_clear_filename:
041099 77          2353   	ld (hl),a
04109A 23          2354   	inc hl
04109B 10 FC       2355   	djnz lp_clear_filename
04109D             2356   
04109D             2357   	; get filename
04109D CD 74 0F 04 2358   	call fn_input_text8
0410A1             2359   
0410A1             2360   	; set path to 'palettes/'
0410A1 21 F1 1A 04 2361   	ld hl,palette_path
0410A5             2362   	moscall mos_cd
0410A5 3E 03       0001M  		LD	A, function
0410A7 49 CF       0002M  		RST.LIS	08h
0410A9             2363   
0410A9             2364   	; exit on folder error
0410A9 FE 00       2365   	cp 0
0410AB C2 6D 11 04 2366   	jp nz,lp_folder_error
0410AF             2367   
0410AF             2368   	; open the file for read
0410AF 21 D8 1A 04 2369   	ld hl,filename
0410B3 0E 01       2370   	ld c,fa_open_existing|fa_read
0410B5             2371   	moscall mos_fopen
0410B5 3E 0A       0001M  		LD	A, function
0410B7 49 CF       0002M  		RST.LIS	08h
0410B9             2372   
0410B9             2373   	; exit on file error
0410B9 FE 00       2374   	cp 0
0410BB CA BF 12 04 2375   	jp z,lp_file_error
0410BF             2376   
0410BF             2377   	; filehandle -> C
0410BF 4F          2378   	ld c,a
0410C0             2379   
0410C0             2380   	; get palette header
0410C0 21 90 3B 04 2381   	ld hl,header_buffer
0410C4 11 10 00 00 2382   	ld de,16
0410C8 C5          2383   	push bc ; store filehandle
0410C9             2384   	moscall mos_fread
0410C9 3E 1A       0001M  		LD	A, function
0410CB 49 CF       0002M  		RST.LIS	08h
0410CD C1          2385   	pop bc ; restore filehandle
0410CE 3E 10       2386   	ld a,16
0410D0 BB          2387   	cp e
0410D1 C2 51 11 04 2388   	jp nz,lp_close_error
0410D5             2389   
0410D5             2390   	; compare loaded header with needed header
0410D5 11 EC 3E 04 2391   	ld de,header
0410D9 21 90 3B 04 2392   	ld hl,header_buffer
0410DD 47          2393   	ld b,a
0410DE             2394   
0410DE             2395   lp_compare:
0410DE 1A          2396   	ld a,(de)
0410DF BE          2397   	cp (hl)
0410E0 C2 75 11 04 2398   	jp nz,lp_header_error
0410E4             2399   
0410E4 13          2400   	inc de
0410E5 23          2401   	inc hl
0410E6 05          2402   	dec b
0410E7             2403   
0410E7 78          2404   	ld a,b
0410E8 FE 00       2405   	cp 0
0410EA C2 DE 10 04 2406   	jp nz,lp_compare
0410EE             2407   
0410EE             2408   	; prepare to read the number of colors
0410EE 21 A0 3B 04 2409   	ld hl,color_buffer
0410F2             2410   
0410F2             2411   lp_getcount:
0410F2             2412   	; read a string for colors count
0410F2 C5          2413   	push bc
0410F3 E5          2414   	push hl
0410F4             2415   
0410F4             2416   	; read colors data
0410F4             2417   	moscall mos_fgetc
0410F4 3E 0C       0001M  		LD	A, function
0410F6 49 CF       0002M  		RST.LIS	08h
0410F8             2418   
0410F8 E1          2419   	pop hl
0410F9 C1          2420   	pop bc
0410FA             2421   
0410FA             2422   	; exit if eof
0410FA DA 51 11 04 2423   	jp c,lp_close_error
0410FE             2424   
0410FE FE 30       2425   	cp 48 ; < 0
041100 38 0A       2426   	jr c,lpgc_next
041102 FE 3A       2427   	cp 58 ; > 9
041104 D2 BA 12 04 2428   	jp nc,lp_data_error
041108             2429   
041108 77          2430   	ld (hl),a
041109 23          2431   	inc hl
04110A 18 E6       2432   	jr lp_getcount
04110C             2433   
04110C             2434   lpgc_next:
04110C F5          2435   	push af
04110D 3E 0D       2436   	ld a,13
04110F 77          2437   	ld (hl),a ; store CR
041110 F1          2438   	pop af
041111             2439   
041111             2440   	; test CR
041111 FE 0D       2441   	cp 13
041113 C2 51 11 04 2442   	jp nz,lp_close_error
041117             2443   
041117 C5          2444   	push bc
041118             2445   
041118             2446   	; read LF
041118             2447   	moscall mos_fgetc
041118 3E 0C       0001M  		LD	A, function
04111A 49 CF       0002M  		RST.LIS	08h
04111C             2448   
04111C C1          2449   	pop bc
04111D             2450   
04111D             2451   	; test LF
04111D FE 0A       2452   	cp 10
04111F C2 51 11 04 2453   	jp nz,lp_close_error
041123             2454   
041123             2455   	; prepare to read color strings
041123 11 00 00 00 2456   	ld de,#000000
041127 21 A3 3B 04 2457   	ld hl,palette_buffer
04112B             2458   
04112B             2459   lp_load_pal_loop:
04112B C5          2460   	push bc
04112C D5          2461   	push de
04112D E5          2462   	push hl
04112E             2463   
04112E             2464   	; read colors data
04112E             2465   	moscall mos_fgetc
04112E 3E 0C       0001M  		LD	A, function
041130 49 CF       0002M  		RST.LIS	08h
041132             2466   
041132             2467   	; exit if eof
041132 DA 4A 11 04 2468   	jp c,lp_loaded
041136             2469   
041136 E1          2470   	pop hl
041137 D1          2471   	pop de
041138 C1          2472   	pop bc
041139             2473   
041139 77          2474   	ld (hl),a ; store loaded char in palette buffer
04113A 23          2475   	inc hl
04113B 13          2476   	inc de ; count chars
04113C 7A          2477   	ld a,d
04113D FE 03       2478   	cp MAX_PAL_DATA_HI
04113F DA 2B 11 04 2479   	jp c,lp_load_pal_loop
041143 7B          2480   	ld a,e
041144 FE 44       2481   	cp MAX_PAL_DATA_LO
041146 DA 2B 11 04 2482   	jp c,lp_load_pal_loop
04114A             2483   
04114A             2484   ; end of file
04114A             2485   lp_loaded:
04114A E1          2486   	pop hl
04114B D1          2487   	pop de
04114C C1          2488   	pop bc
04114D             2489   
04114D C3 7D 11 04 2490   	jp lp_close
041151             2491   
041151             2492   lp_close_error:
041151 C5          2493   	push bc
041152             2494   
041152             2495   	; read error
041152 CD 0B 17 04 2496   	call fn_print_file_error
041156             2497   
041156 C1          2498   	pop bc
041157             2499   
041157             2500   	; close the file
041157             2501   	moscall mos_fclose
041157 3E 0B       0001M  		LD	A, function
041159 49 CF       0002M  		RST.LIS	08h
04115B             2502   
04115B             2503   	; set path to home
04115B 21 FA 1A 04 2504   	ld hl,back_path
04115F             2505   	moscall mos_cd
04115F 3E 03       0001M  		LD	A, function
041161 49 CF       0002M  		RST.LIS	08h
041163             2506   
041163             2507   	; exit on error
041163 FE 00       2508   	cp 0
041165 C2 6D 11 04 2509   	jp nz,lp_folder_error
041169             2510   
041169 C3 B4 12 04 2511   	jp lp_exit
04116D             2512   
04116D             2513   lp_folder_error:
04116D             2514   	; write error
04116D CD 42 17 04 2515   	call fn_print_folder_error
041171 C3 B4 12 04 2516   	jp lp_exit
041175             2517   
041175             2518   lp_header_error:
041175             2519   	; write error
041175 CD 79 17 04 2520   	call fn_print_header_error
041179 C3 B4 12 04 2521   	jp lp_exit
04117D             2522   
04117D             2523   lp_close:
04117D C5          2524   	push bc
04117E             2525   
04117E             2526   	; close the file
04117E             2527   	moscall mos_fclose
04117E 3E 0B       0001M  		LD	A, function
041180 49 CF       0002M  		RST.LIS	08h
041182             2528   
041182 C1          2529   	pop bc
041183             2530   
041183             2531   	; set path to home
041183 21 FA 1A 04 2532   	ld hl,back_path
041187             2533   	moscall mos_cd
041187 3E 03       0001M  		LD	A, function
041189 49 CF       0002M  		RST.LIS	08h
04118B             2534   
04118B             2535   	; exit on error
04118B FE 00       2536   	cp 0
04118D C2 6D 11 04 2537   	jp nz,lp_folder_error
041191             2538   
041191             2539   	; read the number of colors we have in the palette
041191 21 A0 3B 04 2540   	ld hl,color_buffer
041195 7E          2541   	ld a,(hl)
041196 47          2542   	ld b,a
041197 23          2543   	inc hl
041198 7E          2544   	ld a,(hl)
041199 4F          2545   	ld c,a ; bc = 1st char, 2nd char or CR
04119A             2546   
04119A             2547   	; first is a char number ?
04119A 78          2548   	ld a,b
04119B FE 30       2549   	cp 48
04119D DA BA 12 04 2550   	jp c,lp_data_error
0411A1 FE 3A       2551   	cp 58
0411A3 D2 BA 12 04 2552   	jp nc,lp_data_error
0411A7             2553   
0411A7 79          2554   	ld a,c
0411A8 FE 0D       2555   	cp 13
0411AA C2 CC 11 04 2556   	jp nz,lp_two_numbers
0411AE             2557   
0411AE             2558   ; only one number
0411AE 78          2559   	ld a,b
0411AF D6 30       2560   	sub 48
0411B1             2561   
0411B1 21 82 1B 04 2562   	ld hl,new_colors_count
0411B5 77          2563   	ld (hl),a
0411B6             2564   
0411B6 FE 00       2565   	cp 0
0411B8 CA BA 12 04 2566   	jp z,lp_data_error
0411BC FE 03       2567   	cp 3
0411BE DA 01 12 04 2568   	jp c,lp_two_colors
0411C2 FE 05       2569   	cp 5
0411C4 DA 22 12 04 2570   	jp c,lp_four_colors
0411C8             2571   
0411C8 C3 43 12 04 2572   	jp lp_sixteen_colors
0411CC             2573   
0411CC             2574   ; two numbers
0411CC             2575   lp_two_numbers:
0411CC 79          2576   	ld a,c
0411CD FE 30       2577   	cp 48
0411CF DA BA 12 04 2578   	jp c,lp_data_error
0411D3 FE 3A       2579   	cp 58
0411D5 D2 BA 12 04 2580   	jp nc,lp_data_error
0411D9             2581   
0411D9 78          2582   	ld a,b
0411DA D6 30       2583   	sub 48
0411DC 01 00 00 00 2584   	ld bc,#000000
0411E0 47          2585   	ld b,a
0411E1 0E 0A       2586   	ld c,10
0411E3 ED 4C       2587   	mlt bc
0411E5 81          2588   	add a,c
0411E6             2589   
0411E6 21 82 1B 04 2590   	ld hl,new_colors_count
0411EA 77          2591   	ld (hl),a
0411EB             2592   
0411EB FE 0A       2593   	cp 10
0411ED DA BA 12 04 2594   	jp c,lp_data_error
0411F1 FE 11       2595   	cp 17
0411F3 DA 43 12 04 2596   	jp c,lp_sixteen_colors
0411F7 FE 41       2597   	cp 65
0411F9 DA 64 12 04 2598   	jp c,lp_sixty_four_colors
0411FD             2599   
0411FD C3 BA 12 04 2600   	jp lp_data_error
041201             2601   
041201             2602   lp_two_colors:
041201 21 81 1B 04 2603   	ld hl,colors_count
041205 3E 02       2604   	ld a,2
041207 77          2605   	ld (hl),a
041208             2606   
041208 47          2607   	ld b,a
041209 21 62 1A 04 2608   	ld hl,current_pen
04120D 7E          2609   	ld a,(hl)
04120E B8          2610   	cp b
04120F 38 02       2611   	jr c,lptc_done
041211 05          2612   	dec b
041212 70          2613   	ld (hl),b
041213             2614   
041213             2615   lptc_done:
041213 21 82 1B 04 2616   	ld hl,new_colors_count
041217 7E          2617   	ld a,(hl) ; real number of coulours
041218 06 00       2618   	ld b,0 ; start wit color 0
04121A 21 A3 3B 04 2619   	ld hl,palette_buffer ; palette will be got here
04121E C3 85 12 04 2620   	jp lp_read_colors
041222             2621   
041222             2622   lp_four_colors:
041222 21 81 1B 04 2623   	ld hl,colors_count
041226 3E 04       2624   	ld a,4
041228 77          2625   	ld (hl),a
041229             2626   
041229 47          2627   	ld b,a
04122A 21 62 1A 04 2628   	ld hl,current_pen
04122E 7E          2629   	ld a,(hl)
04122F B8          2630   	cp b
041230 38 02       2631   	jr c,lpfc_done
041232 05          2632   	dec b
041233 70          2633   	ld (hl),b
041234             2634   
041234             2635   lpfc_done:
041234 21 82 1B 04 2636   	ld hl,new_colors_count
041238 7E          2637   	ld a,(hl) ; real number of coulours
041239 06 00       2638   	ld b,0 ; start wit color 0
04123B 21 A3 3B 04 2639   	ld hl,palette_buffer ; palette will be got here
04123F C3 85 12 04 2640   	jp lp_read_colors
041243             2641   
041243             2642   lp_sixteen_colors:
041243 21 81 1B 04 2643   	ld hl,colors_count
041247 3E 10       2644   	ld a,16
041249 77          2645   	ld (hl),a
04124A             2646   
04124A 47          2647   	ld b,a
04124B 21 62 1A 04 2648   	ld hl,current_pen
04124F 7E          2649   	ld a,(hl)
041250 B8          2650   	cp b
041251 38 02       2651   	jr c,lpsc_done
041253 05          2652   	dec b
041254 70          2653   	ld (hl),b
041255             2654   
041255             2655   lpsc_done:
041255 21 82 1B 04 2656   	ld hl,new_colors_count
041259 7E          2657   	ld a,(hl) ; real number of coulours
04125A 06 00       2658   	ld b,0 ; start wit color 0
04125C 21 A3 3B 04 2659   	ld hl,palette_buffer ; palette will be got here
041260 C3 85 12 04 2660   	jp lp_read_colors
041264             2661   
041264             2662   lp_sixty_four_colors:
041264 21 81 1B 04 2663   	ld hl,colors_count
041268 3E 40       2664   	ld a,64
04126A 77          2665   	ld (hl),a
04126B             2666   
04126B 47          2667   	ld b,a
04126C 21 62 1A 04 2668   	ld hl,current_pen
041270 7E          2669   	ld a,(hl)
041271 B8          2670   	cp b
041272 38 02       2671   	jr c,lpsfc_done
041274 05          2672   	dec b
041275 70          2673   	ld (hl),b
041276             2674   
041276             2675   lpsfc_done:
041276 21 82 1B 04 2676   	ld hl,new_colors_count
04127A 7E          2677   	ld a,(hl) ; real number of coulours
04127B 06 00       2678   	ld b,0 ; start wit color 0
04127D 21 A3 3B 04 2679   	ld hl,palette_buffer ; palette will be taken here
041281 C3 85 12 04 2680   	jp lp_read_colors
041285             2681   
041285             2682   lp_read_colors:
041285 F5          2683   	push af
041286             2684   
041286 CD D2 12 04 2685   	call lp_read_tint ; read red tint
04128A             2686   
04128A E5          2687   	push hl
04128B 21 83 1B 04 2688   	ld hl,red_tint
04128F 77          2689   	ld (hl),a
041290 E1          2690   	pop hl
041291             2691   
041291 CD D2 12 04 2692   	call lp_read_tint ; read green tint
041295             2693   
041295 E5          2694   	push hl
041296 21 84 1B 04 2695   	ld hl,green_tint
04129A 77          2696   	ld (hl),a
04129B E1          2697   	pop hl
04129C             2698   
04129C CD D2 12 04 2699   	call lp_read_tint ; read blue tint
0412A0             2700   
0412A0 E5          2701   	push hl
0412A1 21 85 1B 04 2702   	ld hl,blue_tint
0412A5 77          2703   	ld (hl),a
0412A6 E1          2704   	pop hl
0412A7             2705   
0412A7 CD 5E 13 04 2706   	call lp_set_tint
0412AB             2707   
0412AB F1          2708   	pop af
0412AC             2709   
0412AC 04          2710   	inc b ; increment number of colors
0412AD 3D          2711   	dec a ; decrement real number of colors
0412AE FE 00       2712   	cp 0
0412B0 C2 85 12 04 2713   	jp nz,lp_read_colors
0412B4             2714   
0412B4             2715   lp_exit:
0412B4 C9          2716   	ret
0412B5             2717   
0412B5             2718   lp_wrong_exit:
0412B5 F1          2719   	pop af
0412B6 C3 BA 12 04 2720   	jp lp_data_error
0412BA             2721   
0412BA             2722   lp_data_error:
0412BA CD B0 17 04 2723   	call fn_print_data_error
0412BE C9          2724   	ret
0412BF             2725   
0412BF             2726   lp_file_error:
0412BF CD 0B 17 04 2727   	call fn_print_file_error
0412C3             2728   
0412C3             2729   	; set path to home
0412C3 21 FA 1A 04 2730   	ld hl,back_path
0412C7             2731   	moscall mos_cd
0412C7 3E 03       0001M  		LD	A, function
0412C9 49 CF       0002M  		RST.LIS	08h
0412CB             2732   
0412CB             2733   	; exit on error
0412CB FE 00       2734   	cp 0
0412CD C2 6D 11 04 2735   	jp nz,lp_folder_error
0412D1             2736   
0412D1 C9          2737   	ret
0412D2             2738   
0412D2             2739   lp_read_tint:
0412D2 0E 00       2740   	ld c,0 ; number of chars readen for a single string number
0412D4 11 E8 3E 04 2741   	ld de,temp_chars_buffer ; temp buffer for a string number
0412D8             2742   
0412D8             2743   	; read next string number
0412D8 CD 42 13 04 2744   	call lprt_read_chars
0412DC             2745   
0412DC 79          2746   	ld a,c
0412DD FE 00       2747   	cp 0 ; no numbers
0412DF CA F9 12 04 2748   	jp z,lprt_wrong_exit
0412E3 FE 04       2749   	cp 4 ; too many numbers
0412E5 D2 F9 12 04 2750   	jp nc,lprt_wrong_exit
0412E9             2751   
0412E9 FE 03       2752   	cp 3
0412EB 28 29       2753   	jr z,lprt_three_int
0412ED             2754   
0412ED FE 02       2755   	cp 2
0412EF 28 0A       2756   	jr z,lprt_two_int
0412F1             2757   
0412F1             2758   	; one int only
0412F1 11 E8 3E 04 2759   	ld de,temp_chars_buffer
0412F5 1A          2760   	ld a,(de)
0412F6 D6 30       2761   	sub 48
0412F8 C9          2762   	ret
0412F9             2763   
0412F9             2764   lprt_wrong_exit:
0412F9 AF          2765   	xor a
0412FA C9          2766   	ret
0412FB             2767   
0412FB             2768   ; two int
0412FB             2769   lprt_two_int:
0412FB C5          2770   	push bc
0412FC 11 E8 3E 04 2771   	ld de,temp_chars_buffer
041300 1A          2772   	ld a,(de)
041301 D6 30       2773   	sub 48
041303 D5          2774   	push de
041304 11 00 00 00 2775   	ld de,#000000
041308 5F          2776   	ld e,a
041309 16 0A       2777   	ld d,10
04130B ED 5C       2778   	mlt de
04130D 43          2779   	ld b,e
04130E D1          2780   	pop de
04130F 13          2781   	inc de
041310 1A          2782   	ld a,(de)
041311 D6 30       2783   	sub 48
041313 80          2784   	add a,b ; full int value is here
041314 C1          2785   	pop bc
041315 C9          2786   	ret
041316             2787   
041316             2788   ; three int
041316             2789   lprt_three_int:
041316 C5          2790   	push bc
041317 11 E8 3E 04 2791   	ld de,temp_chars_buffer
04131B 1A          2792   	ld a,(de)
04131C D6 30       2793   	sub 48
04131E D5          2794   	push de
04131F 11 00 00 00 2795   	ld de,#000000
041323 5F          2796   	ld e,a
041324 16 64       2797   	ld d,100
041326 ED 5C       2798   	mlt de
041328 43          2799   	ld b,e
041329 D1          2800   	pop de
04132A 13          2801   	inc de
04132B 1A          2802   	ld a,(de)
04132C D6 30       2803   	sub 48
04132E D5          2804   	push de
04132F 11 00 00 00 2805   	ld de,#000000
041333 5F          2806   	ld e,a
041334 16 0A       2807   	ld d,10
041336 ED 5C       2808   	mlt de
041338 4B          2809   	ld c,e
041339 D1          2810   	pop de
04133A 13          2811   	inc de
04133B 1A          2812   	ld a,(de)
04133C D6 30       2813   	sub 48
04133E 81          2814   	add a,c
04133F 80          2815   	add a,b ; full int value is here
041340 C1          2816   	pop bc
041341 C9          2817   	ret
041342             2818   
041342             2819   lprt_read_chars:
041342 3E 0D       2820   	ld a,13
041344 12          2821   	ld (de),a ; store eol as next default temp char
041345             2822   
041345 7E          2823   	ld a,(hl) ; get the new char in the palette buffer
041346 23          2824   	inc hl
041347             2825   
041347 FE 20       2826   	cp 32
041349 C8          2827   	ret z ; ret if space
04134A FE 0D       2828   	cp 13
04134C 28 F4       2829   	jr z,lprt_read_chars ; loop if CR
04134E FE 0A       2830   	cp 10
041350 C8          2831   	ret z ; ret if LF
041351 FE 30       2832   	cp 48
041353 D8          2833   	ret c ; ret if not number
041354 FE 3A       2834   	cp 58
041356 D0          2835   	ret nc ; ret if not number
041357             2836   
041357             2837   ; found a number, store it
041357 12          2838   	ld (de),a
041358 13          2839   	inc de
041359 0C          2840   	inc c
04135A C3 42 13 04 2841   	jp lprt_read_chars
04135E             2842   
04135E             2843   ; set tint (RGB = c,e,l)
04135E             2844   lp_set_tint:
04135E F5          2845   	push af
04135F C5          2846   	push bc
041360 D5          2847   	push de
041361 E5          2848   	push hl
041362             2849   
041362 C5          2850   	push bc
041363             2851   	vdu 19
041363 3E 13       0001M  		LD	A, function
041365 49 D7       0002M  		RST.LIS	10h
041367 C1          2852   	pop bc
041368 78          2853   	ld a,b
041369             2854   	vdu_a
041369 49 D7       0001M  		RST.LIS	10h
04136B             2855   	vdu 255
04136B 3E FF       0001M  		LD	A, function
04136D 49 D7       0002M  		RST.LIS	10h
04136F             2856   
04136F 21 83 1B 04 2857   	ld hl,red_tint
041373 7E          2858   	ld a,(hl)
041374             2859   	vdu_a
041374 49 D7       0001M  		RST.LIS	10h
041376             2860   
041376 21 84 1B 04 2861   	ld hl,green_tint
04137A 7E          2862   	ld a,(hl)
04137B             2863   	vdu_a
04137B 49 D7       0001M  		RST.LIS	10h
04137D             2864   
04137D 21 85 1B 04 2865   	ld hl,blue_tint
041381 7E          2866   	ld a,(hl)
041382             2867   	vdu_a
041382 49 D7       0001M  		RST.LIS	10h
041384             2868   
041384 E1          2869   	pop hl
041385 D1          2870   	pop de
041386 C1          2871   	pop bc
041387 F1          2872   	pop af
041388 C9          2873   	ret
041389             2874   
041389             2875   ; save the palette
041389             2876   fn_save_palette:
041389 C9          2877   	ret
04138A             2878   
04138A             2879   ; load a sprite, giving its full name, with extension
04138A             2880   fn_load_sprite:
04138A             2881   	; clear the filename on the screen
04138A 21 D8 1A 04 2882   	ld hl,filename
04138E 06 10       2883   	ld b,FILENAME_LENGTH
041390 AF          2884   	xor a
041391             2885   
041391             2886   ls_clear_filename:
041391 77          2887   	ld (hl),a
041392 23          2888   	inc hl
041393 10 FC       2889   	djnz ls_clear_filename
041395             2890   
041395             2891   	; get filename
041395 CD 74 0F 04 2892   	call fn_input_text8
041399             2893   
041399             2894   	; set path to 'sprites/'
041399 21 E9 1A 04 2895   	ld hl,sprite_path
04139D             2896   	moscall mos_cd
04139D 3E 03       0001M  		LD	A, function
04139F 49 CF       0002M  		RST.LIS	08h
0413A1             2897   
0413A1             2898   	; exit on folder error
0413A1 FE 00       2899   	cp 0
0413A3 C2 74 14 04 2900   	jp nz,ls_folder_error
0413A7             2901   
0413A7             2902   	; open the file for read
0413A7 21 D8 1A 04 2903   	ld hl,filename
0413AB 0E 01       2904   	ld c,fa_open_existing|fa_read
0413AD             2905   	moscall mos_fopen
0413AD 3E 0A       0001M  		LD	A, function
0413AF 49 CF       0002M  		RST.LIS	08h
0413B1             2906   
0413B1             2907   	; exit on file error
0413B1 FE 00       2908   	cp 0
0413B3 CA A6 14 04 2909   	jp z,ls_file_error
0413B7             2910   
0413B7             2911   	; filehandle -> C
0413B7 4F          2912   	ld c,a
0413B8             2913   
0413B8             2914   	; get colors count
0413B8             2915   	moscall mos_fgetc
0413B8 3E 0C       0001M  		LD	A, function
0413BA 49 CF       0002M  		RST.LIS	08h
0413BC DA 4F 14 04 2916   	jp c,ls_close_error
0413C0             2917   
0413C0 FE 41       2918   	cp MAX_COLORS + 1
0413C2 D2 4F 14 04 2919   	jp nc,ls_close_error
0413C6             2920   
0413C6             2921   	; store colors count
0413C6 21 81 1B 04 2922   	ld hl,colors_count
0413CA 77          2923   	ld (hl),a
0413CB             2924   
0413CB             2925   	; redraw palette
0413CB C5          2926   	push bc
0413CC CD 2F 19 04 2927   	call fn_draw_the_palette
0413D0 C1          2928   	pop bc
0413D1             2929   
0413D1             2930   	; get frames count
0413D1             2931   	moscall mos_fgetc
0413D1 3E 0C       0001M  		LD	A, function
0413D3 49 CF       0002M  		RST.LIS	08h
0413D5 DA 4F 14 04 2932   	jp c,ls_close_error
0413D9             2933   
0413D9             2934   	; store frames count
0413D9 21 88 1B 04 2935   	ld hl,frames_count
0413DD 77          2936   	ld (hl),a
0413DE             2937   
0413DE             2938   	; set last frame as current frame
0413DE 21 87 1B 04 2939   	ld hl,current_frame
0413E2 3D          2940   	dec a
0413E3 77          2941   	ld (hl),a
0413E4             2942   
0413E4             2943   	; get sprite size
0413E4             2944   	moscall mos_fgetc
0413E4 3E 0C       0001M  		LD	A, function
0413E6 49 CF       0002M  		RST.LIS	08h
0413E8 DA 4F 14 04 2945   	jp c,ls_close_error
0413EC             2946   
0413EC             2947   	; store sprite size
0413EC 21 61 1A 04 2948   	ld hl,spr_size
0413F0 77          2949   	ld (hl),a
0413F1             2950   
0413F1             2951   	; set 4x4 pixel width
0413F1 FE 04       2952   	cp SPR44
0413F3 20 09       2953   	jr nz,ls_next1
0413F5             2954   
0413F5 21 60 1A 04 2955   	ld hl,pixel_width
0413F9 06 20       2956   	ld b,SPR44_width
0413FB 70          2957   	ld (hl),b
0413FC 18 21       2958   	jr ls_next4
0413FE             2959   
0413FE             2960   ls_next1:
0413FE             2961   	; set 8x8 pixel width
0413FE FE 08       2962   	cp SPR88
041400 20 09       2963   	jr nz,ls_next2
041402             2964   
041402 21 60 1A 04 2965   	ld hl,pixel_width
041406 06 10       2966   	ld b,SPR88_width
041408 70          2967   	ld (hl),b
041409 18 14       2968   	jr ls_next4
04140B             2969   
04140B             2970   ls_next2:
04140B             2971   
04140B             2972   	; set 16x16 pixel width
04140B FE 10       2973   	cp SPR1616
04140D 20 09       2974   	jr nz,ls_next3
04140F             2975   
04140F 21 60 1A 04 2976   	ld hl,pixel_width
041413 06 08       2977   	ld b,SPR1616_width
041415 70          2978   	ld (hl),b
041416 18 07       2979   	jr ls_next4
041418             2980   
041418             2981   ls_next3:
041418             2982   
041418 21 60 1A 04 2983   	ld hl,pixel_width
04141C 06 04       2984   	ld b,SPR3232_width
04141E 70          2985   	ld (hl),b
04141F             2986   
04141F             2987   ls_next4:
04141F 21 00 00 00 2988   	ld hl,#000000
041423 6F          2989   	ld l,a
041424 67          2990   	ld h,a
041425 ED 6C       2991   	mlt hl ; one frame sprite length
041427 E5          2992   	push hl
041428             2993   
041428             2994   	; get frames count
041428 21 88 1B 04 2995   	ld hl,frames_count
04142C 46          2996   	ld b,(hl)
04142D             2997   
04142D E1          2998   	pop hl
04142E             2999   
04142E 05          3000   	dec b
04142F 78          3001   	ld a,b
041430 FE 00       3002   	cp 0
041432 28 05       3003   	jr z,ls_read_data
041434             3004   
041434             3005   	; de = one frame sprite length
041434 E5          3006   	push hl
041435 D1          3007   	pop de
041436             3008   ls_add_length:
041436 19          3009   	add hl,de
041437 10 FD       3010   	djnz ls_add_length
041439             3011   
041439             3012   ls_read_data:
041439 E5          3013   	push hl ; all frames length
04143A E5          3014   	push hl
04143B D1          3015   	pop de
04143C 21 90 1B 04 3016   	ld hl,sprite_buffer
041440             3017   	moscall mos_fread
041440 3E 1A       0001M  		LD	A, function
041442 49 CF       0002M  		RST.LIS	08h
041444 E1          3018   	pop hl ; frame length
041445 B7          3019   	or a
041446 ED 52       3020   	sbc hl,de
041448 19          3021   	add hl,de ; compare frame length with loaded bytes
041449 20 04       3022   	jr nz,ls_close_error
04144B C3 7C 14 04 3023   	jp ls_close
04144F             3024   
04144F             3025   ls_close_error:
04144F C5          3026   	push bc
041450             3027   
041450             3028   	; read error
041450 CD 0B 17 04 3029   	call fn_print_file_error
041454             3030   
041454 C1          3031   	pop bc
041455             3032   
041455             3033   	; close the file
041455             3034   	moscall mos_fclose
041455 3E 0B       0001M  		LD	A, function
041457 49 CF       0002M  		RST.LIS	08h
041459             3035   
041459             3036   	; set path to home
041459 21 FA 1A 04 3037   	ld hl,back_path
04145D             3038   	moscall mos_cd
04145D 3E 03       0001M  		LD	A, function
04145F 49 CF       0002M  		RST.LIS	08h
041461             3039   
041461             3040   	; exit on error
041461 FE 00       3041   	cp 0
041463 C2 74 14 04 3042   	jp nz,ls_folder_error
041467             3043   
041467             3044   
041467             3045   	; reset current frame and coordinates of the drawing pixel
041467 21 5C 1A 04 3046   	ld hl,xpix
04146B AF          3047   	xor a
04146C 77          3048   	ld (hl),a
04146D 21 5D 1A 04 3049   	ld hl,ypix
041471 77          3050   	ld (hl),a
041472 18 25       3051   	jr ls_exit
041474             3052   
041474             3053   ls_folder_error:
041474             3054   	; write error
041474 CD 42 17 04 3055   	call fn_print_folder_error
041478 C3 99 14 04 3056   	jp ls_exit
04147C             3057   
04147C             3058   ls_close:
04147C             3059   	; close the file
04147C             3060   	moscall mos_fclose
04147C 3E 0B       0001M  		LD	A, function
04147E 49 CF       0002M  		RST.LIS	08h
041480             3061   
041480             3062   	; set path to home
041480 21 FA 1A 04 3063   	ld hl,back_path
041484             3064   	moscall mos_cd
041484 3E 03       0001M  		LD	A, function
041486 49 CF       0002M  		RST.LIS	08h
041488             3065   
041488             3066   	; exit on error
041488 FE 00       3067   	cp 0
04148A C2 74 14 04 3068   	jp nz,ls_folder_error
04148E             3069   
04148E             3070   	; reset current frame and coordinates of the drawing pixel
04148E 21 5C 1A 04 3071   	ld hl,xpix
041492 AF          3072   	xor a
041493 77          3073   	ld (hl),a
041494 21 5D 1A 04 3074   	ld hl,ypix
041498 77          3075   	ld (hl),a
041499             3076   
041499             3077   ls_exit:
041499 CD 91 18 04 3078   	call fn_show_spr_descr
04149D CD 27 18 04 3079   	call fn_change_frame
0414A1 CD 4C 18 04 3080   	call fn_change_frames_count
0414A5 C9          3081   	ret
0414A6             3082   
0414A6             3083   ls_file_error:
0414A6 CD 0B 17 04 3084   	call fn_print_file_error
0414AA             3085   
0414AA             3086   	; set path to home
0414AA 21 FA 1A 04 3087   	ld hl,back_path
0414AE             3088   	moscall mos_cd
0414AE 3E 03       0001M  		LD	A, function
0414B0 49 CF       0002M  		RST.LIS	08h
0414B2             3089   
0414B2             3090   	; exit on error
0414B2 FE 00       3091   	cp 0
0414B4 C2 74 14 04 3092   	jp nz,ls_folder_error
0414B8             3093   
0414B8 C9          3094   	ret
0414B9             3095   
0414B9             3096   ; save a sprite, giving its name
0414B9             3097   fn_save_sprite:
0414B9             3098   	; clear filename on the screen
0414B9 21 D8 1A 04 3099   	ld hl,filename
0414BD 06 10       3100   	ld b,FILENAME_LENGTH
0414BF AF          3101   	xor a
0414C0             3102   
0414C0             3103   ss_clear_filename:
0414C0 77          3104   	ld (hl),a
0414C1 23          3105   	inc hl
0414C2 10 FC       3106   	djnz ss_clear_filename
0414C4             3107   
0414C4             3108   	; get filename
0414C4 CD 74 0F 04 3109   	call fn_input_text8
0414C8             3110   
0414C8             3111   	; set path to sprite path
0414C8 21 E9 1A 04 3112   	ld hl,sprite_path
0414CC             3113   	moscall mos_cd
0414CC 3E 03       0001M  		LD	A, function
0414CE 49 CF       0002M  		RST.LIS	08h
0414D0             3114   
0414D0             3115   	; create it on error
0414D0 FE 00       3116   	cp 0
0414D2 F5          3117   	push af
0414D3 C4 26 19 04 3118   	call nz,fn_create_sprite_folder
0414D7 F1          3119   	pop af
0414D8 28 08       3120   	jr z,ss_next
0414DA             3121   
0414DA             3122   	; set path to sprite path
0414DA 21 E9 1A 04 3123   	ld hl,sprite_path
0414DE             3124   	moscall mos_cd
0414DE 3E 03       0001M  		LD	A, function
0414E0 49 CF       0002M  		RST.LIS	08h
0414E2             3125   
0414E2             3126   ss_next:
0414E2             3127   	; exit on error
0414E2 FE 00       3128   	cp 0
0414E4 C2 74 15 04 3129   	jp nz,ss_folder_error
0414E8             3130   
0414E8             3131   	; open the file for write
0414E8 21 D8 1A 04 3132   	ld hl,filename
0414EC 0E 0A       3133   	ld c,fa_create_always|fa_write
0414EE             3134   	moscall mos_fopen
0414EE 3E 0A       0001M  		LD	A, function
0414F0 49 CF       0002M  		RST.LIS	08h
0414F2             3135   
0414F2             3136   	; exit on error
0414F2 FE 00       3137   	cp 0
0414F4 CA B1 15 04 3138   	jp z,ss_file_error
0414F8             3139   
0414F8             3140   	; filehandle -> C
0414F8 4F          3141   	ld c,a
0414F9             3142   
0414F9             3143   	; store colors count in the file
0414F9 21 81 1B 04 3144   	ld hl,colors_count
0414FD 46          3145   	ld b,(hl)
0414FE             3146   	moscall mos_fputc
0414FE 3E 0D       0001M  		LD	A, function
041500 49 CF       0002M  		RST.LIS	08h
041502             3147   
041502             3148   	; store frames count in the file
041502 21 88 1B 04 3149   	ld hl,frames_count
041506 46          3150   	ld b,(hl)
041507             3151   	moscall mos_fputc
041507 3E 0D       0001M  		LD	A, function
041509 49 CF       0002M  		RST.LIS	08h
04150B             3152   
04150B             3153   	; store sprite size in the file
04150B 21 61 1A 04 3154   	ld hl,spr_size
04150F 46          3155   	ld b,(hl)
041510             3156   	moscall mos_fputc
041510 3E 0D       0001M  		LD	A, function
041512 49 CF       0002M  		RST.LIS	08h
041514             3157   
041514             3158   	; de = size²
041514 21 00 00 00 3159   	ld hl,#000000
041518 68          3160   	ld l,b
041519 60          3161   	ld h,b
04151A ED 6C       3162   	mlt hl ; HL = sprite length
04151C E5          3163   	push hl
04151D             3164   
04151D             3165   	; get frames count
04151D 21 88 1B 04 3166   	ld hl,frames_count
041521 46          3167   	ld b,(hl)
041522             3168   
041522 E1          3169   	pop hl
041523             3170   
041523 05          3171   	dec b
041524 78          3172   	ld a,b
041525 FE 00       3173   	cp 0
041527 28 05       3174   	jr z,ss_write_data
041529             3175   
041529 E5          3176   	push hl
04152A D1          3177   	pop de
04152B             3178   ss_add_length:
04152B 19          3179   	add hl,de
04152C 10 FD       3180   	djnz ss_add_length
04152E             3181   
04152E             3182   ss_write_data:
04152E E5          3183   	push hl
04152F E5          3184   	push hl
041530 D1          3185   	pop de
041531 21 90 1B 04 3186   	ld hl,sprite_buffer
041535             3187   	moscall mos_fwrite
041535 3E 1B       0001M  		LD	A, function
041537 49 CF       0002M  		RST.LIS	08h
041539 E1          3188   	pop hl
04153A B7          3189   	or a
04153B ED 52       3190   	sbc hl,de
04153D 19          3191   	add hl,de
04153E 20 04       3192   	jr nz,ss_close_error
041540 C3 7C 15 04 3193   	jp ss_close
041544             3194   
041544             3195   ss_close_error:
041544 C5          3196   	push bc
041545             3197   
041545             3198   	; write error
041545 CD 0B 17 04 3199   	call fn_print_file_error
041549             3200   
041549 C1          3201   	pop bc
04154A             3202   
04154A             3203   	; close the file
04154A             3204   	moscall mos_fclose
04154A 3E 0B       0001M  		LD	A, function
04154C 49 CF       0002M  		RST.LIS	08h
04154E             3205   
04154E             3206   	; set path to home
04154E 21 FA 1A 04 3207   	ld hl,back_path
041552             3208   	moscall mos_cd
041552 3E 03       0001M  		LD	A, function
041554 49 CF       0002M  		RST.LIS	08h
041556             3209   
041556             3210   	; exit on error
041556 FE 00       3211   	cp 0
041558 C2 74 15 04 3212   	jp nz,ss_folder_error
04155C             3213   
04155C             3214   	; reset current frame and coordinates of the drawing pixel
04155C 21 88 1B 04 3215   	ld hl,frames_count
041560 7E          3216   	ld a,(hl)
041561 3D          3217   	dec a
041562 21 87 1B 04 3218   	ld hl,current_frame
041566 77          3219   	ld (hl),a
041567 21 5C 1A 04 3220   	ld hl,xpix
04156B AF          3221   	xor a
04156C 77          3222   	ld (hl),a
04156D 21 5D 1A 04 3223   	ld hl,ypix
041571 77          3224   	ld (hl),a
041572 18 30       3225   	jr ss_exit
041574             3226   
041574             3227   ss_folder_error:
041574             3228   	; write error
041574 CD 42 17 04 3229   	call fn_print_folder_error
041578 C3 A4 15 04 3230   	jp ss_exit
04157C             3231   
04157C             3232   ss_close:
04157C             3233   	; close the file
04157C             3234   	moscall mos_fclose
04157C 3E 0B       0001M  		LD	A, function
04157E 49 CF       0002M  		RST.LIS	08h
041580             3235   
041580             3236   	; set path to home
041580 21 FA 1A 04 3237   	ld hl,back_path
041584             3238   	moscall mos_cd
041584 3E 03       0001M  		LD	A, function
041586 49 CF       0002M  		RST.LIS	08h
041588             3239   
041588             3240   	; exit on error
041588 FE 00       3241   	cp 0
04158A C2 74 15 04 3242   	jp nz,ss_folder_error
04158E             3243   
04158E             3244   	; reset current frame and coordinates of the drawing pixel
04158E 21 88 1B 04 3245   	ld hl,frames_count
041592 7E          3246   	ld a,(hl)
041593 3D          3247   	dec a
041594 21 87 1B 04 3248   	ld hl,current_frame
041598 77          3249   	ld (hl),a
041599 21 5C 1A 04 3250   	ld hl,xpix
04159D AF          3251   	xor a
04159E 77          3252   	ld (hl),a
04159F 21 5D 1A 04 3253   	ld hl,ypix
0415A3 77          3254   	ld (hl),a
0415A4             3255   
0415A4             3256   ss_exit:
0415A4 CD 91 18 04 3257   	call fn_show_spr_descr
0415A8 CD 27 18 04 3258   	call fn_change_frame
0415AC CD 4C 18 04 3259   	call fn_change_frames_count
0415B0 C9          3260   	ret
0415B1             3261   
0415B1             3262   ss_file_error:
0415B1 CD 0B 17 04 3263   	call fn_print_file_error
0415B5             3264   
0415B5             3265   	; set path to home
0415B5 21 FA 1A 04 3266   	ld hl,back_path
0415B9             3267   	moscall mos_cd
0415B9 3E 03       0001M  		LD	A, function
0415BB 49 CF       0002M  		RST.LIS	08h
0415BD             3268   
0415BD             3269   	; exit on error
0415BD FE 00       3270   	cp 0
0415BF C2 74 15 04 3271   	jp nz,ss_folder_error
0415C3 C9          3272   	ret
0415C4             3273   
0415C4             3274   ; export sprite data in assembly language, giving its name
0415C4             3275   fn_export_sprite:
0415C4             3276   	; clear filename
0415C4 21 D8 1A 04 3277   	ld hl,filename
0415C8 06 10       3278   	ld b,FILENAME_LENGTH
0415CA AF          3279   	xor a
0415CB             3280   
0415CB             3281   es_clear_filename:
0415CB 77          3282   	ld (hl),a
0415CC 23          3283   	inc hl
0415CD 10 FC       3284   	djnz es_clear_filename
0415CF             3285   
0415CF             3286   	; get filename
0415CF CD 74 0F 04 3287   	call fn_input_text8
0415D3             3288   
0415D3             3289   	; set path to sprite path
0415D3 21 E9 1A 04 3290   	ld hl,sprite_path
0415D7             3291   	moscall mos_cd
0415D7 3E 03       0001M  		LD	A, function
0415D9 49 CF       0002M  		RST.LIS	08h
0415DB             3292   
0415DB             3293   	; create it on error
0415DB FE 00       3294   	cp 0
0415DD F5          3295   	push af
0415DE C4 26 19 04 3296   	call nz,fn_create_sprite_folder
0415E2 F1          3297   	pop af
0415E3 28 0E       3298   	jr z,es_next
0415E5             3299   
0415E5             3300   	; set path to sprite path
0415E5 21 E9 1A 04 3301   	ld hl,sprite_path
0415E9             3302   	moscall mos_cd
0415E9 3E 03       0001M  		LD	A, function
0415EB 49 CF       0002M  		RST.LIS	08h
0415ED             3303   
0415ED             3304   	; exit on error
0415ED FE 00       3305   	cp 0
0415EF C2 EF 16 04 3306   	jp nz,es_folder_error
0415F3             3307   
0415F3             3308   es_next:
0415F3             3309   	; open the file for write
0415F3 21 D8 1A 04 3310   	ld hl,filename
0415F7 0E 0A       3311   	ld c,fa_create_always|fa_write
0415F9             3312   	moscall mos_fopen
0415F9 3E 0A       0001M  		LD	A, function
0415FB 49 CF       0002M  		RST.LIS	08h
0415FD             3313   
0415FD             3314   	; exit on error
0415FD FE 00       3315   	cp 0
0415FF CA F8 16 04 3316   	jp z,es_file_error
041603             3317   
041603             3318   	; filehandle -> C
041603 4F          3319   	ld c,a
041604             3320   
041604             3321   
041604             3322   	; L = first frame
041604 3E 00       3323   	ld a,0
041606 21 90 1B 04 3324   	ld hl,sprite_buffer
04160A 11 00 00 00 3325   	ld de,$000000
04160E             3326   
04160E             3327   es_frames_repeat:
04160E F5          3328   	push af
04160F E5          3329   	push hl
041610             3330   
041610 F5          3331   	push af
041611             3332   
041611             3333   	; start to write...
041611 1E 00       3334   	ld e,0 ; rows
041613             3335   
041613 06 3B       3336   	ld b,';'
041615             3337   	moscall mos_fputc
041615 3E 0D       0001M  		LD	A, function
041617 49 CF       0002M  		RST.LIS	08h
041619             3338   
041619 06 20       3339   	ld b,' '
04161B             3340   	moscall mos_fputc
04161B 3E 0D       0001M  		LD	A, function
04161D 49 CF       0002M  		RST.LIS	08h
04161F             3341   
04161F 06 46       3342   	ld b,'F'
041621             3343   	moscall mos_fputc
041621 3E 0D       0001M  		LD	A, function
041623 49 CF       0002M  		RST.LIS	08h
041625             3344   
041625 06 72       3345   	ld b,'r'
041627             3346   	moscall mos_fputc
041627 3E 0D       0001M  		LD	A, function
041629 49 CF       0002M  		RST.LIS	08h
04162B             3347   
04162B 06 6D       3348   	ld b,'m'
04162D             3349   	moscall mos_fputc
04162D 3E 0D       0001M  		LD	A, function
04162F 49 CF       0002M  		RST.LIS	08h
041631             3350   
041631 06 20       3351   	ld b,' '
041633             3352   	moscall mos_fputc
041633 3E 0D       0001M  		LD	A, function
041635 49 CF       0002M  		RST.LIS	08h
041637             3353   
041637 F1          3354   	pop af
041638 C6 30       3355   	add a,'0'
04163A 47          3356   	ld b,a
04163B             3357   	moscall mos_fputc
04163B 3E 0D       0001M  		LD	A, function
04163D 49 CF       0002M  		RST.LIS	08h
04163F             3358   
04163F 06 0D       3359   	ld b,13
041641             3360   	moscall mos_fputc
041641 3E 0D       0001M  		LD	A, function
041643 49 CF       0002M  		RST.LIS	08h
041645             3361   
041645 06 0A       3362   	ld b,10
041647             3363   	moscall mos_fputc
041647 3E 0D       0001M  		LD	A, function
041649 49 CF       0002M  		RST.LIS	08h
04164B             3364   
04164B             3365   es_repeat:
04164B             3366   
04164B 06 44       3367   	ld b,'D'
04164D             3368   	moscall mos_fputc
04164D 3E 0D       0001M  		LD	A, function
04164F 49 CF       0002M  		RST.LIS	08h
041651             3369   
041651 06 42       3370   	ld b,'B'
041653             3371   	moscall mos_fputc
041653 3E 0D       0001M  		LD	A, function
041655 49 CF       0002M  		RST.LIS	08h
041657             3372   
041657 06 20       3373   	ld b,' '
041659             3374   	moscall mos_fputc
041659 3E 0D       0001M  		LD	A, function
04165B 49 CF       0002M  		RST.LIS	08h
04165D             3375   
04165D 16 00       3376   	ld d,0 ; columns
04165F             3377   
04165F             3378   es_repeat_line:
04165F D5          3379   	push de
041660             3380   
041660 7E          3381   	ld a,(hl)
041661 23          3382   	inc hl
041662             3383   
041662             3384   	; convert A to BCD
041662 CD AB 19 04 3385   	call fn_hex2bcd
041666             3386   
041666             3387   	; write two numbers (chars)
041666 5F          3388   	ld e,a
041667 E6 F0       3389   	and $f0
041669 0F          3390   	rrca
04166A 0F          3391   	rrca
04166B 0F          3392   	rrca
04166C 0F          3393   	rrca
04166D C6 30       3394   	add '0'
04166F             3395   
04166F 47          3396   	ld b,a
041670             3397   	moscall mos_fputc
041670 3E 0D       0001M  		LD	A, function
041672 49 CF       0002M  		RST.LIS	08h
041674             3398   
041674 7B          3399   	ld a,e
041675 E6 0F       3400   	and $0f
041677 C6 30       3401   	add '0'
041679             3402   
041679 47          3403   	ld b,a
04167A             3404   	moscall mos_fputc
04167A 3E 0D       0001M  		LD	A, function
04167C 49 CF       0002M  		RST.LIS	08h
04167E             3405   
04167E D1          3406   	pop de
04167F 14          3407   	inc d
041680 3A 61 1A 04 3408   	ld a,(spr_size)
041684 BA          3409   	cp d
041685 F5          3410   	push af
041686 C4 A4 19 04 3411   	call nz,fn_comma
04168A F1          3412   	pop af
04168B C2 5F 16 04 3413   	jp nz,es_repeat_line
04168F             3414   
04168F 06 0D       3415   	ld b,13 ; CR
041691             3416   	moscall mos_fputc
041691 3E 0D       0001M  		LD	A, function
041693 49 CF       0002M  		RST.LIS	08h
041695             3417   
041695 06 0A       3418   	ld b,10 ; LF
041697             3419   	moscall mos_fputc
041697 3E 0D       0001M  		LD	A, function
041699 49 CF       0002M  		RST.LIS	08h
04169B             3420   
04169B 1C          3421   	inc e
04169C 3A 61 1A 04 3422   	ld a,(spr_size)
0416A0 BB          3423   	cp e
0416A1 C2 4B 16 04 3424   	jp nz,es_repeat
0416A5             3425   
0416A5 06 0D       3426   	ld b,13 ; CR
0416A7             3427   	moscall mos_fputc
0416A7 3E 0D       0001M  		LD	A, function
0416A9 49 CF       0002M  		RST.LIS	08h
0416AB             3428   
0416AB 06 0A       3429   	ld b,10 ; LF
0416AD             3430   	moscall mos_fputc
0416AD 3E 0D       0001M  		LD	A, function
0416AF 49 CF       0002M  		RST.LIS	08h
0416B1             3431   
0416B1 E1          3432   	pop hl
0416B2 D5          3433   	push de
0416B3 ED 5C       3434   	mlt de
0416B5 19          3435   	add hl,de
0416B6 D1          3436   	pop de
0416B7 F1          3437   	pop af
0416B8 3C          3438   	inc a
0416B9 DD 21 88 1B 3439   	ld ix,frames_count
       04          
0416BE DD BE 00    3440   	cp (ix+0)
0416C1 C2 0E 16 04 3441   	jp nz,es_frames_repeat
0416C5             3442   
0416C5             3443   	; close the file
0416C5             3444   	moscall mos_fclose
0416C5 3E 0B       0001M  		LD	A, function
0416C7 49 CF       0002M  		RST.LIS	08h
0416C9             3445   
0416C9             3446   	; set path to home
0416C9 21 FA 1A 04 3447   	ld hl,back_path
0416CD             3448   	moscall mos_cd
0416CD 3E 03       0001M  		LD	A, function
0416CF 49 CF       0002M  		RST.LIS	08h
0416D1             3449   
0416D1             3450   	; exit on error
0416D1 FE 00       3451   	cp 0
0416D3 C2 EF 16 04 3452   	jp nz,es_folder_error
0416D7             3453   
0416D7             3454   	; reset current frame and coordinates of the drawing pixel
0416D7 21 88 1B 04 3455   	ld hl,frames_count
0416DB 7E          3456   	ld a,(hl)
0416DC 3D          3457   	dec a
0416DD 21 87 1B 04 3458   	ld hl,current_frame
0416E1 77          3459   	ld (hl),a
0416E2 21 5C 1A 04 3460   	ld hl,xpix
0416E6 AF          3461   	xor a
0416E7 77          3462   	ld (hl),a
0416E8 21 5D 1A 04 3463   	ld hl,ypix
0416EC 77          3464   	ld (hl),a
0416ED 18 08       3465   	jr es_exit
0416EF             3466   
0416EF             3467   es_folder_error:
0416EF             3468   	; write error
0416EF CD 42 17 04 3469   	call fn_print_folder_error
0416F3 C3 F7 16 04 3470   	jp es_exit
0416F7             3471   
0416F7             3472   es_exit:
0416F7 C9          3473   	ret
0416F8             3474   
0416F8             3475   es_file_error:
0416F8 CD 0B 17 04 3476   	call fn_print_file_error
0416FC             3477   
0416FC             3478   	; set path to home
0416FC 21 FA 1A 04 3479   	ld hl,back_path
041700             3480   	moscall mos_cd
041700 3E 03       0001M  		LD	A, function
041702 49 CF       0002M  		RST.LIS	08h
041704             3481   
041704             3482   	; exit on error
041704 FE 00       3483   	cp 0
041706 C2 EF 16 04 3484   	jp nz,es_folder_error
04170A C9          3485   	ret
04170B             3486   
04170B             3487   ; print 'file error'
04170B             3488   fn_print_file_error:
04170B             3489   	vdu 7
04170B 3E 07       0001M  		LD	A, function
04170D 49 D7       0002M  		RST.LIS	10h
04170F             3490   
04170F             3491   	; locate x,y
04170F             3492   	vdu 31
04170F 3E 1F       0001M  		LD	A, function
041711 49 D7       0002M  		RST.LIS	10h
041713             3493   	vdu FILENAME_X
041713 3E 07       0001M  		LD	A, function
041715 49 D7       0002M  		RST.LIS	10h
041717             3494   	vdu FILENAME_Y
041717 3E 18       0001M  		LD	A, function
041719 49 D7       0002M  		RST.LIS	10h
04171B             3495   
04171B             3496   	; print text
04171B 21 19 1B 04 3497   	ld hl,file_error
04171F 01 00 00 00 3498   	ld bc,0
041723 AF          3499   	xor a
041724 49 DF       3500   	rst.lis $18
041726             3501   
041726 CD 6D 0F 04 3502   	call fn_input_key
04172A             3503   
04172A             3504   	; locate x,y
04172A             3505   	vdu 31
04172A 3E 1F       0001M  		LD	A, function
04172C 49 D7       0002M  		RST.LIS	10h
04172E             3506   	vdu FILENAME_X
04172E 3E 07       0001M  		LD	A, function
041730 49 D7       0002M  		RST.LIS	10h
041732             3507   	vdu FILENAME_Y
041732 3E 18       0001M  		LD	A, function
041734 49 D7       0002M  		RST.LIS	10h
041736             3508   
041736             3509   	; print text
041736 21 FF 1A 04 3510   	ld hl,void_filename
04173A 01 00 00 00 3511   	ld bc,0
04173E AF          3512   	xor a
04173F 49 DF       3513   	rst.lis $18
041741             3514   
041741 C9          3515   	ret
041742             3516   
041742             3517   ; print 'folder error'
041742             3518   fn_print_folder_error:
041742             3519   	vdu 7
041742 3E 07       0001M  		LD	A, function
041744 49 D7       0002M  		RST.LIS	10h
041746             3520   
041746             3521   	; locate x,y
041746             3522   	vdu 31
041746 3E 1F       0001M  		LD	A, function
041748 49 D7       0002M  		RST.LIS	10h
04174A             3523   	vdu FILENAME_X
04174A 3E 07       0001M  		LD	A, function
04174C 49 D7       0002M  		RST.LIS	10h
04174E             3524   	vdu FILENAME_Y
04174E 3E 18       0001M  		LD	A, function
041750 49 D7       0002M  		RST.LIS	10h
041752             3525   
041752             3526   	; print text
041752 21 33 1B 04 3527   	ld hl,folder_error
041756 01 00 00 00 3528   	ld bc,0
04175A AF          3529   	xor a
04175B 49 DF       3530   	rst.lis $18
04175D             3531   
04175D CD 6D 0F 04 3532   	call fn_input_key
041761             3533   
041761             3534   	; locate x,y
041761             3535   	vdu 31
041761 3E 1F       0001M  		LD	A, function
041763 49 D7       0002M  		RST.LIS	10h
041765             3536   	vdu FILENAME_X
041765 3E 07       0001M  		LD	A, function
041767 49 D7       0002M  		RST.LIS	10h
041769             3537   	vdu FILENAME_Y
041769 3E 18       0001M  		LD	A, function
04176B 49 D7       0002M  		RST.LIS	10h
04176D             3538   
04176D             3539   	; print text
04176D 21 FF 1A 04 3540   	ld hl,void_filename
041771 01 00 00 00 3541   	ld bc,0
041775 AF          3542   	xor a
041776 49 DF       3543   	rst.lis $18
041778             3544   
041778 C9          3545   	ret
041779             3546   
041779             3547   ; print 'header error'
041779             3548   fn_print_header_error:
041779             3549   	vdu 7
041779 3E 07       0001M  		LD	A, function
04177B 49 D7       0002M  		RST.LIS	10h
04177D             3550   
04177D             3551   	; locate x,y
04177D             3552   	vdu 31
04177D 3E 1F       0001M  		LD	A, function
04177F 49 D7       0002M  		RST.LIS	10h
041781             3553   	vdu FILENAME_X
041781 3E 07       0001M  		LD	A, function
041783 49 D7       0002M  		RST.LIS	10h
041785             3554   	vdu FILENAME_Y
041785 3E 18       0001M  		LD	A, function
041787 49 D7       0002M  		RST.LIS	10h
041789             3555   
041789             3556   	; print text
041789 21 4D 1B 04 3557   	ld hl,header_error
04178D 01 00 00 00 3558   	ld bc,0
041791 AF          3559   	xor a
041792 49 DF       3560   	rst.lis $18
041794             3561   
041794 CD 6D 0F 04 3562   	call fn_input_key
041798             3563   
041798             3564   	; locate x,y
041798             3565   	vdu 31
041798 3E 1F       0001M  		LD	A, function
04179A 49 D7       0002M  		RST.LIS	10h
04179C             3566   	vdu FILENAME_X
04179C 3E 07       0001M  		LD	A, function
04179E 49 D7       0002M  		RST.LIS	10h
0417A0             3567   	vdu FILENAME_Y
0417A0 3E 18       0001M  		LD	A, function
0417A2 49 D7       0002M  		RST.LIS	10h
0417A4             3568   
0417A4             3569   	; print text
0417A4 21 FF 1A 04 3570   	ld hl,void_filename
0417A8 01 00 00 00 3571   	ld bc,0
0417AC AF          3572   	xor a
0417AD 49 DF       3573   	rst.lis $18
0417AF             3574   
0417AF C9          3575   	ret
0417B0             3576   
0417B0             3577   ; print 'data error'
0417B0             3578   fn_print_data_error:
0417B0             3579   	vdu 7
0417B0 3E 07       0001M  		LD	A, function
0417B2 49 D7       0002M  		RST.LIS	10h
0417B4             3580   
0417B4             3581   	; locate x,y
0417B4             3582   	vdu 31
0417B4 3E 1F       0001M  		LD	A, function
0417B6 49 D7       0002M  		RST.LIS	10h
0417B8             3583   	vdu FILENAME_X
0417B8 3E 07       0001M  		LD	A, function
0417BA 49 D7       0002M  		RST.LIS	10h
0417BC             3584   	vdu FILENAME_Y
0417BC 3E 18       0001M  		LD	A, function
0417BE 49 D7       0002M  		RST.LIS	10h
0417C0             3585   
0417C0             3586   	; print text
0417C0 21 67 1B 04 3587   	ld hl,data_error
0417C4 01 00 00 00 3588   	ld bc,0
0417C8 AF          3589   	xor a
0417C9 49 DF       3590   	rst.lis $18
0417CB             3591   
0417CB CD 6D 0F 04 3592   	call fn_input_key
0417CF             3593   
0417CF             3594   	; locate x,y
0417CF             3595   	vdu 31
0417CF 3E 1F       0001M  		LD	A, function
0417D1 49 D7       0002M  		RST.LIS	10h
0417D3             3596   	vdu FILENAME_X
0417D3 3E 07       0001M  		LD	A, function
0417D5 49 D7       0002M  		RST.LIS	10h
0417D7             3597   	vdu FILENAME_Y
0417D7 3E 18       0001M  		LD	A, function
0417D9 49 D7       0002M  		RST.LIS	10h
0417DB             3598   
0417DB             3599   	; print text
0417DB 21 FF 1A 04 3600   	ld hl,void_filename
0417DF 01 00 00 00 3601   	ld bc,0
0417E3 AF          3602   	xor a
0417E4 49 DF       3603   	rst.lis $18
0417E6             3604   
0417E6 C9          3605   	ret
0417E7             3606   
0417E7             3607   ; refresh all the current sprite frame
0417E7             3608   fn_refresh_sprite:
0417E7 06 00       3609   	ld b,0 ; B -> x cordinate
0417E9 0E 00       3610   	ld c,0 ; C -> y cordinate
0417EB             3611   
0417EB             3612   rs_loop:
0417EB C5          3613   	push bc
0417EC             3614   
0417EC 21 5C 1A 04 3615   	ld hl,xpix
0417F0 70          3616   	ld (hl),b
0417F1 21 5D 1A 04 3617   	ld hl,ypix
0417F5 71          3618   	ld (hl),c
0417F6 CD FF 0D 04 3619   	call fn_draw_pixel_without_border
0417FA             3620   
0417FA C1          3621   	pop bc
0417FB             3622   
0417FB 04          3623   	inc b
0417FC 21 61 1A 04 3624   	ld hl,spr_size
041800 7E          3625   	ld a,(hl)
041801 B8          3626   	cp b
041802 28 04       3627   	jr z,rs_next_line
041804 C3 EB 17 04 3628   	jp rs_loop
041808             3629   
041808             3630   rs_next_line:
041808 06 00       3631   	ld b,0
04180A 0C          3632   	inc c
04180B 21 61 1A 04 3633   	ld hl,spr_size
04180F 7E          3634   	ld a,(hl)
041810 B9          3635   	cp c
041811 28 04       3636   	jr z,rs_end
041813 C3 EB 17 04 3637   	jp rs_loop
041817             3638   
041817             3639   rs_end:
041817 AF          3640   	xor a
041818 21 5C 1A 04 3641   	ld hl,xpix
04181C 77          3642   	ld (hl),a
04181D 21 5D 1A 04 3643   	ld hl,ypix
041821 77          3644   	ld (hl),a
041822 CD EB 0D 04 3645   	call fn_draw_pixel_with_border
041826             3646   
041826 C9          3647   	ret
041827             3648   
041827             3649   fn_change_frame:
041827 21 87 1B 04 3650   	ld hl,current_frame
04182B 7E          3651   	ld a,(hl)
04182C 3C          3652   	inc a
04182D C6 30       3653   	add a,48
04182F 21 89 1B 04 3654   	ld hl,current_frame_ascii
041833 77          3655   	ld (hl),a
041834             3656   
041834             3657   	; locate 21,3
041834             3658   	vdu 31
041834 3E 1F       0001M  		LD	A, function
041836 49 D7       0002M  		RST.LIS	10h
041838             3659   	vdu 21
041838 3E 15       0001M  		LD	A, function
04183A 49 D7       0002M  		RST.LIS	10h
04183C             3660   	vdu 3
04183C 3E 03       0001M  		LD	A, function
04183E 49 D7       0002M  		RST.LIS	10h
041840             3661   
041840             3662   	; print text
041840 21 89 1B 04 3663   	ld hl,current_frame_ascii
041844 01 00 00 00 3664   	ld bc,0
041848 AF          3665   	xor a
041849 49 DF       3666   	rst.lis $18
04184B             3667   
04184B C9          3668   	ret
04184C             3669   
04184C             3670   fn_change_frames_count:
04184C 21 88 1B 04 3671   	ld hl,frames_count
041850 7E          3672   	ld a,(hl)
041851 C6 30       3673   	add a,48
041853 21 8B 1B 04 3674   	ld hl,frames_count_ascii
041857 77          3675   	ld (hl),a
041858             3676   
041858             3677   	; locate 23,3
041858             3678   	vdu 31
041858 3E 1F       0001M  		LD	A, function
04185A 49 D7       0002M  		RST.LIS	10h
04185C             3679   	vdu 23
04185C 3E 17       0001M  		LD	A, function
04185E 49 D7       0002M  		RST.LIS	10h
041860             3680   	vdu 3
041860 3E 03       0001M  		LD	A, function
041862 49 D7       0002M  		RST.LIS	10h
041864             3681   
041864             3682   	; print text
041864 21 8B 1B 04 3683   	ld hl,frames_count_ascii
041868 01 00 00 00 3684   	ld bc,0
04186C AF          3685   	xor a
04186D 49 DF       3686   	rst.lis $18
04186F             3687   
04186F C9          3688   	ret
041870             3689   
041870             3690   ; slowdown (wait delay)
041870             3691   fn_slowdown:
041870 DD 21 8D 1B 3692   	ld ix,keydata
       04          
041875 DD 7E 02    3693   	ld a,(ix+2)
041878 E6 02       3694   	and 2
04187A FE 02       3695   	cp 2 ; shift key to disable delay
04187C C8          3696   	ret z
04187D             3697   
04187D             3698   	moscall mos_sysvars
04187D 3E 08       0001M  		LD	A, function
04187F 49 CF       0002M  		RST.LIS	08h
041881 DD 4E 00    3699   	ld c,(ix+sysvar_time)
041884             3700   
041884             3701   sd_loop:
041884             3702   	moscall mos_sysvars
041884 3E 08       0001M  		LD	A, function
041886 49 CF       0002M  		RST.LIS	08h
041888 DD 7E 00    3703   	ld a,(ix+sysvar_time)
04188B 91          3704   	sub c
04188C FE 14       3705   	cp SLOWDOWN_DELAY
04188E 20 F4       3706   	jr nz,sd_loop
041890 C9          3707   	ret
041891             3708   
041891             3709   fn_show_spr_descr:
041891             3710   	; locate 15,3
041891             3711   	vdu 31
041891 3E 1F       0001M  		LD	A, function
041893 49 D7       0002M  		RST.LIS	10h
041895             3712   	vdu 15
041895 3E 0F       0001M  		LD	A, function
041897 49 D7       0002M  		RST.LIS	10h
041899             3713   	vdu 3
041899 3E 03       0001M  		LD	A, function
04189B 49 D7       0002M  		RST.LIS	10h
04189D             3714   
04189D             3715   	; print text
04189D 21 AC 1A 04 3716   	ld hl,spr_descr
0418A1 01 00 00 00 3717   	ld bc,0
0418A5 AF          3718   	xor a
0418A6 49 DF       3719   	rst.lis $18
0418A8             3720   
0418A8             3721   	; locate 15,5
0418A8             3722   	vdu 31
0418A8 3E 1F       0001M  		LD	A, function
0418AA 49 D7       0002M  		RST.LIS	10h
0418AC             3723   	vdu 15
0418AC 3E 0F       0001M  		LD	A, function
0418AE 49 D7       0002M  		RST.LIS	10h
0418B0             3724   	vdu 5
0418B0 3E 05       0001M  		LD	A, function
0418B2 49 D7       0002M  		RST.LIS	10h
0418B4             3725   
0418B4             3726   	; check for sprite size...
0418B4 21 61 1A 04 3727   	ld hl,spr_size
0418B8 7E          3728   	ld a,(hl)
0418B9             3729   
0418B9 FE 04       3730   	cp 4
0418BB 20 0C       3731   	jr nz,ssd_8x8
0418BD             3732   
0418BD             3733   	; print text 4x4
0418BD 21 B6 1A 04 3734   	ld hl,spr_descr1
0418C1 01 00 00 00 3735   	ld bc,0
0418C5 AF          3736   	xor a
0418C6 49 DF       3737   	rst.lis $18
0418C8 C9          3738   	ret
0418C9             3739   
0418C9             3740   ssd_8x8:
0418C9 FE 08       3741   	cp 8
0418CB 20 0C       3742   	jr nz,ssd_16x16
0418CD             3743   
0418CD             3744   	; print text 8x8
0418CD 21 BC 1A 04 3745   	ld hl,spr_descr2
0418D1 01 00 00 00 3746   	ld bc,0
0418D5 AF          3747   	xor a
0418D6 49 DF       3748   	rst.lis $18
0418D8 C9          3749   	ret
0418D9             3750   
0418D9             3751   ssd_16x16:
0418D9 FE 10       3752   	cp 16
0418DB 20 0C       3753   	jr nz,ssd_32x32
0418DD             3754   
0418DD             3755   	; print text 16x16
0418DD 21 C2 1A 04 3756   	ld hl,spr_descr3
0418E1 01 00 00 00 3757   	ld bc,0
0418E5 AF          3758   	xor a
0418E6 49 DF       3759   	rst.lis $18
0418E8 C9          3760   	ret
0418E9             3761   
0418E9             3762   ssd_32x32:
0418E9             3763   	; print text 32x32
0418E9 21 C8 1A 04 3764   	ld hl,spr_descr4
0418ED 01 00 00 00 3765   	ld bc,0
0418F1 AF          3766   	xor a
0418F2 49 DF       3767   	rst.lis $18
0418F4             3768   
0418F4 C9          3769   	ret
0418F5             3770   
0418F5             3771   ; input: HL = negative key to check
0418F5             3772   fn_inkey:
0418F5             3773   	moscall mos_getkbmap
0418F5 3E 1E       0001M  		LD	A, function
0418F7 49 CF       0002M  		RST.LIS	08h
0418F9 23          3774   	INC	HL
0418FA 7D          3775   	LD	A, L
0418FB ED 44       3776   	NEG
0418FD 4F          3777   	LD	C, A
0418FE 3E 01       3778   	LD	A, 1
041900 FA 24 19 04 3779   	JP	M,i_false ; < -128 ?
041904             3780   
041904 21 45 00 04 3781   	LD	HL,BITLOOKUP
041908 11 00 00 00 3782   	LD	DE,0
04190C 79          3783   	LD	A,C
04190D E6 07       3784   	AND	00000111b
04190F 5F          3785   	LD	E,A
041910 19          3786   	ADD	HL,DE
041911 46          3787   	LD	B,(HL)
041912             3788   
041912 79          3789   	LD	A,C
041913 E6 78       3790   	AND	01111000b
041915 0F          3791   	RRCA
041916 0F          3792   	RRCA
041917 0F          3793   	RRCA
041918 5F          3794   	LD	E, A
041919 DD 19       3795   	ADD	IX,DE
04191B DD 7E 00    3796   	LD	A,(IX+0)
04191E A0          3797   	AND	B
04191F 28 03       3798   	JR Z,i_false
041921 3E 01       3799   	LD A,1
041923 C9          3800   	RET
041924             3801   i_false:
041924 AF          3802   	XOR A
041925 C9          3803   	RET
041926             3804   
041926             3805   fn_create_sprite_folder:
041926 21 E9 1A 04 3806   	ld hl,sprite_path
04192A             3807   	moscall mos_mkdir
04192A 3E 07       0001M  		LD	A, function
04192C 49 CF       0002M  		RST.LIS	08h
04192E C9          3808   	ret
04192F             3809   
04192F             3810   ; draw the palette
04192F             3811   fn_draw_the_palette:
04192F 0E 00       3812   	ld c,0
041931             3813   
041931             3814   fndtp_palette_loop:
041931 C5          3815   	push bc
041932             3816   
041932             3817   	; choose palette color
041932             3818   	vdu 18
041932 3E 12       0001M  		LD	A, function
041934 49 D7       0002M  		RST.LIS	10h
041936             3819   	vdu 0
041936 3E 00       0001M  		LD	A, function
041938 49 D7       0002M  		RST.LIS	10h
04193A C1          3820   	pop bc
04193B C5          3821   	push bc
04193C 79          3822   	ld a,c
04193D F5          3823   	push af
04193E             3824   	vdu_a
04193E 49 D7       0001M  		RST.LIS	10h
041940 F1          3825   	pop af
041941 E5          3826   	push hl
041942 21 81 1B 04 3827   	ld hl,colors_count
041946 BE          3828   	cp (hl)
041947 E1          3829   	pop hl
041948 38 0B       3830   	jr c,fndtppl_zap
04194A             3831   
04194A             3832   	; set 0 if color is out of palette
04194A             3833   	vdu 18
04194A 3E 12       0001M  		LD	A, function
04194C 49 D7       0002M  		RST.LIS	10h
04194E             3834   	vdu 0
04194E 3E 00       0001M  		LD	A, function
041950 49 D7       0002M  		RST.LIS	10h
041952 AF          3835   	xor a
041953             3836   	vdu_a
041953 49 D7       0001M  		RST.LIS	10h
041955             3837   
041955             3838   fndtppl_zap:
041955             3839   	; store coordinates for a palette square
041955 DD 21 4C 1A 3840   	ld ix,x1
       04          
04195A E1          3841   	pop hl
04195B E5          3842   	push hl
04195C 26 05       3843   	ld h,5
04195E ED 6C       3844   	mlt hl
041960 E5          3845   	push hl
041961 DD 75 00    3846   	ld (ix+0),l
041964 DD 74 01    3847   	ld (ix+1),h
041967             3848   
041967 DD 21 4E 1A 3849   	ld ix,y1
       04          
04196C 21 00 00 00 3850   	ld hl,0
041970 DD 75 00    3851   	ld (ix+0),l
041973 DD 74 01    3852   	ld (ix+1),h
041976             3853   
041976 DD 21 50 1A 3854   	ld ix,x2
       04          
04197B E1          3855   	pop hl
04197C 11 04 00 00 3856   	ld de,4
041980 19          3857   	add hl,de
041981 DD 75 00    3858   	ld (ix+0),l
041984 DD 74 01    3859   	ld (ix+1),h
041987             3860   
041987 DD 21 52 1A 3861   	ld ix,y2
       04          
04198C 21 0A 00 00 3862   	ld hl,10
041990 DD 75 00    3863   	ld (ix+0),l
041993 DD 74 01    3864   	ld (ix+1),h
041996             3865   
041996             3866   	; draw the palette filled square
041996 CD 1D 0D 04 3867   	call fn_rectf
04199A             3868   
04199A             3869   	; next color ?
04199A C1          3870   	pop bc
04199B 0C          3871   	inc c
04199C 79          3872   	ld a,c
04199D FE 40       3873   	cp MAX_COLORS
04199F C2 31 19 04 3874   	jp nz,fndtp_palette_loop
0419A3             3875   
0419A3 C9          3876   	ret
0419A4             3877   
0419A4             3878   fn_comma:
0419A4 06 2C       3879   	ld b,','
0419A6             3880   	moscall mos_fputc
0419A6 3E 0D       0001M  		LD	A, function
0419A8 49 CF       0002M  		RST.LIS	08h
0419AA C9          3881   	ret
0419AB             3882   
0419AB             3883   ; Hex to BCD
0419AB             3884   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
0419AB             3885   ; Input: a = hex number
0419AB             3886   ; Output: a = BCD number
0419AB             3887   ; Clobbers: b,c
0419AB             3888   fn_hex2bcd:
0419AB C5          3889   		push bc
0419AC 4F          3890   		ld c,a  ; Original (hex) number
0419AD 06 08       3891   		ld b,8  ; How many bits
0419AF AF          3892   		xor a   ; Output (BCD) number, starts at 0
0419B0 CB 21       3893   htb:	sla c   ; shift c into carry
0419B2 8F          3894   		adc a,a
0419B3 27          3895   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
0419B4 10 FA       3896   		djnz htb  ; Repeat for 8 bits
0419B6 C1          3897   		pop bc
0419B7 C9          3898   		ret
0419B8             3899   
0419B8             3900   ; set color RGB (b = c,e,l)
0419B8             3901   fn_set_color:
0419B8 F5          3902   	push af
0419B9 C5          3903   	push bc
0419BA D5          3904   	push de
0419BB E5          3905   	push hl
0419BC             3906   
0419BC 78          3907   	ld a,b
0419BD F5          3908   	push af
0419BE             3909   
0419BE             3910   	; store rgb tints
0419BE 7D          3911   	ld a,l
0419BF 21 83 1B 04 3912   	ld hl,red_tint
0419C3 71          3913   	ld (hl),c
0419C4 21 84 1B 04 3914   	ld hl,green_tint
0419C8 73          3915   	ld (hl),e
0419C9 21 85 1B 04 3916   	ld hl,blue_tint
0419CD 77          3917   	ld (hl),a
0419CE             3918   
0419CE             3919   	; point to palette rgb color
0419CE 21 00 43 04 3920   	ld hl,rgb_palette
0419D2 11 00 00 00 3921   	ld de,#000000
0419D6 58          3922   	ld e,b
0419D7 16 03       3923   	ld d,3
0419D9 ED 5C       3924   	mlt de
0419DB 19          3925   	add hl,de ; hl -> rgb colors
0419DC             3926   
0419DC             3927   	; store rgb tints into the rgb palette
0419DC 11 83 1B 04 3928   	ld de,red_tint
0419E0 1A          3929   	ld a,(de)
0419E1 77          3930   	ld (hl),a
0419E2 23          3931   	inc hl
0419E3 11 84 1B 04 3932   	ld de,green_tint
0419E7 1A          3933   	ld a,(de)
0419E8 77          3934   	ld (hl),a
0419E9 23          3935   	inc hl
0419EA 11 85 1B 04 3936   	ld de,blue_tint
0419EE 1A          3937   	ld a,(de)
0419EF 77          3938   	ld (hl),a
0419F0             3939   
0419F0             3940   	vdu 19
0419F0 3E 13       0001M  		LD	A, function
0419F2 49 D7       0002M  		RST.LIS	10h
0419F4 F1          3941   	pop af
0419F5             3942   	vdu_a
0419F5 49 D7       0001M  		RST.LIS	10h
0419F7             3943   	vdu 255
0419F7 3E FF       0001M  		LD	A, function
0419F9 49 D7       0002M  		RST.LIS	10h
0419FB             3944   
0419FB 21 83 1B 04 3945   	ld hl,red_tint
0419FF 7E          3946   	ld a,(hl)
041A00             3947   	vdu_a
041A00 49 D7       0001M  		RST.LIS	10h
041A02             3948   
041A02 21 84 1B 04 3949   	ld hl,green_tint
041A06 7E          3950   	ld a,(hl)
041A07             3951   	vdu_a
041A07 49 D7       0001M  		RST.LIS	10h
041A09             3952   
041A09 21 85 1B 04 3953   	ld hl,blue_tint
041A0D 7E          3954   	ld a,(hl)
041A0E             3955   	vdu_a
041A0E 49 D7       0001M  		RST.LIS	10h
041A10             3956   
041A10 E1          3957   	pop hl
041A11 D1          3958   	pop de
041A12 C1          3959   	pop bc
041A13 F1          3960   	pop af
041A14 C9          3961   	ret
041A15             3962   
041A15             3963   ; read rgb tints for the color in b
041A15             3964   fn_get_color:
041A15 78          3965   	ld a,b
041A16 F5          3966   	push af
041A17             3967   
041A17             3968   	; point to palette rgb color
041A17 21 00 43 04 3969   	ld hl,rgb_palette
041A1B 11 00 00 00 3970   	ld de,#000000
041A1F 58          3971   	ld e,b
041A20 16 03       3972   	ld d,3
041A22 ED 5C       3973   	mlt de
041A24 19          3974   	add hl,de ; hl -> rgb colors
041A25             3975   
041A25             3976   	; store rgb tints
041A25 11 83 1B 04 3977   	ld de,red_tint
041A29 7E          3978   	ld a,(hl)
041A2A 12          3979   	ld (de),a
041A2B 23          3980   	inc hl
041A2C 11 84 1B 04 3981   	ld de,green_tint
041A30 7E          3982   	ld a,(hl)
041A31 12          3983   	ld (de),a
041A32 23          3984   	inc hl
041A33 11 85 1B 04 3985   	ld de,blue_tint
041A37 7E          3986   	ld a,(hl)
041A38 12          3987   	ld (de),a
041A39             3988   
041A39             3989   	; grab rgb tints in c,e,l
041A39 21 83 1B 04 3990   	ld hl,red_tint
041A3D 4E          3991   	ld c,(hl)
041A3E 21 84 1B 04 3992   	ld hl,green_tint
041A42 5E          3993   	ld e,(hl)
041A43 21 85 1B 04 3994   	ld hl,blue_tint
041A47 7E          3995   	ld a,(hl)
041A48 6F          3996   	ld l,a
041A49             3997   
041A49 F1          3998   	pop af
041A4A 47          3999   	ld b,a
041A4B C9          4000   	ret
041A4C             4001   
041A4C             4002   ;======================================================================
041A4C             4003   
041A4C             4004   ; coordinates for rectangles
041A4C             4005   x1:
041A4C 00 00       4006   	dw $0000
041A4E             4007   y1:
041A4E 00 00       4008   	dw $0000
041A50             4009   x2:
041A50 00 00       4010   	dw $0000
041A52             4011   y2:
041A52 00 00       4012   	dw $0000
041A54             4013   
041A54             4014   ; coordinates of the edited sprite
041A54             4015   xs1:
041A54 5F 00       4016   	dw 95
041A56             4017   ys1:
041A56 37 00       4018   	dw 55
041A58             4019   xs2:
041A58 E0 00       4020   	dw 224
041A5A             4021   ys2:
041A5A B8 00       4022   	dw 184
041A5C             4023   
041A5C             4024   ; coordinates of active pixels to draw
041A5C             4025   xpix:
041A5C 00          4026   	db 0
041A5D             4027   ypix:
041A5D 00          4028   	db 0
041A5E             4029   
041A5E             4030   ; memorized coordinates of active pixels to draw
041A5E             4031   memxpix:
041A5E 00          4032   	db 0
041A5F             4033   memypix:
041A5F 00          4034   	db 0
041A60             4035   
041A60             4036   ; width of a pixel in the sprite
041A60             4037   pixel_width:
041A60 00          4038   	db 0
041A61             4039   
041A61             4040   ; sprite size, in resized pixels
041A61             4041   spr_size:
041A61 00          4042   	db 0
041A62             4043   
041A62             4044   ; pen color (0-63)
041A62             4045   current_pen:
041A62 00          4046   	db 0
041A63             4047   
041A63             4048   ; texts for 1st menu
041A63             4049   title:
041A63 53 50 52 2D 4050   	db "SPR-EDIT",0
       45 44 49 54 
       00          
041A6C             4051   
041A6C             4052   menu1:
041A6C 46 31 2E 20 4053   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
041A7B             4054   menu2:
041A7B 46 32 2E 20 4055   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041A8A             4056   menu3:
041A8A 46 33 2E 20 4057   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
041A9B             4058   menu4:
041A9B 46 34 2E 20 4059   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
041AAC             4060   
041AAC             4061   ; descriptions of sprites
041AAC             4062   spr_descr:
041AAC 46 72 61 6D 4063   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041AB6             4064   spr_descr1:
041AB6 34 78 34 20 4065   	db "4x4  ",0
       20 00       
041ABC             4066   spr_descr2:
041ABC 38 78 38 20 4067   	db "8x8  ",0
       20 00       
041AC2             4068   spr_descr3:
041AC2 31 36 78 31 4069   	db "16x16",0
       36 00       
041AC8             4070   spr_descr4:
041AC8 33 32 78 33 4071   	db "32x32",0
       32 00       
041ACE             4072   
041ACE             4073   ; label before filename
041ACE             4074   filename_label:
041ACE 46 69 6C 65 4075   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041AD8             4076   
041AD8             4077   ; filename without extension
041AD8             4078   filename:
041AD8             4079   	ds 17
041AE9             4080   
041AE9             4081   sprite_path:
041AE9 73 70 72 69 4082   	db "sprites",0
       74 65 73 00 
041AF1             4083   
041AF1             4084   palette_path:
041AF1 70 61 6C 65 4085   	db "palettes",0
       74 74 65 73 
       00          
041AFA             4086   
041AFA             4087   back_path:
041AFA 2E 2E 00    4088   	db "..",0
041AFD             4089   
041AFD             4090   ; single space char to print
041AFD             4091   spacechar:
041AFD 20 00       4092   	db " ",0
041AFF             4093   
041AFF             4094   ; spaces to remove filename label
041AFF             4095   void_filename:
041AFF 20 20 20 20 4096   	db "                         ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B19             4097   
041B19             4098   ; file error message
041B19             4099   file_error:
041B19 46 69 6C 65 4100   	db "File error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B33             4101   
041B33             4102   ; folder error message
041B33             4103   folder_error:
041B33 46 6F 6C 64 4104   	db "Folder error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B4D             4105   
041B4D             4106   ; header error message
041B4D             4107   header_error:
041B4D 48 65 61 64 4108   	db "Header error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B67             4109   
041B67             4110   ; data error message
041B67             4111   data_error:
041B67 44 61 74 61 4112   	db "Data error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041B81             4113   
041B81             4114   ; number of colors
041B81             4115   colors_count:
041B81 00          4116   	db 0
041B82             4117   
041B82             4118   ; real number of colors
041B82             4119   new_colors_count:
041B82 00          4120   	db 0
041B83             4121   
041B83             4122   red_tint:
041B83 00          4123   	db 0
041B84             4124   
041B84             4125   green_tint:
041B84 00          4126   	db 0
041B85             4127   
041B85             4128   blue_tint:
041B85 00          4129   	db 0
041B86             4130   
041B86             4131   error_flag:
041B86 00          4132   	db 0
041B87             4133   
041B87             4134   ; current frame
041B87             4135   current_frame:
041B87 00          4136   	db 0
041B88             4137   
041B88             4138   ; frames count
041B88             4139   frames_count:
041B88 00          4140   	db 0
041B89             4141   
041B89             4142   current_frame_ascii:
041B89 30 00       4143   	db '0',0
041B8B             4144   
041B8B             4145   frames_count_ascii:
041B8B 30 00       4146   	db '0',0
041B8D             4147   
041B8D             4148   ; keycode, keydown & keymods are stored here
041B8D             4149   keydata:
041B8D 00 00 00    4150   	db 0,0,0
041B90             4151   
041B90             4152   ; buffer for the current sprite
041B90             4153   sprite_buffer:
041B90             4154   	ds BUFFER_SIZE
043B90             4155   
043B90             4156   header_buffer:
043B90             4157   	ds HEADER_BUFFER_SIZE
043BA0             4158   
043BA0             4159   color_buffer:
043BA0 00 00 00    4160   	db 0,0,0
043BA3             4161   
043BA3             4162   palette_buffer:
043BA3             4163   	ds MAX_PAL_DATA + 1
043EE8             4164   
043EE8             4165   temp_chars_buffer:
043EE8 00 00 00 00 4166   	db 0,0,0,0
043EEC             4167   
043EEC             4168   header:
043EEC 4A 41 53 43 4169   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043EF6 30 31 30 30 4170   	db "0100",13,10
       0D 0A       
043EFC             4171   
043EFC             4172   ; buffer to perform some operations
043EFC             4173   swap_sprite_buffer:
043EFC             4174   	ds ONE_FRAME_BUFFER_SIZE
0442FC             4175   
0442FC             4176   asm_line:
0442FC 44 42 20    4177   	DB "DB "
0442FF             4178   
0442FF             4179   asm_line_length:
0442FF 03          4180   	DB 3
044300             4181   
044300             4182   rgb_palette:
044300 00 00 00    4183   	db $00,$00,$00
044303 AA 00 00    4184   	db $AA,$00,$00
044306 00 AA 00    4185   	db $00,$AA,$00
044309 AA AA 00    4186   	db $AA,$AA,$00
04430C 00 00 AA    4187   	db $00,$00,$AA
04430F AA 00 AA    4188   	db $AA,$00,$AA
044312 00 AA AA    4189   	db $00,$AA,$AA
044315 AA AA AA    4190   	db $AA,$AA,$AA
044318             4191   
044318 55 55 55    4192   	db $55,$55,$55
04431B FF 00 00    4193   	db $FF,$00,$00
04431E 00 FF 00    4194   	db $00,$FF,$00
044321 FF FF 00    4195   	db $FF,$FF,$00
044324 00 00 FF    4196   	db $00,$00,$FF
044327 FF 00 FF    4197   	db $FF,$00,$FF
04432A 00 FF FF    4198   	db $00,$FF,$FF
04432D FF FF FF    4199   	db $FF,$FF,$FF
044330             4200   
044330 00 00 55    4201   	db $00,$00,$55
044333 00 55 00    4202   	db $00,$55,$00
044336 00 55 55    4203   	db $00,$55,$55
044339 00 55 AA    4204   	db $00,$55,$AA
04433C 00 55 FF    4205   	db $00,$55,$FF
04433F 00 AA 55    4206   	db $00,$AA,$55
044342 00 AA FF    4207   	db $00,$AA,$FF
044345 00 FF 55    4208   	db $00,$FF,$55
044348             4209   
044348 00 FF AA    4210   	db $00,$FF,$AA
04434B 55 00 00    4211   	db $55,$00,$00
04434E 55 00 55    4212   	db $55,$00,$55
044351 55 00 AA    4213   	db $55,$00,$AA
044354 55 00 FF    4214   	db $55,$00,$FF
044357 55 55 00    4215   	db $55,$55,$00
04435A 55 55 AA    4216   	db $55,$55,$AA
04435D 55 55 FF    4217   	db $55,$55,$FF
044360             4218   
044360 55 AA 00    4219   	db $55,$AA,$00
044363 55 AA 55    4220   	db $55,$AA,$55
044366 55 AA AA    4221   	db $55,$AA,$AA
044369 55 AA FF    4222   	db $55,$AA,$FF
04436C 55 FF 00    4223   	db $55,$FF,$00
04436F 55 FF 55    4224   	db $55,$FF,$55
044372 55 FF AA    4225   	db $55,$FF,$AA
044375 55 FF FF    4226   	db $55,$FF,$FF
044378             4227   
044378 AA 00 55    4228   	db $AA,$00,$55
04437B AA 00 FF    4229   	db $AA,$00,$FF
04437E AA 55 00    4230   	db $AA,$55,$00
044381 AA 55 55    4231   	db $AA,$55,$55
044384 AA 55 AA    4232   	db $AA,$55,$AA
044387 AA 55 FF    4233   	db $AA,$55,$FF
04438A AA AA 55    4234   	db $AA,$AA,$55
04438D AA AA FF    4235   	db $AA,$AA,$FF
044390             4236   
044390 AA FF 00    4237   	db $AA,$FF,$00
044393 AA FF 55    4238   	db $AA,$FF,$55
044396 AA FF AA    4239   	db $AA,$FF,$AA
044399 AA FF FF    4240   	db $AA,$FF,$FF
04439C FF 00 55    4241   	db $FF,$00,$55
04439F FF 00 AA    4242   	db $FF,$00,$AA
0443A2 FF 55 00    4243   	db $FF,$55,$00
0443A5 FF 55 55    4244   	db $FF,$55,$55
0443A8             4245   
0443A8 FF 55 AA    4246   	db $FF,$55,$AA
0443AB FF 55 FF    4247   	db $FF,$55,$FF
0443AE FF AA 00    4248   	db $FF,$AA,$00
0443B1 FF AA 55    4249   	db $FF,$AA,$55
0443B4 FF AA AA    4250   	db $FF,$AA,$AA
0443B7 FF AA FF    4251   	db $FF,$AA,$FF
0443BA FF FF 55    4252   	db $FF,$FF,$55
0443BD FF FF AA    4253   	db $FF,$FF,$AA
0443C0             4254   
0443C0             4255   ; sprite structure:
0443C0             4256   ; =================
0443C0             4257   ; colors_count  :   byte
0443C0             4258   ; frames count	:	byte
0443C0             4259   ; spr size		:	byte
0443C0             4260   ; data			:   width x height bytes of colors
0443C0             4261   
0443C0             4262   ; ===============================================
0443C0             4263   
0443C0             4264   ;=================
0443C0             4265   ; Debug functions
0443C0             4266   ;=================
0443C0             4267   ; A = byte to debug
0443C0             4268   debug_byte:
0443C0 F5          4269   	PUSH AF
0443C1 C5          4270   	PUSH BC
0443C2 D5          4271   	PUSH DE
0443C3 E5          4272   	PUSH HL
0443C4 21 00 00 00 4273   	LD HL,$000000
0443C8 6F          4274   	LD L,A
0443C9 11 05 44 04 4275   	LD DE,debug_text
0443CD D5          4276   	PUSH DE
0443CE CD 0B 44 04 4277   	CALL num2dec
0443D2 E1          4278   	POP HL
0443D3 23          4279   	INC HL
0443D4 23          4280   	INC HL
0443D5 01 03 00 00 4281   	LD BC,3
0443D9 3E 00       4282   	LD A,0
0443DB 49 DF       4283   	RST.LIS $18
0443DD E1          4284   	POP HL
0443DE D1          4285   	POP DE
0443DF C1          4286   	POP BC
0443E0 F1          4287   	POP AF
0443E1 C9          4288   	RET
0443E2             4289   
0443E2             4290   ; HL = word to debug
0443E2             4291   debug_word:
0443E2 F5          4292   	PUSH AF
0443E3 C5          4293   	PUSH BC
0443E4 D5          4294   	PUSH DE
0443E5 E5          4295   	PUSH HL
0443E6 11 00 00 00 4296   	LD DE,$000000 ; remove HLU
0443EA 5D          4297   	LD E,L
0443EB 54          4298   	LD D,H
0443EC D5          4299   	PUSH DE
0443ED E1          4300   	POP HL
0443EE 11 05 44 04 4301   	LD DE,debug_text
0443F2 D5          4302   	PUSH DE
0443F3 CD 0B 44 04 4303   	CALL num2dec
0443F7 E1          4304   	POP HL
0443F8 01 05 00 00 4305   	LD BC,5
0443FC 3E 00       4306   	LD A,0
0443FE 49 DF       4307   	RST.LIS $18
044400 E1          4308   	POP HL
044401 D1          4309   	POP DE
044402 C1          4310   	POP BC
044403 F1          4311   	POP AF
044404 C9          4312   	RET
044405             4313   
044405             4314   debug_text:
044405             4315   	DS 6,0
04440B             4316   
04440B             4317   ; 16 bits number to string
04440B             4318   num2dec:
04440B 01 F0 D8 FF 4319   	LD BC,-10000
04440F CD 2C 44 04 4320   	CALL num1
044413 01 18 FC FF 4321   	LD BC,-1000
044417 CD 2C 44 04 4322   	CALL num1
04441B 01 9C FF FF 4323   	LD BC,-100
04441F CD 2C 44 04 4324   	CALL num1
044423 01 F6 FF FF 4325   	LD BC,-10
044427 CD 2C 44 04 4326   	CALL num1
04442B 48          4327   	LD C,B
04442C             4328   
04442C 3E 2F       4329   num1: LD A,'0'-1
04442E 3C          4330   num2: INC A
04442F 09          4331   	ADD HL,BC
044430 38 FC       4332   	JR C,num2
044432 ED 42       4333   	SBC HL,BC
044434             4334   
044434 12          4335   	LD (DE),A
044435 13          4336   	INC DE
044436 C9          4337   	RET
