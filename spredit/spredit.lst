PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   
040045             0022   MAX_FRAMES:			equ 8
040045             0023   
040045             0024   COLOR_WHITE:		equ 15
040045             0025   COLOR_GREY:			equ 7
040045             0026   COLOR_BLACK:		equ 0
040045             0027   
040045             0028   TITLE_X: 	equ 17
040045             0029   TITLE_Y: 	equ 2
040045             0030   MENU_X: 	equ 13
040045             0031   MENU1_Y: 	equ 8
040045             0032   MENU2_Y: 	equ 12
040045             0033   MENU3_Y: 	equ 16
040045             0034   MENU4_Y: 	equ 20
040045             0035   MENU5_Y: 	equ 24
040045             0036   FILENAME_X: equ 7
040045             0037   FILENAME_Y: equ 24
040045             0038   
040045             0039   SPR44: 		equ 4
040045             0040   SPR88: 		equ 8
040045             0041   SPR1616: 	equ 16
040045             0042   SPR3232: 	equ 32
040045             0043   
040045             0044   SPR44_width: 	equ 32
040045             0045   SPR88_width: 	equ 16
040045             0046   SPR1616_width: 	equ 8
040045             0047   SPR3232_width: 	equ 4
040045             0048   
040045             0049   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0050   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0051   
040045             0052   HEADER_BUFFER_SIZE:		equ 16
040045             0053   
040045             0054   SLOWDOWN_DELAY:	equ 20
040045             0055   
040045             0056   KEY_SPACE: equ -99 ; draw with color
040045             0057   KEY_UP: equ -58 ; move
040045             0058   KEY_DOWN: equ -42
040045             0059   KEY_LEFT: equ -26
040045             0060   KEY_RIGHT: equ -122
040045             0061   KEY_DELETE: equ -90 ; remove color with black
040045             0062   KEY_N: equ -86 ; add a new void frame
040045             0063   KEY_C: equ -83 ; copy current frame to a new frame
040045             0064   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0065   KEY_PGUP: equ -64 ; select frame
040045             0066   KEY_PGDOWN: equ -79
040045             0067   KEY_L: equ -87 ; load sprite
040045             0068   KEY_S: equ -82 ; save sprite
040045             0069   KEY_E: equ -35 ; export sprite as assembler data
040045             0070   KEY_R: equ -52 ; rotate frame clockwise
040045             0071   KEY_F: equ -68 ; flip frame horizontally
040045             0072   KEY_M: equ -102 ; mirror frame vertically
040045             0073   KEY_ESCAPE: equ -113
040045             0074   KEY_F1: equ -114 ; select 4x4 sprite
040045             0075   KEY_F2: equ -115 ; select 8x8 sprite
040045             0076   KEY_F3: equ -116 ; select 16x16 sprite
040045             0077   KEY_F4: equ -21 ; select 32x32 sprite
040045             0078   KEY_RETURN: equ -74 ; floodfill
040045             0079   
040045             0080   ; play mode:
040045             0081   KEY_P:	equ -56 ; switch to play mode
040045             0082   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0083   
040045             0084   ; palette mode:
040045             0085   KEY_TAB: equ -97 ; switch to palette mode
040045             0086   KEY_1:	equ -49 ; red+
040045             0087   KEY_2:	equ -50 ; green+
040045             0088   KEY_3:	equ -18 ; blue+
040045             0089   KEY_4:	equ -19 ; red-
040045             0090   KEY_5:	equ -20 ; green-
040045             0091   KEY_6:	equ -53; blue-
040045             0092   KEY_7:	equ -37 ; reset color to black
040045             0093   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0094   ; KEY_S: save palette file
040045             0095   
040045             0096   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0097   MAX_PAL_DATA_HI: equ 03h
040045             0098   MAX_PAL_DATA_LO: equ 44h
040045             0099   
040045             0100   BITLOOKUP:
040045 01 02 04 08 0101   	DB 01h,02h,04h,08h
040049 10 20 40 80 0102   	DB 10h,20h,40h,80h
04004D             0103   
04004D             0104   ;======================================================================
04004D             0105   start:
04004D F5          0106   	push af
04004E C5          0107   	push bc
04004F D5          0108   	push de
040050 DD E5       0109   	push ix
040052 FD E5       0110   	push iy
040054             0111   
040054             0112   	; set mode 8 (320x240x64)
040054             0113   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0114   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0115   
04005C             0116   	; disable logical scale coordinates system
04005C             0117   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0118   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0119   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0120   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0121   
04006C             0122   	; set text colors
04006C             0123   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0124   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0125   
040074             0126   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0127   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0128   
04007C             0129   	; set graphics pen
04007C             0130   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0131   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0132   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0133   
040088             0134   	; hide cursor
040088             0135   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0136   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0137   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0138   
040094             0139   	; store coordinates
040094 DD 21 EA 17 0140   	ld ix,x1
       04          
040099 21 00 00 00 0141   	ld hl,0
04009D DD 75 00    0142   	ld (ix+0),l
0400A0 DD 74 01    0143   	ld (ix+1),h
0400A3             0144   
0400A3 DD 21 EC 17 0145   	ld ix,y1
       04          
0400A8 21 00 00 00 0146   	ld hl,0
0400AC DD 75 00    0147   	ld (ix+0),l
0400AF DD 74 01    0148   	ld (ix+1),h
0400B2             0149   
0400B2 DD 21 EE 17 0150   	ld ix,x2
       04          
0400B7 21 3F 01 00 0151   	ld hl,319
0400BB DD 75 00    0152   	ld (ix+0),l
0400BE DD 74 01    0153   	ld (ix+1),h
0400C1             0154   
0400C1 DD 21 F0 17 0155   	ld ix,y2
       04          
0400C6 21 EF 00 00 0156   	ld hl,239
0400CA DD 75 00    0157   	ld (ix+0),l
0400CD DD 74 01    0158   	ld (ix+1),h
0400D0             0159   
0400D0             0160   	; draw the border rectangle
0400D0 CD 85 0A 04 0161   	call fn_rect
0400D4             0162   
0400D4             0163   	; locate x,y
0400D4             0164   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0165   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0166   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0167   
0400E0             0168   	; print text
0400E0 21 01 18 04 0169   	ld hl,title
0400E4 01 00 00 00 0170   	ld bc,0
0400E8 AF          0171   	xor a
0400E9 49 DF       0172   	rst.lis $18
0400EB             0173   
0400EB             0174   	; locate x,y
0400EB             0175   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0176   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0177   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0178   
0400F7             0179   	; print text
0400F7 21 0A 18 04 0180   	ld hl,menu1
0400FB 01 00 00 00 0181   	ld bc,0
0400FF AF          0182   	xor a
040100 49 DF       0183   	rst.lis $18
040102             0184   
040102             0185   	; locate x,y
040102             0186   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0187   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0188   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0189   
04010E             0190   	; print text
04010E 21 19 18 04 0191   	ld hl,menu2
040112 01 00 00 00 0192   	ld bc,0
040116 AF          0193   	xor a
040117 49 DF       0194   	rst.lis $18
040119             0195   
040119             0196   	; locate x,y
040119             0197   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0198   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0199   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0200   
040125             0201   	; print text
040125 21 28 18 04 0202   	ld hl,menu3
040129 01 00 00 00 0203   	ld bc,0
04012D AF          0204   	xor a
04012E 49 DF       0205   	rst.lis $18
040130             0206   
040130             0207   	; locate x,y
040130             0208   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0209   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0210   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0211   
04013C             0212   	; print text
04013C 21 39 18 04 0213   	ld hl,menu4
040140 01 00 00 00 0214   	ld bc,0
040144 AF          0215   	xor a
040145 49 DF       0216   	rst.lis $18
040147             0217   
040147             0218   ; menu loop
040147             0219   menu_loop:
040147 21 8F FF FF 0220   	ld hl,KEY_ESCAPE
04014B CD 27 17 04 0221   	call fn_inkey
04014F FE 01       0222   	CP 1
040151 CA 61 0A 04 0223   	jp z,exit_program
040155             0224   
040155 21 8E FF FF 0225   	ld hl,KEY_F1
040159 CD 27 17 04 0226   	call fn_inkey
04015D FE 01       0227   	CP 1
04015F CA 91 01 04 0228   	jp z,ml_menu1
040163             0229   
040163 21 8D FF FF 0230   	ld hl,KEY_F2
040167 CD 27 17 04 0231   	call fn_inkey
04016B FE 01       0232   	CP 1
04016D CA 97 01 04 0233   	jp z,ml_menu2
040171             0234   
040171 21 8C FF FF 0235   	ld hl,KEY_F3
040175 CD 27 17 04 0236   	call fn_inkey
040179 FE 01       0237   	CP 1
04017B CA 9D 01 04 0238   	jp z,ml_menu3
04017F             0239   
04017F 21 EB FF FF 0240   	ld hl,KEY_F4
040183 CD 27 17 04 0241   	call fn_inkey
040187 FE 01       0242   	CP 1
040189 CA A3 01 04 0243   	jp z,ml_menu4
04018D             0244   
04018D C3 47 01 04 0245   	jp menu_loop
040191             0246   
040191             0247   ml_menu1:
040191 3E 04       0248   	ld a,SPR44
040193 16 20       0249   	ld d,SPR44_width
040195 18 10       0250   	jr exit_menu_loop
040197             0251   
040197             0252   ml_menu2:
040197 3E 08       0253   	ld a,SPR88
040199 16 10       0254   	ld d,SPR88_width
04019B 18 0A       0255   	jr exit_menu_loop
04019D             0256   
04019D             0257   ml_menu3:
04019D 3E 10       0258   	ld a,SPR1616
04019F 16 08       0259   	ld d,SPR1616_width
0401A1 18 04       0260   	jr exit_menu_loop
0401A3             0261   
0401A3             0262   ml_menu4:
0401A3 3E 20       0263   	ld a,SPR3232
0401A5 16 04       0264   	ld d,SPR3232_width
0401A7             0265   
0401A7             0266   exit_menu_loop:
0401A7             0267   	; store edited sprite size
0401A7 21 FF 17 04 0268   	ld hl,spr_size
0401AB 77          0269   	ld (hl),a
0401AC 21 FE 17 04 0270   	ld hl,pixel_width
0401B0 72          0271   	ld (hl),d
0401B1             0272   
0401B1             0273   	; clear the text screen
0401B1             0274   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0275   
0401B5             0276   	; set colors count to max colors
0401B5 21 0A 19 04 0277   	ld hl,colors_count
0401B9 3E 40       0278   	ld a,MAX_COLORS
0401BB 77          0279   	ld (hl),a
0401BC             0280   
0401BC CD 61 17 04 0281   	call fn_draw_the_palette
0401C0             0282   
0401C0             0283   	; store coordinates
0401C0 DD 21 EA 17 0284   	ld ix,x1
       04          
0401C5 21 00 00 00 0285   	ld hl,0
0401C9 DD 75 00    0286   	ld (ix+0),l
0401CC DD 74 01    0287   	ld (ix+1),h
0401CF             0288   
0401CF DD 21 EC 17 0289   	ld ix,y1
       04          
0401D4 21 0B 00 00 0290   	ld hl,11
0401D8 DD 75 00    0291   	ld (ix+0),l
0401DB DD 74 01    0292   	ld (ix+1),h
0401DE             0293   
0401DE DD 21 EE 17 0294   	ld ix,x2
       04          
0401E3 21 3F 01 00 0295   	ld hl,319
0401E7 DD 75 00    0296   	ld (ix+0),l
0401EA DD 74 01    0297   	ld (ix+1),h
0401ED             0298   
0401ED DD 21 F0 17 0299   	ld ix,y2
       04          
0401F2 21 EF 00 00 0300   	ld hl,239
0401F6 DD 75 00    0301   	ld (ix+0),l
0401F9 DD 74 01    0302   	ld (ix+1),h
0401FC             0303   
0401FC             0304   	; draw the border rectangle
0401FC CD 85 0A 04 0305   	call fn_rect
040200             0306   
040200             0307   	; store edited sprite coordinates
040200 DD 21 F2 17 0308   	ld ix,xs1
       04          
040205 FD 21 EA 17 0309   	ld iy,x1
       04          
04020A DD 6E 00    0310   	ld l,(ix+0)
04020D DD 66 01    0311   	ld h,(ix+1)
040210 FD 75 00    0312   	ld (iy+0),l
040213 FD 74 01    0313   	ld (iy+1),h
040216             0314   
040216 DD 21 F4 17 0315   	ld ix,ys1
       04          
04021B FD 21 EC 17 0316   	ld iy,y1
       04          
040220 DD 6E 00    0317   	ld l,(ix+0)
040223 DD 66 01    0318   	ld h,(ix+1)
040226 FD 75 00    0319   	ld (iy+0),l
040229 FD 74 01    0320   	ld (iy+1),h
04022C             0321   
04022C DD 21 F6 17 0322   	ld ix,xs2
       04          
040231 FD 21 EE 17 0323   	ld iy,x2
       04          
040236 DD 6E 00    0324   	ld l,(ix+0)
040239 DD 66 01    0325   	ld h,(ix+1)
04023C FD 75 00    0326   	ld (iy+0),l
04023F FD 74 01    0327   	ld (iy+1),h
040242             0328   
040242 DD 21 F8 17 0329   	ld ix,ys2
       04          
040247 FD 21 F0 17 0330   	ld iy,y2
       04          
04024C DD 6E 00    0331   	ld l,(ix+0)
04024F DD 66 01    0332   	ld h,(ix+1)
040252 FD 75 00    0333   	ld (iy+0),l
040255 FD 74 01    0334   	ld (iy+1),h
040258             0335   
040258             0336   	; draw the sprite's border rectangle
040258 CD 85 0A 04 0337   	call fn_rect
04025C             0338   
04025C             0339   	; update sprite size descriptions
04025C CD C3 16 04 0340   	call fn_show_spr_descr
040260             0341   
040260             0342   ; initialize sprite vars
040260             0343   init_sprite_vars:
040260             0344   	; initialize coordinates before drawing the sprite
040260 DD 21 FA 17 0345   	ld ix,xpix
       04          
040265 AF          0346   	xor a
040266 DD 77 00    0347   	ld (ix+0),a ; xpix = 0
040269 DD 77 01    0348   	ld (ix+1),a	; ypix = 0
04026C DD 21 00 18 0349   	ld ix,current_pen
       04          
040271 3E 0F       0350   	ld a,COLOR_WHITE
040273 DD 77 00    0351   	ld (ix+0),a ; current pen -> white
040276             0352   
040276             0353   	; set vars
040276 21 0F 19 04 0354   	ld hl,current_frame
04027A AF          0355   	xor a
04027B 77          0356   	ld (hl),a
04027C 3C          0357   	inc a
04027D 21 10 19 04 0358   	ld hl,frames_count
040281 77          0359   	ld (hl),a
040282             0360   
040282             0361   	; fill buffers with zeros
040282 01 00 20 00 0362   	ld bc,BUFFER_SIZE
040286 21 18 19 04 0363   	ld hl,sprite_buffer
04028A             0364   
04028A             0365   isv_fill_loop:
04028A AF          0366   	xor a
04028B 77          0367   	ld (hl),a
04028C 0B          0368   	dec bc
04028D 23          0369   	inc hl
04028E 78          0370   	ld a,b
04028F B1          0371   	or c
040290 FE 00       0372   	cp 0
040292 20 F6       0373   	jr nz,isv_fill_loop
040294             0374   
040294             0375   ; draw the pixel with a border
040294 CD 12 0C 04 0376   	call fn_draw_pixel_with_border
040298             0377   
040298             0378   ; draw sprite loop
040298             0379   draw_sprite_loop:
040298 21 9D FF FF 0380   	ld hl,KEY_SPACE
04029C CD 27 17 04 0381   	call fn_inkey
0402A0 FE 01       0382   	cp 1
0402A2 CC B4 03 04 0383   	call z,dsl_set_pen
0402A6             0384   
0402A6 21 C6 FF FF 0385   	ld hl,KEY_UP
0402AA CD 27 17 04 0386   	call fn_inkey
0402AE FE 01       0387   	cp 1
0402B0 CC D9 03 04 0388   	call z,dsl_up
0402B4             0389   
0402B4 21 D6 FF FF 0390   	ld hl,KEY_DOWN
0402B8 CD 27 17 04 0391   	call fn_inkey
0402BC FE 01       0392   	cp 1
0402BE CC 00 04 04 0393   	call z,dsl_down
0402C2             0394   
0402C2 21 E6 FF FF 0395   	ld hl,KEY_LEFT
0402C6 CD 27 17 04 0396   	call fn_inkey
0402CA FE 01       0397   	cp 1
0402CC CC 2C 04 04 0398   	call z,dsl_left
0402D0             0399   
0402D0 21 86 FF FF 0400   	ld hl,KEY_RIGHT
0402D4 CD 27 17 04 0401   	call fn_inkey
0402D8 FE 01       0402   	cp 1
0402DA CC 53 04 04 0403   	call z,dsl_right
0402DE             0404   
0402DE 21 A6 FF FF 0405   	ld hl,KEY_DELETE
0402E2 CD 27 17 04 0406   	call fn_inkey
0402E6 FE 01       0407   	cp 1
0402E8 CC C8 03 04 0408   	call z,dsl_reset_pen
0402EC             0409   
0402EC 21 9F FF FF 0410   	ld hl,KEY_TAB
0402F0 CD 27 17 04 0411   	call fn_inkey
0402F4 FE 01       0412   	cp 1
0402F6 CA 2B 09 04 0413   	jp z,dsl_palette_tool
0402FA             0414   
0402FA 21 AA FF FF 0415   	ld hl,KEY_N
0402FE CD 27 17 04 0416   	call fn_inkey
040302 FE 01       0417   	cp 1
040304 CC D2 04 04 0418   	call z,dsl_add_frame
040308             0419   
040308 21 AD FF FF 0420   	ld hl,KEY_C
04030C CD 27 17 04 0421   	call fn_inkey
040310 FE 01       0422   	cp 1
040312 CC 69 05 04 0423   	call z,dsl_add_and_copy_frame
040316             0424   
040316 21 D0 FF FF 0425   	ld hl,KEY_BACKSPACE
04031A CD 27 17 04 0426   	call fn_inkey
04031E FE 01       0427   	cp 1
040320 CC D0 05 04 0428   	call z,dsl_delete_frame
040324             0429   
040324 21 C0 FF FF 0430   	ld hl,KEY_PGUP
040328 CD 27 17 04 0431   	call fn_inkey
04032C FE 01       0432   	cp 1
04032E CC C9 06 04 0433   	call z,dsl_next_frame
040332             0434   
040332 21 B1 FF FF 0435   	ld hl,KEY_PGDOWN
040336 CD 27 17 04 0436   	call fn_inkey
04033A FE 01       0437   	cp 1
04033C CC AA 06 04 0438   	call z,dsl_previous_frame
040340             0439   
040340 21 A9 FF FF 0440   	ld hl,KEY_L
040344 CD 27 17 04 0441   	call fn_inkey
040348 FE 01       0442   	cp 1
04034A CC 7F 04 04 0443   	call z,dsl_load_sprite
04034E             0444   
04034E 21 AE FF FF 0445   	ld hl,KEY_S
040352 CD 27 17 04 0446   	call fn_inkey
040356 FE 01       0447   	cp 1
040358 CC A0 04 04 0448   	call z,dsl_save_sprite
04035C             0449   
04035C 21 DD FF FF 0450   	ld hl,KEY_E
040360 CD 27 17 04 0451   	call fn_inkey
040364 FE 01       0452   	cp 1
040366 CC B9 04 04 0453   	call z,dsl_export_sprite
04036A             0454   
04036A 21 CC FF FF 0455   	ld hl,KEY_R
04036E CD 27 17 04 0456   	call fn_inkey
040372 FE 01       0457   	cp 1
040374 CC EF 06 04 0458   	call z,dsl_rotate_frame
040378             0459   
040378 21 BC FF FF 0460   	ld hl,KEY_F
04037C CD 27 17 04 0461   	call fn_inkey
040380 FE 01       0462   	cp 1
040382 CC A4 07 04 0463   	call z,dsl_flip_frame
040386             0464   
040386 21 9A FF FF 0465   	ld hl,KEY_M
04038A CD 27 17 04 0466   	call fn_inkey
04038E FE 01       0467   	cp 1
040390 CC 0B 08 04 0468   	call z,dsl_mirror_frame
040394             0469   
040394 21 B6 FF FF 0470   	ld hl,KEY_RETURN
040398 CD 27 17 04 0471   	call fn_inkey
04039C FE 01       0472   	cp 1
04039E CC 8B 08 04 0473   	call z,dsl_flood_fill
0403A2             0474   
0403A2 21 8F FF FF 0475   	ld hl,KEY_ESCAPE
0403A6 CD 27 17 04 0476   	call fn_inkey
0403AA FE 01       0477   	cp 1
0403AC CA 61 0A 04 0478   	jp z,exit_program
0403B0             0479   
0403B0 C3 98 02 04 0480   	jp draw_sprite_loop
0403B4             0481   
0403B4             0482   ; set the pen of the current pixel
0403B4             0483   dsl_set_pen:
0403B4 CD 3C 0C 04 0484   	call fn_get_pixel_color
0403B8 21 00 18 04 0485   	ld hl,current_pen
0403BC BE          0486   	cp (hl)
0403BD C8          0487   	ret z
0403BE 7E          0488   	ld a,(hl)
0403BF CD 7E 0C 04 0489   	call fn_set_pixel_color
0403C3 CD 12 0C 04 0490   	call fn_draw_pixel_with_border
0403C7 C9          0491   	ret
0403C8             0492   
0403C8             0493   ; reset the pen of the current pixel
0403C8             0494   dsl_reset_pen:
0403C8 CD 3C 0C 04 0495   	call fn_get_pixel_color
0403CC FE 00       0496   	cp 0
0403CE C8          0497   	ret z
0403CF AF          0498   	xor a
0403D0 CD 7E 0C 04 0499   	call fn_set_pixel_color
0403D4 CD 12 0C 04 0500   	call fn_draw_pixel_with_border
0403D8 C9          0501   	ret
0403D9             0502   
0403D9             0503   ; move pixel up
0403D9             0504   dsl_up:
0403D9 21 FB 17 04 0505   	ld hl,ypix
0403DD 7E          0506   	ld a,(hl)
0403DE FE 00       0507   	cp 0
0403E0 C8          0508   	ret z
0403E1             0509   
0403E1 21 9D FF FF 0510   	ld hl,KEY_SPACE
0403E5 CD 27 17 04 0511   	call fn_inkey
0403E9 FE 01       0512   	cp 1
0403EB CC B4 03 04 0513   	call z,dsl_set_pen
0403EF             0514   
0403EF CD 26 0C 04 0515   	call fn_draw_pixel_without_border
0403F3 CD C2 0C 04 0516   	call fn_move_up
0403F7 CD 12 0C 04 0517   	call fn_draw_pixel_with_border
0403FB CD A2 16 04 0518   	call fn_slowdown
0403FF C9          0519   	ret
040400             0520   
040400             0521   ; move pixel down
040400             0522   dsl_down:
040400 21 FF 17 04 0523   	ld hl,spr_size
040404 56          0524   	ld d,(hl)
040405 15          0525   	dec d
040406             0526   
040406 21 FB 17 04 0527   	ld hl,ypix
04040A 7E          0528   	ld a,(hl)
04040B BA          0529   	cp d
04040C C8          0530   	ret z
04040D             0531   
04040D 21 9D FF FF 0532   	ld hl,KEY_SPACE
040411 CD 27 17 04 0533   	call fn_inkey
040415 FE 01       0534   	cp 1
040417 CC B4 03 04 0535   	call z,dsl_set_pen
04041B             0536   
04041B CD 26 0C 04 0537   	call fn_draw_pixel_without_border
04041F CD C8 0C 04 0538   	call fn_move_down
040423 CD 12 0C 04 0539   	call fn_draw_pixel_with_border
040427 CD A2 16 04 0540   	call fn_slowdown
04042B C9          0541   	ret
04042C             0542   
04042C             0543   ; move pixel left
04042C             0544   dsl_left:
04042C 21 FA 17 04 0545   	ld hl,xpix
040430 7E          0546   	ld a,(hl)
040431 FE 00       0547   	cp 0
040433 C8          0548   	ret z
040434             0549   
040434 21 9D FF FF 0550   	ld hl,KEY_SPACE
040438 CD 27 17 04 0551   	call fn_inkey
04043C FE 01       0552   	cp 1
04043E CC B4 03 04 0553   	call z,dsl_set_pen
040442             0554   
040442 CD 26 0C 04 0555   	call fn_draw_pixel_without_border
040446 CD CE 0C 04 0556   	call fn_move_left
04044A CD 12 0C 04 0557   	call fn_draw_pixel_with_border
04044E CD A2 16 04 0558   	call fn_slowdown
040452 C9          0559   	ret
040453             0560   
040453             0561   ; move pixel right
040453             0562   dsl_right:
040453 21 FF 17 04 0563   	ld hl,spr_size
040457 56          0564   	ld d,(hl)
040458 15          0565   	dec d
040459             0566   
040459 21 FA 17 04 0567   	ld hl,xpix
04045D 7E          0568   	ld a,(hl)
04045E BA          0569   	cp d
04045F C8          0570   	ret z
040460             0571   
040460 21 9D FF FF 0572   	ld hl,KEY_SPACE
040464 CD 27 17 04 0573   	call fn_inkey
040468 FE 01       0574   	cp 1
04046A CC B4 03 04 0575   	call z,dsl_set_pen
04046E             0576   
04046E CD 26 0C 04 0577   	call fn_draw_pixel_without_border
040472 CD D4 0C 04 0578   	call fn_move_right
040476 CD 12 0C 04 0579   	call fn_draw_pixel_with_border
04047A CD A2 16 04 0580   	call fn_slowdown
04047E C9          0581   	ret
04047F             0582   
04047F             0583   ; load a sprite
04047F             0584   dsl_load_sprite:
04047F 21 A9 FF FF 0585   	ld hl,KEY_L
040483 CD 27 17 04 0586   	call fn_inkey
040487 FE 00       0587   	cp 0
040489 20 F4       0588   	jr nz,dsl_load_sprite
04048B             0589   
04048B CD 26 0C 04 0590   	call fn_draw_pixel_without_border
04048F CD CE 11 04 0591   	call fn_load_sprite
040493 CD 19 16 04 0592   	call fn_refresh_sprite
040497 CD 12 0C 04 0593   	call fn_draw_pixel_with_border
04049B CD 59 16 04 0594   	call fn_change_frame
04049F C9          0595   	ret
0404A0             0596   
0404A0             0597   ; save a sprite
0404A0             0598   dsl_save_sprite:
0404A0 21 AE FF FF 0599   	ld hl,KEY_S
0404A4 CD 27 17 04 0600   	call fn_inkey
0404A8 FE 00       0601   	cp 0
0404AA 20 F4       0602   	jr nz,dsl_save_sprite
0404AC             0603   
0404AC CD 26 0C 04 0604   	call fn_draw_pixel_without_border
0404B0 CD F7 12 04 0605   	call fn_save_sprite
0404B4 CD 19 16 04 0606   	call fn_refresh_sprite
0404B8 C9          0607   	ret
0404B9             0608   
0404B9             0609   dsl_export_sprite:
0404B9 21 DD FF FF 0610   	ld hl,KEY_E
0404BD CD 27 17 04 0611   	call fn_inkey
0404C1 FE 00       0612   	cp 0
0404C3 20 F4       0613   	jr nz,dsl_export_sprite
0404C5             0614   
0404C5 CD 26 0C 04 0615   	call fn_draw_pixel_without_border
0404C9 CD F6 13 04 0616   	call fn_export_sprite
0404CD CD 19 16 04 0617   	call fn_refresh_sprite
0404D1 C9          0618   	ret
0404D2             0619   
0404D2             0620   
0404D2             0621   ; add a frame to the animation
0404D2             0622   dsl_add_frame:
0404D2 21 AA FF FF 0623   	ld hl,KEY_N
0404D6 CD 27 17 04 0624   	call fn_inkey
0404DA FE 00       0625   	cp 0
0404DC 20 F4       0626   	jr nz,dsl_add_frame
0404DE             0627   
0404DE             0628   	; frames limit reached ? exit
0404DE 21 10 19 04 0629   	ld hl,frames_count
0404E2 7E          0630   	ld a,(hl)
0404E3 FE 08       0631   	cp MAX_FRAMES
0404E5 C8          0632   	ret z
0404E6             0633   
0404E6             0634   	; get the number of frames to copy
0404E6 21 10 19 04 0635   	ld hl,frames_count
0404EA 7E          0636   	ld a,(hl)
0404EB 21 0F 19 04 0637   	ld hl,current_frame
0404EF 46          0638   	ld b,(hl)
0404F0 90          0639   	sub b
0404F1 3D          0640   	dec a
0404F2             0641   
0404F2             0642   	; get sprsize² (length of a sprite, in bytes)
0404F2 21 FF 17 04 0643   	ld hl,spr_size
0404F6 11 00 00 00 0644   	ld de,$000000
0404FA 5E          0645   	ld e,(hl)
0404FB 56          0646   	ld d,(hl)
0404FC ED 5C       0647   	mlt de ; DE = sprsize²
0404FE             0648   
0404FE             0649   	; prepare for the case we goto af_zap...
0404FE 21 18 19 04 0650   	ld hl,sprite_buffer
040502             0651   
040502 F5          0652   	push af
040503 E5          0653   	push hl
040504 21 0F 19 04 0654   	ld hl,current_frame
040508 7E          0655   	ld a,(hl)
040509 3C          0656   	inc a
04050A 47          0657   	ld b,a
04050B E1          0658   	pop hl
04050C F1          0659   	pop af
04050D             0660   
04050D             0661   af_loop0:
04050D 19          0662   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050E 10 FD       0663   	djnz af_loop0
040510             0664   
040510 E5          0665   	push hl ; store HL = sprite buffer + sprsize²
040511 FE 00       0666   	cp 0
040513 CA 3B 05 04 0667   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040517 E1          0668   	pop hl ; HL unused in this case
040518             0669   
040518 21 00 00 00 0670   	ld hl,$000000 ; HL is 0 to store the result
04051C 47          0671   	ld b,a ; B = frames to copy
04051D             0672   
04051D             0673   ; multiply number of frames to copy by sprsize²
04051D             0674   af_loop1:
04051D 19          0675   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051E 10 FD       0676   	djnz af_loop1
040520             0677   
040520 E5          0678   	push hl
040521 C1          0679   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
040522             0680   
040522 21 0F 19 04 0681   	ld hl,current_frame
040526 7E          0682   	ld a,(hl)
040527 3C          0683   	inc a
040528 21 18 19 04 0684   	ld hl,sprite_buffer
04052C             0685   
04052C C5          0686   	push bc
04052D 47          0687   	ld b,a
04052E             0688   
04052E             0689   af_loop2:
04052E 19          0690   	add hl,de ; HL = sprite buffer + length to copy
04052F 10 FD       0691   	djnz af_loop2
040531             0692   
040531 C1          0693   	pop bc
040532             0694   
040532 E5          0695   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
040533             0696   
040533 09          0697   	add hl,bc
040534 2B          0698   	dec hl ; HL = end address to copy to end target address
040535             0699   
040535 E5          0700   	push hl
040536 19          0701   	add hl,de
040537 EB          0702   	ex de,hl ; DE = end target address
040538 E1          0703   	pop hl
040539             0704   
040539 ED B8       0705   	lddr
04053B             0706   
04053B             0707   af_zap:
04053B             0708   	; multiply number of frames to copy by sprsize²
04053B 21 FF 17 04 0709   	ld hl,spr_size
04053F 01 00 00 00 0710   	ld bc,$000000
040543 4E          0711   	ld c,(hl)
040544 46          0712   	ld b,(hl)
040545 ED 4C       0713   	mlt bc ; BC = sprsize²
040547             0714   
040547 E1          0715   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040548             0716   
040548             0717   ; fill frame with 0 color
040548             0718   af_loop3:
040548 AF          0719   	xor a
040549 77          0720   	ld (hl),a
04054A 23          0721   	inc hl
04054B 0B          0722   	dec bc
04054C 78          0723   	ld a,b
04054D B1          0724   	or c
04054E FE 00       0725   	cp 0
040550 20 F6       0726   	jr nz,af_loop3
040552             0727   
040552             0728   	; increment the frames count and the current frame values
040552 21 10 19 04 0729   	ld hl,frames_count
040556 34          0730   	inc (hl)
040557 21 0F 19 04 0731   	ld hl,current_frame
04055B 34          0732   	inc (hl)
04055C             0733   
04055C CD 59 16 04 0734   	call fn_change_frame
040560 CD 7E 16 04 0735   	call fn_change_frames_count
040564 CD 19 16 04 0736   	call fn_refresh_sprite
040568 C9          0737   	ret
040569             0738   
040569             0739   ; add a copy of the current frame to the animation
040569             0740   dsl_add_and_copy_frame: ; TODO! debug me!
040569 21 AD FF FF 0741   	ld hl,KEY_C
04056D CD 27 17 04 0742   	call fn_inkey
040571 FE 00       0743   	cp 0
040573 20 F4       0744   	jr nz,dsl_add_and_copy_frame
040575             0745   
040575             0746   	; frames limit reached ? exit
040575 21 10 19 04 0747   	ld hl,frames_count
040579 7E          0748   	ld a,(hl)
04057A FE 08       0749   	cp MAX_FRAMES
04057C C8          0750   	ret z
04057D             0751   
04057D             0752   	; get the number of frames to copy
04057D 21 10 19 04 0753   	ld hl,frames_count
040581 7E          0754   	ld a,(hl)
040582 21 0F 19 04 0755   	ld hl,current_frame
040586 46          0756   	ld b,(hl)
040587 90          0757   	sub b
040588             0758   
040588             0759   	; get sprsize² (length of a sprite, in bytes)
040588 21 FF 17 04 0760   	ld hl,spr_size
04058C 11 00 00 00 0761   	ld de,$000000
040590 5E          0762   	ld e,(hl)
040591 56          0763   	ld d,(hl)
040592 ED 5C       0764   	mlt de ; DE = sprsize²
040594             0765   
040594 21 00 00 00 0766   	ld hl,$000000 ; HL is 0 to store the result
040598 47          0767   	ld b,a ; B = frames to copy
040599             0768   
040599             0769   ; multiply number of frames to copy by sprsize²
040599             0770   aacf_loop1:
040599 19          0771   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04059A 10 FD       0772   	djnz aacf_loop1
04059C             0773   
04059C E5          0774   	push hl
04059D C1          0775   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059E             0776   
04059E 21 0F 19 04 0777   	ld hl,current_frame
0405A2 7E          0778   	ld a,(hl)
0405A3 21 18 19 04 0779   	ld hl,sprite_buffer
0405A7 FE 00       0780   	cp 0
0405A9 28 06       0781   	jr z,aacf_loop_end2
0405AB             0782   
0405AB C5          0783   	push bc
0405AC 47          0784   	ld b,a
0405AD             0785   
0405AD             0786   aacf_loop2:
0405AD 19          0787   	add hl,de ; HL = sprite buffer + length to copy
0405AE 10 FD       0788   	djnz aacf_loop2
0405B0             0789   
0405B0 C1          0790   	pop bc
0405B1             0791   
0405B1             0792   aacf_loop_end2:
0405B1 09          0793   	add hl,bc
0405B2 2B          0794   	dec hl ; HL = end address to copy to end target address
0405B3             0795   
0405B3 E5          0796   	push hl
0405B4 19          0797   	add hl,de
0405B5 EB          0798   	ex de,hl ; DE = end target address
0405B6 E1          0799   	pop hl
0405B7             0800   
0405B7 ED B8       0801   	lddr
0405B9             0802   
0405B9             0803   	; increment the frames count and the current frame values
0405B9 21 10 19 04 0804   	ld hl,frames_count
0405BD 34          0805   	inc (hl)
0405BE 21 0F 19 04 0806   	ld hl,current_frame
0405C2 34          0807   	inc (hl)
0405C3             0808   
0405C3 CD 59 16 04 0809   	call fn_change_frame
0405C7 CD 7E 16 04 0810   	call fn_change_frames_count
0405CB CD 19 16 04 0811   	call fn_refresh_sprite
0405CF C9          0812   	ret
0405D0             0813   
0405D0             0814   ; delete last frame from animation
0405D0             0815   dsl_delete_frame:
0405D0 21 D0 FF FF 0816   	ld hl,KEY_BACKSPACE
0405D4 CD 27 17 04 0817   	call fn_inkey
0405D8 FE 00       0818   	cp 0
0405DA 20 F4       0819   	jr nz,dsl_delete_frame
0405DC             0820   
0405DC             0821   	; delete current selected frame
0405DC 21 FF 17 04 0822   	ld hl,spr_size
0405E0 01 00 00 00 0823   	ld bc,$000000
0405E4 4E          0824   	ld c,(hl)
0405E5 46          0825   	ld b,(hl)
0405E6 ED 4C       0826   	mlt bc ; BC = sprsize²
0405E8 21 0F 19 04 0827   	ld hl,current_frame
0405EC 7E          0828   	ld a,(hl) ; A = current frame
0405ED 21 18 19 04 0829   	ld hl,sprite_buffer ; HL = sprite buffer
0405F1 C5          0830   	push bc
0405F2 FE 00       0831   	cp 0
0405F4 28 06       0832   	jr z,df_loop2
0405F6             0833   
0405F6             0834   df_loop1:
0405F6 09          0835   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F7 3D          0836   	dec a
0405F8 FE 00       0837   	cp 0
0405FA 20 FA       0838   	jr nz,df_loop1
0405FC             0839   
0405FC             0840   ; clear the current frame
0405FC             0841   df_loop2:
0405FC AF          0842   	xor a
0405FD 77          0843   	ld (hl),a
0405FE 23          0844   	inc hl
0405FF 0B          0845   	dec bc
040600 78          0846   	ld a,b
040601 B1          0847   	or c
040602 FE 00       0848   	cp 0
040604 20 F6       0849   	jr nz,df_loop2
040606             0850   
040606             0851   	; current frame + 1 = frames count ?
040606 E5          0852   	push hl
040607 21 0F 19 04 0853   	ld hl,current_frame
04060B 5E          0854   	ld e,(hl)
04060C 1C          0855   	inc e
04060D 21 10 19 04 0856   	ld hl,frames_count
040611 7E          0857   	ld a,(hl)
040612 BB          0858   	cp e
040613 E1          0859   	pop hl
040614 C1          0860   	pop bc
040615 CA 8E 06 04 0861   	jp z,df_exit
040619             0862   
040619 11 10 19 04 0863   	ld de,frames_count
04061D 1A          0864   	ld a,(de) ; A = frames count
04061E E5          0865   	push hl
04061F 21 0F 19 04 0866   	ld hl,current_frame
040623 5E          0867   	ld e,(hl) ; E = current frame
040624 E1          0868   	pop hl
040625 93          0869   	sub e
040626 3D          0870   	dec a ; A = number of frames to copy back
040627             0871   
040627 EB          0872   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040628 21 00 00 00 0873   	ld hl,$000000
04062C FE 00       0874   	cp 0 ; 0 frames to copy ?
04062E 28 06       0875   	jr z,df_exit_loop3
040630             0876   
040630             0877   df_loop3:
040630 09          0878   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
040631 3D          0879   	dec a
040632 FE 00       0880   	cp 0
040634 20 FA       0881   	jr nz,df_loop3
040636             0882   
040636             0883   df_exit_loop3:
040636 E5          0884   	push hl
040637 C1          0885   	pop bc ; BC = total length of area to copy
040638 D5          0886   	push de
040639 E1          0887   	pop hl ; HL = DE = start of area to copy
04063A             0888   
04063A C5          0889   	push bc
04063B D5          0890   	push de
04063C E5          0891   	push hl
04063D 21 FF 17 04 0892   	ld hl,spr_size
040641 11 00 00 00 0893   	ld de,$000000
040645 5E          0894   	ld e,(hl)
040646 56          0895   	ld d,(hl)
040647 ED 5C       0896   	mlt de ; DE = one sprite frame length
040649 E1          0897   	pop hl
04064A B7          0898   	or a
04064B ED 52       0899   	sbc hl,de ; HL = target area to copy
04064D D1          0900   	pop de
04064E EB          0901   	ex de,hl ; DE = target, HL = start
04064F C1          0902   	pop bc
040650 ED B0       0903   	ldir
040652             0904   
040652 21 FF 17 04 0905   	ld hl,spr_size
040656 01 00 00 00 0906   	ld bc,$000000
04065A 4E          0907   	ld c,(hl)
04065B 46          0908   	ld b,(hl)
04065C ED 4C       0909   	mlt bc ; DE = one sprite frame length
04065E             0910   
04065E             0911   	; delete last frame data
04065E 21 10 19 04 0912   	ld hl,frames_count
040662 7E          0913   	ld a,(hl) ; A =frames count
040663 3D          0914   	dec a ; A = last frame
040664 21 18 19 04 0915   	ld hl,sprite_buffer ; HL = sprite buffer
040668 FE 00       0916   	cp 0
04066A 28 06       0917   	jr z,df_loop5
04066C             0918   
04066C             0919   df_loop4:
04066C 09          0920   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
04066D 3D          0921   	dec a
04066E FE 00       0922   	cp 0
040670 20 FA       0923   	jr nz,df_loop4
040672             0924   
040672             0925   ; clear the current frame
040672             0926   df_loop5:
040672 AF          0927   	xor a
040673 77          0928   	ld (hl),a
040674 23          0929   	inc hl
040675 0B          0930   	dec bc
040676 78          0931   	ld a,b
040677 B1          0932   	or c
040678 FE 00       0933   	cp 0
04067A 20 F6       0934   	jr nz,df_loop5
04067C             0935   
04067C             0936   	; decrement frames count
04067C 21 10 19 04 0937   	ld hl,frames_count
040680 35          0938   	dec (hl)
040681             0939   
040681 CD 59 16 04 0940   	call fn_change_frame
040685 CD 7E 16 04 0941   	call fn_change_frames_count
040689 CD 19 16 04 0942   	call fn_refresh_sprite
04068D C9          0943   	ret
04068E             0944   
04068E             0945   df_exit:
04068E 21 10 19 04 0946   	ld hl,frames_count
040692 7E          0947   	ld a,(hl)
040693 FE 01       0948   	cp 1
040695 28 06       0949   	jr z,df_exit_end
040697 35          0950   	dec (hl)
040698 21 0F 19 04 0951   	ld hl,current_frame
04069C 35          0952   	dec (hl)
04069D             0953   
04069D             0954   df_exit_end:
04069D CD 59 16 04 0955   	call fn_change_frame
0406A1 CD 7E 16 04 0956   	call fn_change_frames_count
0406A5 CD 19 16 04 0957   	call fn_refresh_sprite
0406A9 C9          0958   	ret
0406AA             0959   
0406AA             0960   ; goto previous frame
0406AA             0961   dsl_previous_frame:
0406AA 21 B1 FF FF 0962   	ld hl,KEY_PGDOWN
0406AE CD 27 17 04 0963   	call fn_inkey
0406B2 FE 00       0964   	cp 0
0406B4 20 F4       0965   	jr nz,dsl_previous_frame
0406B6             0966   
0406B6 21 0F 19 04 0967   	ld hl,current_frame
0406BA 7E          0968   	ld a,(hl)
0406BB FE 00       0969   	cp 0
0406BD C8          0970   	ret z
0406BE             0971   
0406BE 3D          0972   	dec a
0406BF 77          0973   	ld (hl),a
0406C0 CD 59 16 04 0974   	call fn_change_frame
0406C4 CD 19 16 04 0975   	call fn_refresh_sprite
0406C8 C9          0976   	ret
0406C9             0977   
0406C9             0978   ; goto next frame
0406C9             0979   dsl_next_frame:
0406C9 21 C0 FF FF 0980   	ld hl,KEY_PGUP
0406CD CD 27 17 04 0981   	call fn_inkey
0406D1 FE 00       0982   	cp 0
0406D3 20 F4       0983   	jr nz,dsl_next_frame
0406D5             0984   
0406D5 21 0F 19 04 0985   	ld hl,current_frame
0406D9 7E          0986   	ld a,(hl)
0406DA 3C          0987   	inc a
0406DB 21 10 19 04 0988   	ld hl,frames_count
0406DF BE          0989   	cp (hl)
0406E0 C8          0990   	ret z
0406E1             0991   
0406E1 21 0F 19 04 0992   	ld hl,current_frame
0406E5 77          0993   	ld (hl),a
0406E6 CD 59 16 04 0994   	call fn_change_frame
0406EA CD 19 16 04 0995   	call fn_refresh_sprite
0406EE C9          0996   	ret
0406EF             0997   
0406EF             0998   ; rotate a frame 90° clockwise
0406EF             0999   dsl_rotate_frame:
0406EF 21 CC FF FF 1000   	ld hl,KEY_R
0406F3 CD 27 17 04 1001   	call fn_inkey
0406F7 FE 00       1002   	cp 0
0406F9 20 F4       1003   	jr nz,dsl_rotate_frame
0406FB             1004   
0406FB             1005   	; find HL as start of the first frame (buffer)
0406FB 21 FF 17 04 1006   	ld hl,spr_size
0406FF 01 00 00 00 1007   	ld bc,$000000
040703 11 00 00 00 1008   	ld de,$000000
040707 5E          1009   	ld e,(hl)
040708 56          1010   	ld d,(hl)
040709 4B          1011   	ld c,e
04070A ED 5C       1012   	mlt de ; DE = sprite length in bytes
04070C 21 0F 19 04 1013   	ld hl,current_frame
040710 7E          1014   	ld a,(hl) ; A = current frame
040711 21 18 19 04 1015   	ld hl,sprite_buffer
040715 FE 00       1016   	cp 0
040717 28 04       1017   	jr z,rf_noloop1
040719 47          1018   	ld b,a
04071A             1019   
04071A             1020   rf_loop1:
04071A 19          1021   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
04071B 10 FD       1022   	djnz rf_loop1
04071D             1023   
04071D             1024   rf_noloop1:
04071D C5          1025   	push bc
04071E E5          1026   	push hl
04071F             1027   
04071F             1028   	; copy current frame to swap sprite buffer
04071F 11 84 3C 04 1029   	ld de,swap_sprite_buffer
040723 41          1030   	ld b,c
040724 ED 4C       1031   	mlt bc
040726 ED B0       1032   	ldir
040728             1033   
040728 FD E1       1034   	pop iy ; IY: destination
04072A C1          1035   	pop bc
04072B             1036   
04072B 79          1037   	ld a,c
04072C 01 00 00 00 1038   	ld bc,$000000
040730 4F          1039   	ld c,a ; BC = sprite size
040731             1040   
040731             1041   	; turn and copy swap sprite buffer frame to sprite buffer
040731 DD 21 84 3C 1042   	ld ix,swap_sprite_buffer ; IX: source
       04          
040736 11 00 00 00 1043   	ld de,0 ; x
04073A 21 00 00 00 1044   	ld hl,0 ; y
04073E             1045   
04073E             1046   rf_loop2:
04073E DD E5       1047   	push ix
040740 FD E5       1048   	push iy
040742             1049   
040742 D5          1050   	push de
040743 E5          1051   	push hl
040744             1052   
040744             1053   	; add x
040744 DD 19       1054   	add ix,de
040746             1055   
040746             1056   	; add y * width
040746 7C          1057   	ld a,h
040747 B5          1058   	or l
040748 FE 00       1059   	cp 0
04074A 28 09       1060   	jr z,rf_done1
04074C             1061   rf_loop3:
04074C DD 09       1062   	add ix,bc
04074E 2B          1063   	dec hl
04074F 7C          1064   	ld a,h
040750 B5          1065   	or l
040751 FE 00       1066   	cp 0
040753 20 F7       1067   	jr nz,rf_loop3
040755             1068   
040755             1069   rf_done1:
040755             1070   	; found the pixel value
040755 DD 7E 00    1071   	ld a,(ix+0)
040758             1072   
040758 E1          1073   	pop hl
040759 D1          1074   	pop de
04075A D5          1075   	push de
04075B E5          1076   	push hl
04075C             1077   
04075C             1078   	; add y
04075C EB          1079   	ex de,hl
04075D FD 09       1080   	add iy,bc
04075F B7          1081   	or a
040760 E5          1082   	push hl
040761 FD E5       1083   	push iy
040763 E1          1084   	pop hl
040764 ED 52       1085   	sbc hl,de
040766 E5          1086   	push hl
040767 FD E1       1087   	pop iy
040769 FD 2B       1088   	dec iy
04076B E1          1089   	pop hl
04076C EB          1090   	ex de,hl
04076D             1091   
04076D             1092   	; add x * width
04076D F5          1093   	push af
04076E 7A          1094   	ld a,d
04076F B3          1095   	or e
040770 FE 00       1096   	cp 0
040772 28 09       1097   	jr z,rf_done2
040774             1098   rf_loop5:
040774 FD 09       1099   	add iy,bc
040776 1B          1100   	dec de
040777 7A          1101   	ld a,d
040778 B3          1102   	or e
040779 FE 00       1103   	cp 0
04077B 20 F7       1104   	jr nz,rf_loop5
04077D             1105   
04077D             1106   rf_done2:
04077D F1          1107   	pop af
04077E             1108   
04077E             1109   	; store the pixel value
04077E FD 77 00    1110   	ld (iy+0),a
040781             1111   
040781 E1          1112   	pop hl
040782 D1          1113   	pop de
040783             1114   
040783 FD E1       1115   	pop iy
040785 DD E1       1116   	pop ix
040787             1117   
040787 13          1118   	inc de
040788 EB          1119   	ex de,hl
040789 B7          1120   	or a
04078A ED 42       1121   	sbc hl,bc
04078C 09          1122   	add hl,bc
04078D EB          1123   	ex de,hl
04078E DA 3E 07 04 1124   	jp c,rf_loop2
040792             1125   
040792 11 00 00 00 1126   	ld de,0
040796 23          1127   	inc hl
040797 B7          1128   	or a
040798 ED 42       1129   	sbc hl,bc
04079A 09          1130   	add hl,bc
04079B DA 3E 07 04 1131   	jp c,rf_loop2
04079F             1132   
04079F CD 19 16 04 1133   	call fn_refresh_sprite
0407A3 C9          1134   	ret
0407A4             1135   
0407A4             1136   ; flip frame horizontally
0407A4             1137   dsl_flip_frame:
0407A4 21 BC FF FF 1138   	ld hl,KEY_F
0407A8 CD 27 17 04 1139   	call fn_inkey
0407AC FE 00       1140   	cp 0
0407AE 20 F4       1141   	jr nz,dsl_flip_frame
0407B0             1142   
0407B0 21 FF 17 04 1143   	ld hl,spr_size
0407B4 11 00 00 00 1144   	ld de,$000000
0407B8 5E          1145   	ld e,(hl)
0407B9 56          1146   	ld d,(hl)
0407BA 4B          1147   	ld c,e
0407BB ED 5C       1148   	mlt de ; DE = sprite length in bytes
0407BD 21 0F 19 04 1149   	ld hl,current_frame
0407C1 7E          1150   	ld a,(hl) ; A = current frame
0407C2 21 18 19 04 1151   	ld hl,sprite_buffer
0407C6 FE 00       1152   	cp 0
0407C8 28 04       1153   	jr z,ff_noloop1
0407CA 47          1154   	ld b,a
0407CB             1155   
0407CB             1156   ff_loop1:
0407CB 19          1157   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407CC 10 FD       1158   	djnz ff_loop1
0407CE             1159   
0407CE             1160   ff_noloop1:
0407CE 41          1161   	ld b,c ; B = sprite height
0407CF 11 00 00 00 1162   	ld de,$000000
0407D3 59          1163   	ld e,c ; DE = sprite width
0407D4 79          1164   	ld a,c ; A = sprite width
0407D5 CB 3F       1165   	srl a ; A = sprite height / 2
0407D7             1166   
0407D7 E5          1167   	push hl
0407D8 DD E1       1168   	pop ix ; IX = frame address
0407DA 19          1169   	add hl,de ; HL = frame address + sprite width - 1
0407DB 2B          1170   	dec hl
0407DC E5          1171   	push hl
0407DD FD E1       1172   	pop iy ; IY = IX + sprite width - 1
0407DF             1173   
0407DF             1174   ff_loop2:
0407DF F5          1175   	push af
0407E0 D5          1176   	push de
0407E1 DD E5       1177   	push ix
0407E3 FD E5       1178   	push iy
0407E5             1179   ff_loop3:
0407E5 DD 5E 00    1180   	ld e,(ix+0)
0407E8 FD 56 00    1181   	ld d,(iy+0)
0407EB DD 72 00    1182   	ld (ix+0),d
0407EE FD 73 00    1183   	ld (iy+0),e
0407F1 DD 23       1184   	inc ix
0407F3 FD 2B       1185   	dec iy
0407F5 3D          1186   	dec a
0407F6 FE 00       1187   	cp 0
0407F8 20 EB       1188   	jr nz,ff_loop3
0407FA FD E1       1189   	pop iy
0407FC DD E1       1190   	pop ix
0407FE D1          1191   	pop de
0407FF F1          1192   	pop af
040800 DD 19       1193   	add ix,de
040802 FD 19       1194   	add iy,de
040804 10 D9       1195   	djnz ff_loop2
040806             1196   
040806 CD 19 16 04 1197   	call fn_refresh_sprite
04080A C9          1198   	ret
04080B             1199   
04080B             1200   ; mirror frame vertically
04080B             1201   dsl_mirror_frame:
04080B 21 9A FF FF 1202   	ld hl,KEY_M
04080F CD 27 17 04 1203   	call fn_inkey
040813 FE 00       1204   	cp 0
040815 20 F4       1205   	jr nz,dsl_mirror_frame
040817             1206   
040817 21 FF 17 04 1207   	ld hl,spr_size
04081B 01 00 00 00 1208   	ld bc,$000000
04081F 11 00 00 00 1209   	ld de,$000000
040823 5E          1210   	ld e,(hl)
040824 56          1211   	ld d,(hl)
040825 4B          1212   	ld c,e
040826 ED 5C       1213   	mlt de ; DE = sprite length in bytes
040828 21 0F 19 04 1214   	ld hl,current_frame
04082C 7E          1215   	ld a,(hl) ; A = current frame
04082D 21 18 19 04 1216   	ld hl,sprite_buffer
040831 FE 00       1217   	cp 0
040833 28 04       1218   	jr z,mf_noloop1
040835 47          1219   	ld b,a
040836             1220   
040836             1221   mf_loop1:
040836 19          1222   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040837 10 FD       1223   	djnz mf_loop1
040839             1224   
040839             1225   mf_noloop1:
040839 11 00 00 00 1226   	ld de,$000000
04083D 59          1227   	ld e,c ; E = sprite height
04083E 79          1228   	ld a,c ; A = sprite width
04083F 41          1229   	ld b,c ; B = sprite height
040840 CB 38       1230   	srl b ; divide B by 2, so B = sprite height / 2
040842             1231   
040842 E5          1232   	push hl
040843 DD E1       1233   	pop ix ; IX = frame address
040845 51          1234   	ld d,c
040846 15          1235   	dec d
040847 ED 5C       1236   	mlt de ; DE = sprite length - sprite width
040849 19          1237   	add hl,de ; HL = frame address + sprite length - sprite width
04084A E5          1238   	push hl
04084B FD E1       1239   	pop iy ; IY = IX + sprite length - sprite width
04084D 21 00 00 00 1240   	ld hl,$000000
040851 69          1241   	ld l,c ; HL = sprite width
040852             1242   
040852             1243   mf_loop2:
040852 F5          1244   	push af
040853 D5          1245   	push de
040854 DD E5       1246   	push ix
040856 FD E5       1247   	push iy
040858             1248   mf_loop3:
040858 DD 5E 00    1249   	ld e,(ix+0)
04085B FD 56 00    1250   	ld d,(iy+0)
04085E DD 72 00    1251   	ld (ix+0),d
040861 FD 73 00    1252   	ld (iy+0),e
040864 DD 23       1253   	inc ix
040866 FD 23       1254   	inc iy
040868 3D          1255   	dec a
040869 FE 00       1256   	cp 0
04086B 20 EB       1257   	jr nz,mf_loop3
04086D FD E1       1258   	pop iy
04086F DD E1       1259   	pop ix
040871 D1          1260   	pop de
040872 F1          1261   	pop af
040873 EB          1262   	ex de,hl
040874 DD 19       1263   	add ix,de
040876 EB          1264   	ex de,hl
040877 E5          1265   	push hl
040878 FD E5       1266   	push iy
04087A E1          1267   	pop hl
04087B D1          1268   	pop de
04087C B7          1269   	or a
04087D ED 52       1270   	sbc hl,de
04087F E5          1271   	push hl
040880 D5          1272   	push de
040881 E1          1273   	pop hl
040882 FD E1       1274   	pop iy
040884 10 CC       1275   	djnz mf_loop2
040886             1276   
040886 CD 19 16 04 1277   	call fn_refresh_sprite
04088A C9          1278   	ret
04088B             1279   
04088B             1280   dsl_flood_fill:
04088B 21 B6 FF FF 1281   	ld hl,KEY_RETURN
04088F CD 27 17 04 1282   	call fn_inkey
040893 FE 00       1283   	cp 0
040895 20 F4       1284   	jr nz,dsl_flood_fill
040897             1285   
040897             1286   	; hide the cursor
040897 CD 26 0C 04 1287   	call fn_draw_pixel_without_border
04089B             1288   
04089B             1289   	; memorize pixel coordinates
04089B 3A FA 17 04 1290   	ld a,(xpix)
04089F 32 FC 17 04 1291   	ld (memxpix),a
0408A3 3A FB 17 04 1292   	ld a,(ypix)
0408A7 32 FD 17 04 1293   	ld (memypix),a
0408AB             1294   
0408AB             1295   	; fill all recursively
0408AB 3A FA 17 04 1296   	ld a,(xpix)
0408AF 5F          1297   	ld e,a
0408B0 3A FB 17 04 1298   	ld a,(ypix)
0408B4 57          1299   	ld d,a
0408B5 CD D6 08 04 1300   	call dsl_flood_fill_loop
0408B9             1301   
0408B9             1302   	; refresh all the sprite
0408B9 CD 19 16 04 1303   	call fn_refresh_sprite
0408BD             1304   
0408BD             1305   	; hide the cursor again
0408BD CD 26 0C 04 1306   	call fn_draw_pixel_without_border
0408C1             1307   
0408C1             1308   	; restore pixel coordinates
0408C1             1309   	; and cursor
0408C1 3A FC 17 04 1310   	ld a,(memxpix)
0408C5 32 FA 17 04 1311   	ld (xpix),a
0408C9 3A FD 17 04 1312   	ld a,(memypix)
0408CD 32 FB 17 04 1313   	ld (ypix),a
0408D1 CD 12 0C 04 1314   	call fn_draw_pixel_with_border
0408D5 C9          1315   	ret
0408D6             1316   
0408D6             1317   dsl_flood_fill_loop:
0408D6 D5          1318   	push de
0408D7             1319   
0408D7 DD 21 FF 17 1320   	ld ix,spr_size
       04          
0408DC             1321   
0408DC             1322   	; out  of the sprite area ?
0408DC 7B          1323   	ld a,e
0408DD DD BE 00    1324   	cp (ix+0)
0408E0 D2 29 09 04 1325   	jp nc,ffl_exit
0408E4             1326   
0408E4             1327   	; out  of the sprite area ?
0408E4 7A          1328   	ld a,d
0408E5 DD BE 00    1329   	cp (ix+0)
0408E8 D2 29 09 04 1330   	jp nc,ffl_exit
0408EC             1331   
0408EC             1332   	; replace current pixel, if it is
0408EC             1333   	; inside the sprite area,
0408EC             1334   	; and has not the select palette color
0408EC 7B          1335   	ld a,e
0408ED 32 FA 17 04 1336   	ld (xpix),a
0408F1 7A          1337   	ld a,d
0408F2 32 FB 17 04 1338   	ld (ypix),a
0408F6 CD 3C 0C 04 1339   	call fn_get_pixel_color
0408FA 21 00 18 04 1340   	ld hl,current_pen
0408FE BE          1341   	cp (hl)
0408FF CA 29 09 04 1342   	jp z,ffl_exit
040903 7E          1343   	ld a,(hl)
040904 CD 7E 0C 04 1344   	call fn_set_pixel_color
040908             1345   
040908             1346   	; restore coordinates
040908 3A FA 17 04 1347   	ld a,(xpix)
04090C 5F          1348   	ld e,a
04090D 3A FB 17 04 1349   	ld a,(ypix)
040911 57          1350   	ld d,a
040912             1351   
040912             1352   	; draw pixel at right
040912 1C          1353   	inc e
040913 CD D6 08 04 1354   	call dsl_flood_fill_loop
040917 1D          1355   	dec e
040918             1356   	; draw pixel at left
040918 1D          1357   	dec e
040919 CD D6 08 04 1358   	call dsl_flood_fill_loop
04091D 1C          1359   	inc e
04091E             1360   	; draw pixel up
04091E 14          1361   	inc d
04091F CD D6 08 04 1362   	call dsl_flood_fill_loop
040923 15          1363   	dec d
040924             1364   	; draw pixel down
040924 15          1365   	dec d
040925 CD D6 08 04 1366   	call dsl_flood_fill_loop
040929             1367   
040929             1368   ffl_exit:
040929 D1          1369   	pop de
04092A C9          1370   	ret
04092B             1371   
04092B             1372   ; change current tool to palette tool
04092B             1373   dsl_palette_tool:
04092B 21 9F FF FF 1374   	ld hl,KEY_TAB
04092F CD 27 17 04 1375   	call fn_inkey
040933 FE 00       1376   	cp 0
040935 20 F4       1377   	jr nz,dsl_palette_tool
040937             1378   
040937             1379   	; hide sprite drawing cursor
040937 CD 26 0C 04 1380   	call fn_draw_pixel_without_border
04093B             1381   
04093B             1382   	; draw selected palette color
04093B 21 00 18 04 1383   	ld hl,current_pen
04093F 4E          1384   	ld c,(hl)
040940 CD DA 0C 04 1385   	call fn_draw_palette_with_border
040944             1386   
040944             1387   ; select palette color
040944             1388   dsl_palette_tool_loop:
040944             1389   	; move to left color in the palette
040944 21 E6 FF FF 1390   	ld hl,KEY_LEFT
040948 CD 27 17 04 1391   	call fn_inkey
04094C FE 01       1392   	cp 1
04094E CC 11 0A 04 1393   	call z,dsl_dec_pen
040952             1394   
040952             1395   	; move to right color in the palette
040952 21 86 FF FF 1396   	ld hl,KEY_RIGHT
040956 CD 27 17 04 1397   	call fn_inkey
04095A FE 01       1398   	cp 1
04095C CC 38 0A 04 1399   	call z,dsl_inc_pen
040960             1400   
040960             1401   	; return to draw sprite tool
040960 21 9F FF FF 1402   	ld hl,KEY_TAB
040964 CD 27 17 04 1403   	call fn_inkey
040968 FE 01       1404   	cp 1
04096A CA F4 09 04 1405   	jp z,dsl_draw_sprite_tool
04096E             1406   
04096E             1407   	; load palette
04096E 21 A9 FF FF 1408   	ld hl,KEY_L
040972 CD 27 17 04 1409   	call fn_inkey
040976 FE 01       1410   	cp 1
040978 CC 9C 09 04 1411   	call z,dslp_load_palette
04097C             1412   
04097C             1413   	; save palette
04097C 21 AE FF FF 1414   	ld hl,KEY_S
040980 CD 27 17 04 1415   	call fn_inkey
040984 FE 01       1416   	cp 1
040986 CC CE 09 04 1417   	call z,dslp_save_palette
04098A             1418   
04098A             1419   	; exit program
04098A 21 8F FF FF 1420   	ld hl,KEY_ESCAPE
04098E CD 27 17 04 1421   	call fn_inkey
040992 FE 01       1422   	cp 1
040994 CA 61 0A 04 1423   	jp z,exit_program
040998             1424   
040998 C3 44 09 04 1425   	jp dsl_palette_tool_loop
04099C             1426   
04099C             1427   dslp_load_palette:
04099C 21 A9 FF FF 1428   	ld hl,KEY_L
0409A0 CD 27 17 04 1429   	call fn_inkey
0409A4 FE 00       1430   	cp 0
0409A6 20 F4       1431   	jr nz,dslp_load_palette
0409A8             1432   
0409A8 21 00 18 04 1433   	ld hl,current_pen
0409AC 4E          1434   	ld c,(hl)
0409AD CD 3F 0D 04 1435   	call fn_draw_palette_without_border
0409B1 CD B9 0E 04 1436   	call fn_load_palette
0409B5 CD 61 17 04 1437   	call fn_draw_the_palette
0409B9 CD 19 16 04 1438   	call fn_refresh_sprite
0409BD 21 00 18 04 1439   	ld hl,current_pen
0409C1 4E          1440   	ld c,(hl)
0409C2 CD DA 0C 04 1441   	call fn_draw_palette_with_border
0409C6 CD 59 16 04 1442   	call fn_change_frame
0409CA C3 44 09 04 1443   	jp dsl_palette_tool_loop
0409CE             1444   
0409CE             1445   dslp_save_palette:
0409CE 21 AE FF FF 1446   	ld hl,KEY_S
0409D2 CD 27 17 04 1447   	call fn_inkey
0409D6 FE 00       1448   	cp 0
0409D8 20 F4       1449   	jr nz,dslp_save_palette
0409DA             1450   
0409DA 21 00 18 04 1451   	ld hl,current_pen
0409DE 4E          1452   	ld c,(hl)
0409DF CD 3F 0D 04 1453   	call fn_draw_palette_without_border
0409E3 CD CD 11 04 1454   	call fn_save_palette
0409E7 21 00 18 04 1455   	ld hl,current_pen
0409EB 4E          1456   	ld c,(hl)
0409EC CD DA 0C 04 1457   	call fn_draw_palette_with_border
0409F0 C3 44 09 04 1458   	jp dsl_palette_tool_loop
0409F4             1459   
0409F4             1460   dsl_draw_sprite_tool:
0409F4 21 9F FF FF 1461   	ld hl,KEY_TAB
0409F8 CD 27 17 04 1462   	call fn_inkey
0409FC FE 00       1463   	cp 0
0409FE 20 F4       1464   	jr nz,dsl_draw_sprite_tool
040A00             1465   
040A00             1466   	; unselect palette color
040A00 21 00 18 04 1467   	ld hl,current_pen
040A04 4E          1468   	ld c,(hl)
040A05 CD 3F 0D 04 1469   	call fn_draw_palette_without_border
040A09             1470   
040A09             1471   	; draw the pixel with a border
040A09 CD 12 0C 04 1472   	call fn_draw_pixel_with_border
040A0D             1473   
040A0D C3 98 02 04 1474   	jp draw_sprite_loop
040A11             1475   
040A11             1476   dsl_dec_pen:
040A11 21 00 18 04 1477   	ld hl,current_pen
040A15 7E          1478   	ld a,(hl)
040A16 FE 00       1479   	cp 0
040A18 C8          1480   	ret z
040A19 FE 40       1481   	cp MAX_COLORS
040A1B D0          1482   	ret nc
040A1C             1483   
040A1C 4F          1484   	ld c,a ; c is the old pen
040A1D 3D          1485   	dec a ; a is the new pen
040A1E             1486   
040A1E F5          1487   	push af
040A1F C5          1488   	push bc
040A20             1489   
040A20             1490   	; unselect palette color
040A20 CD 3F 0D 04 1491   	call fn_draw_palette_without_border
040A24             1492   
040A24 C1          1493   	pop bc
040A25 F1          1494   	pop af
040A26             1495   
040A26             1496   	; replace current pen value
040A26 21 00 18 04 1497   	ld hl,current_pen
040A2A 77          1498   	ld (hl),a
040A2B             1499   
040A2B             1500   	; select palette color
040A2B 4F          1501   	ld c,a
040A2C CD DA 0C 04 1502   	call fn_draw_palette_with_border
040A30 CD A2 16 04 1503   	call fn_slowdown
040A34 C3 44 09 04 1504   	jp dsl_palette_tool_loop
040A38             1505   
040A38             1506   dsl_inc_pen:
040A38 21 00 18 04 1507   	ld hl,current_pen
040A3C 7E          1508   	ld a,(hl)
040A3D 21 0A 19 04 1509   	ld hl,colors_count
040A41 4E          1510   	ld c,(hl)
040A42 0D          1511   	dec c
040A43 B9          1512   	cp c
040A44 D0          1513   	ret nc
040A45             1514   
040A45 4F          1515   	ld c,a ; c is the old pen
040A46 3C          1516   	inc a ; a is the new pen
040A47             1517   
040A47 F5          1518   	push af
040A48 C5          1519   	push bc
040A49             1520   
040A49             1521   	; unselect palette color
040A49 CD 3F 0D 04 1522   	call fn_draw_palette_without_border
040A4D             1523   
040A4D C1          1524   	pop bc
040A4E F1          1525   	pop af
040A4F             1526   
040A4F             1527   	; replace current pen value
040A4F 21 00 18 04 1528   	ld hl,current_pen
040A53 77          1529   	ld (hl),a
040A54             1530   
040A54             1531   	; select palette color
040A54 4F          1532   	ld c,a
040A55 CD DA 0C 04 1533   	call fn_draw_palette_with_border
040A59 CD A2 16 04 1534   	call fn_slowdown
040A5D C3 44 09 04 1535   	jp dsl_palette_tool_loop
040A61             1536   
040A61             1537   ; exit program
040A61             1538   exit_program:
040A61             1539   	; reset to mode 1
040A61             1540   	vdu 22
040A61 3E 16       0001M  		LD	A, function
040A63 49 D7       0002M  		RST.LIS	10h
040A65             1541   	vdu 1
040A65 3E 01       0001M  		LD	A, function
040A67 49 D7       0002M  		RST.LIS	10h
040A69             1542   
040A69             1543   	; position the texte cursor at home
040A69             1544   	vdu 30
040A69 3E 1E       0001M  		LD	A, function
040A6B 49 D7       0002M  		RST.LIS	10h
040A6D             1545   
040A6D             1546   	; show cursor
040A6D             1547   	vdu 23
040A6D 3E 17       0001M  		LD	A, function
040A6F 49 D7       0002M  		RST.LIS	10h
040A71             1548   	vdu 1
040A71 3E 01       0001M  		LD	A, function
040A73 49 D7       0002M  		RST.LIS	10h
040A75             1549   	vdu 1
040A75 3E 01       0001M  		LD	A, function
040A77 49 D7       0002M  		RST.LIS	10h
040A79             1550   
040A79 FD E1       1551   	pop iy
040A7B DD E1       1552   	pop ix
040A7D D1          1553   	pop de
040A7E C1          1554   	pop bc
040A7F F1          1555   	pop af
040A80 21 00 00 00 1556   	ld hl,0
040A84             1557   
040A84 C9          1558   	ret
040A85             1559   ;======================================================================
040A85             1560   
040A85             1561   ; draw a rectangle
040A85             1562   fn_rect:
040A85             1563   	vdu 25
040A85 3E 19       0001M  		LD	A, function
040A87 49 D7       0002M  		RST.LIS	10h
040A89             1564   	vdu 4
040A89 3E 04       0001M  		LD	A, function
040A8B 49 D7       0002M  		RST.LIS	10h
040A8D DD 21 EA 17 1565   	ld ix,x1
       04          
040A92 DD 7E 00    1566   	ld a,(ix + 0)
040A95             1567   	vdu_a
040A95 49 D7       0001M  		RST.LIS	10h
040A97 DD 7E 01    1568   	ld a,(ix + 1)
040A9A             1569   	vdu_a
040A9A 49 D7       0001M  		RST.LIS	10h
040A9C FD 21 EC 17 1570   	ld iy,y1
       04          
040AA1 FD 7E 00    1571   	ld a,(iy + 0)
040AA4             1572   	vdu_a
040AA4 49 D7       0001M  		RST.LIS	10h
040AA6 FD 7E 01    1573   	ld a,(iy + 1)
040AA9             1574   	vdu_a
040AA9 49 D7       0001M  		RST.LIS	10h
040AAB             1575   
040AAB             1576   	vdu 25
040AAB 3E 19       0001M  		LD	A, function
040AAD 49 D7       0002M  		RST.LIS	10h
040AAF             1577   	vdu 5
040AAF 3E 05       0001M  		LD	A, function
040AB1 49 D7       0002M  		RST.LIS	10h
040AB3 DD 21 EE 17 1578   	ld ix,x2
       04          
040AB8 DD 7E 00    1579   	ld a,(ix + 0)
040ABB             1580   	vdu_a
040ABB 49 D7       0001M  		RST.LIS	10h
040ABD DD 7E 01    1581   	ld a,(ix + 1)
040AC0             1582   	vdu_a
040AC0 49 D7       0001M  		RST.LIS	10h
040AC2 FD 21 EC 17 1583   	ld iy,y1
       04          
040AC7 FD 7E 00    1584   	ld a,(iy + 0)
040ACA             1585   	vdu_a
040ACA 49 D7       0001M  		RST.LIS	10h
040ACC FD 7E 01    1586   	ld a,(iy + 1)
040ACF             1587   	vdu_a
040ACF 49 D7       0001M  		RST.LIS	10h
040AD1             1588   
040AD1             1589   	vdu 25
040AD1 3E 19       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5             1590   	vdu 5
040AD5 3E 05       0001M  		LD	A, function
040AD7 49 D7       0002M  		RST.LIS	10h
040AD9 DD 21 EE 17 1591   	ld ix,x2
       04          
040ADE DD 7E 00    1592   	ld a,(ix + 0)
040AE1             1593   	vdu_a
040AE1 49 D7       0001M  		RST.LIS	10h
040AE3 DD 7E 01    1594   	ld a,(ix + 1)
040AE6             1595   	vdu_a
040AE6 49 D7       0001M  		RST.LIS	10h
040AE8 FD 21 F0 17 1596   	ld iy,y2
       04          
040AED FD 7E 00    1597   	ld a,(iy + 0)
040AF0             1598   	vdu_a
040AF0 49 D7       0001M  		RST.LIS	10h
040AF2 FD 7E 01    1599   	ld a,(iy + 1)
040AF5             1600   	vdu_a
040AF5 49 D7       0001M  		RST.LIS	10h
040AF7             1601   
040AF7             1602   	vdu 25
040AF7 3E 19       0001M  		LD	A, function
040AF9 49 D7       0002M  		RST.LIS	10h
040AFB             1603   	vdu 5
040AFB 3E 05       0001M  		LD	A, function
040AFD 49 D7       0002M  		RST.LIS	10h
040AFF DD 21 EA 17 1604   	ld ix,x1
       04          
040B04 DD 7E 00    1605   	ld a,(ix + 0)
040B07             1606   	vdu_a
040B07 49 D7       0001M  		RST.LIS	10h
040B09 DD 7E 01    1607   	ld a,(ix + 1)
040B0C             1608   	vdu_a
040B0C 49 D7       0001M  		RST.LIS	10h
040B0E FD 21 F0 17 1609   	ld iy,y2
       04          
040B13 FD 7E 00    1610   	ld a,(iy + 0)
040B16             1611   	vdu_a
040B16 49 D7       0001M  		RST.LIS	10h
040B18 FD 7E 01    1612   	ld a,(iy + 1)
040B1B             1613   	vdu_a
040B1B 49 D7       0001M  		RST.LIS	10h
040B1D             1614   
040B1D             1615   	vdu 25
040B1D 3E 19       0001M  		LD	A, function
040B1F 49 D7       0002M  		RST.LIS	10h
040B21             1616   	vdu 5
040B21 3E 05       0001M  		LD	A, function
040B23 49 D7       0002M  		RST.LIS	10h
040B25 DD 21 EA 17 1617   	ld ix,x1
       04          
040B2A DD 7E 00    1618   	ld a,(ix + 0)
040B2D             1619   	vdu_a
040B2D 49 D7       0001M  		RST.LIS	10h
040B2F DD 7E 01    1620   	ld a,(ix + 1)
040B32             1621   	vdu_a
040B32 49 D7       0001M  		RST.LIS	10h
040B34 FD 21 EC 17 1622   	ld iy,y1
       04          
040B39 FD 7E 00    1623   	ld a,(iy + 0)
040B3C             1624   	vdu_a
040B3C 49 D7       0001M  		RST.LIS	10h
040B3E FD 7E 01    1625   	ld a,(iy + 1)
040B41             1626   	vdu_a
040B41 49 D7       0001M  		RST.LIS	10h
040B43             1627   
040B43 C9          1628   	ret
040B44             1629   
040B44             1630   ; draw a filled rectangle
040B44             1631   fn_rectf:
040B44 DD 21 EA 17 1632   	ld ix,x1
       04          
040B49 FD 21 EC 17 1633   	ld iy,y1
       04          
040B4E             1634   
040B4E             1635   	vdu 25
040B4E 3E 19       0001M  		LD	A, function
040B50 49 D7       0002M  		RST.LIS	10h
040B52             1636   	vdu 4
040B52 3E 04       0001M  		LD	A, function
040B54 49 D7       0002M  		RST.LIS	10h
040B56 DD 7E 00    1637   	ld a,(ix+0)
040B59             1638   	vdu_a
040B59 49 D7       0001M  		RST.LIS	10h
040B5B DD 7E 01    1639   	ld a,(ix+1)
040B5E             1640   	vdu_a
040B5E 49 D7       0001M  		RST.LIS	10h
040B60 FD 7E 00    1641   	ld a,(iy+0)
040B63             1642   	vdu_a
040B63 49 D7       0001M  		RST.LIS	10h
040B65 FD 7E 01    1643   	ld a,(iy+1)
040B68             1644   	vdu_a
040B68 49 D7       0001M  		RST.LIS	10h
040B6A             1645   
040B6A DD 21 EE 17 1646   	ld ix,x2
       04          
040B6F FD 21 F0 17 1647   	ld iy,y2
       04          
040B74             1648   
040B74             1649   	vdu 25
040B74 3E 19       0001M  		LD	A, function
040B76 49 D7       0002M  		RST.LIS	10h
040B78             1650   	vdu 101
040B78 3E 65       0001M  		LD	A, function
040B7A 49 D7       0002M  		RST.LIS	10h
040B7C DD 7E 00    1651   	ld a,(ix+0)
040B7F             1652   	vdu_a
040B7F 49 D7       0001M  		RST.LIS	10h
040B81 DD 7E 01    1653   	ld a,(ix+1)
040B84             1654   	vdu_a
040B84 49 D7       0001M  		RST.LIS	10h
040B86 FD 7E 00    1655   	ld a,(iy+0)
040B89             1656   	vdu_a
040B89 49 D7       0001M  		RST.LIS	10h
040B8B FD 7E 01    1657   	ld a,(iy+1)
040B8E             1658   	vdu_a
040B8E 49 D7       0001M  		RST.LIS	10h
040B90             1659   
040B90 C9          1660   	ret
040B91             1661   
040B91             1662   fn_calc_pixel_coords:
040B91 11 00 00 00 1663   	ld de,$000000 ; reset deu
040B95             1664   
040B95             1665   	; calculate coordinates x of the resized pixel
040B95 21 FA 17 04 1666   	ld hl,xpix
040B99 5E          1667   	ld e,(hl) ; E = xpix
040B9A 21 FE 17 04 1668   	ld hl,pixel_width
040B9E 56          1669   	ld d,(hl) ; D = pixel_width
040B9F D5          1670   	push de
040BA0 E1          1671   	pop hl ; HL = DE
040BA1 ED 6C       1672   	mlt hl ; HL = xpix * pixel_width
040BA3 DD 21 F2 17 1673   	ld ix,xs1
       04          
040BA8 DD 5E 00    1674   	ld e,(ix+0)
040BAB DD 56 01    1675   	ld d,(ix+1)
040BAE 13          1676   	inc de ; DE = xs1 + 1
040BAF 19          1677   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040BB0 FD 21 EA 17 1678   	ld iy,x1
       04          
040BB5 FD 75 00    1679   	ld (iy+0),l
040BB8 FD 74 01    1680   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040BBB E5          1681   	push hl
040BBC 21 FE 17 04 1682   	ld hl,pixel_width
040BC0 16 00       1683   	ld d,0
040BC2 5E          1684   	ld e,(hl)
040BC3 E1          1685   	pop hl
040BC4 19          1686   	add hl,de
040BC5 2B          1687   	dec hl
040BC6 FD 21 EE 17 1688   	ld iy,x2
       04          
040BCB FD 75 00    1689   	ld (iy+0),l
040BCE FD 74 01    1690   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040BD1             1691   
040BD1 11 00 00 00 1692   	ld de,$000000 ; reset deu
040BD5             1693   
040BD5             1694   	; calculate coordinates y of the resized pixel
040BD5 21 FB 17 04 1695   	ld hl,ypix
040BD9 5E          1696   	ld e,(hl) ; E = ypix
040BDA 21 FE 17 04 1697   	ld hl,pixel_width
040BDE 56          1698   	ld d,(hl) ; D = pixel_width
040BDF D5          1699   	push de
040BE0 E1          1700   	pop hl ; HL = DE
040BE1 ED 6C       1701   	mlt hl ; HL = ypix * pixel_width
040BE3 DD 21 F4 17 1702   	ld ix,ys1
       04          
040BE8 DD 5E 00    1703   	ld e,(ix+0)
040BEB DD 56 01    1704   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040BEE 13          1705   	inc de ; DE = ys1 + 1
040BEF 19          1706   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040BF0 FD 21 EC 17 1707   	ld iy,y1
       04          
040BF5 FD 75 00    1708   	ld (iy+0),l
040BF8 FD 74 01    1709   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040BFB E5          1710   	push hl
040BFC 21 FE 17 04 1711   	ld hl,pixel_width
040C00 16 00       1712   	ld d,0
040C02 5E          1713   	ld e,(hl)
040C03 E1          1714   	pop hl
040C04 19          1715   	add hl,de
040C05 2B          1716   	dec hl
040C06 FD 21 F0 17 1717   	ld iy,y2
       04          
040C0B FD 75 00    1718   	ld (iy+0),l
040C0E FD 74 01    1719   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C11             1720   
040C11 C9          1721   	ret
040C12             1722   
040C12             1723   ; draw the resized pixel border, with its color
040C12             1724   fn_draw_pixel_with_border:
040C12 CD 26 0C 04 1725   	call fn_draw_pixel_without_border
040C16             1726   
040C16             1727   	; set graphics pen
040C16             1728   	vdu 18
040C16 3E 12       0001M  		LD	A, function
040C18 49 D7       0002M  		RST.LIS	10h
040C1A             1729   	vdu 0
040C1A 3E 00       0001M  		LD	A, function
040C1C 49 D7       0002M  		RST.LIS	10h
040C1E             1730   	vdu COLOR_GREY ; grey pen
040C1E 3E 07       0001M  		LD	A, function
040C20 49 D7       0002M  		RST.LIS	10h
040C22             1731   
040C22             1732   	; draw the sprite's border rectangle
040C22 C3 85 0A 04 1733   	jp fn_rect
040C26             1734   
040C26             1735   ; draw the resized pixel color
040C26             1736   fn_draw_pixel_without_border:
040C26 CD 91 0B 04 1737   	call fn_calc_pixel_coords
040C2A             1738   
040C2A             1739   	; set graphics pen
040C2A             1740   	vdu 18
040C2A 3E 12       0001M  		LD	A, function
040C2C 49 D7       0002M  		RST.LIS	10h
040C2E             1741   	vdu 0
040C2E 3E 00       0001M  		LD	A, function
040C30 49 D7       0002M  		RST.LIS	10h
040C32 CD 3C 0C 04 1742   	call fn_get_pixel_color
040C36             1743   	vdu_a
040C36 49 D7       0001M  		RST.LIS	10h
040C38             1744   
040C38             1745   	; draw the sprite's color rectangle
040C38 C3 44 0B 04 1746   	jp fn_rectf
040C3C             1747   
040C3C             1748   ; get pixel color value in the sprite buffer
040C3C             1749   ; returns A: pixel color (0-63)
040C3C             1750   fn_get_pixel_color:
040C3C 11 00 00 00 1751   	ld de,$000000 ; reset deu
040C40             1752   
040C40             1753   	; calculate the offset to add to the address
040C40 21 FB 17 04 1754   	ld hl,ypix
040C44 5E          1755   	ld e,(hl) ; E = ypix
040C45 21 FF 17 04 1756   	ld hl,spr_size
040C49 56          1757   	ld d,(hl) ; D = sprsize
040C4A D5          1758   	push de
040C4B E1          1759   	pop hl
040C4C ED 6C       1760   	mlt hl ; HL = ypix * sprsize
040C4E E5          1761   	push hl
040C4F 21 FA 17 04 1762   	ld hl,xpix
040C53 5E          1763   	ld e,(hl)
040C54 16 00       1764   	ld d,0
040C56 E1          1765   	pop hl
040C57 19          1766   	add hl,de ; HL = (ypix * sprsize) + xpix
040C58             1767   
040C58 11 0F 19 04 1768   	ld de,current_frame
040C5C 1A          1769   	ld a,(de)
040C5D FE 00       1770   	cp 0
040C5F 28 16       1771   	jr z,gpc_end_loop
040C61             1772   
040C61 47          1773   	ld b,a
040C62 E5          1774   	push hl
040C63 11 00 00 00 1775   	ld de,$000000
040C67 21 FF 17 04 1776   	ld hl,spr_size
040C6B 5E          1777   	ld e,(hl)
040C6C 56          1778   	ld d,(hl)
040C6D D5          1779   	push de
040C6E E1          1780   	pop hl
040C6F ED 6C       1781   	mlt hl
040C71 E5          1782   	push hl
040C72 D1          1783   	pop de ; DE = sprsize²
040C73 E1          1784   	pop hl
040C74             1785   
040C74             1786   gpc_loop:
040C74 19          1787   	add hl,de
040C75 10 FD       1788   	djnz gpc_loop
040C77             1789   
040C77             1790   gpc_end_loop:
040C77             1791   	; add the offset to the address
040C77 11 18 19 04 1792   	ld de,sprite_buffer
040C7B 19          1793   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040C7C             1794   
040C7C             1795   	; get pixel color value
040C7C 7E          1796   	ld a,(hl)
040C7D             1797   
040C7D C9          1798   	ret
040C7E             1799   
040C7E             1800   ; get pixel color value in the sprite buffer
040C7E             1801   ; A: pixel color (0-63)
040C7E             1802   fn_set_pixel_color:
040C7E 11 00 00 00 1803   	ld de,$000000 ; reset deu
040C82             1804   
040C82             1805   	; calculate the offset to add to the address
040C82 21 FB 17 04 1806   	ld hl,ypix
040C86 5E          1807   	ld e,(hl) ; E = ypix
040C87 21 FF 17 04 1808   	ld hl,spr_size
040C8B 56          1809   	ld d,(hl) ; D = sprsize
040C8C D5          1810   	push de
040C8D E1          1811   	pop hl
040C8E ED 6C       1812   	mlt hl ; HL = ypix * sprsize
040C90 E5          1813   	push hl
040C91 21 FA 17 04 1814   	ld hl,xpix
040C95 5E          1815   	ld e,(hl)
040C96 16 00       1816   	ld d,0
040C98 E1          1817   	pop hl
040C99 19          1818   	add hl,de ; HL = (ypix * sprsize) + xpix
040C9A F5          1819   	push af
040C9B             1820   
040C9B 11 0F 19 04 1821   	ld de,current_frame
040C9F 1A          1822   	ld a,(de)
040CA0 FE 00       1823   	cp 0
040CA2 28 16       1824   	jr z,spc_end_loop
040CA4             1825   
040CA4 47          1826   	ld b,a
040CA5 E5          1827   	push hl
040CA6 11 00 00 00 1828   	ld de,$000000
040CAA 21 FF 17 04 1829   	ld hl,spr_size
040CAE 5E          1830   	ld e,(hl)
040CAF 56          1831   	ld d,(hl)
040CB0 D5          1832   	push de
040CB1 E1          1833   	pop hl
040CB2 ED 6C       1834   	mlt hl
040CB4 E5          1835   	push hl
040CB5 D1          1836   	pop de ; DE = sprsize²
040CB6 E1          1837   	pop hl
040CB7             1838   
040CB7             1839   spc_loop:
040CB7 19          1840   	add hl,de
040CB8 10 FD       1841   	djnz spc_loop
040CBA             1842   
040CBA             1843   spc_end_loop:
040CBA             1844   
040CBA             1845   	; add the offset to the address
040CBA 11 18 19 04 1846   	ld de,sprite_buffer
040CBE 19          1847   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CBF             1848   
040CBF             1849   	; set pixel color value
040CBF F1          1850   	pop af
040CC0 77          1851   	ld (hl),a
040CC1             1852   
040CC1 C9          1853   	ret
040CC2             1854   
040CC2             1855   fn_move_up:
040CC2 21 FB 17 04 1856   	ld hl,ypix
040CC6 35          1857   	dec (hl)
040CC7 C9          1858   	ret
040CC8             1859   
040CC8             1860   fn_move_down:
040CC8 21 FB 17 04 1861   	ld hl,ypix
040CCC 34          1862   	inc (hl)
040CCD C9          1863   	ret
040CCE             1864   
040CCE             1865   fn_move_left:
040CCE 21 FA 17 04 1866   	ld hl,xpix
040CD2 35          1867   	dec (hl)
040CD3 C9          1868   	ret
040CD4             1869   
040CD4             1870   fn_move_right:
040CD4 21 FA 17 04 1871   	ld hl,xpix
040CD8 34          1872   	inc (hl)
040CD9 C9          1873   	ret
040CDA             1874   
040CDA             1875   ; draw palette color whit border and selection
040CDA             1876   ; C = color number (0-63)
040CDA             1877   fn_draw_palette_with_border:
040CDA C5          1878   	push bc
040CDB             1879   
040CDB             1880   	; choose palette color
040CDB             1881   	vdu 18
040CDB 3E 12       0001M  		LD	A, function
040CDD 49 D7       0002M  		RST.LIS	10h
040CDF             1882   	vdu 0
040CDF 3E 00       0001M  		LD	A, function
040CE1 49 D7       0002M  		RST.LIS	10h
040CE3 C1          1883   	pop bc
040CE4 C5          1884   	push bc
040CE5 79          1885   	ld a,c
040CE6             1886   	vdu_a
040CE6 49 D7       0001M  		RST.LIS	10h
040CE8             1887   
040CE8             1888   	; store coordinates for a palette square
040CE8 DD 21 EA 17 1889   	ld ix,x1
       04          
040CED E1          1890   	pop hl
040CEE E5          1891   	push hl
040CEF 26 05       1892   	ld h,5
040CF1 ED 6C       1893   	mlt hl
040CF3 E5          1894   	push hl
040CF4 DD 75 00    1895   	ld (ix+0),l
040CF7 DD 74 01    1896   	ld (ix+1),h
040CFA             1897   
040CFA DD 21 EC 17 1898   	ld ix,y1
       04          
040CFF 21 00 00 00 1899   	ld hl,0
040D03 DD 75 00    1900   	ld (ix+0),l
040D06 DD 74 01    1901   	ld (ix+1),h
040D09             1902   
040D09 DD 21 EE 17 1903   	ld ix,x2
       04          
040D0E E1          1904   	pop hl
040D0F 11 04 00 00 1905   	ld de,4
040D13 19          1906   	add hl,de
040D14 DD 75 00    1907   	ld (ix+0),l
040D17 DD 74 01    1908   	ld (ix+1),h
040D1A             1909   
040D1A DD 21 F0 17 1910   	ld ix,y2
       04          
040D1F 21 0A 00 00 1911   	ld hl,10
040D23 DD 75 00    1912   	ld (ix+0),l
040D26 DD 74 01    1913   	ld (ix+1),h
040D29             1914   
040D29             1915   	; draw the palette filled square
040D29 CD 44 0B 04 1916   	call fn_rectf
040D2D             1917   
040D2D             1918   	; choose grey color
040D2D             1919   	vdu 18
040D2D 3E 12       0001M  		LD	A, function
040D2F 49 D7       0002M  		RST.LIS	10h
040D31             1920   	vdu 0
040D31 3E 00       0001M  		LD	A, function
040D33 49 D7       0002M  		RST.LIS	10h
040D35 3E 07       1921   	ld a,COLOR_GREY
040D37             1922   	vdu_a
040D37 49 D7       0001M  		RST.LIS	10h
040D39             1923   
040D39             1924   	; draw the palette square border
040D39 CD 85 0A 04 1925   	call fn_rect
040D3D             1926   
040D3D             1927   	; next color ?
040D3D C1          1928   	pop bc
040D3E             1929   
040D3E C9          1930   	ret
040D3F             1931   
040D3F             1932   ; draw palette color whitout border and selection
040D3F             1933   ; C = color number (0-63)
040D3F             1934   fn_draw_palette_without_border:
040D3F C5          1935   	push bc
040D40             1936   
040D40             1937   	; choose palette color
040D40             1938   	vdu 18
040D40 3E 12       0001M  		LD	A, function
040D42 49 D7       0002M  		RST.LIS	10h
040D44             1939   	vdu 0
040D44 3E 00       0001M  		LD	A, function
040D46 49 D7       0002M  		RST.LIS	10h
040D48 C1          1940   	pop bc
040D49 C5          1941   	push bc
040D4A 79          1942   	ld a,c
040D4B             1943   	vdu_a
040D4B 49 D7       0001M  		RST.LIS	10h
040D4D             1944   
040D4D             1945   	; store coordinates for a palette square
040D4D DD 21 EA 17 1946   	ld ix,x1
       04          
040D52 E1          1947   	pop hl
040D53 E5          1948   	push hl
040D54 26 05       1949   	ld h,5
040D56 ED 6C       1950   	mlt hl
040D58 E5          1951   	push hl
040D59 DD 75 00    1952   	ld (ix+0),l
040D5C DD 74 01    1953   	ld (ix+1),h
040D5F             1954   
040D5F DD 21 EC 17 1955   	ld ix,y1
       04          
040D64 21 00 00 00 1956   	ld hl,0
040D68 DD 75 00    1957   	ld (ix+0),l
040D6B DD 74 01    1958   	ld (ix+1),h
040D6E             1959   
040D6E DD 21 EE 17 1960   	ld ix,x2
       04          
040D73 E1          1961   	pop hl
040D74 11 04 00 00 1962   	ld de,4
040D78 19          1963   	add hl,de
040D79 DD 75 00    1964   	ld (ix+0),l
040D7C DD 74 01    1965   	ld (ix+1),h
040D7F             1966   
040D7F DD 21 F0 17 1967   	ld ix,y2
       04          
040D84 21 0A 00 00 1968   	ld hl,10
040D88 DD 75 00    1969   	ld (ix+0),l
040D8B DD 74 01    1970   	ld (ix+1),h
040D8E             1971   
040D8E             1972   	; draw the palette filled square
040D8E CD 44 0B 04 1973   	call fn_rectf
040D92             1974   
040D92 C1          1975   	pop bc
040D93             1976   
040D93 C9          1977   	ret
040D94             1978   
040D94             1979   ; get an ascii key value
040D94             1980   fn_input_key:
040D94 C5          1981   	push bc
040D95             1982   	moscall mos_getkey
040D95 3E 00       0001M  		LD	A, function
040D97 49 CF       0002M  		RST.LIS	08h
040D99 C1          1983   	pop bc
040D9A C9          1984   	ret
040D9B             1985   
040D9B             1986   ; input a text of 8 chars
040D9B             1987   fn_input_text8:
040D9B             1988   	; locate x,y
040D9B             1989   	vdu 31
040D9B 3E 1F       0001M  		LD	A, function
040D9D 49 D7       0002M  		RST.LIS	10h
040D9F             1990   	vdu FILENAME_X
040D9F 3E 07       0001M  		LD	A, function
040DA1 49 D7       0002M  		RST.LIS	10h
040DA3             1991   	vdu FILENAME_Y
040DA3 3E 18       0001M  		LD	A, function
040DA5 49 D7       0002M  		RST.LIS	10h
040DA7             1992   
040DA7             1993   	; print text
040DA7 21 6C 18 04 1994   	ld hl,filename_label
040DAB 01 00 00 00 1995   	ld bc,0
040DAF AF          1996   	xor a
040DB0 49 DF       1997   	rst.lis $18
040DB2             1998   
040DB2             1999   	; show cursor
040DB2             2000   	vdu 23
040DB2 3E 17       0001M  		LD	A, function
040DB4 49 D7       0002M  		RST.LIS	10h
040DB6             2001   	vdu 1
040DB6 3E 01       0001M  		LD	A, function
040DB8 49 D7       0002M  		RST.LIS	10h
040DBA             2002   	vdu 1
040DBA 3E 01       0001M  		LD	A, function
040DBC 49 D7       0002M  		RST.LIS	10h
040DBE             2003   
040DBE 0E 00       2004   	ld c,0
040DC0             2005   
040DC0             2006   it8_loop:
040DC0             2007   	; get ascii key
040DC0 CD 94 0D 04 2008   	call fn_input_key
040DC4 B7          2009   	or a
040DC5 CA C0 0D 04 2010   	jp z,it8_loop
040DC9             2011   
040DC9 FE 2E       2012   	cp '.'
040DCB CA 15 0E 04 2013   	jp z,it8l_add_char
040DCF             2014   
040DCF FE 2D       2015   	cp '-'
040DD1 CA 15 0E 04 2016   	jp z,it8l_add_char
040DD5             2017   
040DD5 FE 5F       2018   	cp '_'
040DD7 CA 15 0E 04 2019   	jp z,it8l_add_char
040DDB             2020   
040DDB FE 7F       2021   	cp 127
040DDD CA 49 0E 04 2022   	jp z,it8l_backspace
040DE1             2023   
040DE1 FE 0D       2024   	cp 13
040DE3 CA 87 0E 04 2025   	jp z,it8l_return
040DE7             2026   
040DE7 FE 30       2027   	cp '0'
040DE9 DA C0 0D 04 2028   	jp c,it8_loop
040DED             2029   
040DED 16 39       2030   	ld d,'9'
040DEF 14          2031   	inc d
040DF0 BA          2032   	cp d
040DF1 DA 15 0E 04 2033   	jp c,it8l_add_char
040DF5             2034   
040DF5 FE 41       2035   	cp 'A'
040DF7 DA C0 0D 04 2036   	jp c,it8_loop
040DFB             2037   
040DFB 16 5A       2038   	ld d,'Z'
040DFD 14          2039   	inc d
040DFE BA          2040   	cp d
040DFF DA 15 0E 04 2041   	jp c,it8l_add_char
040E03             2042   
040E03 FE 61       2043   	cp 'a'
040E05 DA C0 0D 04 2044   	jp c,it8_loop
040E09             2045   
040E09 16 7A       2046   	ld d,'z'
040E0B 14          2047   	inc d
040E0C BA          2048   	cp d
040E0D DA 15 0E 04 2049   	jp c,it8l_add_char
040E11             2050   
040E11 C3 C0 0D 04 2051   	jp it8_loop
040E15             2052   
040E15             2053   it8l_add_char:
040E15 F5          2054   	push af
040E16 79          2055   	ld a,c
040E17 FE 0C       2056   	cp 12
040E19 38 05       2057   	jr c,it8l_poke_char
040E1B F1          2058   	pop af
040E1C C3 C0 0D 04 2059   	jp it8_loop
040E20             2060   
040E20             2061   it8l_poke_char:
040E20 F1          2062   	pop af
040E21 21 76 18 04 2063   	ld hl,filename
040E25 06 00       2064   	ld b,0
040E27 09          2065   	add hl,bc
040E28 77          2066   	ld (hl),a
040E29 0C          2067   	inc c
040E2A F5          2068   	push af
040E2B C5          2069   	push bc
040E2C             2070   
040E2C             2071   	; locate x,y
040E2C             2072   	vdu 31
040E2C 3E 1F       0001M  		LD	A, function
040E2E 49 D7       0002M  		RST.LIS	10h
040E30             2073   	vdu FILENAME_X+9
040E30 3E 10       0001M  		LD	A, function
040E32 49 D7       0002M  		RST.LIS	10h
040E34             2074   	vdu FILENAME_Y
040E34 3E 18       0001M  		LD	A, function
040E36 49 D7       0002M  		RST.LIS	10h
040E38             2075   
040E38             2076   	; print text
040E38 21 76 18 04 2077   	ld hl,filename
040E3C 01 00 00 00 2078   	ld bc,0
040E40 AF          2079   	xor a
040E41 49 DF       2080   	rst.lis $18
040E43             2081   
040E43 C1          2082   	pop bc
040E44 F1          2083   	pop af
040E45             2084   
040E45 C3 C0 0D 04 2085   	jp it8_loop
040E49             2086   
040E49             2087   it8l_backspace:
040E49 79          2088   	ld a,c
040E4A FE 00       2089   	cp 0
040E4C CA C0 0D 04 2090   	jp z,it8_loop
040E50             2091   
040E50             2092   	; delete a character of the filename
040E50 21 76 18 04 2093   	ld hl,filename
040E54 06 00       2094   	ld b,0
040E56 09          2095   	add hl,bc
040E57 AF          2096   	xor a
040E58 77          2097   	ld (hl),a
040E59 0D          2098   	dec c
040E5A C5          2099   	push bc
040E5B             2100   
040E5B             2101   	; locate x,y
040E5B             2102   	vdu 31
040E5B 3E 1F       0001M  		LD	A, function
040E5D 49 D7       0002M  		RST.LIS	10h
040E5F 3E 10       2103   	ld a,FILENAME_X+9
040E61 81          2104   	add a,c
040E62             2105   	vdu_a
040E62 49 D7       0001M  		RST.LIS	10h
040E64             2106   	vdu FILENAME_Y
040E64 3E 18       0001M  		LD	A, function
040E66 49 D7       0002M  		RST.LIS	10h
040E68             2107   
040E68 C5          2108   	push bc
040E69             2109   
040E69             2110   	; print text
040E69 21 97 18 04 2111   	ld hl,spacechar
040E6D 01 00 00 00 2112   	ld bc,0
040E71 AF          2113   	xor a
040E72 49 DF       2114   	rst.lis $18
040E74             2115   
040E74 C1          2116   	pop bc
040E75             2117   
040E75             2118   	; locate x,y
040E75             2119   	vdu 31
040E75 3E 1F       0001M  		LD	A, function
040E77 49 D7       0002M  		RST.LIS	10h
040E79 3E 10       2120   	ld a,FILENAME_X+9
040E7B 81          2121   	add a,c
040E7C             2122   	vdu_a
040E7C 49 D7       0001M  		RST.LIS	10h
040E7E             2123   	vdu FILENAME_Y
040E7E 3E 18       0001M  		LD	A, function
040E80 49 D7       0002M  		RST.LIS	10h
040E82             2124   
040E82 C1          2125   	pop bc
040E83 C3 C0 0D 04 2126   	jp it8_loop
040E87             2127   
040E87             2128   it8l_return:
040E87             2129   	; locate x,y
040E87             2130   	vdu 31
040E87 3E 1F       0001M  		LD	A, function
040E89 49 D7       0002M  		RST.LIS	10h
040E8B             2131   	vdu FILENAME_X
040E8B 3E 07       0001M  		LD	A, function
040E8D 49 D7       0002M  		RST.LIS	10h
040E8F             2132   	vdu FILENAME_Y
040E8F 3E 18       0001M  		LD	A, function
040E91 49 D7       0002M  		RST.LIS	10h
040E93             2133   
040E93             2134   	; print text
040E93 21 99 18 04 2135   	ld hl,void_filename
040E97 01 00 00 00 2136   	ld bc,0
040E9B AF          2137   	xor a
040E9C 49 DF       2138   	rst.lis $18
040E9E             2139   
040E9E             2140   	; hide cursor
040E9E             2141   	vdu 23
040E9E 3E 17       0001M  		LD	A, function
040EA0 49 D7       0002M  		RST.LIS	10h
040EA2             2142   	vdu 1
040EA2 3E 01       0001M  		LD	A, function
040EA4 49 D7       0002M  		RST.LIS	10h
040EA6             2143   	vdu 0
040EA6 3E 00       0001M  		LD	A, function
040EA8 49 D7       0002M  		RST.LIS	10h
040EAA             2144   
040EAA             2145   it8l_endloop:
040EAA 21 B6 FF FF 2146   	ld hl,KEY_RETURN
040EAE CD 27 17 04 2147   	call fn_inkey
040EB2 FE 01       2148   	CP 1
040EB4 CA AA 0E 04 2149   	jp z,it8l_endloop
040EB8             2150   
040EB8 C9          2151   	ret
040EB9             2152   
040EB9             2153   ; load a palette
040EB9             2154   fn_load_palette:
040EB9             2155   	; clear the filename on the screen
040EB9 21 76 18 04 2156   	ld hl,filename
040EBD 06 0C       2157   	ld b,12
040EBF AF          2158   	xor a
040EC0             2159   
040EC0             2160   lp_clear_filename:
040EC0 77          2161   	ld (hl),a
040EC1 23          2162   	inc hl
040EC2 10 FC       2163   	djnz lp_clear_filename
040EC4             2164   
040EC4             2165   	; get filename
040EC4 CD 9B 0D 04 2166   	call fn_input_text8
040EC8             2167   
040EC8             2168   	; set path to 'palettes/'
040EC8 21 8B 18 04 2169   	ld hl,palette_path
040ECC             2170   	moscall mos_cd
040ECC 3E 03       0001M  		LD	A, function
040ECE 49 CF       0002M  		RST.LIS	08h
040ED0             2171   
040ED0             2172   	; exit on folder error
040ED0 FE 00       2173   	cp 0
040ED2 C2 94 0F 04 2174   	jp nz,lp_folder_error
040ED6             2175   
040ED6             2176   	; open the file for read
040ED6 21 76 18 04 2177   	ld hl,filename
040EDA 0E 01       2178   	ld c,fa_open_existing|fa_read
040EDC             2179   	moscall mos_fopen
040EDC 3E 0A       0001M  		LD	A, function
040EDE 49 CF       0002M  		RST.LIS	08h
040EE0             2180   
040EE0             2181   	; exit on file error
040EE0 FE 00       2182   	cp 0
040EE2 CA 02 11 04 2183   	jp z,lp_file_error
040EE6             2184   
040EE6             2185   	; filehandle -> C
040EE6 4F          2186   	ld c,a
040EE7             2187   
040EE7             2188   	; get palette header
040EE7 21 18 39 04 2189   	ld hl,header_buffer
040EEB 11 10 00 00 2190   	ld de,16
040EEF C5          2191   	push bc ; store filehandle
040EF0             2192   	moscall mos_fread
040EF0 3E 1A       0001M  		LD	A, function
040EF2 49 CF       0002M  		RST.LIS	08h
040EF4 C1          2193   	pop bc ; restore filehandle
040EF5 3E 10       2194   	ld a,16
040EF7 BB          2195   	cp e
040EF8 C2 78 0F 04 2196   	jp nz,lp_close_error
040EFC             2197   
040EFC             2198   	; compare loaded header with needed header
040EFC 11 74 3C 04 2199   	ld de,header
040F00 21 18 39 04 2200   	ld hl,header_buffer
040F04 47          2201   	ld b,a
040F05             2202   
040F05             2203   lp_compare:
040F05 1A          2204   	ld a,(de)
040F06 BE          2205   	cp (hl)
040F07 C2 9C 0F 04 2206   	jp nz,lp_header_error
040F0B             2207   
040F0B 13          2208   	inc de
040F0C 23          2209   	inc hl
040F0D 05          2210   	dec b
040F0E             2211   
040F0E 78          2212   	ld a,b
040F0F FE 00       2213   	cp 0
040F11 C2 05 0F 04 2214   	jp nz,lp_compare
040F15             2215   
040F15             2216   	; prepare to read the number of colors
040F15 21 28 39 04 2217   	ld hl,color_buffer
040F19             2218   
040F19             2219   lp_getcount:
040F19             2220   	; read a string for colors count
040F19 C5          2221   	push bc
040F1A E5          2222   	push hl
040F1B             2223   
040F1B             2224   	; read colors data
040F1B             2225   	moscall mos_fgetc
040F1B 3E 0C       0001M  		LD	A, function
040F1D 49 CF       0002M  		RST.LIS	08h
040F1F             2226   
040F1F E1          2227   	pop hl
040F20 C1          2228   	pop bc
040F21             2229   
040F21             2230   	; exit if eof
040F21 DA 78 0F 04 2231   	jp c,lp_close_error
040F25             2232   
040F25 FE 30       2233   	cp 48 ; < 0
040F27 38 0A       2234   	jr c,lpgc_next
040F29 FE 3A       2235   	cp 58 ; > 9
040F2B D2 FD 10 04 2236   	jp nc,lp_data_error
040F2F             2237   
040F2F 77          2238   	ld (hl),a
040F30 23          2239   	inc hl
040F31 18 E6       2240   	jr lp_getcount
040F33             2241   
040F33             2242   lpgc_next:
040F33 F5          2243   	push af
040F34 3E 0D       2244   	ld a,13
040F36 77          2245   	ld (hl),a ; store CR
040F37 F1          2246   	pop af
040F38             2247   
040F38             2248   	; test CR
040F38 FE 0D       2249   	cp 13
040F3A C2 78 0F 04 2250   	jp nz,lp_close_error
040F3E             2251   
040F3E C5          2252   	push bc
040F3F             2253   
040F3F             2254   	; read LF
040F3F             2255   	moscall mos_fgetc
040F3F 3E 0C       0001M  		LD	A, function
040F41 49 CF       0002M  		RST.LIS	08h
040F43             2256   
040F43 C1          2257   	pop bc
040F44             2258   
040F44             2259   	; test LF
040F44 FE 0A       2260   	cp 10
040F46 C2 78 0F 04 2261   	jp nz,lp_close_error
040F4A             2262   
040F4A             2263   	; prepare to read color strings
040F4A 11 00 00 00 2264   	ld de,#000000
040F4E 21 2B 39 04 2265   	ld hl,palette_buffer
040F52             2266   
040F52             2267   lp_load_pal_loop:
040F52 C5          2268   	push bc
040F53 D5          2269   	push de
040F54 E5          2270   	push hl
040F55             2271   
040F55             2272   	; read colors data
040F55             2273   	moscall mos_fgetc
040F55 3E 0C       0001M  		LD	A, function
040F57 49 CF       0002M  		RST.LIS	08h
040F59             2274   
040F59             2275   	; exit if eof
040F59 DA 71 0F 04 2276   	jp c,lp_loaded
040F5D             2277   
040F5D E1          2278   	pop hl
040F5E D1          2279   	pop de
040F5F C1          2280   	pop bc
040F60             2281   
040F60 77          2282   	ld (hl),a ; store loaded char in palette buffer
040F61 23          2283   	inc hl
040F62 13          2284   	inc de ; count chars
040F63 7A          2285   	ld a,d
040F64 FE 03       2286   	cp MAX_PAL_DATA_HI
040F66 DA 52 0F 04 2287   	jp c,lp_load_pal_loop
040F6A 7B          2288   	ld a,e
040F6B FE 44       2289   	cp MAX_PAL_DATA_LO
040F6D DA 52 0F 04 2290   	jp c,lp_load_pal_loop
040F71             2291   
040F71             2292   ; end of file
040F71             2293   lp_loaded:
040F71 E1          2294   	pop hl
040F72 D1          2295   	pop de
040F73 C1          2296   	pop bc
040F74             2297   
040F74 C3 A4 0F 04 2298   	jp lp_close
040F78             2299   
040F78             2300   lp_close_error:
040F78 C5          2301   	push bc
040F79             2302   
040F79             2303   	; read error
040F79 CD 3D 15 04 2304   	call fn_print_file_error
040F7D             2305   
040F7D C1          2306   	pop bc
040F7E             2307   
040F7E             2308   	; close the file
040F7E             2309   	moscall mos_fclose
040F7E 3E 0B       0001M  		LD	A, function
040F80 49 CF       0002M  		RST.LIS	08h
040F82             2310   
040F82             2311   	; set path to home
040F82 21 94 18 04 2312   	ld hl,back_path
040F86             2313   	moscall mos_cd
040F86 3E 03       0001M  		LD	A, function
040F88 49 CF       0002M  		RST.LIS	08h
040F8A             2314   
040F8A             2315   	; exit on error
040F8A FE 00       2316   	cp 0
040F8C C2 94 0F 04 2317   	jp nz,lp_folder_error
040F90             2318   
040F90 C3 F3 10 04 2319   	jp lp_exit
040F94             2320   
040F94             2321   lp_folder_error:
040F94             2322   	; write error
040F94 CD 74 15 04 2323   	call fn_print_folder_error
040F98 C3 F3 10 04 2324   	jp lp_exit
040F9C             2325   
040F9C             2326   lp_header_error:
040F9C             2327   	; write error
040F9C CD AB 15 04 2328   	call fn_print_header_error
040FA0 C3 F3 10 04 2329   	jp lp_exit
040FA4             2330   
040FA4             2331   lp_close:
040FA4 C5          2332   	push bc
040FA5             2333   
040FA5             2334   	; close the file
040FA5             2335   	moscall mos_fclose
040FA5 3E 0B       0001M  		LD	A, function
040FA7 49 CF       0002M  		RST.LIS	08h
040FA9             2336   
040FA9 C1          2337   	pop bc
040FAA             2338   
040FAA             2339   	; set path to home
040FAA 21 94 18 04 2340   	ld hl,back_path
040FAE             2341   	moscall mos_cd
040FAE 3E 03       0001M  		LD	A, function
040FB0 49 CF       0002M  		RST.LIS	08h
040FB2             2342   
040FB2             2343   	; exit on error
040FB2 FE 00       2344   	cp 0
040FB4 C2 94 0F 04 2345   	jp nz,lp_folder_error
040FB8             2346   
040FB8             2347   	; read the number of colors we have in the palette
040FB8 21 28 39 04 2348   	ld hl,color_buffer
040FBC 7E          2349   	ld a,(hl)
040FBD 47          2350   	ld b,a
040FBE 23          2351   	inc hl
040FBF 7E          2352   	ld a,(hl)
040FC0 4F          2353   	ld c,a ; bc = 1st char, 2nd char or CR
040FC1             2354   
040FC1             2355   	; first is a char number ?
040FC1 78          2356   	ld a,b
040FC2 FE 30       2357   	cp 48
040FC4 DA FD 10 04 2358   	jp c,lp_data_error
040FC8 FE 3A       2359   	cp 58
040FCA D2 FD 10 04 2360   	jp nc,lp_data_error
040FCE             2361   
040FCE 79          2362   	ld a,c
040FCF FE 0D       2363   	cp 13
040FD1 C2 F3 0F 04 2364   	jp nz,lp_two_numbers
040FD5             2365   
040FD5             2366   ; only one number
040FD5 78          2367   	ld a,b
040FD6 D6 30       2368   	sub 48
040FD8             2369   
040FD8 21 0B 19 04 2370   	ld hl,new_colors_count
040FDC 77          2371   	ld (hl),a
040FDD             2372   
040FDD FE 00       2373   	cp 0
040FDF CA FD 10 04 2374   	jp z,lp_data_error
040FE3 FE 03       2375   	cp 3
040FE5 DA 28 10 04 2376   	jp c,lp_two_colors
040FE9 FE 05       2377   	cp 5
040FEB DA 49 10 04 2378   	jp c,lp_four_colors
040FEF             2379   
040FEF C3 6A 10 04 2380   	jp lp_sixteen_colors
040FF3             2381   
040FF3             2382   ; two numbers
040FF3             2383   lp_two_numbers:
040FF3 79          2384   	ld a,c
040FF4 FE 30       2385   	cp 48
040FF6 DA FD 10 04 2386   	jp c,lp_data_error
040FFA FE 3A       2387   	cp 58
040FFC D2 FD 10 04 2388   	jp nc,lp_data_error
041000             2389   
041000 78          2390   	ld a,b
041001 D6 30       2391   	sub 48
041003 01 00 00 00 2392   	ld bc,#000000
041007 47          2393   	ld b,a
041008 0E 0A       2394   	ld c,10
04100A ED 4C       2395   	mlt bc
04100C 81          2396   	add a,c
04100D             2397   
04100D 21 0B 19 04 2398   	ld hl,new_colors_count
041011 77          2399   	ld (hl),a
041012             2400   
041012 FE 0A       2401   	cp 10
041014 DA FD 10 04 2402   	jp c,lp_data_error
041018 FE 11       2403   	cp 17
04101A DA 6A 10 04 2404   	jp c,lp_sixteen_colors
04101E FE 41       2405   	cp 65
041020 DA 8B 10 04 2406   	jp c,lp_sixty_four_colors
041024             2407   
041024 C3 FD 10 04 2408   	jp lp_data_error
041028             2409   
041028             2410   lp_two_colors:
041028 21 0A 19 04 2411   	ld hl,colors_count
04102C 3E 02       2412   	ld a,2
04102E 77          2413   	ld (hl),a
04102F             2414   
04102F 47          2415   	ld b,a
041030 21 00 18 04 2416   	ld hl,current_pen
041034 7E          2417   	ld a,(hl)
041035 B8          2418   	cp b
041036 38 02       2419   	jr c,lptc_done
041038 05          2420   	dec b
041039 70          2421   	ld (hl),b
04103A             2422   
04103A             2423   lptc_done:
04103A 21 0B 19 04 2424   	ld hl,new_colors_count
04103E 7E          2425   	ld a,(hl) ; real number of coulours
04103F 06 00       2426   	ld b,0 ; start wit color 0
041041 21 2B 39 04 2427   	ld hl,palette_buffer ; palette will be got here
041045 C3 AC 10 04 2428   	jp lp_read_colors
041049             2429   
041049             2430   lp_four_colors:
041049 21 0A 19 04 2431   	ld hl,colors_count
04104D 3E 04       2432   	ld a,4
04104F 77          2433   	ld (hl),a
041050             2434   
041050 47          2435   	ld b,a
041051 21 00 18 04 2436   	ld hl,current_pen
041055 7E          2437   	ld a,(hl)
041056 B8          2438   	cp b
041057 38 02       2439   	jr c,lpfc_done
041059 05          2440   	dec b
04105A 70          2441   	ld (hl),b
04105B             2442   
04105B             2443   lpfc_done:
04105B 21 0B 19 04 2444   	ld hl,new_colors_count
04105F 7E          2445   	ld a,(hl) ; real number of coulours
041060 06 00       2446   	ld b,0 ; start wit color 0
041062 21 2B 39 04 2447   	ld hl,palette_buffer ; palette will be got here
041066 C3 AC 10 04 2448   	jp lp_read_colors
04106A             2449   
04106A             2450   lp_sixteen_colors:
04106A 21 0A 19 04 2451   	ld hl,colors_count
04106E 3E 10       2452   	ld a,16
041070 77          2453   	ld (hl),a
041071             2454   
041071 47          2455   	ld b,a
041072 21 00 18 04 2456   	ld hl,current_pen
041076 7E          2457   	ld a,(hl)
041077 B8          2458   	cp b
041078 38 02       2459   	jr c,lpsc_done
04107A 05          2460   	dec b
04107B 70          2461   	ld (hl),b
04107C             2462   
04107C             2463   lpsc_done:
04107C 21 0B 19 04 2464   	ld hl,new_colors_count
041080 7E          2465   	ld a,(hl) ; real number of coulours
041081 06 00       2466   	ld b,0 ; start wit color 0
041083 21 2B 39 04 2467   	ld hl,palette_buffer ; palette will be got here
041087 C3 AC 10 04 2468   	jp lp_read_colors
04108B             2469   
04108B             2470   lp_sixty_four_colors:
04108B 21 0A 19 04 2471   	ld hl,colors_count
04108F 3E 40       2472   	ld a,64
041091 77          2473   	ld (hl),a
041092             2474   
041092 47          2475   	ld b,a
041093 21 00 18 04 2476   	ld hl,current_pen
041097 7E          2477   	ld a,(hl)
041098 B8          2478   	cp b
041099 38 02       2479   	jr c,lpsfc_done
04109B 05          2480   	dec b
04109C 70          2481   	ld (hl),b
04109D             2482   
04109D             2483   lpsfc_done:
04109D 21 0B 19 04 2484   	ld hl,new_colors_count
0410A1 7E          2485   	ld a,(hl) ; real number of coulours
0410A2 06 00       2486   	ld b,0 ; start wit color 0
0410A4 21 2B 39 04 2487   	ld hl,palette_buffer ; palette will be got here
0410A8 C3 AC 10 04 2488   	jp lp_read_colors
0410AC             2489   
0410AC             2490   lp_read_colors:
0410AC F5          2491   	push af
0410AD E5          2492   	push hl
0410AE C5          2493   	push bc
0410AF             2494   
0410AF CD 15 11 04 2495   	call lp_read_tint ; read red tint
0410B3 FE FF       2496   	cp 255
0410B5 CA F6 10 04 2497   	jp z,lp_wrong_exit1
0410B9             2498   
0410B9 E5          2499   	push hl
0410BA 21 0C 19 04 2500   	ld hl,red_tint
0410BE 77          2501   	ld (hl),a
0410BF E1          2502   	pop hl
0410C0             2503   
0410C0 CD 15 11 04 2504   	call lp_read_tint ; read green tint
0410C4 FE FF       2505   	cp 255
0410C6 CA F5 10 04 2506   	jp z,lp_wrong_exit2
0410CA             2507   
0410CA E5          2508   	push hl
0410CB 21 0D 19 04 2509   	ld hl,green_tint
0410CF 77          2510   	ld (hl),a
0410D0 E1          2511   	pop hl
0410D1             2512   
0410D1 CD 15 11 04 2513   	call lp_read_tint ; read blue tint
0410D5 FE FF       2514   	cp 255
0410D7 CA F4 10 04 2515   	jp z,lp_wrong_exit3
0410DB             2516   
0410DB E5          2517   	push hl
0410DC 21 0E 19 04 2518   	ld hl,blue_tint
0410E0 77          2519   	ld (hl),a
0410E1 E1          2520   	pop hl
0410E2             2521   
0410E2 C1          2522   	pop bc
0410E3 C5          2523   	push bc
0410E4             2524   
0410E4 CD A2 11 04 2525   	call lp_set_tint
0410E8             2526   
0410E8 C1          2527   	pop bc
0410E9 E1          2528   	pop hl
0410EA F1          2529   	pop af
0410EB             2530   
0410EB 04          2531   	inc b ; increment number of colors
0410EC 3D          2532   	dec a ; decrement real number of colors
0410ED FE 00       2533   	cp 0
0410EF C2 AC 10 04 2534   	jp nz,lp_read_colors
0410F3             2535   
0410F3             2536   lp_exit:
0410F3 C9          2537   	ret
0410F4             2538   
0410F4             2539   lp_wrong_exit3:
0410F4 D1          2540   	pop de
0410F5             2541   
0410F5             2542   lp_wrong_exit2:
0410F5 C1          2543   	pop bc
0410F6             2544   
0410F6             2545   lp_wrong_exit1:
0410F6 E1          2546   	pop hl
0410F7 C1          2547   	pop bc
0410F8 F1          2548   	pop af
0410F9 C3 FD 10 04 2549   	jp lp_data_error
0410FD             2550   
0410FD             2551   lp_data_error:
0410FD CD E2 15 04 2552   	call fn_print_data_error
041101             2553   
041101 C9          2554   	ret
041102             2555   
041102             2556   lp_file_error:
041102 CD 3D 15 04 2557   	call fn_print_file_error
041106             2558   
041106             2559   	; set path to home
041106 21 94 18 04 2560   	ld hl,back_path
04110A             2561   	moscall mos_cd
04110A 3E 03       0001M  		LD	A, function
04110C 49 CF       0002M  		RST.LIS	08h
04110E             2562   
04110E             2563   	; exit on error
04110E FE 00       2564   	cp 0
041110 C2 94 0F 04 2565   	jp nz,lp_folder_error
041114             2566   
041114 C9          2567   	ret
041115             2568   
041115             2569   lp_read_tint:
041115 0E 00       2570   	ld c,0 ; number of chars readen for a single string number
041117 11 70 3C 04 2571   	ld de,temp_chars_buffer ; temp buffer for a string number
04111B             2572   
04111B             2573   	; read next string number
04111B CD 86 11 04 2574   	call lprt_read_chars
04111F             2575   
04111F 79          2576   	ld a,c
041120 FE 00       2577   	cp 0 ; no numbers
041122 CA 3C 11 04 2578   	jp z,lprt_exit
041126 FE 04       2579   	cp 4 ; too many numbers
041128 D2 3C 11 04 2580   	jp nc,lprt_exit
04112C             2581   
04112C FE 03       2582   	cp 3
04112E 28 2A       2583   	jr z,lprt_three_int
041130             2584   
041130 FE 02       2585   	cp 2
041132 28 0B       2586   	jr z,lprt_two_int
041134             2587   
041134             2588   	; one int only
041134 11 70 3C 04 2589   	ld de,temp_chars_buffer
041138 1A          2590   	ld a,(de)
041139 D6 30       2591   	sub 48
04113B C9          2592   	ret
04113C             2593   
04113C             2594   lprt_exit:
04113C 3E FF       2595   	ld a,255
04113E C9          2596   	ret
04113F             2597   
04113F             2598   ; two int
04113F             2599   lprt_two_int:
04113F C5          2600   	push bc
041140 11 70 3C 04 2601   	ld de,temp_chars_buffer
041144 1A          2602   	ld a,(de)
041145 D6 30       2603   	sub 48
041147 D5          2604   	push de
041148 11 00 00 00 2605   	ld de,#000000
04114C 5F          2606   	ld e,a
04114D 16 0A       2607   	ld d,10
04114F ED 5C       2608   	mlt de
041151 43          2609   	ld b,e
041152 D1          2610   	pop de
041153 13          2611   	inc de
041154 1A          2612   	ld a,(de)
041155 D6 30       2613   	sub 48
041157 80          2614   	add a,b ; full int value is here
041158 C1          2615   	pop bc
041159 C9          2616   	ret
04115A             2617   
04115A             2618   ; three int
04115A             2619   lprt_three_int:
04115A C5          2620   	push bc
04115B 11 70 3C 04 2621   	ld de,temp_chars_buffer
04115F 1A          2622   	ld a,(de)
041160 D6 30       2623   	sub 48
041162 D5          2624   	push de
041163 11 00 00 00 2625   	ld de,#000000
041167 5F          2626   	ld e,a
041168 16 64       2627   	ld d,100
04116A ED 5C       2628   	mlt de
04116C 43          2629   	ld b,e
04116D D1          2630   	pop de
04116E 13          2631   	inc de
04116F 1A          2632   	ld a,(de)
041170 D6 30       2633   	sub 48
041172 D5          2634   	push de
041173 11 00 00 00 2635   	ld de,#000000
041177 5F          2636   	ld e,a
041178 16 0A       2637   	ld d,10
04117A ED 5C       2638   	mlt de
04117C 4B          2639   	ld c,e
04117D D1          2640   	pop de
04117E 13          2641   	inc de
04117F 1A          2642   	ld a,(de)
041180 D6 30       2643   	sub 48
041182 81          2644   	add a,c
041183 80          2645   	add a,b ; full int value is here
041184 C1          2646   	pop bc
041185 C9          2647   	ret
041186             2648   
041186             2649   lprt_read_chars:
041186 3E 0D       2650   	ld a,13
041188 12          2651   	ld (de),a ; store eol as default temp char
041189             2652   
041189 7E          2653   	ld a,(hl) ; get a new char in the palette buffer
04118A 23          2654   	inc hl
04118B             2655   
04118B FE 20       2656   	cp 32
04118D C8          2657   	ret z ; ret if space
04118E FE 0D       2658   	cp 13
041190 28 F4       2659   	jr z,lprt_read_chars ; loop if CR
041192 FE 0A       2660   	cp 10
041194 C8          2661   	ret z ; ret if LF
041195 FE 30       2662   	cp 48
041197 D8          2663   	ret c ; ret if not number
041198 FE 3A       2664   	cp 58
04119A D0          2665   	ret nc ; ret if not number
04119B             2666   
04119B             2667   ; found a number, store it
04119B 12          2668   	ld (de),a
04119C 13          2669   	inc de
04119D 0C          2670   	inc c
04119E             2671   
04119E C3 86 11 04 2672   	jp lprt_read_chars
0411A2             2673   
0411A2             2674   ; set tint (RGB = c,e,l)
0411A2             2675   lp_set_tint:
0411A2 F5          2676   	push af
0411A3 C5          2677   	push bc
0411A4 D5          2678   	push de
0411A5 E5          2679   	push hl
0411A6             2680   
0411A6 C5          2681   	push bc
0411A7             2682   	vdu 19
0411A7 3E 13       0001M  		LD	A, function
0411A9 49 D7       0002M  		RST.LIS	10h
0411AB C1          2683   	pop bc
0411AC 78          2684   	ld a,b
0411AD             2685   	vdu_a
0411AD 49 D7       0001M  		RST.LIS	10h
0411AF             2686   	vdu 255
0411AF 3E FF       0001M  		LD	A, function
0411B1 49 D7       0002M  		RST.LIS	10h
0411B3             2687   
0411B3 21 0C 19 04 2688   	ld hl,red_tint
0411B7 7E          2689   	ld a,(hl)
0411B8             2690   	vdu_a
0411B8 49 D7       0001M  		RST.LIS	10h
0411BA             2691   
0411BA 21 0D 19 04 2692   	ld hl,green_tint
0411BE 7E          2693   	ld a,(hl)
0411BF             2694   	vdu_a
0411BF 49 D7       0001M  		RST.LIS	10h
0411C1             2695   
0411C1 21 0E 19 04 2696   	ld hl,blue_tint
0411C5 7E          2697   	ld a,(hl)
0411C6             2698   	vdu_a
0411C6 49 D7       0001M  		RST.LIS	10h
0411C8             2699   
0411C8 E1          2700   	pop hl
0411C9 D1          2701   	pop de
0411CA C1          2702   	pop bc
0411CB F1          2703   	pop af
0411CC C9          2704   	ret
0411CD             2705   
0411CD             2706   ; save the palette
0411CD             2707   fn_save_palette:
0411CD C9          2708   	ret
0411CE             2709   
0411CE             2710   ; load a sprite, giving its full name, with extension
0411CE             2711   fn_load_sprite:
0411CE             2712   	; clear the filename on the screen
0411CE 21 76 18 04 2713   	ld hl,filename
0411D2 06 0C       2714   	ld b,12
0411D4 AF          2715   	xor a
0411D5             2716   
0411D5             2717   ls_clear_filename:
0411D5 77          2718   	ld (hl),a
0411D6 23          2719   	inc hl
0411D7 10 FC       2720   	djnz ls_clear_filename
0411D9             2721   
0411D9             2722   	; get filename
0411D9 CD 9B 0D 04 2723   	call fn_input_text8
0411DD             2724   
0411DD             2725   	; set path to 'sprites/'
0411DD 21 83 18 04 2726   	ld hl,sprite_path
0411E1             2727   	moscall mos_cd
0411E1 3E 03       0001M  		LD	A, function
0411E3 49 CF       0002M  		RST.LIS	08h
0411E5             2728   
0411E5             2729   	; exit on folder error
0411E5 FE 00       2730   	cp 0
0411E7 C2 B6 12 04 2731   	jp nz,ls_folder_error
0411EB             2732   
0411EB             2733   	; open the file for read
0411EB 21 76 18 04 2734   	ld hl,filename
0411EF 0E 01       2735   	ld c,fa_open_existing|fa_read
0411F1             2736   	moscall mos_fopen
0411F1 3E 0A       0001M  		LD	A, function
0411F3 49 CF       0002M  		RST.LIS	08h
0411F5             2737   
0411F5             2738   	; exit on file error
0411F5 FE 00       2739   	cp 0
0411F7 CA E4 12 04 2740   	jp z,ls_file_error
0411FB             2741   
0411FB             2742   	; filehandle -> C
0411FB 4F          2743   	ld c,a
0411FC             2744   
0411FC             2745   	; get colors count
0411FC             2746   	moscall mos_fgetc
0411FC 3E 0C       0001M  		LD	A, function
0411FE 49 CF       0002M  		RST.LIS	08h
041200 DA 91 12 04 2747   	jp c,ls_close_error
041204             2748   
041204 FE 41       2749   	cp MAX_COLORS + 1
041206 D2 91 12 04 2750   	jp nc,ls_close_error
04120A             2751   
04120A             2752   	; store colors count
04120A 21 0A 19 04 2753   	ld hl,colors_count
04120E 77          2754   	ld (hl),a
04120F             2755   
04120F             2756   	; get frames count
04120F             2757   	moscall mos_fgetc
04120F 3E 0C       0001M  		LD	A, function
041211 49 CF       0002M  		RST.LIS	08h
041213 DA 91 12 04 2758   	jp c,ls_close_error
041217             2759   
041217             2760   	; store frames count
041217 21 10 19 04 2761   	ld hl,frames_count
04121B 77          2762   	ld (hl),a
04121C             2763   
04121C             2764   	; set last frame as current frame
04121C 21 0F 19 04 2765   	ld hl,current_frame
041220 3D          2766   	dec a
041221 77          2767   	ld (hl),a
041222             2768   
041222             2769   	; get sprite size
041222             2770   	moscall mos_fgetc
041222 3E 0C       0001M  		LD	A, function
041224 49 CF       0002M  		RST.LIS	08h
041226 DA 91 12 04 2771   	jp c,ls_close_error
04122A             2772   
04122A             2773   	; store sprite size
04122A 21 FF 17 04 2774   	ld hl,spr_size
04122E 77          2775   	ld (hl),a
04122F             2776   
04122F             2777   	; set 4x4 pixel width
04122F FE 04       2778   	cp SPR44
041231 20 09       2779   	jr nz,ls_next1
041233             2780   
041233 21 FE 17 04 2781   	ld hl,pixel_width
041237 06 20       2782   	ld b,SPR44_width
041239 70          2783   	ld (hl),b
04123A 18 21       2784   	jr ls_next4
04123C             2785   
04123C             2786   ls_next1:
04123C             2787   	; set 8x8 pixel width
04123C FE 08       2788   	cp SPR88
04123E 20 09       2789   	jr nz,ls_next2
041240             2790   
041240 21 FE 17 04 2791   	ld hl,pixel_width
041244 06 10       2792   	ld b,SPR88_width
041246 70          2793   	ld (hl),b
041247 18 14       2794   	jr ls_next4
041249             2795   
041249             2796   ls_next2:
041249             2797   
041249             2798   	; set 16x16 pixel width
041249 FE 10       2799   	cp SPR1616
04124B 20 09       2800   	jr nz,ls_next3
04124D             2801   
04124D 21 FE 17 04 2802   	ld hl,pixel_width
041251 06 08       2803   	ld b,SPR1616_width
041253 70          2804   	ld (hl),b
041254 18 07       2805   	jr ls_next4
041256             2806   
041256             2807   ls_next3:
041256             2808   
041256 21 FE 17 04 2809   	ld hl,pixel_width
04125A 06 04       2810   	ld b,SPR3232_width
04125C 70          2811   	ld (hl),b
04125D             2812   
04125D             2813   ls_next4:
04125D 21 00 00 00 2814   	ld hl,#000000
041261 6F          2815   	ld l,a
041262 67          2816   	ld h,a
041263 ED 6C       2817   	mlt hl ; HL = sprite length
041265 E5          2818   	push hl
041266             2819   
041266             2820   	; get frames count
041266 21 0F 19 04 2821   	ld hl,current_frame
04126A 46          2822   	ld b,(hl)
04126B             2823   
04126B E1          2824   	pop hl
04126C             2825   
04126C 78          2826   	ld a,b
04126D FE 00       2827   	cp 0
04126F 28 07       2828   	jr z,ls_read_data
041271             2829   
041271             2830   	; de = size²
041271 11 00 04 00 2831   	ld de,ONE_FRAME_BUFFER_SIZE
041275             2832   ls_add_length:
041275 19          2833   	add hl,de
041276 10 FD       2834   	djnz ls_add_length
041278             2835   
041278             2836   ls_read_data:
041278 E5          2837   	push hl
041279 E5          2838   	push hl
04127A D1          2839   	pop de
04127B 7B          2840   	ld a,e
04127C 21 18 19 04 2841   	ld hl,sprite_buffer
041280             2842   	moscall mos_fread
041280 3E 1A       0001M  		LD	A, function
041282 49 CF       0002M  		RST.LIS	08h
041284 E1          2843   	pop hl
041285 7C          2844   	ld a,h
041286 BA          2845   	cp d
041287 20 08       2846   	jr nz,ls_close_error
041289 7D          2847   	ld a,l
04128A BB          2848   	cp e
04128B 20 04       2849   	jr nz,ls_close_error
04128D C3 BE 12 04 2850   	jp ls_close
041291             2851   
041291             2852   ls_close_error:
041291 C5          2853   	push bc
041292             2854   
041292             2855   	; read error
041292 CD 3D 15 04 2856   	call fn_print_file_error
041296             2857   
041296 C1          2858   	pop bc
041297             2859   
041297             2860   	; close the file
041297             2861   	moscall mos_fclose
041297 3E 0B       0001M  		LD	A, function
041299 49 CF       0002M  		RST.LIS	08h
04129B             2862   
04129B             2863   	; set path to home
04129B 21 94 18 04 2864   	ld hl,back_path
04129F             2865   	moscall mos_cd
04129F 3E 03       0001M  		LD	A, function
0412A1 49 CF       0002M  		RST.LIS	08h
0412A3             2866   
0412A3             2867   	; exit on error
0412A3 FE 00       2868   	cp 0
0412A5 C2 B6 12 04 2869   	jp nz,ls_folder_error
0412A9             2870   
0412A9             2871   
0412A9             2872   	; reset current frame and coordinates of the drawing pixel
0412A9 21 FA 17 04 2873   	ld hl,xpix
0412AD AF          2874   	xor a
0412AE 77          2875   	ld (hl),a
0412AF 21 FB 17 04 2876   	ld hl,ypix
0412B3 77          2877   	ld (hl),a
0412B4 18 25       2878   	jr ls_exit
0412B6             2879   
0412B6             2880   ls_folder_error:
0412B6             2881   	; write error
0412B6 CD 74 15 04 2882   	call fn_print_folder_error
0412BA C3 DB 12 04 2883   	jp ls_exit
0412BE             2884   
0412BE             2885   ls_close:
0412BE             2886   	; close the file
0412BE             2887   	moscall mos_fclose
0412BE 3E 0B       0001M  		LD	A, function
0412C0 49 CF       0002M  		RST.LIS	08h
0412C2             2888   
0412C2             2889   	; set path to home
0412C2 21 94 18 04 2890   	ld hl,back_path
0412C6             2891   	moscall mos_cd
0412C6 3E 03       0001M  		LD	A, function
0412C8 49 CF       0002M  		RST.LIS	08h
0412CA             2892   
0412CA             2893   	; exit on error
0412CA FE 00       2894   	cp 0
0412CC C2 B6 12 04 2895   	jp nz,ls_folder_error
0412D0             2896   
0412D0             2897   	; reset current frame and coordinates of the drawing pixel
0412D0 21 FA 17 04 2898   	ld hl,xpix
0412D4 AF          2899   	xor a
0412D5 77          2900   	ld (hl),a
0412D6 21 FB 17 04 2901   	ld hl,ypix
0412DA 77          2902   	ld (hl),a
0412DB             2903   
0412DB             2904   ls_exit:
0412DB CD C3 16 04 2905   	call fn_show_spr_descr
0412DF CD 7E 16 04 2906   	call fn_change_frames_count
0412E3 C9          2907   	ret
0412E4             2908   
0412E4             2909   ls_file_error:
0412E4 CD 3D 15 04 2910   	call fn_print_file_error
0412E8             2911   
0412E8             2912   	; set path to home
0412E8 21 94 18 04 2913   	ld hl,back_path
0412EC             2914   	moscall mos_cd
0412EC 3E 03       0001M  		LD	A, function
0412EE 49 CF       0002M  		RST.LIS	08h
0412F0             2915   
0412F0             2916   	; exit on error
0412F0 FE 00       2917   	cp 0
0412F2 C2 B6 12 04 2918   	jp nz,ls_folder_error
0412F6             2919   
0412F6 C9          2920   	ret
0412F7             2921   
0412F7             2922   ; save a sprite, giving its name
0412F7             2923   fn_save_sprite:
0412F7             2924   	; clear filename on the screen
0412F7 21 76 18 04 2925   	ld hl,filename
0412FB 06 0C       2926   	ld b,12
0412FD AF          2927   	xor a
0412FE             2928   
0412FE             2929   ss_clear_filename:
0412FE 77          2930   	ld (hl),a
0412FF 23          2931   	inc hl
041300 10 FC       2932   	djnz ss_clear_filename
041302             2933   
041302             2934   	; get filename
041302 CD 9B 0D 04 2935   	call fn_input_text8
041306             2936   
041306             2937   	; set path to sprite path
041306 21 83 18 04 2938   	ld hl,sprite_path
04130A             2939   	moscall mos_cd
04130A 3E 03       0001M  		LD	A, function
04130C 49 CF       0002M  		RST.LIS	08h
04130E             2940   
04130E             2941   	; create it on error
04130E FE 00       2942   	cp 0
041310 F5          2943   	push af
041311 C4 58 17 04 2944   	call nz,fn_create_sprite_folder
041315 F1          2945   	pop af
041316 28 08       2946   	jr z,ss_next
041318             2947   
041318             2948   	; set path to sprite path
041318 21 83 18 04 2949   	ld hl,sprite_path
04131C             2950   	moscall mos_cd
04131C 3E 03       0001M  		LD	A, function
04131E 49 CF       0002M  		RST.LIS	08h
041320             2951   
041320             2952   ss_next:
041320             2953   
041320             2954   	; exit on error
041320 FE 00       2955   	cp 0
041322 C2 B2 13 04 2956   	jp nz,ss_folder_error
041326             2957   
041326             2958   	; open the file for write
041326 21 76 18 04 2959   	ld hl,filename
04132A 0E 0A       2960   	ld c,fa_create_always|fa_write
04132C             2961   	moscall mos_fopen
04132C 3E 0A       0001M  		LD	A, function
04132E 49 CF       0002M  		RST.LIS	08h
041330             2962   
041330             2963   	; exit on error
041330 FE 00       2964   	cp 0
041332 CA E3 13 04 2965   	jp z,ss_file_error
041336             2966   
041336             2967   	; filehandle -> C
041336 4F          2968   	ld c,a
041337             2969   
041337             2970   	; store colors count in the file
041337 06 40       2971   	ld b,MAX_COLORS
041339             2972   	moscall mos_fputc
041339 3E 0D       0001M  		LD	A, function
04133B 49 CF       0002M  		RST.LIS	08h
04133D             2973   
04133D             2974   	; store frames count in the file
04133D 21 10 19 04 2975   	ld hl,frames_count
041341 46          2976   	ld b,(hl)
041342             2977   	moscall mos_fputc
041342 3E 0D       0001M  		LD	A, function
041344 49 CF       0002M  		RST.LIS	08h
041346             2978   
041346             2979   	; store sprite size in the file
041346 21 FF 17 04 2980   	ld hl,spr_size
04134A 46          2981   	ld b,(hl)
04134B             2982   	moscall mos_fputc
04134B 3E 0D       0001M  		LD	A, function
04134D 49 CF       0002M  		RST.LIS	08h
04134F             2983   
04134F             2984   	; de = size²
04134F 21 00 00 00 2985   	ld hl,#000000
041353 68          2986   	ld l,b
041354 60          2987   	ld h,b
041355 ED 6C       2988   	mlt hl ; HL = sprite length
041357 E5          2989   	push hl
041358             2990   
041358             2991   	; get frames count
041358 21 0F 19 04 2992   	ld hl,current_frame
04135C 46          2993   	ld b,(hl)
04135D             2994   
04135D E1          2995   	pop hl
04135E             2996   
04135E 78          2997   	ld a,b
04135F FE 00       2998   	cp 0
041361 28 07       2999   	jr z,ss_write_data
041363             3000   
041363 11 00 04 00 3001   	ld de,ONE_FRAME_BUFFER_SIZE
041367             3002   ss_add_length:
041367 19          3003   	add hl,de
041368 10 FD       3004   	djnz ss_add_length
04136A             3005   
04136A             3006   ss_write_data:
04136A E5          3007   	push hl
04136B E5          3008   	push hl
04136C D1          3009   	pop de
04136D 21 18 19 04 3010   	ld hl,sprite_buffer
041371             3011   	moscall mos_fwrite
041371 3E 1B       0001M  		LD	A, function
041373 49 CF       0002M  		RST.LIS	08h
041375 E1          3012   	pop hl
041376 7C          3013   	ld a,h
041377 BA          3014   	cp d
041378 20 08       3015   	jr nz,ss_close_error
04137A 7D          3016   	ld a,l
04137B BB          3017   	cp e
04137C 20 04       3018   	jr nz,ss_close_error
04137E C3 BA 13 04 3019   	jp ss_close
041382             3020   
041382             3021   ss_close_error:
041382 C5          3022   	push bc
041383             3023   
041383             3024   	; write error
041383 CD 3D 15 04 3025   	call fn_print_file_error
041387             3026   
041387 C1          3027   	pop bc
041388             3028   
041388             3029   	; close the file
041388             3030   	moscall mos_fclose
041388 3E 0B       0001M  		LD	A, function
04138A 49 CF       0002M  		RST.LIS	08h
04138C             3031   
04138C             3032   	; set path to home
04138C 21 94 18 04 3033   	ld hl,back_path
041390             3034   	moscall mos_cd
041390 3E 03       0001M  		LD	A, function
041392 49 CF       0002M  		RST.LIS	08h
041394             3035   
041394             3036   	; exit on error
041394 FE 00       3037   	cp 0
041396 C2 B2 13 04 3038   	jp nz,ss_folder_error
04139A             3039   
04139A             3040   	; reset current frame and coordinates of the drawing pixel
04139A 21 10 19 04 3041   	ld hl,frames_count
04139E 7E          3042   	ld a,(hl)
04139F 3D          3043   	dec a
0413A0 21 0F 19 04 3044   	ld hl,current_frame
0413A4 77          3045   	ld (hl),a
0413A5 21 FA 17 04 3046   	ld hl,xpix
0413A9 AF          3047   	xor a
0413AA 77          3048   	ld (hl),a
0413AB 21 FB 17 04 3049   	ld hl,ypix
0413AF 77          3050   	ld (hl),a
0413B0 18 30       3051   	jr ss_exit
0413B2             3052   
0413B2             3053   ss_folder_error:
0413B2             3054   	; write error
0413B2 CD 74 15 04 3055   	call fn_print_folder_error
0413B6 C3 E2 13 04 3056   	jp ss_exit
0413BA             3057   
0413BA             3058   ss_close:
0413BA             3059   	; close the file
0413BA             3060   	moscall mos_fclose
0413BA 3E 0B       0001M  		LD	A, function
0413BC 49 CF       0002M  		RST.LIS	08h
0413BE             3061   
0413BE             3062   	; set path to home
0413BE 21 94 18 04 3063   	ld hl,back_path
0413C2             3064   	moscall mos_cd
0413C2 3E 03       0001M  		LD	A, function
0413C4 49 CF       0002M  		RST.LIS	08h
0413C6             3065   
0413C6             3066   	; exit on error
0413C6 FE 00       3067   	cp 0
0413C8 C2 B2 13 04 3068   	jp nz,ss_folder_error
0413CC             3069   
0413CC             3070   	; reset current frame and coordinates of the drawing pixel
0413CC 21 10 19 04 3071   	ld hl,frames_count
0413D0 7E          3072   	ld a,(hl)
0413D1 3D          3073   	dec a
0413D2 21 0F 19 04 3074   	ld hl,current_frame
0413D6 77          3075   	ld (hl),a
0413D7 21 FA 17 04 3076   	ld hl,xpix
0413DB AF          3077   	xor a
0413DC 77          3078   	ld (hl),a
0413DD 21 FB 17 04 3079   	ld hl,ypix
0413E1 77          3080   	ld (hl),a
0413E2             3081   
0413E2             3082   ss_exit:
0413E2 C9          3083   	ret
0413E3             3084   
0413E3             3085   ss_file_error:
0413E3 CD 3D 15 04 3086   	call fn_print_file_error
0413E7             3087   
0413E7             3088   	; set path to home
0413E7 21 94 18 04 3089   	ld hl,back_path
0413EB             3090   	moscall mos_cd
0413EB 3E 03       0001M  		LD	A, function
0413ED 49 CF       0002M  		RST.LIS	08h
0413EF             3091   
0413EF             3092   	; exit on error
0413EF FE 00       3093   	cp 0
0413F1 C2 B2 13 04 3094   	jp nz,ss_folder_error
0413F5 C9          3095   	ret
0413F6             3096   
0413F6             3097   ; export sprite data in assembly language, giving its name
0413F6             3098   fn_export_sprite:
0413F6             3099   	; clear filename
0413F6 21 76 18 04 3100   	ld hl,filename
0413FA 06 0C       3101   	ld b,12
0413FC AF          3102   	xor a
0413FD             3103   
0413FD             3104   es_clear_filename:
0413FD 77          3105   	ld (hl),a
0413FE 23          3106   	inc hl
0413FF 10 FC       3107   	djnz es_clear_filename
041401             3108   
041401             3109   	; get filename
041401 CD 9B 0D 04 3110   	call fn_input_text8
041405             3111   
041405             3112   	; set path to sprite path
041405 21 83 18 04 3113   	ld hl,sprite_path
041409             3114   	moscall mos_cd
041409 3E 03       0001M  		LD	A, function
04140B 49 CF       0002M  		RST.LIS	08h
04140D             3115   
04140D             3116   	; create it on error
04140D FE 00       3117   	cp 0
04140F F5          3118   	push af
041410 C4 58 17 04 3119   	call nz,fn_create_sprite_folder
041414 F1          3120   	pop af
041415 28 0E       3121   	jr z,es_next
041417             3122   
041417             3123   	; set path to sprite path
041417 21 83 18 04 3124   	ld hl,sprite_path
04141B             3125   	moscall mos_cd
04141B 3E 03       0001M  		LD	A, function
04141D 49 CF       0002M  		RST.LIS	08h
04141F             3126   
04141F             3127   	; exit on error
04141F FE 00       3128   	cp 0
041421 C2 21 15 04 3129   	jp nz,es_folder_error
041425             3130   
041425             3131   es_next:
041425             3132   	; open the file for write
041425 21 76 18 04 3133   	ld hl,filename
041429 0E 0A       3134   	ld c,fa_create_always|fa_write
04142B             3135   	moscall mos_fopen
04142B 3E 0A       0001M  		LD	A, function
04142D 49 CF       0002M  		RST.LIS	08h
04142F             3136   
04142F             3137   	; exit on error
04142F FE 00       3138   	cp 0
041431 CA 2A 15 04 3139   	jp z,es_file_error
041435             3140   
041435             3141   	; filehandle -> C
041435 4F          3142   	ld c,a
041436             3143   
041436             3144   
041436             3145   	; L = first frame
041436 3E 00       3146   	ld a,0
041438 21 18 19 04 3147   	ld hl,sprite_buffer
04143C 11 00 00 00 3148   	ld de,$000000
041440             3149   
041440             3150   es_frames_repeat:
041440 F5          3151   	push af
041441 E5          3152   	push hl
041442             3153   
041442 F5          3154   	push af
041443             3155   
041443             3156   	; start to write...
041443 1E 00       3157   	ld e,0 ; rows
041445             3158   
041445 06 3B       3159   	ld b,';'
041447             3160   	moscall mos_fputc
041447 3E 0D       0001M  		LD	A, function
041449 49 CF       0002M  		RST.LIS	08h
04144B             3161   
04144B 06 20       3162   	ld b,' '
04144D             3163   	moscall mos_fputc
04144D 3E 0D       0001M  		LD	A, function
04144F 49 CF       0002M  		RST.LIS	08h
041451             3164   
041451 06 46       3165   	ld b,'F'
041453             3166   	moscall mos_fputc
041453 3E 0D       0001M  		LD	A, function
041455 49 CF       0002M  		RST.LIS	08h
041457             3167   
041457 06 72       3168   	ld b,'r'
041459             3169   	moscall mos_fputc
041459 3E 0D       0001M  		LD	A, function
04145B 49 CF       0002M  		RST.LIS	08h
04145D             3170   
04145D 06 6D       3171   	ld b,'m'
04145F             3172   	moscall mos_fputc
04145F 3E 0D       0001M  		LD	A, function
041461 49 CF       0002M  		RST.LIS	08h
041463             3173   
041463 06 20       3174   	ld b,' '
041465             3175   	moscall mos_fputc
041465 3E 0D       0001M  		LD	A, function
041467 49 CF       0002M  		RST.LIS	08h
041469             3176   
041469 F1          3177   	pop af
04146A C6 30       3178   	add a,'0'
04146C 47          3179   	ld b,a
04146D             3180   	moscall mos_fputc
04146D 3E 0D       0001M  		LD	A, function
04146F 49 CF       0002M  		RST.LIS	08h
041471             3181   
041471 06 0D       3182   	ld b,13
041473             3183   	moscall mos_fputc
041473 3E 0D       0001M  		LD	A, function
041475 49 CF       0002M  		RST.LIS	08h
041477             3184   
041477 06 0A       3185   	ld b,10
041479             3186   	moscall mos_fputc
041479 3E 0D       0001M  		LD	A, function
04147B 49 CF       0002M  		RST.LIS	08h
04147D             3187   
04147D             3188   es_repeat:
04147D             3189   
04147D 06 44       3190   	ld b,'D'
04147F             3191   	moscall mos_fputc
04147F 3E 0D       0001M  		LD	A, function
041481 49 CF       0002M  		RST.LIS	08h
041483             3192   
041483 06 42       3193   	ld b,'B'
041485             3194   	moscall mos_fputc
041485 3E 0D       0001M  		LD	A, function
041487 49 CF       0002M  		RST.LIS	08h
041489             3195   
041489 06 20       3196   	ld b,' '
04148B             3197   	moscall mos_fputc
04148B 3E 0D       0001M  		LD	A, function
04148D 49 CF       0002M  		RST.LIS	08h
04148F             3198   
04148F 16 00       3199   	ld d,0 ; columns
041491             3200   
041491             3201   es_repeat_line:
041491 D5          3202   	push de
041492             3203   
041492 7E          3204   	ld a,(hl)
041493 23          3205   	inc hl
041494             3206   
041494             3207   	; convert A to BCD
041494 CD DD 17 04 3208   	call fn_hex2bcd
041498             3209   
041498             3210   	; write two numbers (chars)
041498 5F          3211   	ld e,a
041499 E6 F0       3212   	and $f0
04149B 0F          3213   	rrca
04149C 0F          3214   	rrca
04149D 0F          3215   	rrca
04149E 0F          3216   	rrca
04149F C6 30       3217   	add '0'
0414A1             3218   
0414A1 47          3219   	ld b,a
0414A2             3220   	moscall mos_fputc
0414A2 3E 0D       0001M  		LD	A, function
0414A4 49 CF       0002M  		RST.LIS	08h
0414A6             3221   
0414A6 7B          3222   	ld a,e
0414A7 E6 0F       3223   	and $0f
0414A9 C6 30       3224   	add '0'
0414AB             3225   
0414AB 47          3226   	ld b,a
0414AC             3227   	moscall mos_fputc
0414AC 3E 0D       0001M  		LD	A, function
0414AE 49 CF       0002M  		RST.LIS	08h
0414B0             3228   
0414B0 D1          3229   	pop de
0414B1 14          3230   	inc d
0414B2 3A FF 17 04 3231   	ld a,(spr_size)
0414B6 BA          3232   	cp d
0414B7 F5          3233   	push af
0414B8 C4 D6 17 04 3234   	call nz,fn_comma
0414BC F1          3235   	pop af
0414BD C2 91 14 04 3236   	jp nz,es_repeat_line
0414C1             3237   
0414C1 06 0D       3238   	ld b,13 ; CR
0414C3             3239   	moscall mos_fputc
0414C3 3E 0D       0001M  		LD	A, function
0414C5 49 CF       0002M  		RST.LIS	08h
0414C7             3240   
0414C7 06 0A       3241   	ld b,10 ; LF
0414C9             3242   	moscall mos_fputc
0414C9 3E 0D       0001M  		LD	A, function
0414CB 49 CF       0002M  		RST.LIS	08h
0414CD             3243   
0414CD 1C          3244   	inc e
0414CE 3A FF 17 04 3245   	ld a,(spr_size)
0414D2 BB          3246   	cp e
0414D3 C2 7D 14 04 3247   	jp nz,es_repeat
0414D7             3248   
0414D7 06 0D       3249   	ld b,13 ; CR
0414D9             3250   	moscall mos_fputc
0414D9 3E 0D       0001M  		LD	A, function
0414DB 49 CF       0002M  		RST.LIS	08h
0414DD             3251   
0414DD 06 0A       3252   	ld b,10 ; LF
0414DF             3253   	moscall mos_fputc
0414DF 3E 0D       0001M  		LD	A, function
0414E1 49 CF       0002M  		RST.LIS	08h
0414E3             3254   
0414E3 E1          3255   	pop hl
0414E4 D5          3256   	push de
0414E5 ED 5C       3257   	mlt de
0414E7 19          3258   	add hl,de
0414E8 D1          3259   	pop de
0414E9 F1          3260   	pop af
0414EA 3C          3261   	inc a
0414EB DD 21 10 19 3262   	ld ix,frames_count
       04          
0414F0 DD BE 00    3263   	cp (ix+0)
0414F3 C2 40 14 04 3264   	jp nz,es_frames_repeat
0414F7             3265   
0414F7             3266   	; close the file
0414F7             3267   	moscall mos_fclose
0414F7 3E 0B       0001M  		LD	A, function
0414F9 49 CF       0002M  		RST.LIS	08h
0414FB             3268   
0414FB             3269   	; set path to home
0414FB 21 94 18 04 3270   	ld hl,back_path
0414FF             3271   	moscall mos_cd
0414FF 3E 03       0001M  		LD	A, function
041501 49 CF       0002M  		RST.LIS	08h
041503             3272   
041503             3273   	; exit on error
041503 FE 00       3274   	cp 0
041505 C2 21 15 04 3275   	jp nz,es_folder_error
041509             3276   
041509             3277   	; reset current frame and coordinates of the drawing pixel
041509 21 10 19 04 3278   	ld hl,frames_count
04150D 7E          3279   	ld a,(hl)
04150E 3D          3280   	dec a
04150F 21 0F 19 04 3281   	ld hl,current_frame
041513 77          3282   	ld (hl),a
041514 21 FA 17 04 3283   	ld hl,xpix
041518 AF          3284   	xor a
041519 77          3285   	ld (hl),a
04151A 21 FB 17 04 3286   	ld hl,ypix
04151E 77          3287   	ld (hl),a
04151F 18 08       3288   	jr es_exit
041521             3289   
041521             3290   es_folder_error:
041521             3291   	; write error
041521 CD 74 15 04 3292   	call fn_print_folder_error
041525 C3 29 15 04 3293   	jp es_exit
041529             3294   
041529             3295   es_exit:
041529 C9          3296   	ret
04152A             3297   
04152A             3298   es_file_error:
04152A CD 3D 15 04 3299   	call fn_print_file_error
04152E             3300   
04152E             3301   	; set path to home
04152E 21 94 18 04 3302   	ld hl,back_path
041532             3303   	moscall mos_cd
041532 3E 03       0001M  		LD	A, function
041534 49 CF       0002M  		RST.LIS	08h
041536             3304   
041536             3305   	; exit on error
041536 FE 00       3306   	cp 0
041538 C2 21 15 04 3307   	jp nz,es_folder_error
04153C C9          3308   	ret
04153D             3309   
04153D             3310   ; print 'file error'
04153D             3311   fn_print_file_error:
04153D             3312   	vdu 7
04153D 3E 07       0001M  		LD	A, function
04153F 49 D7       0002M  		RST.LIS	10h
041541             3313   
041541             3314   	; locate x,y
041541             3315   	vdu 31
041541 3E 1F       0001M  		LD	A, function
041543 49 D7       0002M  		RST.LIS	10h
041545             3316   	vdu FILENAME_X
041545 3E 07       0001M  		LD	A, function
041547 49 D7       0002M  		RST.LIS	10h
041549             3317   	vdu FILENAME_Y
041549 3E 18       0001M  		LD	A, function
04154B 49 D7       0002M  		RST.LIS	10h
04154D             3318   
04154D             3319   	; print text
04154D 21 B0 18 04 3320   	ld hl,file_error
041551 01 00 00 00 3321   	ld bc,0
041555 AF          3322   	xor a
041556 49 DF       3323   	rst.lis $18
041558             3324   
041558 CD 94 0D 04 3325   	call fn_input_key
04155C             3326   
04155C             3327   	; locate x,y
04155C             3328   	vdu 31
04155C 3E 1F       0001M  		LD	A, function
04155E 49 D7       0002M  		RST.LIS	10h
041560             3329   	vdu FILENAME_X
041560 3E 07       0001M  		LD	A, function
041562 49 D7       0002M  		RST.LIS	10h
041564             3330   	vdu FILENAME_Y
041564 3E 18       0001M  		LD	A, function
041566 49 D7       0002M  		RST.LIS	10h
041568             3331   
041568             3332   	; print text
041568 21 99 18 04 3333   	ld hl,void_filename
04156C 01 00 00 00 3334   	ld bc,0
041570 AF          3335   	xor a
041571 49 DF       3336   	rst.lis $18
041573             3337   
041573 C9          3338   	ret
041574             3339   
041574             3340   ; print 'folder error'
041574             3341   fn_print_folder_error:
041574             3342   	vdu 7
041574 3E 07       0001M  		LD	A, function
041576 49 D7       0002M  		RST.LIS	10h
041578             3343   
041578             3344   	; locate x,y
041578             3345   	vdu 31
041578 3E 1F       0001M  		LD	A, function
04157A 49 D7       0002M  		RST.LIS	10h
04157C             3346   	vdu FILENAME_X
04157C 3E 07       0001M  		LD	A, function
04157E 49 D7       0002M  		RST.LIS	10h
041580             3347   	vdu FILENAME_Y
041580 3E 18       0001M  		LD	A, function
041582 49 D7       0002M  		RST.LIS	10h
041584             3348   
041584             3349   	; print text
041584 21 C7 18 04 3350   	ld hl,folder_error
041588 01 00 00 00 3351   	ld bc,0
04158C AF          3352   	xor a
04158D 49 DF       3353   	rst.lis $18
04158F             3354   
04158F CD 94 0D 04 3355   	call fn_input_key
041593             3356   
041593             3357   	; locate x,y
041593             3358   	vdu 31
041593 3E 1F       0001M  		LD	A, function
041595 49 D7       0002M  		RST.LIS	10h
041597             3359   	vdu FILENAME_X
041597 3E 07       0001M  		LD	A, function
041599 49 D7       0002M  		RST.LIS	10h
04159B             3360   	vdu FILENAME_Y
04159B 3E 18       0001M  		LD	A, function
04159D 49 D7       0002M  		RST.LIS	10h
04159F             3361   
04159F             3362   	; print text
04159F 21 99 18 04 3363   	ld hl,void_filename
0415A3 01 00 00 00 3364   	ld bc,0
0415A7 AF          3365   	xor a
0415A8 49 DF       3366   	rst.lis $18
0415AA             3367   
0415AA C9          3368   	ret
0415AB             3369   
0415AB             3370   ; print 'header error'
0415AB             3371   fn_print_header_error:
0415AB             3372   	vdu 7
0415AB 3E 07       0001M  		LD	A, function
0415AD 49 D7       0002M  		RST.LIS	10h
0415AF             3373   
0415AF             3374   	; locate x,y
0415AF             3375   	vdu 31
0415AF 3E 1F       0001M  		LD	A, function
0415B1 49 D7       0002M  		RST.LIS	10h
0415B3             3376   	vdu FILENAME_X
0415B3 3E 07       0001M  		LD	A, function
0415B5 49 D7       0002M  		RST.LIS	10h
0415B7             3377   	vdu FILENAME_Y
0415B7 3E 18       0001M  		LD	A, function
0415B9 49 D7       0002M  		RST.LIS	10h
0415BB             3378   
0415BB             3379   	; print text
0415BB 21 DE 18 04 3380   	ld hl,header_error
0415BF 01 00 00 00 3381   	ld bc,0
0415C3 AF          3382   	xor a
0415C4 49 DF       3383   	rst.lis $18
0415C6             3384   
0415C6 CD 94 0D 04 3385   	call fn_input_key
0415CA             3386   
0415CA             3387   	; locate x,y
0415CA             3388   	vdu 31
0415CA 3E 1F       0001M  		LD	A, function
0415CC 49 D7       0002M  		RST.LIS	10h
0415CE             3389   	vdu FILENAME_X
0415CE 3E 07       0001M  		LD	A, function
0415D0 49 D7       0002M  		RST.LIS	10h
0415D2             3390   	vdu FILENAME_Y
0415D2 3E 18       0001M  		LD	A, function
0415D4 49 D7       0002M  		RST.LIS	10h
0415D6             3391   
0415D6             3392   	; print text
0415D6 21 99 18 04 3393   	ld hl,void_filename
0415DA 01 00 00 00 3394   	ld bc,0
0415DE AF          3395   	xor a
0415DF 49 DF       3396   	rst.lis $18
0415E1             3397   
0415E1 C9          3398   	ret
0415E2             3399   
0415E2             3400   ; print 'data error'
0415E2             3401   fn_print_data_error:
0415E2             3402   	vdu 7
0415E2 3E 07       0001M  		LD	A, function
0415E4 49 D7       0002M  		RST.LIS	10h
0415E6             3403   
0415E6             3404   	; locate x,y
0415E6             3405   	vdu 31
0415E6 3E 1F       0001M  		LD	A, function
0415E8 49 D7       0002M  		RST.LIS	10h
0415EA             3406   	vdu FILENAME_X
0415EA 3E 07       0001M  		LD	A, function
0415EC 49 D7       0002M  		RST.LIS	10h
0415EE             3407   	vdu FILENAME_Y
0415EE 3E 18       0001M  		LD	A, function
0415F0 49 D7       0002M  		RST.LIS	10h
0415F2             3408   
0415F2             3409   	; print text
0415F2 21 F5 18 04 3410   	ld hl,data_error
0415F6 01 00 00 00 3411   	ld bc,0
0415FA AF          3412   	xor a
0415FB 49 DF       3413   	rst.lis $18
0415FD             3414   
0415FD CD 94 0D 04 3415   	call fn_input_key
041601             3416   
041601             3417   	; locate x,y
041601             3418   	vdu 31
041601 3E 1F       0001M  		LD	A, function
041603 49 D7       0002M  		RST.LIS	10h
041605             3419   	vdu FILENAME_X
041605 3E 07       0001M  		LD	A, function
041607 49 D7       0002M  		RST.LIS	10h
041609             3420   	vdu FILENAME_Y
041609 3E 18       0001M  		LD	A, function
04160B 49 D7       0002M  		RST.LIS	10h
04160D             3421   
04160D             3422   	; print text
04160D 21 99 18 04 3423   	ld hl,void_filename
041611 01 00 00 00 3424   	ld bc,0
041615 AF          3425   	xor a
041616 49 DF       3426   	rst.lis $18
041618             3427   
041618 C9          3428   	ret
041619             3429   
041619             3430   ; refresh all the current sprite frame
041619             3431   fn_refresh_sprite:
041619 06 00       3432   	ld b,0 ; B -> x cordinate
04161B 0E 00       3433   	ld c,0 ; C -> y cordinate
04161D             3434   
04161D             3435   rs_loop:
04161D C5          3436   	push bc
04161E             3437   
04161E 21 FA 17 04 3438   	ld hl,xpix
041622 70          3439   	ld (hl),b
041623 21 FB 17 04 3440   	ld hl,ypix
041627 71          3441   	ld (hl),c
041628 CD 26 0C 04 3442   	call fn_draw_pixel_without_border
04162C             3443   
04162C C1          3444   	pop bc
04162D             3445   
04162D 04          3446   	inc b
04162E 21 FF 17 04 3447   	ld hl,spr_size
041632 7E          3448   	ld a,(hl)
041633 B8          3449   	cp b
041634 28 04       3450   	jr z,rs_next_line
041636 C3 1D 16 04 3451   	jp rs_loop
04163A             3452   
04163A             3453   rs_next_line:
04163A 06 00       3454   	ld b,0
04163C 0C          3455   	inc c
04163D 21 FF 17 04 3456   	ld hl,spr_size
041641 7E          3457   	ld a,(hl)
041642 B9          3458   	cp c
041643 28 04       3459   	jr z,rs_end
041645 C3 1D 16 04 3460   	jp rs_loop
041649             3461   
041649             3462   rs_end:
041649 AF          3463   	xor a
04164A 21 FA 17 04 3464   	ld hl,xpix
04164E 77          3465   	ld (hl),a
04164F 21 FB 17 04 3466   	ld hl,ypix
041653 77          3467   	ld (hl),a
041654 CD 12 0C 04 3468   	call fn_draw_pixel_with_border
041658             3469   
041658 C9          3470   	ret
041659             3471   
041659             3472   fn_change_frame:
041659 21 0F 19 04 3473   	ld hl,current_frame
04165D 7E          3474   	ld a,(hl)
04165E 3C          3475   	inc a
04165F C6 30       3476   	add a,48
041661 21 11 19 04 3477   	ld hl,current_frame_ascii
041665 77          3478   	ld (hl),a
041666             3479   
041666             3480   	; locate 21,3
041666             3481   	vdu 31
041666 3E 1F       0001M  		LD	A, function
041668 49 D7       0002M  		RST.LIS	10h
04166A             3482   	vdu 21
04166A 3E 15       0001M  		LD	A, function
04166C 49 D7       0002M  		RST.LIS	10h
04166E             3483   	vdu 3
04166E 3E 03       0001M  		LD	A, function
041670 49 D7       0002M  		RST.LIS	10h
041672             3484   
041672             3485   	; print text
041672 21 11 19 04 3486   	ld hl,current_frame_ascii
041676 01 00 00 00 3487   	ld bc,0
04167A AF          3488   	xor a
04167B 49 DF       3489   	rst.lis $18
04167D             3490   
04167D C9          3491   	ret
04167E             3492   
04167E             3493   fn_change_frames_count:
04167E 21 10 19 04 3494   	ld hl,frames_count
041682 7E          3495   	ld a,(hl)
041683 C6 30       3496   	add a,48
041685 21 13 19 04 3497   	ld hl,frames_count_ascii
041689 77          3498   	ld (hl),a
04168A             3499   
04168A             3500   	; locate 23,3
04168A             3501   	vdu 31
04168A 3E 1F       0001M  		LD	A, function
04168C 49 D7       0002M  		RST.LIS	10h
04168E             3502   	vdu 23
04168E 3E 17       0001M  		LD	A, function
041690 49 D7       0002M  		RST.LIS	10h
041692             3503   	vdu 3
041692 3E 03       0001M  		LD	A, function
041694 49 D7       0002M  		RST.LIS	10h
041696             3504   
041696             3505   	; print text
041696 21 13 19 04 3506   	ld hl,frames_count_ascii
04169A 01 00 00 00 3507   	ld bc,0
04169E AF          3508   	xor a
04169F 49 DF       3509   	rst.lis $18
0416A1             3510   
0416A1 C9          3511   	ret
0416A2             3512   
0416A2             3513   ; slowdown (wait delay)
0416A2             3514   fn_slowdown:
0416A2 DD 21 15 19 3515   	ld ix,keydata
       04          
0416A7 DD 7E 02    3516   	ld a,(ix+2)
0416AA E6 02       3517   	and 2
0416AC FE 02       3518   	cp 2 ; shift key to disable delay
0416AE C8          3519   	ret z
0416AF             3520   
0416AF             3521   	moscall mos_sysvars
0416AF 3E 08       0001M  		LD	A, function
0416B1 49 CF       0002M  		RST.LIS	08h
0416B3 DD 4E 00    3522   	ld c,(ix+sysvar_time)
0416B6             3523   
0416B6             3524   sd_loop:
0416B6             3525   	moscall mos_sysvars
0416B6 3E 08       0001M  		LD	A, function
0416B8 49 CF       0002M  		RST.LIS	08h
0416BA DD 7E 00    3526   	ld a,(ix+sysvar_time)
0416BD 91          3527   	sub c
0416BE FE 14       3528   	cp SLOWDOWN_DELAY
0416C0 20 F4       3529   	jr nz,sd_loop
0416C2 C9          3530   	ret
0416C3             3531   
0416C3             3532   fn_show_spr_descr:
0416C3             3533   	; locate 15,3
0416C3             3534   	vdu 31
0416C3 3E 1F       0001M  		LD	A, function
0416C5 49 D7       0002M  		RST.LIS	10h
0416C7             3535   	vdu 15
0416C7 3E 0F       0001M  		LD	A, function
0416C9 49 D7       0002M  		RST.LIS	10h
0416CB             3536   	vdu 3
0416CB 3E 03       0001M  		LD	A, function
0416CD 49 D7       0002M  		RST.LIS	10h
0416CF             3537   
0416CF             3538   	; print text
0416CF 21 4A 18 04 3539   	ld hl,spr_descr
0416D3 01 00 00 00 3540   	ld bc,0
0416D7 AF          3541   	xor a
0416D8 49 DF       3542   	rst.lis $18
0416DA             3543   
0416DA             3544   	; locate 15,5
0416DA             3545   	vdu 31
0416DA 3E 1F       0001M  		LD	A, function
0416DC 49 D7       0002M  		RST.LIS	10h
0416DE             3546   	vdu 15
0416DE 3E 0F       0001M  		LD	A, function
0416E0 49 D7       0002M  		RST.LIS	10h
0416E2             3547   	vdu 5
0416E2 3E 05       0001M  		LD	A, function
0416E4 49 D7       0002M  		RST.LIS	10h
0416E6             3548   
0416E6             3549   	; check for sprite size...
0416E6 21 FF 17 04 3550   	ld hl,spr_size
0416EA 7E          3551   	ld a,(hl)
0416EB             3552   
0416EB FE 04       3553   	cp 4
0416ED 20 0C       3554   	jr nz,ssd_8x8
0416EF             3555   
0416EF             3556   	; print text 4x4
0416EF 21 54 18 04 3557   	ld hl,spr_descr1
0416F3 01 00 00 00 3558   	ld bc,0
0416F7 AF          3559   	xor a
0416F8 49 DF       3560   	rst.lis $18
0416FA C9          3561   	ret
0416FB             3562   
0416FB             3563   ssd_8x8:
0416FB FE 08       3564   	cp 8
0416FD 20 0C       3565   	jr nz,ssd_16x16
0416FF             3566   
0416FF             3567   	; print text 8x8
0416FF 21 5A 18 04 3568   	ld hl,spr_descr2
041703 01 00 00 00 3569   	ld bc,0
041707 AF          3570   	xor a
041708 49 DF       3571   	rst.lis $18
04170A C9          3572   	ret
04170B             3573   
04170B             3574   ssd_16x16:
04170B FE 10       3575   	cp 16
04170D 20 0C       3576   	jr nz,ssd_32x32
04170F             3577   
04170F             3578   	; print text 16x16
04170F 21 60 18 04 3579   	ld hl,spr_descr3
041713 01 00 00 00 3580   	ld bc,0
041717 AF          3581   	xor a
041718 49 DF       3582   	rst.lis $18
04171A C9          3583   	ret
04171B             3584   
04171B             3585   ssd_32x32:
04171B             3586   	; print text 32x32
04171B 21 66 18 04 3587   	ld hl,spr_descr4
04171F 01 00 00 00 3588   	ld bc,0
041723 AF          3589   	xor a
041724 49 DF       3590   	rst.lis $18
041726             3591   
041726 C9          3592   	ret
041727             3593   
041727             3594   ; input: HL = negative key to check
041727             3595   fn_inkey:
041727             3596   	moscall mos_getkbmap
041727 3E 1E       0001M  		LD	A, function
041729 49 CF       0002M  		RST.LIS	08h
04172B 23          3597   	INC	HL
04172C 7D          3598   	LD	A, L
04172D ED 44       3599   	NEG
04172F 4F          3600   	LD	C, A
041730 3E 01       3601   	LD	A, 1
041732 FA 56 17 04 3602   	JP	M,i_false ; < -128 ?
041736             3603   
041736 21 45 00 04 3604   	LD	HL,BITLOOKUP
04173A 11 00 00 00 3605   	LD	DE,0
04173E 79          3606   	LD	A,C
04173F E6 07       3607   	AND	00000111b
041741 5F          3608   	LD	E,A
041742 19          3609   	ADD	HL,DE
041743 46          3610   	LD	B,(HL)
041744             3611   
041744 79          3612   	LD	A,C
041745 E6 78       3613   	AND	01111000b
041747 0F          3614   	RRCA
041748 0F          3615   	RRCA
041749 0F          3616   	RRCA
04174A 5F          3617   	LD	E, A
04174B DD 19       3618   	ADD	IX,DE
04174D DD 7E 00    3619   	LD	A,(IX+0)
041750 A0          3620   	AND	B
041751 28 03       3621   	JR Z,i_false
041753 3E 01       3622   	LD A,1
041755 C9          3623   	RET
041756             3624   i_false:
041756 AF          3625   	XOR A
041757 C9          3626   	RET
041758             3627   
041758             3628   fn_create_sprite_folder:
041758 21 83 18 04 3629   	ld hl,sprite_path
04175C             3630   	moscall mos_mkdir
04175C 3E 07       0001M  		LD	A, function
04175E 49 CF       0002M  		RST.LIS	08h
041760 C9          3631   	ret
041761             3632   
041761             3633   ; draw the palette
041761             3634   fn_draw_the_palette:
041761 0E 00       3635   	ld c,0
041763             3636   
041763             3637   fndtp_palette_loop:
041763 C5          3638   	push bc
041764             3639   
041764             3640   	; choose palette color
041764             3641   	vdu 18
041764 3E 12       0001M  		LD	A, function
041766 49 D7       0002M  		RST.LIS	10h
041768             3642   	vdu 0
041768 3E 00       0001M  		LD	A, function
04176A 49 D7       0002M  		RST.LIS	10h
04176C C1          3643   	pop bc
04176D C5          3644   	push bc
04176E 79          3645   	ld a,c
04176F F5          3646   	push af
041770             3647   	vdu_a
041770 49 D7       0001M  		RST.LIS	10h
041772 F1          3648   	pop af
041773 E5          3649   	push hl
041774 21 0A 19 04 3650   	ld hl,colors_count
041778 BE          3651   	cp (hl)
041779 E1          3652   	pop hl
04177A 38 0B       3653   	jr c,fndtppl_zap
04177C             3654   
04177C             3655   	; set 0 if color is out of palette
04177C             3656   	vdu 18
04177C 3E 12       0001M  		LD	A, function
04177E 49 D7       0002M  		RST.LIS	10h
041780             3657   	vdu 0
041780 3E 00       0001M  		LD	A, function
041782 49 D7       0002M  		RST.LIS	10h
041784 AF          3658   	xor a
041785             3659   	vdu_a
041785 49 D7       0001M  		RST.LIS	10h
041787             3660   
041787             3661   fndtppl_zap:
041787             3662   	; store coordinates for a palette square
041787 DD 21 EA 17 3663   	ld ix,x1
       04          
04178C E1          3664   	pop hl
04178D E5          3665   	push hl
04178E 26 05       3666   	ld h,5
041790 ED 6C       3667   	mlt hl
041792 E5          3668   	push hl
041793 DD 75 00    3669   	ld (ix+0),l
041796 DD 74 01    3670   	ld (ix+1),h
041799             3671   
041799 DD 21 EC 17 3672   	ld ix,y1
       04          
04179E 21 00 00 00 3673   	ld hl,0
0417A2 DD 75 00    3674   	ld (ix+0),l
0417A5 DD 74 01    3675   	ld (ix+1),h
0417A8             3676   
0417A8 DD 21 EE 17 3677   	ld ix,x2
       04          
0417AD E1          3678   	pop hl
0417AE 11 04 00 00 3679   	ld de,4
0417B2 19          3680   	add hl,de
0417B3 DD 75 00    3681   	ld (ix+0),l
0417B6 DD 74 01    3682   	ld (ix+1),h
0417B9             3683   
0417B9 DD 21 F0 17 3684   	ld ix,y2
       04          
0417BE 21 0A 00 00 3685   	ld hl,10
0417C2 DD 75 00    3686   	ld (ix+0),l
0417C5 DD 74 01    3687   	ld (ix+1),h
0417C8             3688   
0417C8             3689   	; draw the palette filled square
0417C8 CD 44 0B 04 3690   	call fn_rectf
0417CC             3691   
0417CC             3692   	; next color ?
0417CC C1          3693   	pop bc
0417CD 0C          3694   	inc c
0417CE 79          3695   	ld a,c
0417CF FE 40       3696   	cp MAX_COLORS
0417D1 C2 63 17 04 3697   	jp nz,fndtp_palette_loop
0417D5             3698   
0417D5 C9          3699   	ret
0417D6             3700   
0417D6             3701   fn_comma:
0417D6 06 2C       3702   	ld b,','
0417D8             3703   	moscall mos_fputc
0417D8 3E 0D       0001M  		LD	A, function
0417DA 49 CF       0002M  		RST.LIS	08h
0417DC C9          3704   	ret
0417DD             3705   
0417DD             3706   ; Hex to BCD
0417DD             3707   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
0417DD             3708   ; Input: a = hex number
0417DD             3709   ; Output: a = BCD number
0417DD             3710   ; Clobbers: b,c
0417DD             3711   fn_hex2bcd:
0417DD C5          3712   		push bc
0417DE 4F          3713   		ld c,a  ; Original (hex) number
0417DF 06 08       3714   		ld b,8  ; How many bits
0417E1 AF          3715   		xor a   ; Output (BCD) number, starts at 0
0417E2 CB 21       3716   htb:	sla c   ; shift c into carry
0417E4 8F          3717   		adc a,a
0417E5 27          3718   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
0417E6 10 FA       3719   		djnz htb  ; Repeat for 8 bits
0417E8 C1          3720   		pop bc
0417E9 C9          3721   		ret
0417EA             3722   
0417EA             3723   ;======================================================================
0417EA             3724   
0417EA             3725   ; coordinates for rectangles
0417EA             3726   x1:
0417EA 00 00       3727   	dw $0000
0417EC             3728   y1:
0417EC 00 00       3729   	dw $0000
0417EE             3730   x2:
0417EE 00 00       3731   	dw $0000
0417F0             3732   y2:
0417F0 00 00       3733   	dw $0000
0417F2             3734   
0417F2             3735   ; coordinates of the edited sprite
0417F2             3736   xs1:
0417F2 5F 00       3737   	dw 95
0417F4             3738   ys1:
0417F4 37 00       3739   	dw 55
0417F6             3740   xs2:
0417F6 E0 00       3741   	dw 224
0417F8             3742   ys2:
0417F8 B8 00       3743   	dw 184
0417FA             3744   
0417FA             3745   ; coordinates of active pixels to draw
0417FA             3746   xpix:
0417FA 00          3747   	db 0
0417FB             3748   ypix:
0417FB 00          3749   	db 0
0417FC             3750   
0417FC             3751   ; memorized coordinates of active pixels to draw
0417FC             3752   memxpix:
0417FC 00          3753   	db 0
0417FD             3754   memypix:
0417FD 00          3755   	db 0
0417FE             3756   
0417FE             3757   ; width of a pixel in the sprite
0417FE             3758   pixel_width:
0417FE 00          3759   	db 0
0417FF             3760   
0417FF             3761   ; sprite size, in resized pixels
0417FF             3762   spr_size:
0417FF 00          3763   	db 0
041800             3764   
041800             3765   ; pen color (0-63)
041800             3766   current_pen:
041800 00          3767   	db 0
041801             3768   
041801             3769   ; texts for 1st menu
041801             3770   title:
041801 53 50 52 2D 3771   	db "SPR-EDIT",0
       45 44 49 54 
       00          
04180A             3772   
04180A             3773   menu1:
04180A 46 31 2E 20 3774   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
041819             3775   menu2:
041819 46 32 2E 20 3776   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041828             3777   menu3:
041828 46 33 2E 20 3778   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
041839             3779   menu4:
041839 46 34 2E 20 3780   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
04184A             3781   
04184A             3782   ; descriptions of sprites
04184A             3783   spr_descr:
04184A 46 72 61 6D 3784   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041854             3785   spr_descr1:
041854 34 78 34 20 3786   	db "4x4  ",0
       20 00       
04185A             3787   spr_descr2:
04185A 38 78 38 20 3788   	db "8x8  ",0
       20 00       
041860             3789   spr_descr3:
041860 31 36 78 31 3790   	db "16x16",0
       36 00       
041866             3791   spr_descr4:
041866 33 32 78 33 3792   	db "32x32",0
       32 00       
04186C             3793   
04186C             3794   ; label before filename
04186C             3795   filename_label:
04186C 46 69 6C 65 3796   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041876             3797   
041876             3798   ; filename without extension
041876             3799   filename:
041876 00 00 00 00 3800   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
041883             3801   
041883             3802   sprite_path:
041883 73 70 72 69 3803   	db "sprites",0
       74 65 73 00 
04188B             3804   
04188B             3805   palette_path:
04188B 70 61 6C 65 3806   	db "palettes",0
       74 74 65 73 
       00          
041894             3807   
041894             3808   back_path:
041894 2E 2E 00    3809   	db "..",0
041897             3810   
041897             3811   ; single space char to print
041897             3812   spacechar:
041897 20 00       3813   	db " ",0
041899             3814   
041899             3815   ; spaces to remove filename label
041899             3816   void_filename:
041899 20 20 20 20 3817   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0418B0             3818   
0418B0             3819   ; file error message
0418B0             3820   file_error:
0418B0 46 69 6C 65 3821   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0418C7             3822   
0418C7             3823   ; folder error message
0418C7             3824   folder_error:
0418C7 46 6F 6C 64 3825   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0418DE             3826   
0418DE             3827   ; header error message
0418DE             3828   header_error:
0418DE 48 65 61 64 3829   	db "Header error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0418F5             3830   
0418F5             3831   ; data error message
0418F5             3832   data_error:
0418F5 44 61 74 61 3833   	db "Data error !        ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       00          
04190A             3834   
04190A             3835   ; number of colors
04190A             3836   colors_count:
04190A 00          3837   	db 0
04190B             3838   
04190B             3839   ; real number of colors
04190B             3840   new_colors_count:
04190B 00          3841   	db 0
04190C             3842   
04190C             3843   red_tint:
04190C 00          3844   	db 0
04190D             3845   
04190D             3846   green_tint:
04190D 00          3847   	db 0
04190E             3848   
04190E             3849   blue_tint:
04190E 00          3850   	db 0
04190F             3851   
04190F             3852   ; current frame
04190F             3853   current_frame:
04190F 00          3854   	db 0
041910             3855   
041910             3856   ; frames count
041910             3857   frames_count:
041910 00          3858   	db 0
041911             3859   
041911             3860   current_frame_ascii:
041911 30 00       3861   	db '0',0
041913             3862   
041913             3863   frames_count_ascii:
041913 30 00       3864   	db '0',0
041915             3865   
041915             3866   ; keycode, keydown & keymods are stored here
041915             3867   keydata:
041915 00 00 00    3868   	db 0,0,0
041918             3869   
041918             3870   ; buffer for the current sprite
041918             3871   sprite_buffer:
041918             3872   	ds BUFFER_SIZE
043918             3873   
043918             3874   header_buffer:
043918             3875   	ds HEADER_BUFFER_SIZE
043928             3876   
043928             3877   color_buffer:
043928 00 00 00    3878   	db 0,0,0
04392B             3879   
04392B             3880   palette_buffer:
04392B             3881   	ds MAX_PAL_DATA + 1
043C70             3882   
043C70             3883   temp_chars_buffer:
043C70 00 00 00 00 3884   	db 0,0,0,0
043C74             3885   
043C74             3886   header:
043C74 4A 41 53 43 3887   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043C7E 30 31 30 30 3888   	db "0100",13,10
       0D 0A       
043C84             3889   
043C84             3890   ; buffer to perform some operations
043C84             3891   swap_sprite_buffer:
043C84             3892   	ds ONE_FRAME_BUFFER_SIZE
044084             3893   
044084             3894   asm_line:
044084 44 42 20    3895   	DB "DB "
044087             3896   
044087             3897   asm_line_length:
044087 03          3898   	DB 3
044088             3899   
044088             3900   rgb_palette:
044088 00 00 00    3901   	db $00,$00,$00
04408B AA 00 00    3902   	db $AA,$00,$00
04408E 00 AA 00    3903   	db $00,$AA,$00
044091 AA AA 00    3904   	db $AA,$AA,$00
044094 00 00 AA    3905   	db $00,$00,$AA
044097 AA 00 AA    3906   	db $AA,$00,$AA
04409A 00 AA AA    3907   	db $00,$AA,$AA
04409D AA AA AA    3908   	db $AA,$AA,$AA
0440A0             3909   
0440A0 55 55 55    3910   	db $55,$55,$55
0440A3 FF 00 00    3911   	db $FF,$00,$00
0440A6 00 FF 00    3912   	db $00,$FF,$00
0440A9 FF FF 00    3913   	db $FF,$FF,$00
0440AC 00 00 FF    3914   	db $00,$00,$FF
0440AF FF 00 FF    3915   	db $FF,$00,$FF
0440B2 00 FF FF    3916   	db $00,$FF,$FF
0440B5 FF FF FF    3917   	db $FF,$FF,$FF
0440B8             3918   
0440B8 00 00 55    3919   	db $00,$00,$55
0440BB 00 55 00    3920   	db $00,$55,$00
0440BE 00 55 55    3921   	db $00,$55,$55
0440C1 00 55 AA    3922   	db $00,$55,$AA
0440C4 00 55 FF    3923   	db $00,$55,$FF
0440C7 00 AA 55    3924   	db $00,$AA,$55
0440CA 00 AA FF    3925   	db $00,$AA,$FF
0440CD 00 FF 55    3926   	db $00,$FF,$55
0440D0             3927   
0440D0 00 FF AA    3928   	db $00,$FF,$AA
0440D3 55 00 00    3929   	db $55,$00,$00
0440D6 55 00 55    3930   	db $55,$00,$55
0440D9 55 00 AA    3931   	db $55,$00,$AA
0440DC 55 00 FF    3932   	db $55,$00,$FF
0440DF 55 55 00    3933   	db $55,$55,$00
0440E2 55 55 AA    3934   	db $55,$55,$AA
0440E5 55 55 FF    3935   	db $55,$55,$FF
0440E8             3936   
0440E8 55 AA 00    3937   	db $55,$AA,$00
0440EB 55 AA 55    3938   	db $55,$AA,$55
0440EE 55 AA AA    3939   	db $55,$AA,$AA
0440F1 55 AA FF    3940   	db $55,$AA,$FF
0440F4 55 FF 00    3941   	db $55,$FF,$00
0440F7 55 FF 55    3942   	db $55,$FF,$55
0440FA 55 FF AA    3943   	db $55,$FF,$AA
0440FD 55 FF FF    3944   	db $55,$FF,$FF
044100             3945   
044100 AA 00 55    3946   	db $AA,$00,$55
044103 AA 00 FF    3947   	db $AA,$00,$FF
044106 AA 55 00    3948   	db $AA,$55,$00
044109 AA 55 55    3949   	db $AA,$55,$55
04410C AA 55 AA    3950   	db $AA,$55,$AA
04410F AA 55 FF    3951   	db $AA,$55,$FF
044112 AA AA 55    3952   	db $AA,$AA,$55
044115 AA AA FF    3953   	db $AA,$AA,$FF
044118             3954   
044118 AA FF 00    3955   	db $AA,$FF,$00
04411B AA FF 55    3956   	db $AA,$FF,$55
04411E AA FF AA    3957   	db $AA,$FF,$AA
044121 AA FF FF    3958   	db $AA,$FF,$FF
044124 FF 00 55    3959   	db $FF,$00,$55
044127 FF 00 AA    3960   	db $FF,$00,$AA
04412A FF 55 00    3961   	db $FF,$55,$00
04412D FF 55 55    3962   	db $FF,$55,$55
044130             3963   
044130 FF 55 AA    3964   	db $FF,$55,$AA
044133 FF 55 FF    3965   	db $FF,$55,$FF
044136 FF AA 00    3966   	db $FF,$AA,$00
044139 FF AA 55    3967   	db $FF,$AA,$55
04413C FF AA AA    3968   	db $FF,$AA,$AA
04413F FF AA FF    3969   	db $FF,$AA,$FF
044142 FF FF 55    3970   	db $FF,$FF,$55
044145 FF FF AA    3971   	db $FF,$FF,$AA
044148             3972   
044148             3973   ; sprite structure:
044148             3974   ; =================
044148             3975   ; colors_count  :   byte
044148             3976   ; frames count	:	byte
044148             3977   ; spr size		:	byte
044148             3978   ; data			:   width x height bytes of colors
044148             3979   
044148             3980   ; ===============================================
044148             3981   ; A = byte to debug
044148             3982   debug_byte:
044148 F5          3983   	PUSH AF
044149 C5          3984   	PUSH BC
04414A D5          3985   	PUSH DE
04414B E5          3986   	PUSH HL
04414C 21 00 00 00 3987   	LD HL,$000000
044150 6F          3988   	LD L,A
044151 11 8D 41 04 3989   	LD DE,debug_text
044155 D5          3990   	PUSH DE
044156 CD 93 41 04 3991   	CALL num2dec
04415A E1          3992   	POP HL
04415B 23          3993   	INC HL
04415C 23          3994   	INC HL
04415D 01 03 00 00 3995   	LD BC,3
044161 3E 00       3996   	LD A,0
044163 49 DF       3997   	RST.LIS $18
044165 E1          3998   	POP HL
044166 D1          3999   	POP DE
044167 C1          4000   	POP BC
044168 F1          4001   	POP AF
044169 C9          4002   	RET
04416A             4003   
04416A             4004   ; HL = word to debug
04416A             4005   debug_word:
04416A F5          4006   	PUSH AF
04416B C5          4007   	PUSH BC
04416C D5          4008   	PUSH DE
04416D E5          4009   	PUSH HL
04416E 11 00 00 00 4010   	LD DE,$000000 ; remove HLU
044172 5D          4011   	LD E,L
044173 54          4012   	LD D,H
044174 D5          4013   	PUSH DE
044175 E1          4014   	POP HL
044176 11 8D 41 04 4015   	LD DE,debug_text
04417A D5          4016   	PUSH DE
04417B CD 93 41 04 4017   	CALL num2dec
04417F E1          4018   	POP HL
044180 01 05 00 00 4019   	LD BC,5
044184 3E 00       4020   	LD A,0
044186 49 DF       4021   	RST.LIS $18
044188 E1          4022   	POP HL
044189 D1          4023   	POP DE
04418A C1          4024   	POP BC
04418B F1          4025   	POP AF
04418C C9          4026   	RET
04418D             4027   
04418D             4028   debug_text:
04418D             4029   	DS 6
044193             4030   
044193             4031   ; 16 bits number to string
044193             4032   num2dec:
044193 01 F0 D8 FF 4033   	LD BC,-10000
044197 CD B4 41 04 4034   	CALL num1
04419B 01 18 FC FF 4035   	LD BC,-1000
04419F CD B4 41 04 4036   	CALL num1
0441A3 01 9C FF FF 4037   	LD BC,-100
0441A7 CD B4 41 04 4038   	CALL num1
0441AB 01 F6 FF FF 4039   	LD BC,-10
0441AF CD B4 41 04 4040   	CALL num1
0441B3 48          4041   	LD C,B
0441B4             4042   
0441B4 3E 2F       4043   num1: LD A,'0'-1
0441B6 3C          4044   num2: INC A
0441B7 09          4045   	ADD HL,BC
0441B8 38 FC       4046   	JR C,num2
0441BA ED 42       4047   	SBC HL,BC
0441BC             4048   
0441BC 12          4049   	LD (DE),A
0441BD 13          4050   	INC DE
0441BE C9          4051   	RET
