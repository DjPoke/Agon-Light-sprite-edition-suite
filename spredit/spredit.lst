PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023-2024
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   
040045             0022   MAX_FRAMES:			equ 8
040045             0023   
040045             0024   COLOR_WHITE:		equ 15
040045             0025   COLOR_BLACK:		equ 0
040045             0026   
040045             0027   TITLE_X: 	equ 17
040045             0028   TITLE_Y: 	equ 2
040045             0029   MENU_X: 	equ 13
040045             0030   MENU1_Y: 	equ 8
040045             0031   MENU2_Y: 	equ 12
040045             0032   MENU3_Y: 	equ 16
040045             0033   MENU4_Y: 	equ 20
040045             0034   MENU5_Y: 	equ 24
040045             0035   FILENAME_X: equ 7
040045             0036   FILENAME_Y: equ 24
040045             0037   
040045             0038   SPR44: 		equ 4
040045             0039   SPR88: 		equ 8
040045             0040   SPR1616: 	equ 16
040045             0041   SPR3232: 	equ 32
040045             0042   
040045             0043   SPR44_width: 	equ 32
040045             0044   SPR88_width: 	equ 16
040045             0045   SPR1616_width: 	equ 8
040045             0046   SPR3232_width: 	equ 4
040045             0047   
040045             0048   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0049   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0050   
040045             0051   FILENAME_LENGTH:	equ 16
040045             0052   
040045             0053   HEADER_BUFFER_SIZE:		equ 16
040045             0054   
040045             0055   SLOWDOWN_DELAY:	equ 20
040045             0056   
040045             0057   KEY_SPACE: equ -99 ; draw with color
040045             0058   KEY_UP: equ -58 ; move
040045             0059   KEY_DOWN: equ -42
040045             0060   KEY_LEFT: equ -26
040045             0061   KEY_RIGHT: equ -122
040045             0062   KEY_DELETE: equ -90 ; remove color with black
040045             0063   KEY_N: equ -86 ; add a new void frame
040045             0064   KEY_C: equ -83 ; copy current frame to a new frame
040045             0065   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0066   KEY_PGUP: equ -64 ; select frame
040045             0067   KEY_PGDOWN: equ -79
040045             0068   KEY_L: equ -87 ; load sprite
040045             0069   KEY_S: equ -82 ; save sprite
040045             0070   KEY_E: equ -35 ; export sprite as assembler data
040045             0071   KEY_R: equ -52 ; rotate frame clockwise
040045             0072   KEY_F: equ -68 ; flip frame horizontally
040045             0073   KEY_M: equ -102 ; mirror frame vertically
040045             0074   KEY_ESCAPE: equ -113
040045             0075   KEY_F1: equ -114 ; select 4x4 sprite
040045             0076   KEY_F2: equ -115 ; select 8x8 sprite
040045             0077   KEY_F3: equ -116 ; select 16x16 sprite
040045             0078   KEY_F4: equ -21 ; select 32x32 sprite
040045             0079   KEY_RETURN: equ -74 ; floodfill
040045             0080   
040045             0081   ; play mode:
040045             0082   KEY_P:	equ -56 ; switch to play mode
040045             0083   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0084   
040045             0085   ; palette mode:
040045             0086   KEY_TAB: equ -97 ; switch to palette mode
040045             0087   KEY_1:	equ -49 ; red+
040045             0088   KEY_2:	equ -50 ; green+
040045             0089   KEY_3:	equ -18 ; blue+
040045             0090   KEY_4:	equ -19 ; red-
040045             0091   KEY_5:	equ -20 ; green-
040045             0092   KEY_6:	equ -53; blue-
040045             0093   KEY_7:	equ -37 ; reset color to black
040045             0094   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0095   ; KEY_S: save palette file
040045             0096   
040045             0097   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0098   MAX_PAL_DATA_HI: equ 03h
040045             0099   MAX_PAL_DATA_LO: equ 44h
040045             0100   
040045             0101   BITLOOKUP:
040045 01 02 04 08 0102   	DB 01h,02h,04h,08h
040049 10 20 40 80 0103   	DB 10h,20h,40h,80h
04004D             0104   
04004D             0105   ;======================================================================
04004D             0106   start:
04004D F5          0107   	push af
04004E C5          0108   	push bc
04004F D5          0109   	push de
040050 DD E5       0110   	push ix
040052 FD E5       0111   	push iy
040054             0112   
040054             0113   	; set mode 8 (320x240x64)
040054             0114   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0115   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0116   
04005C             0117   	; disable logical scale coordinates system
04005C             0118   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0119   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0120   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0121   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0122   
04006C             0123   	; set text colors
04006C             0124   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0125   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0126   
040074             0127   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0128   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0129   
04007C             0130   	; set graphics pen
04007C             0131   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0132   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0133   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0134   
040088             0135   	; hide cursor
040088             0136   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0137   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0138   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0139   
040094             0140   	; store coordinates
040094 DD 21 DB 17 0141   	ld ix,x1
       04          
040099 21 00 00 00 0142   	ld hl,0
04009D DD 75 00    0143   	ld (ix+0),l
0400A0 DD 74 01    0144   	ld (ix+1),h
0400A3             0145   
0400A3 DD 21 DD 17 0146   	ld ix,y1
       04          
0400A8 21 00 00 00 0147   	ld hl,0
0400AC DD 75 00    0148   	ld (ix+0),l
0400AF DD 74 01    0149   	ld (ix+1),h
0400B2             0150   
0400B2 DD 21 DF 17 0151   	ld ix,x2
       04          
0400B7 21 3F 01 00 0152   	ld hl,319
0400BB DD 75 00    0153   	ld (ix+0),l
0400BE DD 74 01    0154   	ld (ix+1),h
0400C1             0155   
0400C1 DD 21 E1 17 0156   	ld ix,y2
       04          
0400C6 21 EF 00 00 0157   	ld hl,239
0400CA DD 75 00    0158   	ld (ix+0),l
0400CD DD 74 01    0159   	ld (ix+1),h
0400D0             0160   
0400D0             0161   	; draw the border rectangle
0400D0 CD 81 0A 04 0162   	call fn_rect
0400D4             0163   
0400D4             0164   	; locate x,y
0400D4             0165   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0166   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0167   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0168   
0400E0             0169   	; print text
0400E0 21 F2 17 04 0170   	ld hl,title
0400E4 01 00 00 00 0171   	ld bc,0
0400E8 AF          0172   	xor a
0400E9 49 DF       0173   	rst.lis $18
0400EB             0174   
0400EB             0175   	; locate x,y
0400EB             0176   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0177   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0178   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0179   
0400F7             0180   	; print text
0400F7 21 FB 17 04 0181   	ld hl,menu1
0400FB 01 00 00 00 0182   	ld bc,0
0400FF AF          0183   	xor a
040100 49 DF       0184   	rst.lis $18
040102             0185   
040102             0186   	; locate x,y
040102             0187   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0188   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0189   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0190   
04010E             0191   	; print text
04010E 21 0A 18 04 0192   	ld hl,menu2
040112 01 00 00 00 0193   	ld bc,0
040116 AF          0194   	xor a
040117 49 DF       0195   	rst.lis $18
040119             0196   
040119             0197   	; locate x,y
040119             0198   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0199   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0200   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0201   
040125             0202   	; print text
040125 21 19 18 04 0203   	ld hl,menu3
040129 01 00 00 00 0204   	ld bc,0
04012D AF          0205   	xor a
04012E 49 DF       0206   	rst.lis $18
040130             0207   
040130             0208   	; locate x,y
040130             0209   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0210   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0211   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0212   
04013C             0213   	; print text
04013C 21 2A 18 04 0214   	ld hl,menu4
040140 01 00 00 00 0215   	ld bc,0
040144 AF          0216   	xor a
040145 49 DF       0217   	rst.lis $18
040147             0218   
040147             0219   ; menu loop
040147             0220   menu_loop:
040147 21 8F FF FF 0221   	ld hl,KEY_ESCAPE
04014B CD 18 17 04 0222   	call fn_inkey
04014F FE 01       0223   	CP 1
040151 CA 5D 0A 04 0224   	jp z,exit_program
040155             0225   
040155 21 8E FF FF 0226   	ld hl,KEY_F1
040159 CD 18 17 04 0227   	call fn_inkey
04015D FE 01       0228   	CP 1
04015F CA 91 01 04 0229   	jp z,ml_menu1
040163             0230   
040163 21 8D FF FF 0231   	ld hl,KEY_F2
040167 CD 18 17 04 0232   	call fn_inkey
04016B FE 01       0233   	CP 1
04016D CA 97 01 04 0234   	jp z,ml_menu2
040171             0235   
040171 21 8C FF FF 0236   	ld hl,KEY_F3
040175 CD 18 17 04 0237   	call fn_inkey
040179 FE 01       0238   	CP 1
04017B CA 9D 01 04 0239   	jp z,ml_menu3
04017F             0240   
04017F 21 EB FF FF 0241   	ld hl,KEY_F4
040183 CD 18 17 04 0242   	call fn_inkey
040187 FE 01       0243   	CP 1
040189 CA A3 01 04 0244   	jp z,ml_menu4
04018D             0245   
04018D C3 47 01 04 0246   	jp menu_loop
040191             0247   
040191             0248   ml_menu1:
040191 3E 04       0249   	ld a,SPR44
040193 16 20       0250   	ld d,SPR44_width
040195 18 10       0251   	jr exit_menu_loop
040197             0252   
040197             0253   ml_menu2:
040197 3E 08       0254   	ld a,SPR88
040199 16 10       0255   	ld d,SPR88_width
04019B 18 0A       0256   	jr exit_menu_loop
04019D             0257   
04019D             0258   ml_menu3:
04019D 3E 10       0259   	ld a,SPR1616
04019F 16 08       0260   	ld d,SPR1616_width
0401A1 18 04       0261   	jr exit_menu_loop
0401A3             0262   
0401A3             0263   ml_menu4:
0401A3 3E 20       0264   	ld a,SPR3232
0401A5 16 04       0265   	ld d,SPR3232_width
0401A7             0266   
0401A7             0267   exit_menu_loop:
0401A7             0268   	; store edited sprite size
0401A7 21 F0 17 04 0269   	ld hl,spr_size
0401AB 77          0270   	ld (hl),a
0401AC 21 EF 17 04 0271   	ld hl,pixel_width
0401B0 72          0272   	ld (hl),d
0401B1             0273   
0401B1             0274   	; clear the text screen
0401B1             0275   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0276   
0401B5             0277   	; set colors count to max colors
0401B5 21 10 19 04 0278   	ld hl,colors_count
0401B9 3E 40       0279   	ld a,MAX_COLORS
0401BB 77          0280   	ld (hl),a
0401BC             0281   
0401BC CD 52 17 04 0282   	call fn_draw_the_palette
0401C0             0283   
0401C0             0284   	; store coordinates
0401C0 DD 21 DB 17 0285   	ld ix,x1
       04          
0401C5 21 00 00 00 0286   	ld hl,0
0401C9 DD 75 00    0287   	ld (ix+0),l
0401CC DD 74 01    0288   	ld (ix+1),h
0401CF             0289   
0401CF DD 21 DD 17 0290   	ld ix,y1
       04          
0401D4 21 0B 00 00 0291   	ld hl,11
0401D8 DD 75 00    0292   	ld (ix+0),l
0401DB DD 74 01    0293   	ld (ix+1),h
0401DE             0294   
0401DE DD 21 DF 17 0295   	ld ix,x2
       04          
0401E3 21 3F 01 00 0296   	ld hl,319
0401E7 DD 75 00    0297   	ld (ix+0),l
0401EA DD 74 01    0298   	ld (ix+1),h
0401ED             0299   
0401ED DD 21 E1 17 0300   	ld ix,y2
       04          
0401F2 21 EF 00 00 0301   	ld hl,239
0401F6 DD 75 00    0302   	ld (ix+0),l
0401F9 DD 74 01    0303   	ld (ix+1),h
0401FC             0304   
0401FC             0305   	; draw the border rectangle
0401FC CD 81 0A 04 0306   	call fn_rect
040200             0307   
040200             0308   	; store edited sprite coordinates
040200 DD 21 E3 17 0309   	ld ix,xs1
       04          
040205 FD 21 DB 17 0310   	ld iy,x1
       04          
04020A DD 6E 00    0311   	ld l,(ix+0)
04020D DD 66 01    0312   	ld h,(ix+1)
040210 FD 75 00    0313   	ld (iy+0),l
040213 FD 74 01    0314   	ld (iy+1),h
040216             0315   
040216 DD 21 E5 17 0316   	ld ix,ys1
       04          
04021B FD 21 DD 17 0317   	ld iy,y1
       04          
040220 DD 6E 00    0318   	ld l,(ix+0)
040223 DD 66 01    0319   	ld h,(ix+1)
040226 FD 75 00    0320   	ld (iy+0),l
040229 FD 74 01    0321   	ld (iy+1),h
04022C             0322   
04022C DD 21 E7 17 0323   	ld ix,xs2
       04          
040231 FD 21 DF 17 0324   	ld iy,x2
       04          
040236 DD 6E 00    0325   	ld l,(ix+0)
040239 DD 66 01    0326   	ld h,(ix+1)
04023C FD 75 00    0327   	ld (iy+0),l
04023F FD 74 01    0328   	ld (iy+1),h
040242             0329   
040242 DD 21 E9 17 0330   	ld ix,ys2
       04          
040247 FD 21 E1 17 0331   	ld iy,y2
       04          
04024C DD 6E 00    0332   	ld l,(ix+0)
04024F DD 66 01    0333   	ld h,(ix+1)
040252 FD 75 00    0334   	ld (iy+0),l
040255 FD 74 01    0335   	ld (iy+1),h
040258             0336   
040258             0337   	; draw the sprite's border rectangle
040258 CD 81 0A 04 0338   	call fn_rect
04025C             0339   
04025C             0340   	; update sprite size descriptions
04025C CD B4 16 04 0341   	call fn_show_spr_descr
040260             0342   
040260             0343   ; initialize sprite vars
040260             0344   init_sprite_vars:
040260             0345   	; initialize coordinates before drawing the sprite
040260 DD 21 EB 17 0346   	ld ix,xpix
       04          
040265 AF          0347   	xor a
040266 DD 77 00    0348   	ld (ix+0),a ; xpix = 0
040269 DD 77 01    0349   	ld (ix+1),a	; ypix = 0
04026C DD 21 F1 17 0350   	ld ix,current_pen
       04          
040271 3E 0F       0351   	ld a,COLOR_WHITE
040273 DD 77 00    0352   	ld (ix+0),a ; current pen -> white
040276             0353   
040276             0354   	; set vars
040276 21 16 19 04 0355   	ld hl,current_frame
04027A AF          0356   	xor a
04027B 77          0357   	ld (hl),a
04027C 3C          0358   	inc a
04027D 21 17 19 04 0359   	ld hl,frames_count
040281 77          0360   	ld (hl),a
040282             0361   
040282             0362   	; fill buffers with zeros
040282 01 00 20 00 0363   	ld bc,BUFFER_SIZE
040286 21 1F 19 04 0364   	ld hl,sprite_buffer
04028A             0365   
04028A             0366   isv_fill_loop:
04028A AF          0367   	xor a
04028B 77          0368   	ld (hl),a
04028C 0B          0369   	dec bc
04028D 23          0370   	inc hl
04028E 78          0371   	ld a,b
04028F B1          0372   	or c
040290 FE 00       0373   	cp 0
040292 20 F6       0374   	jr nz,isv_fill_loop
040294             0375   
040294             0376   ; draw the pixel with a border
040294 CD 0E 0C 04 0377   	call fn_draw_pixel_with_border
040298             0378   
040298             0379   ; draw sprite loop
040298             0380   draw_sprite_loop:
040298 21 9D FF FF 0381   	ld hl,KEY_SPACE
04029C CD 18 17 04 0382   	call fn_inkey
0402A0 FE 01       0383   	cp 1
0402A2 CC B4 03 04 0384   	call z,dsl_set_pen
0402A6             0385   
0402A6 21 C6 FF FF 0386   	ld hl,KEY_UP
0402AA CD 18 17 04 0387   	call fn_inkey
0402AE FE 01       0388   	cp 1
0402B0 CC D9 03 04 0389   	call z,dsl_up
0402B4             0390   
0402B4 21 D6 FF FF 0391   	ld hl,KEY_DOWN
0402B8 CD 18 17 04 0392   	call fn_inkey
0402BC FE 01       0393   	cp 1
0402BE CC 00 04 04 0394   	call z,dsl_down
0402C2             0395   
0402C2 21 E6 FF FF 0396   	ld hl,KEY_LEFT
0402C6 CD 18 17 04 0397   	call fn_inkey
0402CA FE 01       0398   	cp 1
0402CC CC 2C 04 04 0399   	call z,dsl_left
0402D0             0400   
0402D0 21 86 FF FF 0401   	ld hl,KEY_RIGHT
0402D4 CD 18 17 04 0402   	call fn_inkey
0402D8 FE 01       0403   	cp 1
0402DA CC 53 04 04 0404   	call z,dsl_right
0402DE             0405   
0402DE 21 A6 FF FF 0406   	ld hl,KEY_DELETE
0402E2 CD 18 17 04 0407   	call fn_inkey
0402E6 FE 01       0408   	cp 1
0402E8 CC C8 03 04 0409   	call z,dsl_reset_pen
0402EC             0410   
0402EC 21 9F FF FF 0411   	ld hl,KEY_TAB
0402F0 CD 18 17 04 0412   	call fn_inkey
0402F4 FE 01       0413   	cp 1
0402F6 CA 27 09 04 0414   	jp z,dsl_palette_tool
0402FA             0415   
0402FA 21 AA FF FF 0416   	ld hl,KEY_N
0402FE CD 18 17 04 0417   	call fn_inkey
040302 FE 01       0418   	cp 1
040304 CC CE 04 04 0419   	call z,dsl_add_frame
040308             0420   
040308 21 AD FF FF 0421   	ld hl,KEY_C
04030C CD 18 17 04 0422   	call fn_inkey
040310 FE 01       0423   	cp 1
040312 CC 65 05 04 0424   	call z,dsl_add_and_copy_frame
040316             0425   
040316 21 D0 FF FF 0426   	ld hl,KEY_BACKSPACE
04031A CD 18 17 04 0427   	call fn_inkey
04031E FE 01       0428   	cp 1
040320 CC CC 05 04 0429   	call z,dsl_delete_frame
040324             0430   
040324 21 C0 FF FF 0431   	ld hl,KEY_PGUP
040328 CD 18 17 04 0432   	call fn_inkey
04032C FE 01       0433   	cp 1
04032E CC C5 06 04 0434   	call z,dsl_next_frame
040332             0435   
040332 21 B1 FF FF 0436   	ld hl,KEY_PGDOWN
040336 CD 18 17 04 0437   	call fn_inkey
04033A FE 01       0438   	cp 1
04033C CC A6 06 04 0439   	call z,dsl_previous_frame
040340             0440   
040340 21 A9 FF FF 0441   	ld hl,KEY_L
040344 CD 18 17 04 0442   	call fn_inkey
040348 FE 01       0443   	cp 1
04034A CC 7F 04 04 0444   	call z,dsl_load_sprite
04034E             0445   
04034E 21 AE FF FF 0446   	ld hl,KEY_S
040352 CD 18 17 04 0447   	call fn_inkey
040356 FE 01       0448   	cp 1
040358 CC 9C 04 04 0449   	call z,dsl_save_sprite
04035C             0450   
04035C 21 DD FF FF 0451   	ld hl,KEY_E
040360 CD 18 17 04 0452   	call fn_inkey
040364 FE 01       0453   	cp 1
040366 CC B5 04 04 0454   	call z,dsl_export_sprite
04036A             0455   
04036A 21 CC FF FF 0456   	ld hl,KEY_R
04036E CD 18 17 04 0457   	call fn_inkey
040372 FE 01       0458   	cp 1
040374 CC EB 06 04 0459   	call z,dsl_rotate_frame
040378             0460   
040378 21 BC FF FF 0461   	ld hl,KEY_F
04037C CD 18 17 04 0462   	call fn_inkey
040380 FE 01       0463   	cp 1
040382 CC A0 07 04 0464   	call z,dsl_flip_frame
040386             0465   
040386 21 9A FF FF 0466   	ld hl,KEY_M
04038A CD 18 17 04 0467   	call fn_inkey
04038E FE 01       0468   	cp 1
040390 CC 07 08 04 0469   	call z,dsl_mirror_frame
040394             0470   
040394 21 B6 FF FF 0471   	ld hl,KEY_RETURN
040398 CD 18 17 04 0472   	call fn_inkey
04039C FE 01       0473   	cp 1
04039E CC 87 08 04 0474   	call z,dsl_flood_fill
0403A2             0475   
0403A2 21 8F FF FF 0476   	ld hl,KEY_ESCAPE
0403A6 CD 18 17 04 0477   	call fn_inkey
0403AA FE 01       0478   	cp 1
0403AC CA 5D 0A 04 0479   	jp z,exit_program
0403B0             0480   
0403B0 C3 98 02 04 0481   	jp draw_sprite_loop
0403B4             0482   
0403B4             0483   ; set the pen of the current pixel
0403B4             0484   dsl_set_pen:
0403B4 CD 38 0C 04 0485   	call fn_get_pixel_color
0403B8 21 F1 17 04 0486   	ld hl,current_pen
0403BC BE          0487   	cp (hl)
0403BD C8          0488   	ret z
0403BE 7E          0489   	ld a,(hl)
0403BF CD 7A 0C 04 0490   	call fn_set_pixel_color
0403C3 CD 0E 0C 04 0491   	call fn_draw_pixel_with_border
0403C7 C9          0492   	ret
0403C8             0493   
0403C8             0494   ; reset the pen of the current pixel
0403C8             0495   dsl_reset_pen:
0403C8 CD 38 0C 04 0496   	call fn_get_pixel_color
0403CC FE 00       0497   	cp 0
0403CE C8          0498   	ret z
0403CF AF          0499   	xor a
0403D0 CD 7A 0C 04 0500   	call fn_set_pixel_color
0403D4 CD 0E 0C 04 0501   	call fn_draw_pixel_with_border
0403D8 C9          0502   	ret
0403D9             0503   
0403D9             0504   ; move pixel up
0403D9             0505   dsl_up:
0403D9 21 EC 17 04 0506   	ld hl,ypix
0403DD 7E          0507   	ld a,(hl)
0403DE FE 00       0508   	cp 0
0403E0 C8          0509   	ret z
0403E1             0510   
0403E1 21 9D FF FF 0511   	ld hl,KEY_SPACE
0403E5 CD 18 17 04 0512   	call fn_inkey
0403E9 FE 01       0513   	cp 1
0403EB CC B4 03 04 0514   	call z,dsl_set_pen
0403EF             0515   
0403EF CD 22 0C 04 0516   	call fn_draw_pixel_without_border
0403F3 CD BE 0C 04 0517   	call fn_move_up
0403F7 CD 0E 0C 04 0518   	call fn_draw_pixel_with_border
0403FB CD 93 16 04 0519   	call fn_slowdown
0403FF C9          0520   	ret
040400             0521   
040400             0522   ; move pixel down
040400             0523   dsl_down:
040400 21 F0 17 04 0524   	ld hl,spr_size
040404 56          0525   	ld d,(hl)
040405 15          0526   	dec d
040406             0527   
040406 21 EC 17 04 0528   	ld hl,ypix
04040A 7E          0529   	ld a,(hl)
04040B BA          0530   	cp d
04040C C8          0531   	ret z
04040D             0532   
04040D 21 9D FF FF 0533   	ld hl,KEY_SPACE
040411 CD 18 17 04 0534   	call fn_inkey
040415 FE 01       0535   	cp 1
040417 CC B4 03 04 0536   	call z,dsl_set_pen
04041B             0537   
04041B CD 22 0C 04 0538   	call fn_draw_pixel_without_border
04041F CD C4 0C 04 0539   	call fn_move_down
040423 CD 0E 0C 04 0540   	call fn_draw_pixel_with_border
040427 CD 93 16 04 0541   	call fn_slowdown
04042B C9          0542   	ret
04042C             0543   
04042C             0544   ; move pixel left
04042C             0545   dsl_left:
04042C 21 EB 17 04 0546   	ld hl,xpix
040430 7E          0547   	ld a,(hl)
040431 FE 00       0548   	cp 0
040433 C8          0549   	ret z
040434             0550   
040434 21 9D FF FF 0551   	ld hl,KEY_SPACE
040438 CD 18 17 04 0552   	call fn_inkey
04043C FE 01       0553   	cp 1
04043E CC B4 03 04 0554   	call z,dsl_set_pen
040442             0555   
040442 CD 22 0C 04 0556   	call fn_draw_pixel_without_border
040446 CD CA 0C 04 0557   	call fn_move_left
04044A CD 0E 0C 04 0558   	call fn_draw_pixel_with_border
04044E CD 93 16 04 0559   	call fn_slowdown
040452 C9          0560   	ret
040453             0561   
040453             0562   ; move pixel right
040453             0563   dsl_right:
040453 21 F0 17 04 0564   	ld hl,spr_size
040457 56          0565   	ld d,(hl)
040458 15          0566   	dec d
040459             0567   
040459 21 EB 17 04 0568   	ld hl,xpix
04045D 7E          0569   	ld a,(hl)
04045E BA          0570   	cp d
04045F C8          0571   	ret z
040460             0572   
040460 21 9D FF FF 0573   	ld hl,KEY_SPACE
040464 CD 18 17 04 0574   	call fn_inkey
040468 FE 01       0575   	cp 1
04046A CC B4 03 04 0576   	call z,dsl_set_pen
04046E             0577   
04046E CD 22 0C 04 0578   	call fn_draw_pixel_without_border
040472 CD D0 0C 04 0579   	call fn_move_right
040476 CD 0E 0C 04 0580   	call fn_draw_pixel_with_border
04047A CD 93 16 04 0581   	call fn_slowdown
04047E C9          0582   	ret
04047F             0583   
04047F             0584   ; load a sprite
04047F             0585   dsl_load_sprite:
04047F 21 A9 FF FF 0586   	ld hl,KEY_L
040483 CD 18 17 04 0587   	call fn_inkey
040487 FE 00       0588   	cp 0
040489 20 F4       0589   	jr nz,dsl_load_sprite
04048B             0590   
04048B CD 22 0C 04 0591   	call fn_draw_pixel_without_border
04048F CD AD 11 04 0592   	call fn_load_sprite
040493 CD 0A 16 04 0593   	call fn_refresh_sprite
040497 CD 0E 0C 04 0594   	call fn_draw_pixel_with_border
04049B C9          0595   	ret
04049C             0596   
04049C             0597   ; save a sprite
04049C             0598   dsl_save_sprite:
04049C 21 AE FF FF 0599   	ld hl,KEY_S
0404A0 CD 18 17 04 0600   	call fn_inkey
0404A4 FE 00       0601   	cp 0
0404A6 20 F4       0602   	jr nz,dsl_save_sprite
0404A8             0603   
0404A8 CD 22 0C 04 0604   	call fn_draw_pixel_without_border
0404AC CD DC 12 04 0605   	call fn_save_sprite
0404B0 CD 0A 16 04 0606   	call fn_refresh_sprite
0404B4 C9          0607   	ret
0404B5             0608   
0404B5             0609   dsl_export_sprite:
0404B5 21 DD FF FF 0610   	ld hl,KEY_E
0404B9 CD 18 17 04 0611   	call fn_inkey
0404BD FE 00       0612   	cp 0
0404BF 20 F4       0613   	jr nz,dsl_export_sprite
0404C1             0614   
0404C1 CD 22 0C 04 0615   	call fn_draw_pixel_without_border
0404C5 CD E7 13 04 0616   	call fn_export_sprite
0404C9 CD 0A 16 04 0617   	call fn_refresh_sprite
0404CD C9          0618   	ret
0404CE             0619   
0404CE             0620   
0404CE             0621   ; add a frame to the animation
0404CE             0622   dsl_add_frame:
0404CE 21 AA FF FF 0623   	ld hl,KEY_N
0404D2 CD 18 17 04 0624   	call fn_inkey
0404D6 FE 00       0625   	cp 0
0404D8 20 F4       0626   	jr nz,dsl_add_frame
0404DA             0627   
0404DA             0628   	; frames limit reached ? exit
0404DA 21 17 19 04 0629   	ld hl,frames_count
0404DE 7E          0630   	ld a,(hl)
0404DF FE 08       0631   	cp MAX_FRAMES
0404E1 C8          0632   	ret z
0404E2             0633   
0404E2             0634   	; get the number of frames to copy
0404E2 21 17 19 04 0635   	ld hl,frames_count
0404E6 7E          0636   	ld a,(hl)
0404E7 21 16 19 04 0637   	ld hl,current_frame
0404EB 46          0638   	ld b,(hl)
0404EC 90          0639   	sub b
0404ED 3D          0640   	dec a
0404EE             0641   
0404EE             0642   	; get sprsize² (length of a sprite, in bytes)
0404EE 21 F0 17 04 0643   	ld hl,spr_size
0404F2 11 00 00 00 0644   	ld de,$000000
0404F6 5E          0645   	ld e,(hl)
0404F7 56          0646   	ld d,(hl)
0404F8 ED 5C       0647   	mlt de ; DE = sprsize²
0404FA             0648   
0404FA             0649   	; prepare for the case we goto af_zap...
0404FA 21 1F 19 04 0650   	ld hl,sprite_buffer
0404FE             0651   
0404FE F5          0652   	push af
0404FF E5          0653   	push hl
040500 21 16 19 04 0654   	ld hl,current_frame
040504 7E          0655   	ld a,(hl)
040505 3C          0656   	inc a
040506 47          0657   	ld b,a
040507 E1          0658   	pop hl
040508 F1          0659   	pop af
040509             0660   
040509             0661   af_loop0:
040509 19          0662   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050A 10 FD       0663   	djnz af_loop0
04050C             0664   
04050C E5          0665   	push hl ; store HL = sprite buffer + sprsize²
04050D FE 00       0666   	cp 0
04050F CA 37 05 04 0667   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040513 E1          0668   	pop hl ; HL unused in this case
040514             0669   
040514 21 00 00 00 0670   	ld hl,$000000 ; HL is 0 to store the result
040518 47          0671   	ld b,a ; B = frames to copy
040519             0672   
040519             0673   ; multiply number of frames to copy by sprsize²
040519             0674   af_loop1:
040519 19          0675   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051A 10 FD       0676   	djnz af_loop1
04051C             0677   
04051C E5          0678   	push hl
04051D C1          0679   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04051E             0680   
04051E 21 16 19 04 0681   	ld hl,current_frame
040522 7E          0682   	ld a,(hl)
040523 3C          0683   	inc a
040524 21 1F 19 04 0684   	ld hl,sprite_buffer
040528             0685   
040528 C5          0686   	push bc
040529 47          0687   	ld b,a
04052A             0688   
04052A             0689   af_loop2:
04052A 19          0690   	add hl,de ; HL = sprite buffer + length to copy
04052B 10 FD       0691   	djnz af_loop2
04052D             0692   
04052D C1          0693   	pop bc
04052E             0694   
04052E E5          0695   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04052F             0696   
04052F 09          0697   	add hl,bc
040530 2B          0698   	dec hl ; HL = end address to copy to end target address
040531             0699   
040531 E5          0700   	push hl
040532 19          0701   	add hl,de
040533 EB          0702   	ex de,hl ; DE = end target address
040534 E1          0703   	pop hl
040535             0704   
040535 ED B8       0705   	lddr
040537             0706   
040537             0707   af_zap:
040537             0708   	; multiply number of frames to copy by sprsize²
040537 21 F0 17 04 0709   	ld hl,spr_size
04053B 01 00 00 00 0710   	ld bc,$000000
04053F 4E          0711   	ld c,(hl)
040540 46          0712   	ld b,(hl)
040541 ED 4C       0713   	mlt bc ; BC = sprsize²
040543             0714   
040543 E1          0715   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040544             0716   
040544             0717   ; fill frame with 0 color
040544             0718   af_loop3:
040544 AF          0719   	xor a
040545 77          0720   	ld (hl),a
040546 23          0721   	inc hl
040547 0B          0722   	dec bc
040548 78          0723   	ld a,b
040549 B1          0724   	or c
04054A FE 00       0725   	cp 0
04054C 20 F6       0726   	jr nz,af_loop3
04054E             0727   
04054E             0728   	; increment the frames count and the current frame values
04054E 21 17 19 04 0729   	ld hl,frames_count
040552 34          0730   	inc (hl)
040553 21 16 19 04 0731   	ld hl,current_frame
040557 34          0732   	inc (hl)
040558             0733   
040558 CD 4A 16 04 0734   	call fn_change_frame
04055C CD 6F 16 04 0735   	call fn_change_frames_count
040560 CD 0A 16 04 0736   	call fn_refresh_sprite
040564 C9          0737   	ret
040565             0738   
040565             0739   ; add a copy of the current frame to the animation
040565             0740   dsl_add_and_copy_frame:
040565 21 AD FF FF 0741   	ld hl,KEY_C
040569 CD 18 17 04 0742   	call fn_inkey
04056D FE 00       0743   	cp 0
04056F 20 F4       0744   	jr nz,dsl_add_and_copy_frame
040571             0745   
040571             0746   	; frames limit reached ? exit
040571 21 17 19 04 0747   	ld hl,frames_count
040575 7E          0748   	ld a,(hl)
040576 FE 08       0749   	cp MAX_FRAMES
040578 C8          0750   	ret z
040579             0751   
040579             0752   	; get the number of frames to copy
040579 21 17 19 04 0753   	ld hl,frames_count
04057D 7E          0754   	ld a,(hl)
04057E 21 16 19 04 0755   	ld hl,current_frame
040582 46          0756   	ld b,(hl)
040583 90          0757   	sub b
040584             0758   
040584             0759   	; get sprsize² (length of a sprite, in bytes)
040584 21 F0 17 04 0760   	ld hl,spr_size
040588 11 00 00 00 0761   	ld de,$000000
04058C 5E          0762   	ld e,(hl)
04058D 56          0763   	ld d,(hl)
04058E ED 5C       0764   	mlt de ; DE = sprsize²
040590             0765   
040590 21 00 00 00 0766   	ld hl,$000000 ; HL is 0 to store the result
040594 47          0767   	ld b,a ; B = frames to copy
040595             0768   
040595             0769   ; multiply number of frames to copy by sprsize²
040595             0770   aacf_loop1:
040595 19          0771   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040596 10 FD       0772   	djnz aacf_loop1
040598             0773   
040598 E5          0774   	push hl
040599 C1          0775   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059A             0776   
04059A 21 16 19 04 0777   	ld hl,current_frame
04059E 7E          0778   	ld a,(hl)
04059F 21 1F 19 04 0779   	ld hl,sprite_buffer
0405A3 FE 00       0780   	cp 0
0405A5 28 06       0781   	jr z,aacf_loop_end2
0405A7             0782   
0405A7 C5          0783   	push bc
0405A8 47          0784   	ld b,a
0405A9             0785   
0405A9             0786   aacf_loop2:
0405A9 19          0787   	add hl,de ; HL = sprite buffer + length to copy
0405AA 10 FD       0788   	djnz aacf_loop2
0405AC             0789   
0405AC C1          0790   	pop bc
0405AD             0791   
0405AD             0792   aacf_loop_end2:
0405AD 09          0793   	add hl,bc
0405AE 2B          0794   	dec hl ; HL = end address to copy to end target address
0405AF             0795   
0405AF E5          0796   	push hl
0405B0 19          0797   	add hl,de
0405B1 EB          0798   	ex de,hl ; DE = end target address
0405B2 E1          0799   	pop hl
0405B3             0800   
0405B3 ED B8       0801   	lddr
0405B5             0802   
0405B5             0803   	; increment the frames count and the current frame values
0405B5 21 17 19 04 0804   	ld hl,frames_count
0405B9 34          0805   	inc (hl)
0405BA 21 16 19 04 0806   	ld hl,current_frame
0405BE 34          0807   	inc (hl)
0405BF             0808   
0405BF CD 4A 16 04 0809   	call fn_change_frame
0405C3 CD 6F 16 04 0810   	call fn_change_frames_count
0405C7 CD 0A 16 04 0811   	call fn_refresh_sprite
0405CB C9          0812   	ret
0405CC             0813   
0405CC             0814   ; delete last frame from animation
0405CC             0815   dsl_delete_frame:
0405CC 21 D0 FF FF 0816   	ld hl,KEY_BACKSPACE
0405D0 CD 18 17 04 0817   	call fn_inkey
0405D4 FE 00       0818   	cp 0
0405D6 20 F4       0819   	jr nz,dsl_delete_frame
0405D8             0820   
0405D8             0821   	; delete current selected frame
0405D8 21 F0 17 04 0822   	ld hl,spr_size
0405DC 01 00 00 00 0823   	ld bc,$000000
0405E0 4E          0824   	ld c,(hl)
0405E1 46          0825   	ld b,(hl)
0405E2 ED 4C       0826   	mlt bc ; BC = sprsize²
0405E4 21 16 19 04 0827   	ld hl,current_frame
0405E8 7E          0828   	ld a,(hl) ; A = current frame
0405E9 21 1F 19 04 0829   	ld hl,sprite_buffer ; HL = sprite buffer
0405ED C5          0830   	push bc
0405EE FE 00       0831   	cp 0
0405F0 28 06       0832   	jr z,df_loop2
0405F2             0833   
0405F2             0834   df_loop1:
0405F2 09          0835   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F3 3D          0836   	dec a
0405F4 FE 00       0837   	cp 0
0405F6 20 FA       0838   	jr nz,df_loop1
0405F8             0839   
0405F8             0840   ; clear the current frame
0405F8             0841   df_loop2:
0405F8 AF          0842   	xor a
0405F9 77          0843   	ld (hl),a
0405FA 23          0844   	inc hl
0405FB 0B          0845   	dec bc
0405FC 78          0846   	ld a,b
0405FD B1          0847   	or c
0405FE FE 00       0848   	cp 0
040600 20 F6       0849   	jr nz,df_loop2
040602             0850   
040602             0851   	; current frame + 1 = frames count ?
040602 E5          0852   	push hl
040603 21 16 19 04 0853   	ld hl,current_frame
040607 5E          0854   	ld e,(hl)
040608 1C          0855   	inc e
040609 21 17 19 04 0856   	ld hl,frames_count
04060D 7E          0857   	ld a,(hl)
04060E BB          0858   	cp e
04060F E1          0859   	pop hl
040610 C1          0860   	pop bc
040611 CA 8A 06 04 0861   	jp z,df_exit
040615             0862   
040615 11 17 19 04 0863   	ld de,frames_count
040619 1A          0864   	ld a,(de) ; A = frames count
04061A E5          0865   	push hl
04061B 21 16 19 04 0866   	ld hl,current_frame
04061F 5E          0867   	ld e,(hl) ; E = current frame
040620 E1          0868   	pop hl
040621 93          0869   	sub e
040622 3D          0870   	dec a ; A = number of frames to copy back
040623             0871   
040623 EB          0872   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040624 21 00 00 00 0873   	ld hl,$000000
040628 FE 00       0874   	cp 0 ; 0 frames to copy ?
04062A 28 06       0875   	jr z,df_exit_loop3
04062C             0876   
04062C             0877   df_loop3:
04062C 09          0878   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04062D 3D          0879   	dec a
04062E FE 00       0880   	cp 0
040630 20 FA       0881   	jr nz,df_loop3
040632             0882   
040632             0883   df_exit_loop3:
040632 E5          0884   	push hl
040633 C1          0885   	pop bc ; BC = total length of area to copy
040634 D5          0886   	push de
040635 E1          0887   	pop hl ; HL = DE = start of area to copy
040636             0888   
040636 C5          0889   	push bc
040637 D5          0890   	push de
040638 E5          0891   	push hl
040639 21 F0 17 04 0892   	ld hl,spr_size
04063D 11 00 00 00 0893   	ld de,$000000
040641 5E          0894   	ld e,(hl)
040642 56          0895   	ld d,(hl)
040643 ED 5C       0896   	mlt de ; DE = one sprite frame length
040645 E1          0897   	pop hl
040646 B7          0898   	or a
040647 ED 52       0899   	sbc hl,de ; HL = target area to copy
040649 D1          0900   	pop de
04064A EB          0901   	ex de,hl ; DE = target, HL = start
04064B C1          0902   	pop bc
04064C ED B0       0903   	ldir
04064E             0904   
04064E 21 F0 17 04 0905   	ld hl,spr_size
040652 01 00 00 00 0906   	ld bc,$000000
040656 4E          0907   	ld c,(hl)
040657 46          0908   	ld b,(hl)
040658 ED 4C       0909   	mlt bc ; DE = one sprite frame length
04065A             0910   
04065A             0911   	; delete last frame data
04065A 21 17 19 04 0912   	ld hl,frames_count
04065E 7E          0913   	ld a,(hl) ; A =frames count
04065F 3D          0914   	dec a ; A = last frame
040660 21 1F 19 04 0915   	ld hl,sprite_buffer ; HL = sprite buffer
040664 FE 00       0916   	cp 0
040666 28 06       0917   	jr z,df_loop5
040668             0918   
040668             0919   df_loop4:
040668 09          0920   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
040669 3D          0921   	dec a
04066A FE 00       0922   	cp 0
04066C 20 FA       0923   	jr nz,df_loop4
04066E             0924   
04066E             0925   ; clear the current frame
04066E             0926   df_loop5:
04066E AF          0927   	xor a
04066F 77          0928   	ld (hl),a
040670 23          0929   	inc hl
040671 0B          0930   	dec bc
040672 78          0931   	ld a,b
040673 B1          0932   	or c
040674 FE 00       0933   	cp 0
040676 20 F6       0934   	jr nz,df_loop5
040678             0935   
040678             0936   	; decrement frames count
040678 21 17 19 04 0937   	ld hl,frames_count
04067C 35          0938   	dec (hl)
04067D             0939   
04067D CD 4A 16 04 0940   	call fn_change_frame
040681 CD 6F 16 04 0941   	call fn_change_frames_count
040685 CD 0A 16 04 0942   	call fn_refresh_sprite
040689 C9          0943   	ret
04068A             0944   
04068A             0945   df_exit:
04068A 21 17 19 04 0946   	ld hl,frames_count
04068E 7E          0947   	ld a,(hl)
04068F FE 01       0948   	cp 1
040691 28 06       0949   	jr z,df_exit_end
040693 35          0950   	dec (hl)
040694 21 16 19 04 0951   	ld hl,current_frame
040698 35          0952   	dec (hl)
040699             0953   
040699             0954   df_exit_end:
040699 CD 4A 16 04 0955   	call fn_change_frame
04069D CD 6F 16 04 0956   	call fn_change_frames_count
0406A1 CD 0A 16 04 0957   	call fn_refresh_sprite
0406A5 C9          0958   	ret
0406A6             0959   
0406A6             0960   ; goto previous frame
0406A6             0961   dsl_previous_frame:
0406A6 21 B1 FF FF 0962   	ld hl,KEY_PGDOWN
0406AA CD 18 17 04 0963   	call fn_inkey
0406AE FE 00       0964   	cp 0
0406B0 20 F4       0965   	jr nz,dsl_previous_frame
0406B2             0966   
0406B2 21 16 19 04 0967   	ld hl,current_frame
0406B6 7E          0968   	ld a,(hl)
0406B7 FE 00       0969   	cp 0
0406B9 C8          0970   	ret z
0406BA             0971   
0406BA 3D          0972   	dec a
0406BB 77          0973   	ld (hl),a
0406BC CD 4A 16 04 0974   	call fn_change_frame
0406C0 CD 0A 16 04 0975   	call fn_refresh_sprite
0406C4 C9          0976   	ret
0406C5             0977   
0406C5             0978   ; goto next frame
0406C5             0979   dsl_next_frame:
0406C5 21 C0 FF FF 0980   	ld hl,KEY_PGUP
0406C9 CD 18 17 04 0981   	call fn_inkey
0406CD FE 00       0982   	cp 0
0406CF 20 F4       0983   	jr nz,dsl_next_frame
0406D1             0984   
0406D1 21 16 19 04 0985   	ld hl,current_frame
0406D5 7E          0986   	ld a,(hl)
0406D6 3C          0987   	inc a
0406D7 21 17 19 04 0988   	ld hl,frames_count
0406DB BE          0989   	cp (hl)
0406DC C8          0990   	ret z
0406DD             0991   
0406DD 21 16 19 04 0992   	ld hl,current_frame
0406E1 77          0993   	ld (hl),a
0406E2 CD 4A 16 04 0994   	call fn_change_frame
0406E6 CD 0A 16 04 0995   	call fn_refresh_sprite
0406EA C9          0996   	ret
0406EB             0997   
0406EB             0998   ; rotate a frame 90° clockwise
0406EB             0999   dsl_rotate_frame:
0406EB 21 CC FF FF 1000   	ld hl,KEY_R
0406EF CD 18 17 04 1001   	call fn_inkey
0406F3 FE 00       1002   	cp 0
0406F5 20 F4       1003   	jr nz,dsl_rotate_frame
0406F7             1004   
0406F7             1005   	; find HL as start of the first frame (buffer)
0406F7 21 F0 17 04 1006   	ld hl,spr_size
0406FB 01 00 00 00 1007   	ld bc,$000000
0406FF 11 00 00 00 1008   	ld de,$000000
040703 5E          1009   	ld e,(hl)
040704 56          1010   	ld d,(hl)
040705 4B          1011   	ld c,e
040706 ED 5C       1012   	mlt de ; DE = sprite length in bytes
040708 21 16 19 04 1013   	ld hl,current_frame
04070C 7E          1014   	ld a,(hl) ; A = current frame
04070D 21 1F 19 04 1015   	ld hl,sprite_buffer
040711 FE 00       1016   	cp 0
040713 28 04       1017   	jr z,rf_noloop1
040715 47          1018   	ld b,a
040716             1019   
040716             1020   rf_loop1:
040716 19          1021   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040717 10 FD       1022   	djnz rf_loop1
040719             1023   
040719             1024   rf_noloop1:
040719 C5          1025   	push bc
04071A E5          1026   	push hl
04071B             1027   
04071B             1028   	; copy current frame to swap sprite buffer
04071B 11 8B 3C 04 1029   	ld de,swap_sprite_buffer
04071F 41          1030   	ld b,c
040720 ED 4C       1031   	mlt bc
040722 ED B0       1032   	ldir
040724             1033   
040724 FD E1       1034   	pop iy ; IY: destination
040726 C1          1035   	pop bc
040727             1036   
040727 79          1037   	ld a,c
040728 01 00 00 00 1038   	ld bc,$000000
04072C 4F          1039   	ld c,a ; BC = sprite size
04072D             1040   
04072D             1041   	; turn and copy swap sprite buffer frame to sprite buffer
04072D DD 21 8B 3C 1042   	ld ix,swap_sprite_buffer ; IX: source
       04          
040732 11 00 00 00 1043   	ld de,0 ; x
040736 21 00 00 00 1044   	ld hl,0 ; y
04073A             1045   
04073A             1046   rf_loop2:
04073A DD E5       1047   	push ix
04073C FD E5       1048   	push iy
04073E             1049   
04073E D5          1050   	push de
04073F E5          1051   	push hl
040740             1052   
040740             1053   	; add x
040740 DD 19       1054   	add ix,de
040742             1055   
040742             1056   	; add y * width
040742 7C          1057   	ld a,h
040743 B5          1058   	or l
040744 FE 00       1059   	cp 0
040746 28 09       1060   	jr z,rf_done1
040748             1061   rf_loop3:
040748 DD 09       1062   	add ix,bc
04074A 2B          1063   	dec hl
04074B 7C          1064   	ld a,h
04074C B5          1065   	or l
04074D FE 00       1066   	cp 0
04074F 20 F7       1067   	jr nz,rf_loop3
040751             1068   
040751             1069   rf_done1:
040751             1070   	; found the pixel value
040751 DD 7E 00    1071   	ld a,(ix+0)
040754             1072   
040754 E1          1073   	pop hl
040755 D1          1074   	pop de
040756 D5          1075   	push de
040757 E5          1076   	push hl
040758             1077   
040758             1078   	; add y
040758 EB          1079   	ex de,hl
040759 FD 09       1080   	add iy,bc
04075B B7          1081   	or a
04075C E5          1082   	push hl
04075D FD E5       1083   	push iy
04075F E1          1084   	pop hl
040760 ED 52       1085   	sbc hl,de
040762 E5          1086   	push hl
040763 FD E1       1087   	pop iy
040765 FD 2B       1088   	dec iy
040767 E1          1089   	pop hl
040768 EB          1090   	ex de,hl
040769             1091   
040769             1092   	; add x * width
040769 F5          1093   	push af
04076A 7A          1094   	ld a,d
04076B B3          1095   	or e
04076C FE 00       1096   	cp 0
04076E 28 09       1097   	jr z,rf_done2
040770             1098   rf_loop5:
040770 FD 09       1099   	add iy,bc
040772 1B          1100   	dec de
040773 7A          1101   	ld a,d
040774 B3          1102   	or e
040775 FE 00       1103   	cp 0
040777 20 F7       1104   	jr nz,rf_loop5
040779             1105   
040779             1106   rf_done2:
040779 F1          1107   	pop af
04077A             1108   
04077A             1109   	; store the pixel value
04077A FD 77 00    1110   	ld (iy+0),a
04077D             1111   
04077D E1          1112   	pop hl
04077E D1          1113   	pop de
04077F             1114   
04077F FD E1       1115   	pop iy
040781 DD E1       1116   	pop ix
040783             1117   
040783 13          1118   	inc de
040784 EB          1119   	ex de,hl
040785 B7          1120   	or a
040786 ED 42       1121   	sbc hl,bc
040788 09          1122   	add hl,bc
040789 EB          1123   	ex de,hl
04078A DA 3A 07 04 1124   	jp c,rf_loop2
04078E             1125   
04078E 11 00 00 00 1126   	ld de,0
040792 23          1127   	inc hl
040793 B7          1128   	or a
040794 ED 42       1129   	sbc hl,bc
040796 09          1130   	add hl,bc
040797 DA 3A 07 04 1131   	jp c,rf_loop2
04079B             1132   
04079B CD 0A 16 04 1133   	call fn_refresh_sprite
04079F C9          1134   	ret
0407A0             1135   
0407A0             1136   ; flip frame horizontally
0407A0             1137   dsl_flip_frame:
0407A0 21 BC FF FF 1138   	ld hl,KEY_F
0407A4 CD 18 17 04 1139   	call fn_inkey
0407A8 FE 00       1140   	cp 0
0407AA 20 F4       1141   	jr nz,dsl_flip_frame
0407AC             1142   
0407AC 21 F0 17 04 1143   	ld hl,spr_size
0407B0 11 00 00 00 1144   	ld de,$000000
0407B4 5E          1145   	ld e,(hl)
0407B5 56          1146   	ld d,(hl)
0407B6 4B          1147   	ld c,e
0407B7 ED 5C       1148   	mlt de ; DE = sprite length in bytes
0407B9 21 16 19 04 1149   	ld hl,current_frame
0407BD 7E          1150   	ld a,(hl) ; A = current frame
0407BE 21 1F 19 04 1151   	ld hl,sprite_buffer
0407C2 FE 00       1152   	cp 0
0407C4 28 04       1153   	jr z,ff_noloop1
0407C6 47          1154   	ld b,a
0407C7             1155   
0407C7             1156   ff_loop1:
0407C7 19          1157   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407C8 10 FD       1158   	djnz ff_loop1
0407CA             1159   
0407CA             1160   ff_noloop1:
0407CA 41          1161   	ld b,c ; B = sprite height
0407CB 11 00 00 00 1162   	ld de,$000000
0407CF 59          1163   	ld e,c ; DE = sprite width
0407D0 79          1164   	ld a,c ; A = sprite width
0407D1 CB 3F       1165   	srl a ; A = sprite height / 2
0407D3             1166   
0407D3 E5          1167   	push hl
0407D4 DD E1       1168   	pop ix ; IX = frame address
0407D6 19          1169   	add hl,de ; HL = frame address + sprite width - 1
0407D7 2B          1170   	dec hl
0407D8 E5          1171   	push hl
0407D9 FD E1       1172   	pop iy ; IY = IX + sprite width - 1
0407DB             1173   
0407DB             1174   ff_loop2:
0407DB F5          1175   	push af
0407DC D5          1176   	push de
0407DD DD E5       1177   	push ix
0407DF FD E5       1178   	push iy
0407E1             1179   ff_loop3:
0407E1 DD 5E 00    1180   	ld e,(ix+0)
0407E4 FD 56 00    1181   	ld d,(iy+0)
0407E7 DD 72 00    1182   	ld (ix+0),d
0407EA FD 73 00    1183   	ld (iy+0),e
0407ED DD 23       1184   	inc ix
0407EF FD 2B       1185   	dec iy
0407F1 3D          1186   	dec a
0407F2 FE 00       1187   	cp 0
0407F4 20 EB       1188   	jr nz,ff_loop3
0407F6 FD E1       1189   	pop iy
0407F8 DD E1       1190   	pop ix
0407FA D1          1191   	pop de
0407FB F1          1192   	pop af
0407FC DD 19       1193   	add ix,de
0407FE FD 19       1194   	add iy,de
040800 10 D9       1195   	djnz ff_loop2
040802             1196   
040802 CD 0A 16 04 1197   	call fn_refresh_sprite
040806 C9          1198   	ret
040807             1199   
040807             1200   ; mirror frame vertically
040807             1201   dsl_mirror_frame:
040807 21 9A FF FF 1202   	ld hl,KEY_M
04080B CD 18 17 04 1203   	call fn_inkey
04080F FE 00       1204   	cp 0
040811 20 F4       1205   	jr nz,dsl_mirror_frame
040813             1206   
040813 21 F0 17 04 1207   	ld hl,spr_size
040817 01 00 00 00 1208   	ld bc,$000000
04081B 11 00 00 00 1209   	ld de,$000000
04081F 5E          1210   	ld e,(hl)
040820 56          1211   	ld d,(hl)
040821 4B          1212   	ld c,e
040822 ED 5C       1213   	mlt de ; DE = sprite length in bytes
040824 21 16 19 04 1214   	ld hl,current_frame
040828 7E          1215   	ld a,(hl) ; A = current frame
040829 21 1F 19 04 1216   	ld hl,sprite_buffer
04082D FE 00       1217   	cp 0
04082F 28 04       1218   	jr z,mf_noloop1
040831 47          1219   	ld b,a
040832             1220   
040832             1221   mf_loop1:
040832 19          1222   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040833 10 FD       1223   	djnz mf_loop1
040835             1224   
040835             1225   mf_noloop1:
040835 11 00 00 00 1226   	ld de,$000000
040839 59          1227   	ld e,c ; E = sprite height
04083A 79          1228   	ld a,c ; A = sprite width
04083B 41          1229   	ld b,c ; B = sprite height
04083C CB 38       1230   	srl b ; divide B by 2, so B = sprite height / 2
04083E             1231   
04083E E5          1232   	push hl
04083F DD E1       1233   	pop ix ; IX = frame address
040841 51          1234   	ld d,c
040842 15          1235   	dec d
040843 ED 5C       1236   	mlt de ; DE = sprite length - sprite width
040845 19          1237   	add hl,de ; HL = frame address + sprite length - sprite width
040846 E5          1238   	push hl
040847 FD E1       1239   	pop iy ; IY = IX + sprite length - sprite width
040849 21 00 00 00 1240   	ld hl,$000000
04084D 69          1241   	ld l,c ; HL = sprite width
04084E             1242   
04084E             1243   mf_loop2:
04084E F5          1244   	push af
04084F D5          1245   	push de
040850 DD E5       1246   	push ix
040852 FD E5       1247   	push iy
040854             1248   mf_loop3:
040854 DD 5E 00    1249   	ld e,(ix+0)
040857 FD 56 00    1250   	ld d,(iy+0)
04085A DD 72 00    1251   	ld (ix+0),d
04085D FD 73 00    1252   	ld (iy+0),e
040860 DD 23       1253   	inc ix
040862 FD 23       1254   	inc iy
040864 3D          1255   	dec a
040865 FE 00       1256   	cp 0
040867 20 EB       1257   	jr nz,mf_loop3
040869 FD E1       1258   	pop iy
04086B DD E1       1259   	pop ix
04086D D1          1260   	pop de
04086E F1          1261   	pop af
04086F EB          1262   	ex de,hl
040870 DD 19       1263   	add ix,de
040872 EB          1264   	ex de,hl
040873 E5          1265   	push hl
040874 FD E5       1266   	push iy
040876 E1          1267   	pop hl
040877 D1          1268   	pop de
040878 B7          1269   	or a
040879 ED 52       1270   	sbc hl,de
04087B E5          1271   	push hl
04087C D5          1272   	push de
04087D E1          1273   	pop hl
04087E FD E1       1274   	pop iy
040880 10 CC       1275   	djnz mf_loop2
040882             1276   
040882 CD 0A 16 04 1277   	call fn_refresh_sprite
040886 C9          1278   	ret
040887             1279   
040887             1280   dsl_flood_fill:
040887 21 B6 FF FF 1281   	ld hl,KEY_RETURN
04088B CD 18 17 04 1282   	call fn_inkey
04088F FE 00       1283   	cp 0
040891 20 F4       1284   	jr nz,dsl_flood_fill
040893             1285   
040893             1286   	; hide the cursor
040893 CD 22 0C 04 1287   	call fn_draw_pixel_without_border
040897             1288   
040897             1289   	; memorize pixel coordinates
040897 3A EB 17 04 1290   	ld a,(xpix)
04089B 32 ED 17 04 1291   	ld (memxpix),a
04089F 3A EC 17 04 1292   	ld a,(ypix)
0408A3 32 EE 17 04 1293   	ld (memypix),a
0408A7             1294   
0408A7             1295   	; fill all recursively
0408A7 3A EB 17 04 1296   	ld a,(xpix)
0408AB 5F          1297   	ld e,a
0408AC 3A EC 17 04 1298   	ld a,(ypix)
0408B0 57          1299   	ld d,a
0408B1 CD D2 08 04 1300   	call dsl_flood_fill_loop
0408B5             1301   
0408B5             1302   	; refresh all the sprite
0408B5 CD 0A 16 04 1303   	call fn_refresh_sprite
0408B9             1304   
0408B9             1305   	; hide the cursor again
0408B9 CD 22 0C 04 1306   	call fn_draw_pixel_without_border
0408BD             1307   
0408BD             1308   	; restore pixel coordinates
0408BD             1309   	; and cursor
0408BD 3A ED 17 04 1310   	ld a,(memxpix)
0408C1 32 EB 17 04 1311   	ld (xpix),a
0408C5 3A EE 17 04 1312   	ld a,(memypix)
0408C9 32 EC 17 04 1313   	ld (ypix),a
0408CD CD 0E 0C 04 1314   	call fn_draw_pixel_with_border
0408D1 C9          1315   	ret
0408D2             1316   
0408D2             1317   dsl_flood_fill_loop:
0408D2 D5          1318   	push de
0408D3             1319   
0408D3 DD 21 F0 17 1320   	ld ix,spr_size
       04          
0408D8             1321   
0408D8             1322   	; out  of the sprite area ?
0408D8 7B          1323   	ld a,e
0408D9 DD BE 00    1324   	cp (ix+0)
0408DC D2 25 09 04 1325   	jp nc,ffl_exit
0408E0             1326   
0408E0             1327   	; out  of the sprite area ?
0408E0 7A          1328   	ld a,d
0408E1 DD BE 00    1329   	cp (ix+0)
0408E4 D2 25 09 04 1330   	jp nc,ffl_exit
0408E8             1331   
0408E8             1332   	; replace current pixel, if it is
0408E8             1333   	; inside the sprite area,
0408E8             1334   	; and has not the select palette color
0408E8 7B          1335   	ld a,e
0408E9 32 EB 17 04 1336   	ld (xpix),a
0408ED 7A          1337   	ld a,d
0408EE 32 EC 17 04 1338   	ld (ypix),a
0408F2 CD 38 0C 04 1339   	call fn_get_pixel_color
0408F6 21 F1 17 04 1340   	ld hl,current_pen
0408FA BE          1341   	cp (hl)
0408FB CA 25 09 04 1342   	jp z,ffl_exit
0408FF 7E          1343   	ld a,(hl)
040900 CD 7A 0C 04 1344   	call fn_set_pixel_color
040904             1345   
040904             1346   	; restore coordinates
040904 3A EB 17 04 1347   	ld a,(xpix)
040908 5F          1348   	ld e,a
040909 3A EC 17 04 1349   	ld a,(ypix)
04090D 57          1350   	ld d,a
04090E             1351   
04090E             1352   	; draw pixel at right
04090E 1C          1353   	inc e
04090F CD D2 08 04 1354   	call dsl_flood_fill_loop
040913 1D          1355   	dec e
040914             1356   	; draw pixel at left
040914 1D          1357   	dec e
040915 CD D2 08 04 1358   	call dsl_flood_fill_loop
040919 1C          1359   	inc e
04091A             1360   	; draw pixel up
04091A 14          1361   	inc d
04091B CD D2 08 04 1362   	call dsl_flood_fill_loop
04091F 15          1363   	dec d
040920             1364   	; draw pixel down
040920 15          1365   	dec d
040921 CD D2 08 04 1366   	call dsl_flood_fill_loop
040925             1367   
040925             1368   ffl_exit:
040925 D1          1369   	pop de
040926 C9          1370   	ret
040927             1371   
040927             1372   ; change current tool to palette tool
040927             1373   dsl_palette_tool:
040927 21 9F FF FF 1374   	ld hl,KEY_TAB
04092B CD 18 17 04 1375   	call fn_inkey
04092F FE 00       1376   	cp 0
040931 20 F4       1377   	jr nz,dsl_palette_tool
040933             1378   
040933             1379   	; hide sprite drawing cursor
040933 CD 22 0C 04 1380   	call fn_draw_pixel_without_border
040937             1381   
040937             1382   	; draw selected palette color
040937 21 F1 17 04 1383   	ld hl,current_pen
04093B 4E          1384   	ld c,(hl)
04093C CD D6 0C 04 1385   	call fn_draw_palette_with_border
040940             1386   
040940             1387   ; select palette color
040940             1388   dsl_palette_tool_loop:
040940             1389   	; move to left color in the palette
040940 21 E6 FF FF 1390   	ld hl,KEY_LEFT
040944 CD 18 17 04 1391   	call fn_inkey
040948 FE 01       1392   	cp 1
04094A CC 0D 0A 04 1393   	call z,dsl_dec_pen
04094E             1394   
04094E             1395   	; move to right color in the palette
04094E 21 86 FF FF 1396   	ld hl,KEY_RIGHT
040952 CD 18 17 04 1397   	call fn_inkey
040956 FE 01       1398   	cp 1
040958 CC 34 0A 04 1399   	call z,dsl_inc_pen
04095C             1400   
04095C             1401   	; return to draw sprite tool
04095C 21 9F FF FF 1402   	ld hl,KEY_TAB
040960 CD 18 17 04 1403   	call fn_inkey
040964 FE 01       1404   	cp 1
040966 CA F0 09 04 1405   	jp z,dsl_draw_sprite_tool
04096A             1406   
04096A             1407   	; load palette
04096A 21 A9 FF FF 1408   	ld hl,KEY_L
04096E CD 18 17 04 1409   	call fn_inkey
040972 FE 01       1410   	cp 1
040974 CC 98 09 04 1411   	call z,dslp_load_palette
040978             1412   
040978             1413   	; save palette
040978 21 AE FF FF 1414   	ld hl,KEY_S
04097C CD 18 17 04 1415   	call fn_inkey
040980 FE 01       1416   	cp 1
040982 CC CA 09 04 1417   	call z,dslp_save_palette
040986             1418   
040986             1419   	; exit program
040986 21 8F FF FF 1420   	ld hl,KEY_ESCAPE
04098A CD 18 17 04 1421   	call fn_inkey
04098E FE 01       1422   	cp 1
040990 CA 5D 0A 04 1423   	jp z,exit_program
040994             1424   
040994 C3 40 09 04 1425   	jp dsl_palette_tool_loop
040998             1426   
040998             1427   dslp_load_palette:
040998 21 A9 FF FF 1428   	ld hl,KEY_L
04099C CD 18 17 04 1429   	call fn_inkey
0409A0 FE 00       1430   	cp 0
0409A2 20 F4       1431   	jr nz,dslp_load_palette
0409A4             1432   
0409A4 21 F1 17 04 1433   	ld hl,current_pen
0409A8 4E          1434   	ld c,(hl)
0409A9 CD 3B 0D 04 1435   	call fn_draw_palette_without_border
0409AD CD B5 0E 04 1436   	call fn_load_palette
0409B1 CD 52 17 04 1437   	call fn_draw_the_palette
0409B5 CD 0A 16 04 1438   	call fn_refresh_sprite
0409B9 21 F1 17 04 1439   	ld hl,current_pen
0409BD 4E          1440   	ld c,(hl)
0409BE CD D6 0C 04 1441   	call fn_draw_palette_with_border
0409C2 CD 4A 16 04 1442   	call fn_change_frame
0409C6 C3 40 09 04 1443   	jp dsl_palette_tool_loop
0409CA             1444   
0409CA             1445   dslp_save_palette:
0409CA 21 AE FF FF 1446   	ld hl,KEY_S
0409CE CD 18 17 04 1447   	call fn_inkey
0409D2 FE 00       1448   	cp 0
0409D4 20 F4       1449   	jr nz,dslp_save_palette
0409D6             1450   
0409D6 21 F1 17 04 1451   	ld hl,current_pen
0409DA 4E          1452   	ld c,(hl)
0409DB CD 3B 0D 04 1453   	call fn_draw_palette_without_border
0409DF CD AC 11 04 1454   	call fn_save_palette
0409E3 21 F1 17 04 1455   	ld hl,current_pen
0409E7 4E          1456   	ld c,(hl)
0409E8 CD D6 0C 04 1457   	call fn_draw_palette_with_border
0409EC C3 40 09 04 1458   	jp dsl_palette_tool_loop
0409F0             1459   
0409F0             1460   dsl_draw_sprite_tool:
0409F0 21 9F FF FF 1461   	ld hl,KEY_TAB
0409F4 CD 18 17 04 1462   	call fn_inkey
0409F8 FE 00       1463   	cp 0
0409FA 20 F4       1464   	jr nz,dsl_draw_sprite_tool
0409FC             1465   
0409FC             1466   	; unselect palette color
0409FC 21 F1 17 04 1467   	ld hl,current_pen
040A00 4E          1468   	ld c,(hl)
040A01 CD 3B 0D 04 1469   	call fn_draw_palette_without_border
040A05             1470   
040A05             1471   	; draw the pixel with a border
040A05 CD 0E 0C 04 1472   	call fn_draw_pixel_with_border
040A09             1473   
040A09 C3 98 02 04 1474   	jp draw_sprite_loop
040A0D             1475   
040A0D             1476   dsl_dec_pen:
040A0D 21 F1 17 04 1477   	ld hl,current_pen
040A11 7E          1478   	ld a,(hl)
040A12 FE 00       1479   	cp 0
040A14 C8          1480   	ret z
040A15 FE 40       1481   	cp MAX_COLORS
040A17 D0          1482   	ret nc
040A18             1483   
040A18 4F          1484   	ld c,a ; c is the old pen
040A19 3D          1485   	dec a ; a is the new pen
040A1A             1486   
040A1A F5          1487   	push af
040A1B C5          1488   	push bc
040A1C             1489   
040A1C             1490   	; unselect palette color
040A1C CD 3B 0D 04 1491   	call fn_draw_palette_without_border
040A20             1492   
040A20 C1          1493   	pop bc
040A21 F1          1494   	pop af
040A22             1495   
040A22             1496   	; replace current pen value
040A22 21 F1 17 04 1497   	ld hl,current_pen
040A26 77          1498   	ld (hl),a
040A27             1499   
040A27             1500   	; select palette color
040A27 4F          1501   	ld c,a
040A28 CD D6 0C 04 1502   	call fn_draw_palette_with_border
040A2C CD 93 16 04 1503   	call fn_slowdown
040A30 C3 40 09 04 1504   	jp dsl_palette_tool_loop
040A34             1505   
040A34             1506   dsl_inc_pen:
040A34 21 F1 17 04 1507   	ld hl,current_pen
040A38 7E          1508   	ld a,(hl)
040A39 21 10 19 04 1509   	ld hl,colors_count
040A3D 4E          1510   	ld c,(hl)
040A3E 0D          1511   	dec c
040A3F B9          1512   	cp c
040A40 D0          1513   	ret nc
040A41             1514   
040A41 4F          1515   	ld c,a ; c is the old pen
040A42 3C          1516   	inc a ; a is the new pen
040A43             1517   
040A43 F5          1518   	push af
040A44 C5          1519   	push bc
040A45             1520   
040A45             1521   	; unselect palette color
040A45 CD 3B 0D 04 1522   	call fn_draw_palette_without_border
040A49             1523   
040A49 C1          1524   	pop bc
040A4A F1          1525   	pop af
040A4B             1526   
040A4B             1527   	; replace current pen value
040A4B 21 F1 17 04 1528   	ld hl,current_pen
040A4F 77          1529   	ld (hl),a
040A50             1530   
040A50             1531   	; select palette color
040A50 4F          1532   	ld c,a
040A51 CD D6 0C 04 1533   	call fn_draw_palette_with_border
040A55 CD 93 16 04 1534   	call fn_slowdown
040A59 C3 40 09 04 1535   	jp dsl_palette_tool_loop
040A5D             1536   
040A5D             1537   ; exit program
040A5D             1538   exit_program:
040A5D             1539   	; reset to mode 1
040A5D             1540   	vdu 22
040A5D 3E 16       0001M  		LD	A, function
040A5F 49 D7       0002M  		RST.LIS	10h
040A61             1541   	vdu 1
040A61 3E 01       0001M  		LD	A, function
040A63 49 D7       0002M  		RST.LIS	10h
040A65             1542   
040A65             1543   	; position the texte cursor at home
040A65             1544   	vdu 30
040A65 3E 1E       0001M  		LD	A, function
040A67 49 D7       0002M  		RST.LIS	10h
040A69             1545   
040A69             1546   	; show cursor
040A69             1547   	vdu 23
040A69 3E 17       0001M  		LD	A, function
040A6B 49 D7       0002M  		RST.LIS	10h
040A6D             1548   	vdu 1
040A6D 3E 01       0001M  		LD	A, function
040A6F 49 D7       0002M  		RST.LIS	10h
040A71             1549   	vdu 1
040A71 3E 01       0001M  		LD	A, function
040A73 49 D7       0002M  		RST.LIS	10h
040A75             1550   
040A75 FD E1       1551   	pop iy
040A77 DD E1       1552   	pop ix
040A79 D1          1553   	pop de
040A7A C1          1554   	pop bc
040A7B F1          1555   	pop af
040A7C 21 00 00 00 1556   	ld hl,0
040A80             1557   
040A80 C9          1558   	ret
040A81             1559   ;======================================================================
040A81             1560   
040A81             1561   ; draw a rectangle
040A81             1562   fn_rect:
040A81             1563   	vdu 25
040A81 3E 19       0001M  		LD	A, function
040A83 49 D7       0002M  		RST.LIS	10h
040A85             1564   	vdu 4
040A85 3E 04       0001M  		LD	A, function
040A87 49 D7       0002M  		RST.LIS	10h
040A89 DD 21 DB 17 1565   	ld ix,x1
       04          
040A8E DD 7E 00    1566   	ld a,(ix + 0)
040A91             1567   	vdu_a
040A91 49 D7       0001M  		RST.LIS	10h
040A93 DD 7E 01    1568   	ld a,(ix + 1)
040A96             1569   	vdu_a
040A96 49 D7       0001M  		RST.LIS	10h
040A98 FD 21 DD 17 1570   	ld iy,y1
       04          
040A9D FD 7E 00    1571   	ld a,(iy + 0)
040AA0             1572   	vdu_a
040AA0 49 D7       0001M  		RST.LIS	10h
040AA2 FD 7E 01    1573   	ld a,(iy + 1)
040AA5             1574   	vdu_a
040AA5 49 D7       0001M  		RST.LIS	10h
040AA7             1575   
040AA7             1576   	vdu 25
040AA7 3E 19       0001M  		LD	A, function
040AA9 49 D7       0002M  		RST.LIS	10h
040AAB             1577   	vdu 5
040AAB 3E 05       0001M  		LD	A, function
040AAD 49 D7       0002M  		RST.LIS	10h
040AAF DD 21 DF 17 1578   	ld ix,x2
       04          
040AB4 DD 7E 00    1579   	ld a,(ix + 0)
040AB7             1580   	vdu_a
040AB7 49 D7       0001M  		RST.LIS	10h
040AB9 DD 7E 01    1581   	ld a,(ix + 1)
040ABC             1582   	vdu_a
040ABC 49 D7       0001M  		RST.LIS	10h
040ABE FD 21 DD 17 1583   	ld iy,y1
       04          
040AC3 FD 7E 00    1584   	ld a,(iy + 0)
040AC6             1585   	vdu_a
040AC6 49 D7       0001M  		RST.LIS	10h
040AC8 FD 7E 01    1586   	ld a,(iy + 1)
040ACB             1587   	vdu_a
040ACB 49 D7       0001M  		RST.LIS	10h
040ACD             1588   
040ACD             1589   	vdu 25
040ACD 3E 19       0001M  		LD	A, function
040ACF 49 D7       0002M  		RST.LIS	10h
040AD1             1590   	vdu 5
040AD1 3E 05       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5 DD 21 DF 17 1591   	ld ix,x2
       04          
040ADA DD 7E 00    1592   	ld a,(ix + 0)
040ADD             1593   	vdu_a
040ADD 49 D7       0001M  		RST.LIS	10h
040ADF DD 7E 01    1594   	ld a,(ix + 1)
040AE2             1595   	vdu_a
040AE2 49 D7       0001M  		RST.LIS	10h
040AE4 FD 21 E1 17 1596   	ld iy,y2
       04          
040AE9 FD 7E 00    1597   	ld a,(iy + 0)
040AEC             1598   	vdu_a
040AEC 49 D7       0001M  		RST.LIS	10h
040AEE FD 7E 01    1599   	ld a,(iy + 1)
040AF1             1600   	vdu_a
040AF1 49 D7       0001M  		RST.LIS	10h
040AF3             1601   
040AF3             1602   	vdu 25
040AF3 3E 19       0001M  		LD	A, function
040AF5 49 D7       0002M  		RST.LIS	10h
040AF7             1603   	vdu 5
040AF7 3E 05       0001M  		LD	A, function
040AF9 49 D7       0002M  		RST.LIS	10h
040AFB DD 21 DB 17 1604   	ld ix,x1
       04          
040B00 DD 7E 00    1605   	ld a,(ix + 0)
040B03             1606   	vdu_a
040B03 49 D7       0001M  		RST.LIS	10h
040B05 DD 7E 01    1607   	ld a,(ix + 1)
040B08             1608   	vdu_a
040B08 49 D7       0001M  		RST.LIS	10h
040B0A FD 21 E1 17 1609   	ld iy,y2
       04          
040B0F FD 7E 00    1610   	ld a,(iy + 0)
040B12             1611   	vdu_a
040B12 49 D7       0001M  		RST.LIS	10h
040B14 FD 7E 01    1612   	ld a,(iy + 1)
040B17             1613   	vdu_a
040B17 49 D7       0001M  		RST.LIS	10h
040B19             1614   
040B19             1615   	vdu 25
040B19 3E 19       0001M  		LD	A, function
040B1B 49 D7       0002M  		RST.LIS	10h
040B1D             1616   	vdu 5
040B1D 3E 05       0001M  		LD	A, function
040B1F 49 D7       0002M  		RST.LIS	10h
040B21 DD 21 DB 17 1617   	ld ix,x1
       04          
040B26 DD 7E 00    1618   	ld a,(ix + 0)
040B29             1619   	vdu_a
040B29 49 D7       0001M  		RST.LIS	10h
040B2B DD 7E 01    1620   	ld a,(ix + 1)
040B2E             1621   	vdu_a
040B2E 49 D7       0001M  		RST.LIS	10h
040B30 FD 21 DD 17 1622   	ld iy,y1
       04          
040B35 FD 7E 00    1623   	ld a,(iy + 0)
040B38             1624   	vdu_a
040B38 49 D7       0001M  		RST.LIS	10h
040B3A FD 7E 01    1625   	ld a,(iy + 1)
040B3D             1626   	vdu_a
040B3D 49 D7       0001M  		RST.LIS	10h
040B3F             1627   
040B3F C9          1628   	ret
040B40             1629   
040B40             1630   ; draw a filled rectangle
040B40             1631   fn_rectf:
040B40 DD 21 DB 17 1632   	ld ix,x1
       04          
040B45 FD 21 DD 17 1633   	ld iy,y1
       04          
040B4A             1634   
040B4A             1635   	vdu 25
040B4A 3E 19       0001M  		LD	A, function
040B4C 49 D7       0002M  		RST.LIS	10h
040B4E             1636   	vdu 4
040B4E 3E 04       0001M  		LD	A, function
040B50 49 D7       0002M  		RST.LIS	10h
040B52 DD 7E 00    1637   	ld a,(ix+0)
040B55             1638   	vdu_a
040B55 49 D7       0001M  		RST.LIS	10h
040B57 DD 7E 01    1639   	ld a,(ix+1)
040B5A             1640   	vdu_a
040B5A 49 D7       0001M  		RST.LIS	10h
040B5C FD 7E 00    1641   	ld a,(iy+0)
040B5F             1642   	vdu_a
040B5F 49 D7       0001M  		RST.LIS	10h
040B61 FD 7E 01    1643   	ld a,(iy+1)
040B64             1644   	vdu_a
040B64 49 D7       0001M  		RST.LIS	10h
040B66             1645   
040B66 DD 21 DF 17 1646   	ld ix,x2
       04          
040B6B FD 21 E1 17 1647   	ld iy,y2
       04          
040B70             1648   
040B70             1649   	vdu 25
040B70 3E 19       0001M  		LD	A, function
040B72 49 D7       0002M  		RST.LIS	10h
040B74             1650   	vdu 101
040B74 3E 65       0001M  		LD	A, function
040B76 49 D7       0002M  		RST.LIS	10h
040B78 DD 7E 00    1651   	ld a,(ix+0)
040B7B             1652   	vdu_a
040B7B 49 D7       0001M  		RST.LIS	10h
040B7D DD 7E 01    1653   	ld a,(ix+1)
040B80             1654   	vdu_a
040B80 49 D7       0001M  		RST.LIS	10h
040B82 FD 7E 00    1655   	ld a,(iy+0)
040B85             1656   	vdu_a
040B85 49 D7       0001M  		RST.LIS	10h
040B87 FD 7E 01    1657   	ld a,(iy+1)
040B8A             1658   	vdu_a
040B8A 49 D7       0001M  		RST.LIS	10h
040B8C             1659   
040B8C C9          1660   	ret
040B8D             1661   
040B8D             1662   fn_calc_pixel_coords:
040B8D 11 00 00 00 1663   	ld de,$000000 ; reset deu
040B91             1664   
040B91             1665   	; calculate coordinates x of the resized pixel
040B91 21 EB 17 04 1666   	ld hl,xpix
040B95 5E          1667   	ld e,(hl) ; E = xpix
040B96 21 EF 17 04 1668   	ld hl,pixel_width
040B9A 56          1669   	ld d,(hl) ; D = pixel_width
040B9B D5          1670   	push de
040B9C E1          1671   	pop hl ; HL = DE
040B9D ED 6C       1672   	mlt hl ; HL = xpix * pixel_width
040B9F DD 21 E3 17 1673   	ld ix,xs1
       04          
040BA4 DD 5E 00    1674   	ld e,(ix+0)
040BA7 DD 56 01    1675   	ld d,(ix+1)
040BAA 13          1676   	inc de ; DE = xs1 + 1
040BAB 19          1677   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040BAC FD 21 DB 17 1678   	ld iy,x1
       04          
040BB1 FD 75 00    1679   	ld (iy+0),l
040BB4 FD 74 01    1680   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040BB7 E5          1681   	push hl
040BB8 21 EF 17 04 1682   	ld hl,pixel_width
040BBC 16 00       1683   	ld d,0
040BBE 5E          1684   	ld e,(hl)
040BBF E1          1685   	pop hl
040BC0 19          1686   	add hl,de
040BC1 2B          1687   	dec hl
040BC2 FD 21 DF 17 1688   	ld iy,x2
       04          
040BC7 FD 75 00    1689   	ld (iy+0),l
040BCA FD 74 01    1690   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040BCD             1691   
040BCD 11 00 00 00 1692   	ld de,$000000 ; reset deu
040BD1             1693   
040BD1             1694   	; calculate coordinates y of the resized pixel
040BD1 21 EC 17 04 1695   	ld hl,ypix
040BD5 5E          1696   	ld e,(hl) ; E = ypix
040BD6 21 EF 17 04 1697   	ld hl,pixel_width
040BDA 56          1698   	ld d,(hl) ; D = pixel_width
040BDB D5          1699   	push de
040BDC E1          1700   	pop hl ; HL = DE
040BDD ED 6C       1701   	mlt hl ; HL = ypix * pixel_width
040BDF DD 21 E5 17 1702   	ld ix,ys1
       04          
040BE4 DD 5E 00    1703   	ld e,(ix+0)
040BE7 DD 56 01    1704   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040BEA 13          1705   	inc de ; DE = ys1 + 1
040BEB 19          1706   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040BEC FD 21 DD 17 1707   	ld iy,y1
       04          
040BF1 FD 75 00    1708   	ld (iy+0),l
040BF4 FD 74 01    1709   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040BF7 E5          1710   	push hl
040BF8 21 EF 17 04 1711   	ld hl,pixel_width
040BFC 16 00       1712   	ld d,0
040BFE 5E          1713   	ld e,(hl)
040BFF E1          1714   	pop hl
040C00 19          1715   	add hl,de
040C01 2B          1716   	dec hl
040C02 FD 21 E1 17 1717   	ld iy,y2
       04          
040C07 FD 75 00    1718   	ld (iy+0),l
040C0A FD 74 01    1719   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C0D             1720   
040C0D C9          1721   	ret
040C0E             1722   
040C0E             1723   ; draw the resized pixel border, with its color
040C0E             1724   fn_draw_pixel_with_border:
040C0E CD 22 0C 04 1725   	call fn_draw_pixel_without_border
040C12             1726   
040C12             1727   	; set graphics pen
040C12             1728   	vdu 18
040C12 3E 12       0001M  		LD	A, function
040C14 49 D7       0002M  		RST.LIS	10h
040C16             1729   	vdu 0
040C16 3E 00       0001M  		LD	A, function
040C18 49 D7       0002M  		RST.LIS	10h
040C1A             1730   	vdu 1 ; pen 1
040C1A 3E 01       0001M  		LD	A, function
040C1C 49 D7       0002M  		RST.LIS	10h
040C1E             1731   
040C1E             1732   	; draw the sprite's border rectangle
040C1E C3 81 0A 04 1733   	jp fn_rect
040C22             1734   
040C22             1735   ; draw the resized pixel color
040C22             1736   fn_draw_pixel_without_border:
040C22 CD 8D 0B 04 1737   	call fn_calc_pixel_coords
040C26             1738   
040C26             1739   	; set graphics pen
040C26             1740   	vdu 18
040C26 3E 12       0001M  		LD	A, function
040C28 49 D7       0002M  		RST.LIS	10h
040C2A             1741   	vdu 0
040C2A 3E 00       0001M  		LD	A, function
040C2C 49 D7       0002M  		RST.LIS	10h
040C2E CD 38 0C 04 1742   	call fn_get_pixel_color
040C32             1743   	vdu_a
040C32 49 D7       0001M  		RST.LIS	10h
040C34             1744   
040C34             1745   	; draw the sprite's color rectangle
040C34 C3 40 0B 04 1746   	jp fn_rectf
040C38             1747   
040C38             1748   ; get pixel color value in the sprite buffer
040C38             1749   ; returns A: pixel color (0-63)
040C38             1750   fn_get_pixel_color:
040C38 11 00 00 00 1751   	ld de,$000000 ; reset deu
040C3C             1752   
040C3C             1753   	; calculate the offset to add to the address
040C3C 21 EC 17 04 1754   	ld hl,ypix
040C40 5E          1755   	ld e,(hl) ; E = ypix
040C41 21 F0 17 04 1756   	ld hl,spr_size
040C45 56          1757   	ld d,(hl) ; D = sprsize
040C46 D5          1758   	push de
040C47 E1          1759   	pop hl
040C48 ED 6C       1760   	mlt hl ; HL = ypix * sprsize
040C4A E5          1761   	push hl
040C4B 21 EB 17 04 1762   	ld hl,xpix
040C4F 5E          1763   	ld e,(hl)
040C50 16 00       1764   	ld d,0
040C52 E1          1765   	pop hl
040C53 19          1766   	add hl,de ; HL = (ypix * sprsize) + xpix
040C54             1767   
040C54 11 16 19 04 1768   	ld de,current_frame
040C58 1A          1769   	ld a,(de)
040C59 FE 00       1770   	cp 0
040C5B 28 16       1771   	jr z,gpc_end_loop
040C5D             1772   
040C5D 47          1773   	ld b,a
040C5E E5          1774   	push hl
040C5F 11 00 00 00 1775   	ld de,$000000
040C63 21 F0 17 04 1776   	ld hl,spr_size
040C67 5E          1777   	ld e,(hl)
040C68 56          1778   	ld d,(hl)
040C69 D5          1779   	push de
040C6A E1          1780   	pop hl
040C6B ED 6C       1781   	mlt hl
040C6D E5          1782   	push hl
040C6E D1          1783   	pop de ; DE = sprsize²
040C6F E1          1784   	pop hl
040C70             1785   
040C70             1786   gpc_loop:
040C70 19          1787   	add hl,de
040C71 10 FD       1788   	djnz gpc_loop
040C73             1789   
040C73             1790   gpc_end_loop:
040C73             1791   	; add the offset to the address
040C73 11 1F 19 04 1792   	ld de,sprite_buffer
040C77 19          1793   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040C78             1794   
040C78             1795   	; get pixel color value
040C78 7E          1796   	ld a,(hl)
040C79             1797   
040C79 C9          1798   	ret
040C7A             1799   
040C7A             1800   ; get pixel color value in the sprite buffer
040C7A             1801   ; A: pixel color (0-63)
040C7A             1802   fn_set_pixel_color:
040C7A 11 00 00 00 1803   	ld de,$000000 ; reset deu
040C7E             1804   
040C7E             1805   	; calculate the offset to add to the address
040C7E 21 EC 17 04 1806   	ld hl,ypix
040C82 5E          1807   	ld e,(hl) ; E = ypix
040C83 21 F0 17 04 1808   	ld hl,spr_size
040C87 56          1809   	ld d,(hl) ; D = sprsize
040C88 D5          1810   	push de
040C89 E1          1811   	pop hl
040C8A ED 6C       1812   	mlt hl ; HL = ypix * sprsize
040C8C E5          1813   	push hl
040C8D 21 EB 17 04 1814   	ld hl,xpix
040C91 5E          1815   	ld e,(hl)
040C92 16 00       1816   	ld d,0
040C94 E1          1817   	pop hl
040C95 19          1818   	add hl,de ; HL = (ypix * sprsize) + xpix
040C96 F5          1819   	push af
040C97             1820   
040C97 11 16 19 04 1821   	ld de,current_frame
040C9B 1A          1822   	ld a,(de)
040C9C FE 00       1823   	cp 0
040C9E 28 16       1824   	jr z,spc_end_loop
040CA0             1825   
040CA0 47          1826   	ld b,a
040CA1 E5          1827   	push hl
040CA2 11 00 00 00 1828   	ld de,$000000
040CA6 21 F0 17 04 1829   	ld hl,spr_size
040CAA 5E          1830   	ld e,(hl)
040CAB 56          1831   	ld d,(hl)
040CAC D5          1832   	push de
040CAD E1          1833   	pop hl
040CAE ED 6C       1834   	mlt hl
040CB0 E5          1835   	push hl
040CB1 D1          1836   	pop de ; DE = sprsize²
040CB2 E1          1837   	pop hl
040CB3             1838   
040CB3             1839   spc_loop:
040CB3 19          1840   	add hl,de
040CB4 10 FD       1841   	djnz spc_loop
040CB6             1842   
040CB6             1843   spc_end_loop:
040CB6             1844   
040CB6             1845   	; add the offset to the address
040CB6 11 1F 19 04 1846   	ld de,sprite_buffer
040CBA 19          1847   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CBB             1848   
040CBB             1849   	; set pixel color value
040CBB F1          1850   	pop af
040CBC 77          1851   	ld (hl),a
040CBD             1852   
040CBD C9          1853   	ret
040CBE             1854   
040CBE             1855   fn_move_up:
040CBE 21 EC 17 04 1856   	ld hl,ypix
040CC2 35          1857   	dec (hl)
040CC3 C9          1858   	ret
040CC4             1859   
040CC4             1860   fn_move_down:
040CC4 21 EC 17 04 1861   	ld hl,ypix
040CC8 34          1862   	inc (hl)
040CC9 C9          1863   	ret
040CCA             1864   
040CCA             1865   fn_move_left:
040CCA 21 EB 17 04 1866   	ld hl,xpix
040CCE 35          1867   	dec (hl)
040CCF C9          1868   	ret
040CD0             1869   
040CD0             1870   fn_move_right:
040CD0 21 EB 17 04 1871   	ld hl,xpix
040CD4 34          1872   	inc (hl)
040CD5 C9          1873   	ret
040CD6             1874   
040CD6             1875   ; draw palette color whit border and selection
040CD6             1876   ; C = color number (0-63)
040CD6             1877   fn_draw_palette_with_border:
040CD6 C5          1878   	push bc
040CD7             1879   
040CD7             1880   	; choose palette color
040CD7             1881   	vdu 18
040CD7 3E 12       0001M  		LD	A, function
040CD9 49 D7       0002M  		RST.LIS	10h
040CDB             1882   	vdu 0
040CDB 3E 00       0001M  		LD	A, function
040CDD 49 D7       0002M  		RST.LIS	10h
040CDF C1          1883   	pop bc
040CE0 C5          1884   	push bc
040CE1 79          1885   	ld a,c
040CE2             1886   	vdu_a
040CE2 49 D7       0001M  		RST.LIS	10h
040CE4             1887   
040CE4             1888   	; store coordinates for a palette square
040CE4 DD 21 DB 17 1889   	ld ix,x1
       04          
040CE9 E1          1890   	pop hl
040CEA E5          1891   	push hl
040CEB 26 05       1892   	ld h,5
040CED ED 6C       1893   	mlt hl
040CEF E5          1894   	push hl
040CF0 DD 75 00    1895   	ld (ix+0),l
040CF3 DD 74 01    1896   	ld (ix+1),h
040CF6             1897   
040CF6 DD 21 DD 17 1898   	ld ix,y1
       04          
040CFB 21 00 00 00 1899   	ld hl,0
040CFF DD 75 00    1900   	ld (ix+0),l
040D02 DD 74 01    1901   	ld (ix+1),h
040D05             1902   
040D05 DD 21 DF 17 1903   	ld ix,x2
       04          
040D0A E1          1904   	pop hl
040D0B 11 04 00 00 1905   	ld de,4
040D0F 19          1906   	add hl,de
040D10 DD 75 00    1907   	ld (ix+0),l
040D13 DD 74 01    1908   	ld (ix+1),h
040D16             1909   
040D16 DD 21 E1 17 1910   	ld ix,y2
       04          
040D1B 21 0A 00 00 1911   	ld hl,10
040D1F DD 75 00    1912   	ld (ix+0),l
040D22 DD 74 01    1913   	ld (ix+1),h
040D25             1914   
040D25             1915   	; draw the palette filled square
040D25 CD 40 0B 04 1916   	call fn_rectf
040D29             1917   
040D29             1918   	; choose pen 1
040D29             1919   	vdu 18
040D29 3E 12       0001M  		LD	A, function
040D2B 49 D7       0002M  		RST.LIS	10h
040D2D             1920   	vdu 0
040D2D 3E 00       0001M  		LD	A, function
040D2F 49 D7       0002M  		RST.LIS	10h
040D31 3E 01       1921   	ld a,1
040D33             1922   	vdu_a
040D33 49 D7       0001M  		RST.LIS	10h
040D35             1923   
040D35             1924   	; draw the palette square border
040D35 CD 81 0A 04 1925   	call fn_rect
040D39             1926   
040D39             1927   	; next color ?
040D39 C1          1928   	pop bc
040D3A             1929   
040D3A C9          1930   	ret
040D3B             1931   
040D3B             1932   ; draw palette color whitout border and selection
040D3B             1933   ; C = color number (0-63)
040D3B             1934   fn_draw_palette_without_border:
040D3B C5          1935   	push bc
040D3C             1936   
040D3C             1937   	; choose palette color
040D3C             1938   	vdu 18
040D3C 3E 12       0001M  		LD	A, function
040D3E 49 D7       0002M  		RST.LIS	10h
040D40             1939   	vdu 0
040D40 3E 00       0001M  		LD	A, function
040D42 49 D7       0002M  		RST.LIS	10h
040D44 C1          1940   	pop bc
040D45 C5          1941   	push bc
040D46 79          1942   	ld a,c
040D47             1943   	vdu_a
040D47 49 D7       0001M  		RST.LIS	10h
040D49             1944   
040D49             1945   	; store coordinates for a palette square
040D49 DD 21 DB 17 1946   	ld ix,x1
       04          
040D4E E1          1947   	pop hl
040D4F E5          1948   	push hl
040D50 26 05       1949   	ld h,5
040D52 ED 6C       1950   	mlt hl
040D54 E5          1951   	push hl
040D55 DD 75 00    1952   	ld (ix+0),l
040D58 DD 74 01    1953   	ld (ix+1),h
040D5B             1954   
040D5B DD 21 DD 17 1955   	ld ix,y1
       04          
040D60 21 00 00 00 1956   	ld hl,0
040D64 DD 75 00    1957   	ld (ix+0),l
040D67 DD 74 01    1958   	ld (ix+1),h
040D6A             1959   
040D6A DD 21 DF 17 1960   	ld ix,x2
       04          
040D6F E1          1961   	pop hl
040D70 11 04 00 00 1962   	ld de,4
040D74 19          1963   	add hl,de
040D75 DD 75 00    1964   	ld (ix+0),l
040D78 DD 74 01    1965   	ld (ix+1),h
040D7B             1966   
040D7B DD 21 E1 17 1967   	ld ix,y2
       04          
040D80 21 0A 00 00 1968   	ld hl,10
040D84 DD 75 00    1969   	ld (ix+0),l
040D87 DD 74 01    1970   	ld (ix+1),h
040D8A             1971   
040D8A             1972   	; draw the palette filled square
040D8A CD 40 0B 04 1973   	call fn_rectf
040D8E             1974   
040D8E C1          1975   	pop bc
040D8F             1976   
040D8F C9          1977   	ret
040D90             1978   
040D90             1979   ; get an ascii key value
040D90             1980   fn_input_key:
040D90 C5          1981   	push bc
040D91             1982   	moscall mos_getkey
040D91 3E 00       0001M  		LD	A, function
040D93 49 CF       0002M  		RST.LIS	08h
040D95 C1          1983   	pop bc
040D96 C9          1984   	ret
040D97             1985   
040D97             1986   ; input a text of 8 chars
040D97             1987   fn_input_text8:
040D97             1988   	; locate x,y
040D97             1989   	vdu 31
040D97 3E 1F       0001M  		LD	A, function
040D99 49 D7       0002M  		RST.LIS	10h
040D9B             1990   	vdu FILENAME_X
040D9B 3E 07       0001M  		LD	A, function
040D9D 49 D7       0002M  		RST.LIS	10h
040D9F             1991   	vdu FILENAME_Y
040D9F 3E 18       0001M  		LD	A, function
040DA1 49 D7       0002M  		RST.LIS	10h
040DA3             1992   
040DA3             1993   	; print text
040DA3 21 5D 18 04 1994   	ld hl,filename_label
040DA7 01 00 00 00 1995   	ld bc,0
040DAB AF          1996   	xor a
040DAC 49 DF       1997   	rst.lis $18
040DAE             1998   
040DAE             1999   	; show cursor
040DAE             2000   	vdu 23
040DAE 3E 17       0001M  		LD	A, function
040DB0 49 D7       0002M  		RST.LIS	10h
040DB2             2001   	vdu 1
040DB2 3E 01       0001M  		LD	A, function
040DB4 49 D7       0002M  		RST.LIS	10h
040DB6             2002   	vdu 1
040DB6 3E 01       0001M  		LD	A, function
040DB8 49 D7       0002M  		RST.LIS	10h
040DBA             2003   
040DBA 0E 00       2004   	ld c,0
040DBC             2005   
040DBC             2006   it8_loop:
040DBC             2007   	; get ascii key
040DBC CD 90 0D 04 2008   	call fn_input_key
040DC0 B7          2009   	or a
040DC1 CA BC 0D 04 2010   	jp z,it8_loop
040DC5             2011   
040DC5 FE 2E       2012   	cp '.'
040DC7 CA 11 0E 04 2013   	jp z,it8l_add_char
040DCB             2014   
040DCB FE 2D       2015   	cp '-'
040DCD CA 11 0E 04 2016   	jp z,it8l_add_char
040DD1             2017   
040DD1 FE 5F       2018   	cp '_'
040DD3 CA 11 0E 04 2019   	jp z,it8l_add_char
040DD7             2020   
040DD7 FE 7F       2021   	cp 127
040DD9 CA 45 0E 04 2022   	jp z,it8l_backspace
040DDD             2023   
040DDD FE 0D       2024   	cp 13
040DDF CA 83 0E 04 2025   	jp z,it8l_return
040DE3             2026   
040DE3 FE 30       2027   	cp '0'
040DE5 DA BC 0D 04 2028   	jp c,it8_loop
040DE9             2029   
040DE9 16 39       2030   	ld d,'9'
040DEB 14          2031   	inc d
040DEC BA          2032   	cp d
040DED DA 11 0E 04 2033   	jp c,it8l_add_char
040DF1             2034   
040DF1 FE 41       2035   	cp 'A'
040DF3 DA BC 0D 04 2036   	jp c,it8_loop
040DF7             2037   
040DF7 16 5A       2038   	ld d,'Z'
040DF9 14          2039   	inc d
040DFA BA          2040   	cp d
040DFB DA 11 0E 04 2041   	jp c,it8l_add_char
040DFF             2042   
040DFF FE 61       2043   	cp 'a'
040E01 DA BC 0D 04 2044   	jp c,it8_loop
040E05             2045   
040E05 16 7A       2046   	ld d,'z'
040E07 14          2047   	inc d
040E08 BA          2048   	cp d
040E09 DA 11 0E 04 2049   	jp c,it8l_add_char
040E0D             2050   
040E0D C3 BC 0D 04 2051   	jp it8_loop
040E11             2052   
040E11             2053   it8l_add_char:
040E11 F5          2054   	push af
040E12 79          2055   	ld a,c
040E13 FE 10       2056   	cp 16
040E15 38 05       2057   	jr c,it8l_poke_char
040E17 F1          2058   	pop af
040E18 C3 BC 0D 04 2059   	jp it8_loop
040E1C             2060   
040E1C             2061   it8l_poke_char:
040E1C F1          2062   	pop af
040E1D 21 67 18 04 2063   	ld hl,filename
040E21 06 00       2064   	ld b,0
040E23 09          2065   	add hl,bc
040E24 77          2066   	ld (hl),a
040E25 0C          2067   	inc c
040E26 F5          2068   	push af
040E27 C5          2069   	push bc
040E28             2070   
040E28             2071   	; locate x,y
040E28             2072   	vdu 31
040E28 3E 1F       0001M  		LD	A, function
040E2A 49 D7       0002M  		RST.LIS	10h
040E2C             2073   	vdu FILENAME_X+9
040E2C 3E 10       0001M  		LD	A, function
040E2E 49 D7       0002M  		RST.LIS	10h
040E30             2074   	vdu FILENAME_Y
040E30 3E 18       0001M  		LD	A, function
040E32 49 D7       0002M  		RST.LIS	10h
040E34             2075   
040E34             2076   	; print text
040E34 21 67 18 04 2077   	ld hl,filename
040E38 01 00 00 00 2078   	ld bc,0
040E3C AF          2079   	xor a
040E3D 49 DF       2080   	rst.lis $18
040E3F             2081   
040E3F C1          2082   	pop bc
040E40 F1          2083   	pop af
040E41             2084   
040E41 C3 BC 0D 04 2085   	jp it8_loop
040E45             2086   
040E45             2087   it8l_backspace:
040E45 79          2088   	ld a,c
040E46 FE 00       2089   	cp 0
040E48 CA BC 0D 04 2090   	jp z,it8_loop
040E4C             2091   
040E4C             2092   	; delete a character of the filename
040E4C 21 67 18 04 2093   	ld hl,filename
040E50 06 00       2094   	ld b,0
040E52 09          2095   	add hl,bc
040E53 AF          2096   	xor a
040E54 77          2097   	ld (hl),a
040E55 0D          2098   	dec c
040E56 C5          2099   	push bc
040E57             2100   
040E57             2101   	; locate x,y
040E57             2102   	vdu 31
040E57 3E 1F       0001M  		LD	A, function
040E59 49 D7       0002M  		RST.LIS	10h
040E5B 3E 10       2103   	ld a,FILENAME_X+9
040E5D 81          2104   	add a,c
040E5E             2105   	vdu_a
040E5E 49 D7       0001M  		RST.LIS	10h
040E60             2106   	vdu FILENAME_Y
040E60 3E 18       0001M  		LD	A, function
040E62 49 D7       0002M  		RST.LIS	10h
040E64             2107   
040E64 C5          2108   	push bc
040E65             2109   
040E65             2110   	; print text
040E65 21 8C 18 04 2111   	ld hl,spacechar
040E69 01 00 00 00 2112   	ld bc,0
040E6D AF          2113   	xor a
040E6E 49 DF       2114   	rst.lis $18
040E70             2115   
040E70 C1          2116   	pop bc
040E71             2117   
040E71             2118   	; locate x,y
040E71             2119   	vdu 31
040E71 3E 1F       0001M  		LD	A, function
040E73 49 D7       0002M  		RST.LIS	10h
040E75 3E 10       2120   	ld a,FILENAME_X+9
040E77 81          2121   	add a,c
040E78             2122   	vdu_a
040E78 49 D7       0001M  		RST.LIS	10h
040E7A             2123   	vdu FILENAME_Y
040E7A 3E 18       0001M  		LD	A, function
040E7C 49 D7       0002M  		RST.LIS	10h
040E7E             2124   
040E7E C1          2125   	pop bc
040E7F C3 BC 0D 04 2126   	jp it8_loop
040E83             2127   
040E83             2128   it8l_return:
040E83             2129   	; locate x,y
040E83             2130   	vdu 31
040E83 3E 1F       0001M  		LD	A, function
040E85 49 D7       0002M  		RST.LIS	10h
040E87             2131   	vdu FILENAME_X
040E87 3E 07       0001M  		LD	A, function
040E89 49 D7       0002M  		RST.LIS	10h
040E8B             2132   	vdu FILENAME_Y
040E8B 3E 18       0001M  		LD	A, function
040E8D 49 D7       0002M  		RST.LIS	10h
040E8F             2133   
040E8F             2134   	; print text
040E8F 21 8E 18 04 2135   	ld hl,void_filename
040E93 01 00 00 00 2136   	ld bc,0
040E97 AF          2137   	xor a
040E98 49 DF       2138   	rst.lis $18
040E9A             2139   
040E9A             2140   	; hide cursor
040E9A             2141   	vdu 23
040E9A 3E 17       0001M  		LD	A, function
040E9C 49 D7       0002M  		RST.LIS	10h
040E9E             2142   	vdu 1
040E9E 3E 01       0001M  		LD	A, function
040EA0 49 D7       0002M  		RST.LIS	10h
040EA2             2143   	vdu 0
040EA2 3E 00       0001M  		LD	A, function
040EA4 49 D7       0002M  		RST.LIS	10h
040EA6             2144   
040EA6             2145   it8l_endloop:
040EA6 21 B6 FF FF 2146   	ld hl,KEY_RETURN
040EAA CD 18 17 04 2147   	call fn_inkey
040EAE FE 01       2148   	CP 1
040EB0 CA A6 0E 04 2149   	jp z,it8l_endloop
040EB4             2150   
040EB4 C9          2151   	ret
040EB5             2152   
040EB5             2153   ; load a palette
040EB5             2154   fn_load_palette:
040EB5             2155   	; clear the filename on the screen
040EB5 21 67 18 04 2156   	ld hl,filename
040EB9 06 10       2157   	ld b,FILENAME_LENGTH
040EBB AF          2158   	xor a
040EBC             2159   
040EBC             2160   lp_clear_filename:
040EBC 77          2161   	ld (hl),a
040EBD 23          2162   	inc hl
040EBE 10 FC       2163   	djnz lp_clear_filename
040EC0             2164   
040EC0             2165   	; get filename
040EC0 CD 97 0D 04 2166   	call fn_input_text8
040EC4             2167   
040EC4             2168   	; set path to 'palettes/'
040EC4 21 80 18 04 2169   	ld hl,palette_path
040EC8             2170   	moscall mos_cd
040EC8 3E 03       0001M  		LD	A, function
040ECA 49 CF       0002M  		RST.LIS	08h
040ECC             2171   
040ECC             2172   	; exit on folder error
040ECC FE 00       2173   	cp 0
040ECE C2 90 0F 04 2174   	jp nz,lp_folder_error
040ED2             2175   
040ED2             2176   	; open the file for read
040ED2 21 67 18 04 2177   	ld hl,filename
040ED6 0E 01       2178   	ld c,fa_open_existing|fa_read
040ED8             2179   	moscall mos_fopen
040ED8 3E 0A       0001M  		LD	A, function
040EDA 49 CF       0002M  		RST.LIS	08h
040EDC             2180   
040EDC             2181   	; exit on file error
040EDC FE 00       2182   	cp 0
040EDE CA E2 10 04 2183   	jp z,lp_file_error
040EE2             2184   
040EE2             2185   	; filehandle -> C
040EE2 4F          2186   	ld c,a
040EE3             2187   
040EE3             2188   	; get palette header
040EE3 21 1F 39 04 2189   	ld hl,header_buffer
040EE7 11 10 00 00 2190   	ld de,16
040EEB C5          2191   	push bc ; store filehandle
040EEC             2192   	moscall mos_fread
040EEC 3E 1A       0001M  		LD	A, function
040EEE 49 CF       0002M  		RST.LIS	08h
040EF0 C1          2193   	pop bc ; restore filehandle
040EF1 3E 10       2194   	ld a,16
040EF3 BB          2195   	cp e
040EF4 C2 74 0F 04 2196   	jp nz,lp_close_error
040EF8             2197   
040EF8             2198   	; compare loaded header with needed header
040EF8 11 7B 3C 04 2199   	ld de,header
040EFC 21 1F 39 04 2200   	ld hl,header_buffer
040F00 47          2201   	ld b,a
040F01             2202   
040F01             2203   lp_compare:
040F01 1A          2204   	ld a,(de)
040F02 BE          2205   	cp (hl)
040F03 C2 98 0F 04 2206   	jp nz,lp_header_error
040F07             2207   
040F07 13          2208   	inc de
040F08 23          2209   	inc hl
040F09 05          2210   	dec b
040F0A             2211   
040F0A 78          2212   	ld a,b
040F0B FE 00       2213   	cp 0
040F0D C2 01 0F 04 2214   	jp nz,lp_compare
040F11             2215   
040F11             2216   	; prepare to read the number of colors
040F11 21 2F 39 04 2217   	ld hl,color_buffer
040F15             2218   
040F15             2219   lp_getcount:
040F15             2220   	; read a string for colors count
040F15 C5          2221   	push bc
040F16 E5          2222   	push hl
040F17             2223   
040F17             2224   	; read colors data
040F17             2225   	moscall mos_fgetc
040F17 3E 0C       0001M  		LD	A, function
040F19 49 CF       0002M  		RST.LIS	08h
040F1B             2226   
040F1B E1          2227   	pop hl
040F1C C1          2228   	pop bc
040F1D             2229   
040F1D             2230   	; exit if eof
040F1D DA 74 0F 04 2231   	jp c,lp_close_error
040F21             2232   
040F21 FE 30       2233   	cp 48 ; < 0
040F23 38 0A       2234   	jr c,lpgc_next
040F25 FE 3A       2235   	cp 58 ; > 9
040F27 D2 DD 10 04 2236   	jp nc,lp_data_error
040F2B             2237   
040F2B 77          2238   	ld (hl),a
040F2C 23          2239   	inc hl
040F2D 18 E6       2240   	jr lp_getcount
040F2F             2241   
040F2F             2242   lpgc_next:
040F2F F5          2243   	push af
040F30 3E 0D       2244   	ld a,13
040F32 77          2245   	ld (hl),a ; store CR
040F33 F1          2246   	pop af
040F34             2247   
040F34             2248   	; test CR
040F34 FE 0D       2249   	cp 13
040F36 C2 74 0F 04 2250   	jp nz,lp_close_error
040F3A             2251   
040F3A C5          2252   	push bc
040F3B             2253   
040F3B             2254   	; read LF
040F3B             2255   	moscall mos_fgetc
040F3B 3E 0C       0001M  		LD	A, function
040F3D 49 CF       0002M  		RST.LIS	08h
040F3F             2256   
040F3F C1          2257   	pop bc
040F40             2258   
040F40             2259   	; test LF
040F40 FE 0A       2260   	cp 10
040F42 C2 74 0F 04 2261   	jp nz,lp_close_error
040F46             2262   
040F46             2263   	; prepare to read color strings
040F46 11 00 00 00 2264   	ld de,#000000
040F4A 21 32 39 04 2265   	ld hl,palette_buffer
040F4E             2266   
040F4E             2267   lp_load_pal_loop:
040F4E C5          2268   	push bc
040F4F D5          2269   	push de
040F50 E5          2270   	push hl
040F51             2271   
040F51             2272   	; read colors data
040F51             2273   	moscall mos_fgetc
040F51 3E 0C       0001M  		LD	A, function
040F53 49 CF       0002M  		RST.LIS	08h
040F55             2274   
040F55             2275   	; exit if eof
040F55 DA 6D 0F 04 2276   	jp c,lp_loaded
040F59             2277   
040F59 E1          2278   	pop hl
040F5A D1          2279   	pop de
040F5B C1          2280   	pop bc
040F5C             2281   
040F5C 77          2282   	ld (hl),a ; store loaded char in palette buffer
040F5D 23          2283   	inc hl
040F5E 13          2284   	inc de ; count chars
040F5F 7A          2285   	ld a,d
040F60 FE 03       2286   	cp MAX_PAL_DATA_HI
040F62 DA 4E 0F 04 2287   	jp c,lp_load_pal_loop
040F66 7B          2288   	ld a,e
040F67 FE 44       2289   	cp MAX_PAL_DATA_LO
040F69 DA 4E 0F 04 2290   	jp c,lp_load_pal_loop
040F6D             2291   
040F6D             2292   ; end of file
040F6D             2293   lp_loaded:
040F6D E1          2294   	pop hl
040F6E D1          2295   	pop de
040F6F C1          2296   	pop bc
040F70             2297   
040F70 C3 A0 0F 04 2298   	jp lp_close
040F74             2299   
040F74             2300   lp_close_error:
040F74 C5          2301   	push bc
040F75             2302   
040F75             2303   	; read error
040F75 CD 2E 15 04 2304   	call fn_print_file_error
040F79             2305   
040F79 C1          2306   	pop bc
040F7A             2307   
040F7A             2308   	; close the file
040F7A             2309   	moscall mos_fclose
040F7A 3E 0B       0001M  		LD	A, function
040F7C 49 CF       0002M  		RST.LIS	08h
040F7E             2310   
040F7E             2311   	; set path to home
040F7E 21 89 18 04 2312   	ld hl,back_path
040F82             2313   	moscall mos_cd
040F82 3E 03       0001M  		LD	A, function
040F84 49 CF       0002M  		RST.LIS	08h
040F86             2314   
040F86             2315   	; exit on error
040F86 FE 00       2316   	cp 0
040F88 C2 90 0F 04 2317   	jp nz,lp_folder_error
040F8C             2318   
040F8C C3 D7 10 04 2319   	jp lp_exit
040F90             2320   
040F90             2321   lp_folder_error:
040F90             2322   	; write error
040F90 CD 65 15 04 2323   	call fn_print_folder_error
040F94 C3 D7 10 04 2324   	jp lp_exit
040F98             2325   
040F98             2326   lp_header_error:
040F98             2327   	; write error
040F98 CD 9C 15 04 2328   	call fn_print_header_error
040F9C C3 D7 10 04 2329   	jp lp_exit
040FA0             2330   
040FA0             2331   lp_close:
040FA0 C5          2332   	push bc
040FA1             2333   
040FA1             2334   	; close the file
040FA1             2335   	moscall mos_fclose
040FA1 3E 0B       0001M  		LD	A, function
040FA3 49 CF       0002M  		RST.LIS	08h
040FA5             2336   
040FA5 C1          2337   	pop bc
040FA6             2338   
040FA6             2339   	; set path to home
040FA6 21 89 18 04 2340   	ld hl,back_path
040FAA             2341   	moscall mos_cd
040FAA 3E 03       0001M  		LD	A, function
040FAC 49 CF       0002M  		RST.LIS	08h
040FAE             2342   
040FAE             2343   	; exit on error
040FAE FE 00       2344   	cp 0
040FB0 C2 90 0F 04 2345   	jp nz,lp_folder_error
040FB4             2346   
040FB4             2347   	; read the number of colors we have in the palette
040FB4 21 2F 39 04 2348   	ld hl,color_buffer
040FB8 7E          2349   	ld a,(hl)
040FB9 47          2350   	ld b,a
040FBA 23          2351   	inc hl
040FBB 7E          2352   	ld a,(hl)
040FBC 4F          2353   	ld c,a ; bc = 1st char, 2nd char or CR
040FBD             2354   
040FBD             2355   	; first is a char number ?
040FBD 78          2356   	ld a,b
040FBE FE 30       2357   	cp 48
040FC0 DA DD 10 04 2358   	jp c,lp_data_error
040FC4 FE 3A       2359   	cp 58
040FC6 D2 DD 10 04 2360   	jp nc,lp_data_error
040FCA             2361   
040FCA 79          2362   	ld a,c
040FCB FE 0D       2363   	cp 13
040FCD C2 EF 0F 04 2364   	jp nz,lp_two_numbers
040FD1             2365   
040FD1             2366   ; only one number
040FD1 78          2367   	ld a,b
040FD2 D6 30       2368   	sub 48
040FD4             2369   
040FD4 21 11 19 04 2370   	ld hl,new_colors_count
040FD8 77          2371   	ld (hl),a
040FD9             2372   
040FD9 FE 00       2373   	cp 0
040FDB CA DD 10 04 2374   	jp z,lp_data_error
040FDF FE 03       2375   	cp 3
040FE1 DA 24 10 04 2376   	jp c,lp_two_colors
040FE5 FE 05       2377   	cp 5
040FE7 DA 45 10 04 2378   	jp c,lp_four_colors
040FEB             2379   
040FEB C3 66 10 04 2380   	jp lp_sixteen_colors
040FEF             2381   
040FEF             2382   ; two numbers
040FEF             2383   lp_two_numbers:
040FEF 79          2384   	ld a,c
040FF0 FE 30       2385   	cp 48
040FF2 DA DD 10 04 2386   	jp c,lp_data_error
040FF6 FE 3A       2387   	cp 58
040FF8 D2 DD 10 04 2388   	jp nc,lp_data_error
040FFC             2389   
040FFC 78          2390   	ld a,b
040FFD D6 30       2391   	sub 48
040FFF 01 00 00 00 2392   	ld bc,#000000
041003 47          2393   	ld b,a
041004 0E 0A       2394   	ld c,10
041006 ED 4C       2395   	mlt bc
041008 81          2396   	add a,c
041009             2397   
041009 21 11 19 04 2398   	ld hl,new_colors_count
04100D 77          2399   	ld (hl),a
04100E             2400   
04100E FE 0A       2401   	cp 10
041010 DA DD 10 04 2402   	jp c,lp_data_error
041014 FE 11       2403   	cp 17
041016 DA 66 10 04 2404   	jp c,lp_sixteen_colors
04101A FE 41       2405   	cp 65
04101C DA 87 10 04 2406   	jp c,lp_sixty_four_colors
041020             2407   
041020 C3 DD 10 04 2408   	jp lp_data_error
041024             2409   
041024             2410   lp_two_colors:
041024 21 10 19 04 2411   	ld hl,colors_count
041028 3E 02       2412   	ld a,2
04102A 77          2413   	ld (hl),a
04102B             2414   
04102B 47          2415   	ld b,a
04102C 21 F1 17 04 2416   	ld hl,current_pen
041030 7E          2417   	ld a,(hl)
041031 B8          2418   	cp b
041032 38 02       2419   	jr c,lptc_done
041034 05          2420   	dec b
041035 70          2421   	ld (hl),b
041036             2422   
041036             2423   lptc_done:
041036 21 11 19 04 2424   	ld hl,new_colors_count
04103A 7E          2425   	ld a,(hl) ; real number of coulours
04103B 06 00       2426   	ld b,0 ; start wit color 0
04103D 21 32 39 04 2427   	ld hl,palette_buffer ; palette will be got here
041041 C3 A8 10 04 2428   	jp lp_read_colors
041045             2429   
041045             2430   lp_four_colors:
041045 21 10 19 04 2431   	ld hl,colors_count
041049 3E 04       2432   	ld a,4
04104B 77          2433   	ld (hl),a
04104C             2434   
04104C 47          2435   	ld b,a
04104D 21 F1 17 04 2436   	ld hl,current_pen
041051 7E          2437   	ld a,(hl)
041052 B8          2438   	cp b
041053 38 02       2439   	jr c,lpfc_done
041055 05          2440   	dec b
041056 70          2441   	ld (hl),b
041057             2442   
041057             2443   lpfc_done:
041057 21 11 19 04 2444   	ld hl,new_colors_count
04105B 7E          2445   	ld a,(hl) ; real number of coulours
04105C 06 00       2446   	ld b,0 ; start wit color 0
04105E 21 32 39 04 2447   	ld hl,palette_buffer ; palette will be got here
041062 C3 A8 10 04 2448   	jp lp_read_colors
041066             2449   
041066             2450   lp_sixteen_colors:
041066 21 10 19 04 2451   	ld hl,colors_count
04106A 3E 10       2452   	ld a,16
04106C 77          2453   	ld (hl),a
04106D             2454   
04106D 47          2455   	ld b,a
04106E 21 F1 17 04 2456   	ld hl,current_pen
041072 7E          2457   	ld a,(hl)
041073 B8          2458   	cp b
041074 38 02       2459   	jr c,lpsc_done
041076 05          2460   	dec b
041077 70          2461   	ld (hl),b
041078             2462   
041078             2463   lpsc_done:
041078 21 11 19 04 2464   	ld hl,new_colors_count
04107C 7E          2465   	ld a,(hl) ; real number of coulours
04107D 06 00       2466   	ld b,0 ; start wit color 0
04107F 21 32 39 04 2467   	ld hl,palette_buffer ; palette will be got here
041083 C3 A8 10 04 2468   	jp lp_read_colors
041087             2469   
041087             2470   lp_sixty_four_colors:
041087 21 10 19 04 2471   	ld hl,colors_count
04108B 3E 40       2472   	ld a,64
04108D 77          2473   	ld (hl),a
04108E             2474   
04108E 47          2475   	ld b,a
04108F 21 F1 17 04 2476   	ld hl,current_pen
041093 7E          2477   	ld a,(hl)
041094 B8          2478   	cp b
041095 38 02       2479   	jr c,lpsfc_done
041097 05          2480   	dec b
041098 70          2481   	ld (hl),b
041099             2482   
041099             2483   lpsfc_done:
041099 21 11 19 04 2484   	ld hl,new_colors_count
04109D 7E          2485   	ld a,(hl) ; real number of coulours
04109E 06 00       2486   	ld b,0 ; start wit color 0
0410A0 21 32 39 04 2487   	ld hl,palette_buffer ; palette will be taken here
0410A4 C3 A8 10 04 2488   	jp lp_read_colors
0410A8             2489   
0410A8             2490   lp_read_colors:
0410A8 F5          2491   	push af
0410A9             2492   
0410A9 CD F5 10 04 2493   	call lp_read_tint ; read red tint
0410AD             2494   
0410AD E5          2495   	push hl
0410AE 21 12 19 04 2496   	ld hl,red_tint
0410B2 77          2497   	ld (hl),a
0410B3 E1          2498   	pop hl
0410B4             2499   
0410B4 CD F5 10 04 2500   	call lp_read_tint ; read green tint
0410B8             2501   
0410B8 E5          2502   	push hl
0410B9 21 13 19 04 2503   	ld hl,green_tint
0410BD 77          2504   	ld (hl),a
0410BE E1          2505   	pop hl
0410BF             2506   
0410BF CD F5 10 04 2507   	call lp_read_tint ; read blue tint
0410C3             2508   
0410C3 E5          2509   	push hl
0410C4 21 14 19 04 2510   	ld hl,blue_tint
0410C8 77          2511   	ld (hl),a
0410C9 E1          2512   	pop hl
0410CA             2513   
0410CA CD 81 11 04 2514   	call lp_set_tint
0410CE             2515   
0410CE F1          2516   	pop af
0410CF             2517   
0410CF 04          2518   	inc b ; increment number of colors
0410D0 3D          2519   	dec a ; decrement real number of colors
0410D1 FE 00       2520   	cp 0
0410D3 C2 A8 10 04 2521   	jp nz,lp_read_colors
0410D7             2522   
0410D7             2523   lp_exit:
0410D7 C9          2524   	ret
0410D8             2525   
0410D8             2526   lp_wrong_exit:
0410D8 F1          2527   	pop af
0410D9 C3 DD 10 04 2528   	jp lp_data_error
0410DD             2529   
0410DD             2530   lp_data_error:
0410DD CD D3 15 04 2531   	call fn_print_data_error
0410E1 C9          2532   	ret
0410E2             2533   
0410E2             2534   lp_file_error:
0410E2 CD 2E 15 04 2535   	call fn_print_file_error
0410E6             2536   
0410E6             2537   	; set path to home
0410E6 21 89 18 04 2538   	ld hl,back_path
0410EA             2539   	moscall mos_cd
0410EA 3E 03       0001M  		LD	A, function
0410EC 49 CF       0002M  		RST.LIS	08h
0410EE             2540   
0410EE             2541   	; exit on error
0410EE FE 00       2542   	cp 0
0410F0 C2 90 0F 04 2543   	jp nz,lp_folder_error
0410F4             2544   
0410F4 C9          2545   	ret
0410F5             2546   
0410F5             2547   lp_read_tint:
0410F5 0E 00       2548   	ld c,0 ; number of chars readen for a single string number
0410F7 11 77 3C 04 2549   	ld de,temp_chars_buffer ; temp buffer for a string number
0410FB             2550   
0410FB             2551   	; read next string number
0410FB CD 65 11 04 2552   	call lprt_read_chars
0410FF             2553   
0410FF 79          2554   	ld a,c
041100 FE 00       2555   	cp 0 ; no numbers
041102 CA 1C 11 04 2556   	jp z,lprt_wrong_exit
041106 FE 04       2557   	cp 4 ; too many numbers
041108 D2 1C 11 04 2558   	jp nc,lprt_wrong_exit
04110C             2559   
04110C FE 03       2560   	cp 3
04110E 28 29       2561   	jr z,lprt_three_int
041110             2562   
041110 FE 02       2563   	cp 2
041112 28 0A       2564   	jr z,lprt_two_int
041114             2565   
041114             2566   	; one int only
041114 11 77 3C 04 2567   	ld de,temp_chars_buffer
041118 1A          2568   	ld a,(de)
041119 D6 30       2569   	sub 48
04111B C9          2570   	ret
04111C             2571   
04111C             2572   lprt_wrong_exit:
04111C AF          2573   	xor a
04111D C9          2574   	ret
04111E             2575   
04111E             2576   ; two int
04111E             2577   lprt_two_int:
04111E C5          2578   	push bc
04111F 11 77 3C 04 2579   	ld de,temp_chars_buffer
041123 1A          2580   	ld a,(de)
041124 D6 30       2581   	sub 48
041126 D5          2582   	push de
041127 11 00 00 00 2583   	ld de,#000000
04112B 5F          2584   	ld e,a
04112C 16 0A       2585   	ld d,10
04112E ED 5C       2586   	mlt de
041130 43          2587   	ld b,e
041131 D1          2588   	pop de
041132 13          2589   	inc de
041133 1A          2590   	ld a,(de)
041134 D6 30       2591   	sub 48
041136 80          2592   	add a,b ; full int value is here
041137 C1          2593   	pop bc
041138 C9          2594   	ret
041139             2595   
041139             2596   ; three int
041139             2597   lprt_three_int:
041139 C5          2598   	push bc
04113A 11 77 3C 04 2599   	ld de,temp_chars_buffer
04113E 1A          2600   	ld a,(de)
04113F D6 30       2601   	sub 48
041141 D5          2602   	push de
041142 11 00 00 00 2603   	ld de,#000000
041146 5F          2604   	ld e,a
041147 16 64       2605   	ld d,100
041149 ED 5C       2606   	mlt de
04114B 43          2607   	ld b,e
04114C D1          2608   	pop de
04114D 13          2609   	inc de
04114E 1A          2610   	ld a,(de)
04114F D6 30       2611   	sub 48
041151 D5          2612   	push de
041152 11 00 00 00 2613   	ld de,#000000
041156 5F          2614   	ld e,a
041157 16 0A       2615   	ld d,10
041159 ED 5C       2616   	mlt de
04115B 4B          2617   	ld c,e
04115C D1          2618   	pop de
04115D 13          2619   	inc de
04115E 1A          2620   	ld a,(de)
04115F D6 30       2621   	sub 48
041161 81          2622   	add a,c
041162 80          2623   	add a,b ; full int value is here
041163 C1          2624   	pop bc
041164 C9          2625   	ret
041165             2626   
041165             2627   lprt_read_chars:
041165 3E 0D       2628   	ld a,13
041167 12          2629   	ld (de),a ; store eol as next default temp char
041168             2630   
041168 7E          2631   	ld a,(hl) ; get the new char in the palette buffer
041169 23          2632   	inc hl
04116A             2633   
04116A FE 20       2634   	cp 32
04116C C8          2635   	ret z ; ret if space
04116D FE 0D       2636   	cp 13
04116F 28 F4       2637   	jr z,lprt_read_chars ; loop if CR
041171 FE 0A       2638   	cp 10
041173 C8          2639   	ret z ; ret if LF
041174 FE 30       2640   	cp 48
041176 D8          2641   	ret c ; ret if not number
041177 FE 3A       2642   	cp 58
041179 D0          2643   	ret nc ; ret if not number
04117A             2644   
04117A             2645   ; found a number, store it
04117A 12          2646   	ld (de),a
04117B 13          2647   	inc de
04117C 0C          2648   	inc c
04117D C3 65 11 04 2649   	jp lprt_read_chars
041181             2650   
041181             2651   ; set tint (RGB = c,e,l)
041181             2652   lp_set_tint:
041181 F5          2653   	push af
041182 C5          2654   	push bc
041183 D5          2655   	push de
041184 E5          2656   	push hl
041185             2657   
041185 C5          2658   	push bc
041186             2659   	vdu 19
041186 3E 13       0001M  		LD	A, function
041188 49 D7       0002M  		RST.LIS	10h
04118A C1          2660   	pop bc
04118B 78          2661   	ld a,b
04118C             2662   	vdu_a
04118C 49 D7       0001M  		RST.LIS	10h
04118E             2663   	vdu 255
04118E 3E FF       0001M  		LD	A, function
041190 49 D7       0002M  		RST.LIS	10h
041192             2664   
041192 21 12 19 04 2665   	ld hl,red_tint
041196 7E          2666   	ld a,(hl)
041197             2667   	vdu_a
041197 49 D7       0001M  		RST.LIS	10h
041199             2668   
041199 21 13 19 04 2669   	ld hl,green_tint
04119D 7E          2670   	ld a,(hl)
04119E             2671   	vdu_a
04119E 49 D7       0001M  		RST.LIS	10h
0411A0             2672   
0411A0 21 14 19 04 2673   	ld hl,blue_tint
0411A4 7E          2674   	ld a,(hl)
0411A5             2675   	vdu_a
0411A5 49 D7       0001M  		RST.LIS	10h
0411A7             2676   
0411A7 E1          2677   	pop hl
0411A8 D1          2678   	pop de
0411A9 C1          2679   	pop bc
0411AA F1          2680   	pop af
0411AB C9          2681   	ret
0411AC             2682   
0411AC             2683   ; save the palette
0411AC             2684   fn_save_palette:
0411AC C9          2685   	ret
0411AD             2686   
0411AD             2687   ; load a sprite, giving its full name, with extension
0411AD             2688   fn_load_sprite:
0411AD             2689   	; clear the filename on the screen
0411AD 21 67 18 04 2690   	ld hl,filename
0411B1 06 10       2691   	ld b,FILENAME_LENGTH
0411B3 AF          2692   	xor a
0411B4             2693   
0411B4             2694   ls_clear_filename:
0411B4 77          2695   	ld (hl),a
0411B5 23          2696   	inc hl
0411B6 10 FC       2697   	djnz ls_clear_filename
0411B8             2698   
0411B8             2699   	; get filename
0411B8 CD 97 0D 04 2700   	call fn_input_text8
0411BC             2701   
0411BC             2702   	; set path to 'sprites/'
0411BC 21 78 18 04 2703   	ld hl,sprite_path
0411C0             2704   	moscall mos_cd
0411C0 3E 03       0001M  		LD	A, function
0411C2 49 CF       0002M  		RST.LIS	08h
0411C4             2705   
0411C4             2706   	; exit on folder error
0411C4 FE 00       2707   	cp 0
0411C6 C2 97 12 04 2708   	jp nz,ls_folder_error
0411CA             2709   
0411CA             2710   	; open the file for read
0411CA 21 67 18 04 2711   	ld hl,filename
0411CE 0E 01       2712   	ld c,fa_open_existing|fa_read
0411D0             2713   	moscall mos_fopen
0411D0 3E 0A       0001M  		LD	A, function
0411D2 49 CF       0002M  		RST.LIS	08h
0411D4             2714   
0411D4             2715   	; exit on file error
0411D4 FE 00       2716   	cp 0
0411D6 CA C9 12 04 2717   	jp z,ls_file_error
0411DA             2718   
0411DA             2719   	; filehandle -> C
0411DA 4F          2720   	ld c,a
0411DB             2721   
0411DB             2722   	; get colors count
0411DB             2723   	moscall mos_fgetc
0411DB 3E 0C       0001M  		LD	A, function
0411DD 49 CF       0002M  		RST.LIS	08h
0411DF DA 72 12 04 2724   	jp c,ls_close_error
0411E3             2725   
0411E3 FE 41       2726   	cp MAX_COLORS + 1
0411E5 D2 72 12 04 2727   	jp nc,ls_close_error
0411E9             2728   
0411E9             2729   	; store colors count
0411E9 21 10 19 04 2730   	ld hl,colors_count
0411ED 77          2731   	ld (hl),a
0411EE             2732   
0411EE             2733   	; redraw palette
0411EE C5          2734   	push bc
0411EF CD 52 17 04 2735   	call fn_draw_the_palette
0411F3 C1          2736   	pop bc
0411F4             2737   
0411F4             2738   	; get frames count
0411F4             2739   	moscall mos_fgetc
0411F4 3E 0C       0001M  		LD	A, function
0411F6 49 CF       0002M  		RST.LIS	08h
0411F8 DA 72 12 04 2740   	jp c,ls_close_error
0411FC             2741   
0411FC             2742   	; store frames count
0411FC 21 17 19 04 2743   	ld hl,frames_count
041200 77          2744   	ld (hl),a
041201             2745   
041201             2746   	; set last frame as current frame
041201 21 16 19 04 2747   	ld hl,current_frame
041205 3D          2748   	dec a
041206 77          2749   	ld (hl),a
041207             2750   
041207             2751   	; get sprite size
041207             2752   	moscall mos_fgetc
041207 3E 0C       0001M  		LD	A, function
041209 49 CF       0002M  		RST.LIS	08h
04120B DA 72 12 04 2753   	jp c,ls_close_error
04120F             2754   
04120F             2755   	; store sprite size
04120F 21 F0 17 04 2756   	ld hl,spr_size
041213 77          2757   	ld (hl),a
041214             2758   
041214             2759   	; set 4x4 pixel width
041214 FE 04       2760   	cp SPR44
041216 20 09       2761   	jr nz,ls_next1
041218             2762   
041218 21 EF 17 04 2763   	ld hl,pixel_width
04121C 06 20       2764   	ld b,SPR44_width
04121E 70          2765   	ld (hl),b
04121F 18 21       2766   	jr ls_next4
041221             2767   
041221             2768   ls_next1:
041221             2769   	; set 8x8 pixel width
041221 FE 08       2770   	cp SPR88
041223 20 09       2771   	jr nz,ls_next2
041225             2772   
041225 21 EF 17 04 2773   	ld hl,pixel_width
041229 06 10       2774   	ld b,SPR88_width
04122B 70          2775   	ld (hl),b
04122C 18 14       2776   	jr ls_next4
04122E             2777   
04122E             2778   ls_next2:
04122E             2779   
04122E             2780   	; set 16x16 pixel width
04122E FE 10       2781   	cp SPR1616
041230 20 09       2782   	jr nz,ls_next3
041232             2783   
041232 21 EF 17 04 2784   	ld hl,pixel_width
041236 06 08       2785   	ld b,SPR1616_width
041238 70          2786   	ld (hl),b
041239 18 07       2787   	jr ls_next4
04123B             2788   
04123B             2789   ls_next3:
04123B             2790   
04123B 21 EF 17 04 2791   	ld hl,pixel_width
04123F 06 04       2792   	ld b,SPR3232_width
041241 70          2793   	ld (hl),b
041242             2794   
041242             2795   ls_next4:
041242 21 00 00 00 2796   	ld hl,#000000
041246 6F          2797   	ld l,a
041247 67          2798   	ld h,a
041248 ED 6C       2799   	mlt hl ; one frame sprite length
04124A E5          2800   	push hl
04124B             2801   
04124B             2802   	; get frames count
04124B 21 17 19 04 2803   	ld hl,frames_count
04124F 46          2804   	ld b,(hl)
041250             2805   
041250 E1          2806   	pop hl
041251             2807   
041251 05          2808   	dec b
041252 78          2809   	ld a,b
041253 FE 00       2810   	cp 0
041255 28 05       2811   	jr z,ls_read_data
041257             2812   
041257             2813   	; de = one frame sprite length
041257 E5          2814   	push hl
041258 D1          2815   	pop de
041259             2816   ls_add_length:
041259 19          2817   	add hl,de
04125A 10 FD       2818   	djnz ls_add_length
04125C             2819   
04125C             2820   ls_read_data:
04125C E5          2821   	push hl ; all frames length
04125D E5          2822   	push hl
04125E D1          2823   	pop de
04125F 21 1F 19 04 2824   	ld hl,sprite_buffer
041263             2825   	moscall mos_fread
041263 3E 1A       0001M  		LD	A, function
041265 49 CF       0002M  		RST.LIS	08h
041267 E1          2826   	pop hl ; frame length
041268 B7          2827   	or a
041269 ED 52       2828   	sbc hl,de
04126B 19          2829   	add hl,de ; compare frame length with loaded bytes
04126C 20 04       2830   	jr nz,ls_close_error
04126E C3 9F 12 04 2831   	jp ls_close
041272             2832   
041272             2833   ls_close_error:
041272 C5          2834   	push bc
041273             2835   
041273             2836   	; read error
041273 CD 2E 15 04 2837   	call fn_print_file_error
041277             2838   
041277 C1          2839   	pop bc
041278             2840   
041278             2841   	; close the file
041278             2842   	moscall mos_fclose
041278 3E 0B       0001M  		LD	A, function
04127A 49 CF       0002M  		RST.LIS	08h
04127C             2843   
04127C             2844   	; set path to home
04127C 21 89 18 04 2845   	ld hl,back_path
041280             2846   	moscall mos_cd
041280 3E 03       0001M  		LD	A, function
041282 49 CF       0002M  		RST.LIS	08h
041284             2847   
041284             2848   	; exit on error
041284 FE 00       2849   	cp 0
041286 C2 97 12 04 2850   	jp nz,ls_folder_error
04128A             2851   
04128A             2852   
04128A             2853   	; reset current frame and coordinates of the drawing pixel
04128A 21 EB 17 04 2854   	ld hl,xpix
04128E AF          2855   	xor a
04128F 77          2856   	ld (hl),a
041290 21 EC 17 04 2857   	ld hl,ypix
041294 77          2858   	ld (hl),a
041295 18 25       2859   	jr ls_exit
041297             2860   
041297             2861   ls_folder_error:
041297             2862   	; write error
041297 CD 65 15 04 2863   	call fn_print_folder_error
04129B C3 BC 12 04 2864   	jp ls_exit
04129F             2865   
04129F             2866   ls_close:
04129F             2867   	; close the file
04129F             2868   	moscall mos_fclose
04129F 3E 0B       0001M  		LD	A, function
0412A1 49 CF       0002M  		RST.LIS	08h
0412A3             2869   
0412A3             2870   	; set path to home
0412A3 21 89 18 04 2871   	ld hl,back_path
0412A7             2872   	moscall mos_cd
0412A7 3E 03       0001M  		LD	A, function
0412A9 49 CF       0002M  		RST.LIS	08h
0412AB             2873   
0412AB             2874   	; exit on error
0412AB FE 00       2875   	cp 0
0412AD C2 97 12 04 2876   	jp nz,ls_folder_error
0412B1             2877   
0412B1             2878   	; reset current frame and coordinates of the drawing pixel
0412B1 21 EB 17 04 2879   	ld hl,xpix
0412B5 AF          2880   	xor a
0412B6 77          2881   	ld (hl),a
0412B7 21 EC 17 04 2882   	ld hl,ypix
0412BB 77          2883   	ld (hl),a
0412BC             2884   
0412BC             2885   ls_exit:
0412BC CD B4 16 04 2886   	call fn_show_spr_descr
0412C0 CD 4A 16 04 2887   	call fn_change_frame
0412C4 CD 6F 16 04 2888   	call fn_change_frames_count
0412C8 C9          2889   	ret
0412C9             2890   
0412C9             2891   ls_file_error:
0412C9 CD 2E 15 04 2892   	call fn_print_file_error
0412CD             2893   
0412CD             2894   	; set path to home
0412CD 21 89 18 04 2895   	ld hl,back_path
0412D1             2896   	moscall mos_cd
0412D1 3E 03       0001M  		LD	A, function
0412D3 49 CF       0002M  		RST.LIS	08h
0412D5             2897   
0412D5             2898   	; exit on error
0412D5 FE 00       2899   	cp 0
0412D7 C2 97 12 04 2900   	jp nz,ls_folder_error
0412DB             2901   
0412DB C9          2902   	ret
0412DC             2903   
0412DC             2904   ; save a sprite, giving its name
0412DC             2905   fn_save_sprite:
0412DC             2906   	; clear filename on the screen
0412DC 21 67 18 04 2907   	ld hl,filename
0412E0 06 10       2908   	ld b,FILENAME_LENGTH
0412E2 AF          2909   	xor a
0412E3             2910   
0412E3             2911   ss_clear_filename:
0412E3 77          2912   	ld (hl),a
0412E4 23          2913   	inc hl
0412E5 10 FC       2914   	djnz ss_clear_filename
0412E7             2915   
0412E7             2916   	; get filename
0412E7 CD 97 0D 04 2917   	call fn_input_text8
0412EB             2918   
0412EB             2919   	; set path to sprite path
0412EB 21 78 18 04 2920   	ld hl,sprite_path
0412EF             2921   	moscall mos_cd
0412EF 3E 03       0001M  		LD	A, function
0412F1 49 CF       0002M  		RST.LIS	08h
0412F3             2922   
0412F3             2923   	; create it on error
0412F3 FE 00       2924   	cp 0
0412F5 F5          2925   	push af
0412F6 C4 49 17 04 2926   	call nz,fn_create_sprite_folder
0412FA F1          2927   	pop af
0412FB 28 08       2928   	jr z,ss_next
0412FD             2929   
0412FD             2930   	; set path to sprite path
0412FD 21 78 18 04 2931   	ld hl,sprite_path
041301             2932   	moscall mos_cd
041301 3E 03       0001M  		LD	A, function
041303 49 CF       0002M  		RST.LIS	08h
041305             2933   
041305             2934   ss_next:
041305             2935   	; exit on error
041305 FE 00       2936   	cp 0
041307 C2 97 13 04 2937   	jp nz,ss_folder_error
04130B             2938   
04130B             2939   	; open the file for write
04130B 21 67 18 04 2940   	ld hl,filename
04130F 0E 0A       2941   	ld c,fa_create_always|fa_write
041311             2942   	moscall mos_fopen
041311 3E 0A       0001M  		LD	A, function
041313 49 CF       0002M  		RST.LIS	08h
041315             2943   
041315             2944   	; exit on error
041315 FE 00       2945   	cp 0
041317 CA D4 13 04 2946   	jp z,ss_file_error
04131B             2947   
04131B             2948   	; filehandle -> C
04131B 4F          2949   	ld c,a
04131C             2950   
04131C             2951   	; store colors count in the file
04131C 21 10 19 04 2952   	ld hl,colors_count
041320 46          2953   	ld b,(hl)
041321             2954   	moscall mos_fputc
041321 3E 0D       0001M  		LD	A, function
041323 49 CF       0002M  		RST.LIS	08h
041325             2955   
041325             2956   	; store frames count in the file
041325 21 17 19 04 2957   	ld hl,frames_count
041329 46          2958   	ld b,(hl)
04132A             2959   	moscall mos_fputc
04132A 3E 0D       0001M  		LD	A, function
04132C 49 CF       0002M  		RST.LIS	08h
04132E             2960   
04132E             2961   	; store sprite size in the file
04132E 21 F0 17 04 2962   	ld hl,spr_size
041332 46          2963   	ld b,(hl)
041333             2964   	moscall mos_fputc
041333 3E 0D       0001M  		LD	A, function
041335 49 CF       0002M  		RST.LIS	08h
041337             2965   
041337             2966   	; de = size²
041337 21 00 00 00 2967   	ld hl,#000000
04133B 68          2968   	ld l,b
04133C 60          2969   	ld h,b
04133D ED 6C       2970   	mlt hl ; HL = sprite length
04133F E5          2971   	push hl
041340             2972   
041340             2973   	; get frames count
041340 21 17 19 04 2974   	ld hl,frames_count
041344 46          2975   	ld b,(hl)
041345             2976   
041345 E1          2977   	pop hl
041346             2978   
041346 05          2979   	dec b
041347 78          2980   	ld a,b
041348 FE 00       2981   	cp 0
04134A 28 05       2982   	jr z,ss_write_data
04134C             2983   
04134C E5          2984   	push hl
04134D D1          2985   	pop de
04134E             2986   ss_add_length:
04134E 19          2987   	add hl,de
04134F 10 FD       2988   	djnz ss_add_length
041351             2989   
041351             2990   ss_write_data:
041351 E5          2991   	push hl
041352 E5          2992   	push hl
041353 D1          2993   	pop de
041354 21 1F 19 04 2994   	ld hl,sprite_buffer
041358             2995   	moscall mos_fwrite
041358 3E 1B       0001M  		LD	A, function
04135A 49 CF       0002M  		RST.LIS	08h
04135C E1          2996   	pop hl
04135D B7          2997   	or a
04135E ED 52       2998   	sbc hl,de
041360 19          2999   	add hl,de
041361 20 04       3000   	jr nz,ss_close_error
041363 C3 9F 13 04 3001   	jp ss_close
041367             3002   
041367             3003   ss_close_error:
041367 C5          3004   	push bc
041368             3005   
041368             3006   	; write error
041368 CD 2E 15 04 3007   	call fn_print_file_error
04136C             3008   
04136C C1          3009   	pop bc
04136D             3010   
04136D             3011   	; close the file
04136D             3012   	moscall mos_fclose
04136D 3E 0B       0001M  		LD	A, function
04136F 49 CF       0002M  		RST.LIS	08h
041371             3013   
041371             3014   	; set path to home
041371 21 89 18 04 3015   	ld hl,back_path
041375             3016   	moscall mos_cd
041375 3E 03       0001M  		LD	A, function
041377 49 CF       0002M  		RST.LIS	08h
041379             3017   
041379             3018   	; exit on error
041379 FE 00       3019   	cp 0
04137B C2 97 13 04 3020   	jp nz,ss_folder_error
04137F             3021   
04137F             3022   	; reset current frame and coordinates of the drawing pixel
04137F 21 17 19 04 3023   	ld hl,frames_count
041383 7E          3024   	ld a,(hl)
041384 3D          3025   	dec a
041385 21 16 19 04 3026   	ld hl,current_frame
041389 77          3027   	ld (hl),a
04138A 21 EB 17 04 3028   	ld hl,xpix
04138E AF          3029   	xor a
04138F 77          3030   	ld (hl),a
041390 21 EC 17 04 3031   	ld hl,ypix
041394 77          3032   	ld (hl),a
041395 18 30       3033   	jr ss_exit
041397             3034   
041397             3035   ss_folder_error:
041397             3036   	; write error
041397 CD 65 15 04 3037   	call fn_print_folder_error
04139B C3 C7 13 04 3038   	jp ss_exit
04139F             3039   
04139F             3040   ss_close:
04139F             3041   	; close the file
04139F             3042   	moscall mos_fclose
04139F 3E 0B       0001M  		LD	A, function
0413A1 49 CF       0002M  		RST.LIS	08h
0413A3             3043   
0413A3             3044   	; set path to home
0413A3 21 89 18 04 3045   	ld hl,back_path
0413A7             3046   	moscall mos_cd
0413A7 3E 03       0001M  		LD	A, function
0413A9 49 CF       0002M  		RST.LIS	08h
0413AB             3047   
0413AB             3048   	; exit on error
0413AB FE 00       3049   	cp 0
0413AD C2 97 13 04 3050   	jp nz,ss_folder_error
0413B1             3051   
0413B1             3052   	; reset current frame and coordinates of the drawing pixel
0413B1 21 17 19 04 3053   	ld hl,frames_count
0413B5 7E          3054   	ld a,(hl)
0413B6 3D          3055   	dec a
0413B7 21 16 19 04 3056   	ld hl,current_frame
0413BB 77          3057   	ld (hl),a
0413BC 21 EB 17 04 3058   	ld hl,xpix
0413C0 AF          3059   	xor a
0413C1 77          3060   	ld (hl),a
0413C2 21 EC 17 04 3061   	ld hl,ypix
0413C6 77          3062   	ld (hl),a
0413C7             3063   
0413C7             3064   ss_exit:
0413C7 CD B4 16 04 3065   	call fn_show_spr_descr
0413CB CD 4A 16 04 3066   	call fn_change_frame
0413CF CD 6F 16 04 3067   	call fn_change_frames_count
0413D3 C9          3068   	ret
0413D4             3069   
0413D4             3070   ss_file_error:
0413D4 CD 2E 15 04 3071   	call fn_print_file_error
0413D8             3072   
0413D8             3073   	; set path to home
0413D8 21 89 18 04 3074   	ld hl,back_path
0413DC             3075   	moscall mos_cd
0413DC 3E 03       0001M  		LD	A, function
0413DE 49 CF       0002M  		RST.LIS	08h
0413E0             3076   
0413E0             3077   	; exit on error
0413E0 FE 00       3078   	cp 0
0413E2 C2 97 13 04 3079   	jp nz,ss_folder_error
0413E6 C9          3080   	ret
0413E7             3081   
0413E7             3082   ; export sprite data in assembly language, giving its name
0413E7             3083   fn_export_sprite:
0413E7             3084   	; clear filename
0413E7 21 67 18 04 3085   	ld hl,filename
0413EB 06 10       3086   	ld b,FILENAME_LENGTH
0413ED AF          3087   	xor a
0413EE             3088   
0413EE             3089   es_clear_filename:
0413EE 77          3090   	ld (hl),a
0413EF 23          3091   	inc hl
0413F0 10 FC       3092   	djnz es_clear_filename
0413F2             3093   
0413F2             3094   	; get filename
0413F2 CD 97 0D 04 3095   	call fn_input_text8
0413F6             3096   
0413F6             3097   	; set path to sprite path
0413F6 21 78 18 04 3098   	ld hl,sprite_path
0413FA             3099   	moscall mos_cd
0413FA 3E 03       0001M  		LD	A, function
0413FC 49 CF       0002M  		RST.LIS	08h
0413FE             3100   
0413FE             3101   	; create it on error
0413FE FE 00       3102   	cp 0
041400 F5          3103   	push af
041401 C4 49 17 04 3104   	call nz,fn_create_sprite_folder
041405 F1          3105   	pop af
041406 28 0E       3106   	jr z,es_next
041408             3107   
041408             3108   	; set path to sprite path
041408 21 78 18 04 3109   	ld hl,sprite_path
04140C             3110   	moscall mos_cd
04140C 3E 03       0001M  		LD	A, function
04140E 49 CF       0002M  		RST.LIS	08h
041410             3111   
041410             3112   	; exit on error
041410 FE 00       3113   	cp 0
041412 C2 12 15 04 3114   	jp nz,es_folder_error
041416             3115   
041416             3116   es_next:
041416             3117   	; open the file for write
041416 21 67 18 04 3118   	ld hl,filename
04141A 0E 0A       3119   	ld c,fa_create_always|fa_write
04141C             3120   	moscall mos_fopen
04141C 3E 0A       0001M  		LD	A, function
04141E 49 CF       0002M  		RST.LIS	08h
041420             3121   
041420             3122   	; exit on error
041420 FE 00       3123   	cp 0
041422 CA 1B 15 04 3124   	jp z,es_file_error
041426             3125   
041426             3126   	; filehandle -> C
041426 4F          3127   	ld c,a
041427             3128   
041427             3129   
041427             3130   	; L = first frame
041427 3E 00       3131   	ld a,0
041429 21 1F 19 04 3132   	ld hl,sprite_buffer
04142D 11 00 00 00 3133   	ld de,$000000
041431             3134   
041431             3135   es_frames_repeat:
041431 F5          3136   	push af
041432 E5          3137   	push hl
041433             3138   
041433 F5          3139   	push af
041434             3140   
041434             3141   	; start to write...
041434 1E 00       3142   	ld e,0 ; rows
041436             3143   
041436 06 3B       3144   	ld b,';'
041438             3145   	moscall mos_fputc
041438 3E 0D       0001M  		LD	A, function
04143A 49 CF       0002M  		RST.LIS	08h
04143C             3146   
04143C 06 20       3147   	ld b,' '
04143E             3148   	moscall mos_fputc
04143E 3E 0D       0001M  		LD	A, function
041440 49 CF       0002M  		RST.LIS	08h
041442             3149   
041442 06 46       3150   	ld b,'F'
041444             3151   	moscall mos_fputc
041444 3E 0D       0001M  		LD	A, function
041446 49 CF       0002M  		RST.LIS	08h
041448             3152   
041448 06 72       3153   	ld b,'r'
04144A             3154   	moscall mos_fputc
04144A 3E 0D       0001M  		LD	A, function
04144C 49 CF       0002M  		RST.LIS	08h
04144E             3155   
04144E 06 6D       3156   	ld b,'m'
041450             3157   	moscall mos_fputc
041450 3E 0D       0001M  		LD	A, function
041452 49 CF       0002M  		RST.LIS	08h
041454             3158   
041454 06 20       3159   	ld b,' '
041456             3160   	moscall mos_fputc
041456 3E 0D       0001M  		LD	A, function
041458 49 CF       0002M  		RST.LIS	08h
04145A             3161   
04145A F1          3162   	pop af
04145B C6 30       3163   	add a,'0'
04145D 47          3164   	ld b,a
04145E             3165   	moscall mos_fputc
04145E 3E 0D       0001M  		LD	A, function
041460 49 CF       0002M  		RST.LIS	08h
041462             3166   
041462 06 0D       3167   	ld b,13
041464             3168   	moscall mos_fputc
041464 3E 0D       0001M  		LD	A, function
041466 49 CF       0002M  		RST.LIS	08h
041468             3169   
041468 06 0A       3170   	ld b,10
04146A             3171   	moscall mos_fputc
04146A 3E 0D       0001M  		LD	A, function
04146C 49 CF       0002M  		RST.LIS	08h
04146E             3172   
04146E             3173   es_repeat:
04146E             3174   
04146E 06 44       3175   	ld b,'D'
041470             3176   	moscall mos_fputc
041470 3E 0D       0001M  		LD	A, function
041472 49 CF       0002M  		RST.LIS	08h
041474             3177   
041474 06 42       3178   	ld b,'B'
041476             3179   	moscall mos_fputc
041476 3E 0D       0001M  		LD	A, function
041478 49 CF       0002M  		RST.LIS	08h
04147A             3180   
04147A 06 20       3181   	ld b,' '
04147C             3182   	moscall mos_fputc
04147C 3E 0D       0001M  		LD	A, function
04147E 49 CF       0002M  		RST.LIS	08h
041480             3183   
041480 16 00       3184   	ld d,0 ; columns
041482             3185   
041482             3186   es_repeat_line:
041482 D5          3187   	push de
041483             3188   
041483 7E          3189   	ld a,(hl)
041484 23          3190   	inc hl
041485             3191   
041485             3192   	; convert A to BCD
041485 CD CE 17 04 3193   	call fn_hex2bcd
041489             3194   
041489             3195   	; write two numbers (chars)
041489 5F          3196   	ld e,a
04148A E6 F0       3197   	and $f0
04148C 0F          3198   	rrca
04148D 0F          3199   	rrca
04148E 0F          3200   	rrca
04148F 0F          3201   	rrca
041490 C6 30       3202   	add '0'
041492             3203   
041492 47          3204   	ld b,a
041493             3205   	moscall mos_fputc
041493 3E 0D       0001M  		LD	A, function
041495 49 CF       0002M  		RST.LIS	08h
041497             3206   
041497 7B          3207   	ld a,e
041498 E6 0F       3208   	and $0f
04149A C6 30       3209   	add '0'
04149C             3210   
04149C 47          3211   	ld b,a
04149D             3212   	moscall mos_fputc
04149D 3E 0D       0001M  		LD	A, function
04149F 49 CF       0002M  		RST.LIS	08h
0414A1             3213   
0414A1 D1          3214   	pop de
0414A2 14          3215   	inc d
0414A3 3A F0 17 04 3216   	ld a,(spr_size)
0414A7 BA          3217   	cp d
0414A8 F5          3218   	push af
0414A9 C4 C7 17 04 3219   	call nz,fn_comma
0414AD F1          3220   	pop af
0414AE C2 82 14 04 3221   	jp nz,es_repeat_line
0414B2             3222   
0414B2 06 0D       3223   	ld b,13 ; CR
0414B4             3224   	moscall mos_fputc
0414B4 3E 0D       0001M  		LD	A, function
0414B6 49 CF       0002M  		RST.LIS	08h
0414B8             3225   
0414B8 06 0A       3226   	ld b,10 ; LF
0414BA             3227   	moscall mos_fputc
0414BA 3E 0D       0001M  		LD	A, function
0414BC 49 CF       0002M  		RST.LIS	08h
0414BE             3228   
0414BE 1C          3229   	inc e
0414BF 3A F0 17 04 3230   	ld a,(spr_size)
0414C3 BB          3231   	cp e
0414C4 C2 6E 14 04 3232   	jp nz,es_repeat
0414C8             3233   
0414C8 06 0D       3234   	ld b,13 ; CR
0414CA             3235   	moscall mos_fputc
0414CA 3E 0D       0001M  		LD	A, function
0414CC 49 CF       0002M  		RST.LIS	08h
0414CE             3236   
0414CE 06 0A       3237   	ld b,10 ; LF
0414D0             3238   	moscall mos_fputc
0414D0 3E 0D       0001M  		LD	A, function
0414D2 49 CF       0002M  		RST.LIS	08h
0414D4             3239   
0414D4 E1          3240   	pop hl
0414D5 D5          3241   	push de
0414D6 ED 5C       3242   	mlt de
0414D8 19          3243   	add hl,de
0414D9 D1          3244   	pop de
0414DA F1          3245   	pop af
0414DB 3C          3246   	inc a
0414DC DD 21 17 19 3247   	ld ix,frames_count
       04          
0414E1 DD BE 00    3248   	cp (ix+0)
0414E4 C2 31 14 04 3249   	jp nz,es_frames_repeat
0414E8             3250   
0414E8             3251   	; close the file
0414E8             3252   	moscall mos_fclose
0414E8 3E 0B       0001M  		LD	A, function
0414EA 49 CF       0002M  		RST.LIS	08h
0414EC             3253   
0414EC             3254   	; set path to home
0414EC 21 89 18 04 3255   	ld hl,back_path
0414F0             3256   	moscall mos_cd
0414F0 3E 03       0001M  		LD	A, function
0414F2 49 CF       0002M  		RST.LIS	08h
0414F4             3257   
0414F4             3258   	; exit on error
0414F4 FE 00       3259   	cp 0
0414F6 C2 12 15 04 3260   	jp nz,es_folder_error
0414FA             3261   
0414FA             3262   	; reset current frame and coordinates of the drawing pixel
0414FA 21 17 19 04 3263   	ld hl,frames_count
0414FE 7E          3264   	ld a,(hl)
0414FF 3D          3265   	dec a
041500 21 16 19 04 3266   	ld hl,current_frame
041504 77          3267   	ld (hl),a
041505 21 EB 17 04 3268   	ld hl,xpix
041509 AF          3269   	xor a
04150A 77          3270   	ld (hl),a
04150B 21 EC 17 04 3271   	ld hl,ypix
04150F 77          3272   	ld (hl),a
041510 18 08       3273   	jr es_exit
041512             3274   
041512             3275   es_folder_error:
041512             3276   	; write error
041512 CD 65 15 04 3277   	call fn_print_folder_error
041516 C3 1A 15 04 3278   	jp es_exit
04151A             3279   
04151A             3280   es_exit:
04151A C9          3281   	ret
04151B             3282   
04151B             3283   es_file_error:
04151B CD 2E 15 04 3284   	call fn_print_file_error
04151F             3285   
04151F             3286   	; set path to home
04151F 21 89 18 04 3287   	ld hl,back_path
041523             3288   	moscall mos_cd
041523 3E 03       0001M  		LD	A, function
041525 49 CF       0002M  		RST.LIS	08h
041527             3289   
041527             3290   	; exit on error
041527 FE 00       3291   	cp 0
041529 C2 12 15 04 3292   	jp nz,es_folder_error
04152D C9          3293   	ret
04152E             3294   
04152E             3295   ; print 'file error'
04152E             3296   fn_print_file_error:
04152E             3297   	vdu 7
04152E 3E 07       0001M  		LD	A, function
041530 49 D7       0002M  		RST.LIS	10h
041532             3298   
041532             3299   	; locate x,y
041532             3300   	vdu 31
041532 3E 1F       0001M  		LD	A, function
041534 49 D7       0002M  		RST.LIS	10h
041536             3301   	vdu FILENAME_X
041536 3E 07       0001M  		LD	A, function
041538 49 D7       0002M  		RST.LIS	10h
04153A             3302   	vdu FILENAME_Y
04153A 3E 18       0001M  		LD	A, function
04153C 49 D7       0002M  		RST.LIS	10h
04153E             3303   
04153E             3304   	; print text
04153E 21 A8 18 04 3305   	ld hl,file_error
041542 01 00 00 00 3306   	ld bc,0
041546 AF          3307   	xor a
041547 49 DF       3308   	rst.lis $18
041549             3309   
041549 CD 90 0D 04 3310   	call fn_input_key
04154D             3311   
04154D             3312   	; locate x,y
04154D             3313   	vdu 31
04154D 3E 1F       0001M  		LD	A, function
04154F 49 D7       0002M  		RST.LIS	10h
041551             3314   	vdu FILENAME_X
041551 3E 07       0001M  		LD	A, function
041553 49 D7       0002M  		RST.LIS	10h
041555             3315   	vdu FILENAME_Y
041555 3E 18       0001M  		LD	A, function
041557 49 D7       0002M  		RST.LIS	10h
041559             3316   
041559             3317   	; print text
041559 21 8E 18 04 3318   	ld hl,void_filename
04155D 01 00 00 00 3319   	ld bc,0
041561 AF          3320   	xor a
041562 49 DF       3321   	rst.lis $18
041564             3322   
041564 C9          3323   	ret
041565             3324   
041565             3325   ; print 'folder error'
041565             3326   fn_print_folder_error:
041565             3327   	vdu 7
041565 3E 07       0001M  		LD	A, function
041567 49 D7       0002M  		RST.LIS	10h
041569             3328   
041569             3329   	; locate x,y
041569             3330   	vdu 31
041569 3E 1F       0001M  		LD	A, function
04156B 49 D7       0002M  		RST.LIS	10h
04156D             3331   	vdu FILENAME_X
04156D 3E 07       0001M  		LD	A, function
04156F 49 D7       0002M  		RST.LIS	10h
041571             3332   	vdu FILENAME_Y
041571 3E 18       0001M  		LD	A, function
041573 49 D7       0002M  		RST.LIS	10h
041575             3333   
041575             3334   	; print text
041575 21 C2 18 04 3335   	ld hl,folder_error
041579 01 00 00 00 3336   	ld bc,0
04157D AF          3337   	xor a
04157E 49 DF       3338   	rst.lis $18
041580             3339   
041580 CD 90 0D 04 3340   	call fn_input_key
041584             3341   
041584             3342   	; locate x,y
041584             3343   	vdu 31
041584 3E 1F       0001M  		LD	A, function
041586 49 D7       0002M  		RST.LIS	10h
041588             3344   	vdu FILENAME_X
041588 3E 07       0001M  		LD	A, function
04158A 49 D7       0002M  		RST.LIS	10h
04158C             3345   	vdu FILENAME_Y
04158C 3E 18       0001M  		LD	A, function
04158E 49 D7       0002M  		RST.LIS	10h
041590             3346   
041590             3347   	; print text
041590 21 8E 18 04 3348   	ld hl,void_filename
041594 01 00 00 00 3349   	ld bc,0
041598 AF          3350   	xor a
041599 49 DF       3351   	rst.lis $18
04159B             3352   
04159B C9          3353   	ret
04159C             3354   
04159C             3355   ; print 'header error'
04159C             3356   fn_print_header_error:
04159C             3357   	vdu 7
04159C 3E 07       0001M  		LD	A, function
04159E 49 D7       0002M  		RST.LIS	10h
0415A0             3358   
0415A0             3359   	; locate x,y
0415A0             3360   	vdu 31
0415A0 3E 1F       0001M  		LD	A, function
0415A2 49 D7       0002M  		RST.LIS	10h
0415A4             3361   	vdu FILENAME_X
0415A4 3E 07       0001M  		LD	A, function
0415A6 49 D7       0002M  		RST.LIS	10h
0415A8             3362   	vdu FILENAME_Y
0415A8 3E 18       0001M  		LD	A, function
0415AA 49 D7       0002M  		RST.LIS	10h
0415AC             3363   
0415AC             3364   	; print text
0415AC 21 DC 18 04 3365   	ld hl,header_error
0415B0 01 00 00 00 3366   	ld bc,0
0415B4 AF          3367   	xor a
0415B5 49 DF       3368   	rst.lis $18
0415B7             3369   
0415B7 CD 90 0D 04 3370   	call fn_input_key
0415BB             3371   
0415BB             3372   	; locate x,y
0415BB             3373   	vdu 31
0415BB 3E 1F       0001M  		LD	A, function
0415BD 49 D7       0002M  		RST.LIS	10h
0415BF             3374   	vdu FILENAME_X
0415BF 3E 07       0001M  		LD	A, function
0415C1 49 D7       0002M  		RST.LIS	10h
0415C3             3375   	vdu FILENAME_Y
0415C3 3E 18       0001M  		LD	A, function
0415C5 49 D7       0002M  		RST.LIS	10h
0415C7             3376   
0415C7             3377   	; print text
0415C7 21 8E 18 04 3378   	ld hl,void_filename
0415CB 01 00 00 00 3379   	ld bc,0
0415CF AF          3380   	xor a
0415D0 49 DF       3381   	rst.lis $18
0415D2             3382   
0415D2 C9          3383   	ret
0415D3             3384   
0415D3             3385   ; print 'data error'
0415D3             3386   fn_print_data_error:
0415D3             3387   	vdu 7
0415D3 3E 07       0001M  		LD	A, function
0415D5 49 D7       0002M  		RST.LIS	10h
0415D7             3388   
0415D7             3389   	; locate x,y
0415D7             3390   	vdu 31
0415D7 3E 1F       0001M  		LD	A, function
0415D9 49 D7       0002M  		RST.LIS	10h
0415DB             3391   	vdu FILENAME_X
0415DB 3E 07       0001M  		LD	A, function
0415DD 49 D7       0002M  		RST.LIS	10h
0415DF             3392   	vdu FILENAME_Y
0415DF 3E 18       0001M  		LD	A, function
0415E1 49 D7       0002M  		RST.LIS	10h
0415E3             3393   
0415E3             3394   	; print text
0415E3 21 F6 18 04 3395   	ld hl,data_error
0415E7 01 00 00 00 3396   	ld bc,0
0415EB AF          3397   	xor a
0415EC 49 DF       3398   	rst.lis $18
0415EE             3399   
0415EE CD 90 0D 04 3400   	call fn_input_key
0415F2             3401   
0415F2             3402   	; locate x,y
0415F2             3403   	vdu 31
0415F2 3E 1F       0001M  		LD	A, function
0415F4 49 D7       0002M  		RST.LIS	10h
0415F6             3404   	vdu FILENAME_X
0415F6 3E 07       0001M  		LD	A, function
0415F8 49 D7       0002M  		RST.LIS	10h
0415FA             3405   	vdu FILENAME_Y
0415FA 3E 18       0001M  		LD	A, function
0415FC 49 D7       0002M  		RST.LIS	10h
0415FE             3406   
0415FE             3407   	; print text
0415FE 21 8E 18 04 3408   	ld hl,void_filename
041602 01 00 00 00 3409   	ld bc,0
041606 AF          3410   	xor a
041607 49 DF       3411   	rst.lis $18
041609             3412   
041609 C9          3413   	ret
04160A             3414   
04160A             3415   ; refresh all the current sprite frame
04160A             3416   fn_refresh_sprite:
04160A 06 00       3417   	ld b,0 ; B -> x cordinate
04160C 0E 00       3418   	ld c,0 ; C -> y cordinate
04160E             3419   
04160E             3420   rs_loop:
04160E C5          3421   	push bc
04160F             3422   
04160F 21 EB 17 04 3423   	ld hl,xpix
041613 70          3424   	ld (hl),b
041614 21 EC 17 04 3425   	ld hl,ypix
041618 71          3426   	ld (hl),c
041619 CD 22 0C 04 3427   	call fn_draw_pixel_without_border
04161D             3428   
04161D C1          3429   	pop bc
04161E             3430   
04161E 04          3431   	inc b
04161F 21 F0 17 04 3432   	ld hl,spr_size
041623 7E          3433   	ld a,(hl)
041624 B8          3434   	cp b
041625 28 04       3435   	jr z,rs_next_line
041627 C3 0E 16 04 3436   	jp rs_loop
04162B             3437   
04162B             3438   rs_next_line:
04162B 06 00       3439   	ld b,0
04162D 0C          3440   	inc c
04162E 21 F0 17 04 3441   	ld hl,spr_size
041632 7E          3442   	ld a,(hl)
041633 B9          3443   	cp c
041634 28 04       3444   	jr z,rs_end
041636 C3 0E 16 04 3445   	jp rs_loop
04163A             3446   
04163A             3447   rs_end:
04163A AF          3448   	xor a
04163B 21 EB 17 04 3449   	ld hl,xpix
04163F 77          3450   	ld (hl),a
041640 21 EC 17 04 3451   	ld hl,ypix
041644 77          3452   	ld (hl),a
041645 CD 0E 0C 04 3453   	call fn_draw_pixel_with_border
041649             3454   
041649 C9          3455   	ret
04164A             3456   
04164A             3457   fn_change_frame:
04164A 21 16 19 04 3458   	ld hl,current_frame
04164E 7E          3459   	ld a,(hl)
04164F 3C          3460   	inc a
041650 C6 30       3461   	add a,48
041652 21 18 19 04 3462   	ld hl,current_frame_ascii
041656 77          3463   	ld (hl),a
041657             3464   
041657             3465   	; locate 21,3
041657             3466   	vdu 31
041657 3E 1F       0001M  		LD	A, function
041659 49 D7       0002M  		RST.LIS	10h
04165B             3467   	vdu 21
04165B 3E 15       0001M  		LD	A, function
04165D 49 D7       0002M  		RST.LIS	10h
04165F             3468   	vdu 3
04165F 3E 03       0001M  		LD	A, function
041661 49 D7       0002M  		RST.LIS	10h
041663             3469   
041663             3470   	; print text
041663 21 18 19 04 3471   	ld hl,current_frame_ascii
041667 01 00 00 00 3472   	ld bc,0
04166B AF          3473   	xor a
04166C 49 DF       3474   	rst.lis $18
04166E             3475   
04166E C9          3476   	ret
04166F             3477   
04166F             3478   fn_change_frames_count:
04166F 21 17 19 04 3479   	ld hl,frames_count
041673 7E          3480   	ld a,(hl)
041674 C6 30       3481   	add a,48
041676 21 1A 19 04 3482   	ld hl,frames_count_ascii
04167A 77          3483   	ld (hl),a
04167B             3484   
04167B             3485   	; locate 23,3
04167B             3486   	vdu 31
04167B 3E 1F       0001M  		LD	A, function
04167D 49 D7       0002M  		RST.LIS	10h
04167F             3487   	vdu 23
04167F 3E 17       0001M  		LD	A, function
041681 49 D7       0002M  		RST.LIS	10h
041683             3488   	vdu 3
041683 3E 03       0001M  		LD	A, function
041685 49 D7       0002M  		RST.LIS	10h
041687             3489   
041687             3490   	; print text
041687 21 1A 19 04 3491   	ld hl,frames_count_ascii
04168B 01 00 00 00 3492   	ld bc,0
04168F AF          3493   	xor a
041690 49 DF       3494   	rst.lis $18
041692             3495   
041692 C9          3496   	ret
041693             3497   
041693             3498   ; slowdown (wait delay)
041693             3499   fn_slowdown:
041693 DD 21 1C 19 3500   	ld ix,keydata
       04          
041698 DD 7E 02    3501   	ld a,(ix+2)
04169B E6 02       3502   	and 2
04169D FE 02       3503   	cp 2 ; shift key to disable delay
04169F C8          3504   	ret z
0416A0             3505   
0416A0             3506   	moscall mos_sysvars
0416A0 3E 08       0001M  		LD	A, function
0416A2 49 CF       0002M  		RST.LIS	08h
0416A4 DD 4E 00    3507   	ld c,(ix+sysvar_time)
0416A7             3508   
0416A7             3509   sd_loop:
0416A7             3510   	moscall mos_sysvars
0416A7 3E 08       0001M  		LD	A, function
0416A9 49 CF       0002M  		RST.LIS	08h
0416AB DD 7E 00    3511   	ld a,(ix+sysvar_time)
0416AE 91          3512   	sub c
0416AF FE 14       3513   	cp SLOWDOWN_DELAY
0416B1 20 F4       3514   	jr nz,sd_loop
0416B3 C9          3515   	ret
0416B4             3516   
0416B4             3517   fn_show_spr_descr:
0416B4             3518   	; locate 15,3
0416B4             3519   	vdu 31
0416B4 3E 1F       0001M  		LD	A, function
0416B6 49 D7       0002M  		RST.LIS	10h
0416B8             3520   	vdu 15
0416B8 3E 0F       0001M  		LD	A, function
0416BA 49 D7       0002M  		RST.LIS	10h
0416BC             3521   	vdu 3
0416BC 3E 03       0001M  		LD	A, function
0416BE 49 D7       0002M  		RST.LIS	10h
0416C0             3522   
0416C0             3523   	; print text
0416C0 21 3B 18 04 3524   	ld hl,spr_descr
0416C4 01 00 00 00 3525   	ld bc,0
0416C8 AF          3526   	xor a
0416C9 49 DF       3527   	rst.lis $18
0416CB             3528   
0416CB             3529   	; locate 15,5
0416CB             3530   	vdu 31
0416CB 3E 1F       0001M  		LD	A, function
0416CD 49 D7       0002M  		RST.LIS	10h
0416CF             3531   	vdu 15
0416CF 3E 0F       0001M  		LD	A, function
0416D1 49 D7       0002M  		RST.LIS	10h
0416D3             3532   	vdu 5
0416D3 3E 05       0001M  		LD	A, function
0416D5 49 D7       0002M  		RST.LIS	10h
0416D7             3533   
0416D7             3534   	; check for sprite size...
0416D7 21 F0 17 04 3535   	ld hl,spr_size
0416DB 7E          3536   	ld a,(hl)
0416DC             3537   
0416DC FE 04       3538   	cp 4
0416DE 20 0C       3539   	jr nz,ssd_8x8
0416E0             3540   
0416E0             3541   	; print text 4x4
0416E0 21 45 18 04 3542   	ld hl,spr_descr1
0416E4 01 00 00 00 3543   	ld bc,0
0416E8 AF          3544   	xor a
0416E9 49 DF       3545   	rst.lis $18
0416EB C9          3546   	ret
0416EC             3547   
0416EC             3548   ssd_8x8:
0416EC FE 08       3549   	cp 8
0416EE 20 0C       3550   	jr nz,ssd_16x16
0416F0             3551   
0416F0             3552   	; print text 8x8
0416F0 21 4B 18 04 3553   	ld hl,spr_descr2
0416F4 01 00 00 00 3554   	ld bc,0
0416F8 AF          3555   	xor a
0416F9 49 DF       3556   	rst.lis $18
0416FB C9          3557   	ret
0416FC             3558   
0416FC             3559   ssd_16x16:
0416FC FE 10       3560   	cp 16
0416FE 20 0C       3561   	jr nz,ssd_32x32
041700             3562   
041700             3563   	; print text 16x16
041700 21 51 18 04 3564   	ld hl,spr_descr3
041704 01 00 00 00 3565   	ld bc,0
041708 AF          3566   	xor a
041709 49 DF       3567   	rst.lis $18
04170B C9          3568   	ret
04170C             3569   
04170C             3570   ssd_32x32:
04170C             3571   	; print text 32x32
04170C 21 57 18 04 3572   	ld hl,spr_descr4
041710 01 00 00 00 3573   	ld bc,0
041714 AF          3574   	xor a
041715 49 DF       3575   	rst.lis $18
041717             3576   
041717 C9          3577   	ret
041718             3578   
041718             3579   ; input: HL = negative key to check
041718             3580   fn_inkey:
041718             3581   	moscall mos_getkbmap
041718 3E 1E       0001M  		LD	A, function
04171A 49 CF       0002M  		RST.LIS	08h
04171C 23          3582   	INC	HL
04171D 7D          3583   	LD	A, L
04171E ED 44       3584   	NEG
041720 4F          3585   	LD	C, A
041721 3E 01       3586   	LD	A, 1
041723 FA 47 17 04 3587   	JP	M,i_false ; < -128 ?
041727             3588   
041727 21 45 00 04 3589   	LD	HL,BITLOOKUP
04172B 11 00 00 00 3590   	LD	DE,0
04172F 79          3591   	LD	A,C
041730 E6 07       3592   	AND	00000111b
041732 5F          3593   	LD	E,A
041733 19          3594   	ADD	HL,DE
041734 46          3595   	LD	B,(HL)
041735             3596   
041735 79          3597   	LD	A,C
041736 E6 78       3598   	AND	01111000b
041738 0F          3599   	RRCA
041739 0F          3600   	RRCA
04173A 0F          3601   	RRCA
04173B 5F          3602   	LD	E, A
04173C DD 19       3603   	ADD	IX,DE
04173E DD 7E 00    3604   	LD	A,(IX+0)
041741 A0          3605   	AND	B
041742 28 03       3606   	JR Z,i_false
041744 3E 01       3607   	LD A,1
041746 C9          3608   	RET
041747             3609   i_false:
041747 AF          3610   	XOR A
041748 C9          3611   	RET
041749             3612   
041749             3613   fn_create_sprite_folder:
041749 21 78 18 04 3614   	ld hl,sprite_path
04174D             3615   	moscall mos_mkdir
04174D 3E 07       0001M  		LD	A, function
04174F 49 CF       0002M  		RST.LIS	08h
041751 C9          3616   	ret
041752             3617   
041752             3618   ; draw the palette
041752             3619   fn_draw_the_palette:
041752 0E 00       3620   	ld c,0
041754             3621   
041754             3622   fndtp_palette_loop:
041754 C5          3623   	push bc
041755             3624   
041755             3625   	; choose palette color
041755             3626   	vdu 18
041755 3E 12       0001M  		LD	A, function
041757 49 D7       0002M  		RST.LIS	10h
041759             3627   	vdu 0
041759 3E 00       0001M  		LD	A, function
04175B 49 D7       0002M  		RST.LIS	10h
04175D C1          3628   	pop bc
04175E C5          3629   	push bc
04175F 79          3630   	ld a,c
041760 F5          3631   	push af
041761             3632   	vdu_a
041761 49 D7       0001M  		RST.LIS	10h
041763 F1          3633   	pop af
041764 E5          3634   	push hl
041765 21 10 19 04 3635   	ld hl,colors_count
041769 BE          3636   	cp (hl)
04176A E1          3637   	pop hl
04176B 38 0B       3638   	jr c,fndtppl_zap
04176D             3639   
04176D             3640   	; set 0 if color is out of palette
04176D             3641   	vdu 18
04176D 3E 12       0001M  		LD	A, function
04176F 49 D7       0002M  		RST.LIS	10h
041771             3642   	vdu 0
041771 3E 00       0001M  		LD	A, function
041773 49 D7       0002M  		RST.LIS	10h
041775 AF          3643   	xor a
041776             3644   	vdu_a
041776 49 D7       0001M  		RST.LIS	10h
041778             3645   
041778             3646   fndtppl_zap:
041778             3647   	; store coordinates for a palette square
041778 DD 21 DB 17 3648   	ld ix,x1
       04          
04177D E1          3649   	pop hl
04177E E5          3650   	push hl
04177F 26 05       3651   	ld h,5
041781 ED 6C       3652   	mlt hl
041783 E5          3653   	push hl
041784 DD 75 00    3654   	ld (ix+0),l
041787 DD 74 01    3655   	ld (ix+1),h
04178A             3656   
04178A DD 21 DD 17 3657   	ld ix,y1
       04          
04178F 21 00 00 00 3658   	ld hl,0
041793 DD 75 00    3659   	ld (ix+0),l
041796 DD 74 01    3660   	ld (ix+1),h
041799             3661   
041799 DD 21 DF 17 3662   	ld ix,x2
       04          
04179E E1          3663   	pop hl
04179F 11 04 00 00 3664   	ld de,4
0417A3 19          3665   	add hl,de
0417A4 DD 75 00    3666   	ld (ix+0),l
0417A7 DD 74 01    3667   	ld (ix+1),h
0417AA             3668   
0417AA DD 21 E1 17 3669   	ld ix,y2
       04          
0417AF 21 0A 00 00 3670   	ld hl,10
0417B3 DD 75 00    3671   	ld (ix+0),l
0417B6 DD 74 01    3672   	ld (ix+1),h
0417B9             3673   
0417B9             3674   	; draw the palette filled square
0417B9 CD 40 0B 04 3675   	call fn_rectf
0417BD             3676   
0417BD             3677   	; next color ?
0417BD C1          3678   	pop bc
0417BE 0C          3679   	inc c
0417BF 79          3680   	ld a,c
0417C0 FE 40       3681   	cp MAX_COLORS
0417C2 C2 54 17 04 3682   	jp nz,fndtp_palette_loop
0417C6             3683   
0417C6 C9          3684   	ret
0417C7             3685   
0417C7             3686   fn_comma:
0417C7 06 2C       3687   	ld b,','
0417C9             3688   	moscall mos_fputc
0417C9 3E 0D       0001M  		LD	A, function
0417CB 49 CF       0002M  		RST.LIS	08h
0417CD C9          3689   	ret
0417CE             3690   
0417CE             3691   ; Hex to BCD
0417CE             3692   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
0417CE             3693   ; Input: a = hex number
0417CE             3694   ; Output: a = BCD number
0417CE             3695   ; Clobbers: b,c
0417CE             3696   fn_hex2bcd:
0417CE C5          3697   		push bc
0417CF 4F          3698   		ld c,a  ; Original (hex) number
0417D0 06 08       3699   		ld b,8  ; How many bits
0417D2 AF          3700   		xor a   ; Output (BCD) number, starts at 0
0417D3 CB 21       3701   htb:	sla c   ; shift c into carry
0417D5 8F          3702   		adc a,a
0417D6 27          3703   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
0417D7 10 FA       3704   		djnz htb  ; Repeat for 8 bits
0417D9 C1          3705   		pop bc
0417DA C9          3706   		ret
0417DB             3707   
0417DB             3708   ;======================================================================
0417DB             3709   
0417DB             3710   ; coordinates for rectangles
0417DB             3711   x1:
0417DB 00 00       3712   	dw $0000
0417DD             3713   y1:
0417DD 00 00       3714   	dw $0000
0417DF             3715   x2:
0417DF 00 00       3716   	dw $0000
0417E1             3717   y2:
0417E1 00 00       3718   	dw $0000
0417E3             3719   
0417E3             3720   ; coordinates of the edited sprite
0417E3             3721   xs1:
0417E3 5F 00       3722   	dw 95
0417E5             3723   ys1:
0417E5 37 00       3724   	dw 55
0417E7             3725   xs2:
0417E7 E0 00       3726   	dw 224
0417E9             3727   ys2:
0417E9 B8 00       3728   	dw 184
0417EB             3729   
0417EB             3730   ; coordinates of active pixels to draw
0417EB             3731   xpix:
0417EB 00          3732   	db 0
0417EC             3733   ypix:
0417EC 00          3734   	db 0
0417ED             3735   
0417ED             3736   ; memorized coordinates of active pixels to draw
0417ED             3737   memxpix:
0417ED 00          3738   	db 0
0417EE             3739   memypix:
0417EE 00          3740   	db 0
0417EF             3741   
0417EF             3742   ; width of a pixel in the sprite
0417EF             3743   pixel_width:
0417EF 00          3744   	db 0
0417F0             3745   
0417F0             3746   ; sprite size, in resized pixels
0417F0             3747   spr_size:
0417F0 00          3748   	db 0
0417F1             3749   
0417F1             3750   ; pen color (0-63)
0417F1             3751   current_pen:
0417F1 00          3752   	db 0
0417F2             3753   
0417F2             3754   ; texts for 1st menu
0417F2             3755   title:
0417F2 53 50 52 2D 3756   	db "SPR-EDIT",0
       45 44 49 54 
       00          
0417FB             3757   
0417FB             3758   menu1:
0417FB 46 31 2E 20 3759   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
04180A             3760   menu2:
04180A 46 32 2E 20 3761   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041819             3762   menu3:
041819 46 33 2E 20 3763   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
04182A             3764   menu4:
04182A 46 34 2E 20 3765   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
04183B             3766   
04183B             3767   ; descriptions of sprites
04183B             3768   spr_descr:
04183B 46 72 61 6D 3769   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041845             3770   spr_descr1:
041845 34 78 34 20 3771   	db "4x4  ",0
       20 00       
04184B             3772   spr_descr2:
04184B 38 78 38 20 3773   	db "8x8  ",0
       20 00       
041851             3774   spr_descr3:
041851 31 36 78 31 3775   	db "16x16",0
       36 00       
041857             3776   spr_descr4:
041857 33 32 78 33 3777   	db "32x32",0
       32 00       
04185D             3778   
04185D             3779   ; label before filename
04185D             3780   filename_label:
04185D 46 69 6C 65 3781   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041867             3782   
041867             3783   ; filename without extension
041867             3784   filename:
041867             3785   	ds 17
041878             3786   
041878             3787   sprite_path:
041878 73 70 72 69 3788   	db "sprites",0
       74 65 73 00 
041880             3789   
041880             3790   palette_path:
041880 70 61 6C 65 3791   	db "palettes",0
       74 74 65 73 
       00          
041889             3792   
041889             3793   back_path:
041889 2E 2E 00    3794   	db "..",0
04188C             3795   
04188C             3796   ; single space char to print
04188C             3797   spacechar:
04188C 20 00       3798   	db " ",0
04188E             3799   
04188E             3800   ; spaces to remove filename label
04188E             3801   void_filename:
04188E 20 20 20 20 3802   	db "                         ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0418A8             3803   
0418A8             3804   ; file error message
0418A8             3805   file_error:
0418A8 46 69 6C 65 3806   	db "File error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0418C2             3807   
0418C2             3808   ; folder error message
0418C2             3809   folder_error:
0418C2 46 6F 6C 64 3810   	db "Folder error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0418DC             3811   
0418DC             3812   ; header error message
0418DC             3813   header_error:
0418DC 48 65 61 64 3814   	db "Header error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0418F6             3815   
0418F6             3816   ; data error message
0418F6             3817   data_error:
0418F6 44 61 74 61 3818   	db "Data error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
041910             3819   
041910             3820   ; number of colors
041910             3821   colors_count:
041910 00          3822   	db 0
041911             3823   
041911             3824   ; real number of colors
041911             3825   new_colors_count:
041911 00          3826   	db 0
041912             3827   
041912             3828   red_tint:
041912 00          3829   	db 0
041913             3830   
041913             3831   green_tint:
041913 00          3832   	db 0
041914             3833   
041914             3834   blue_tint:
041914 00          3835   	db 0
041915             3836   
041915             3837   error_flag:
041915 00          3838   	db 0
041916             3839   
041916             3840   ; current frame
041916             3841   current_frame:
041916 00          3842   	db 0
041917             3843   
041917             3844   ; frames count
041917             3845   frames_count:
041917 00          3846   	db 0
041918             3847   
041918             3848   current_frame_ascii:
041918 30 00       3849   	db '0',0
04191A             3850   
04191A             3851   frames_count_ascii:
04191A 30 00       3852   	db '0',0
04191C             3853   
04191C             3854   ; keycode, keydown & keymods are stored here
04191C             3855   keydata:
04191C 00 00 00    3856   	db 0,0,0
04191F             3857   
04191F             3858   ; buffer for the current sprite
04191F             3859   sprite_buffer:
04191F             3860   	ds BUFFER_SIZE
04391F             3861   
04391F             3862   header_buffer:
04391F             3863   	ds HEADER_BUFFER_SIZE
04392F             3864   
04392F             3865   color_buffer:
04392F 00 00 00    3866   	db 0,0,0
043932             3867   
043932             3868   palette_buffer:
043932             3869   	ds MAX_PAL_DATA + 1
043C77             3870   
043C77             3871   temp_chars_buffer:
043C77 00 00 00 00 3872   	db 0,0,0,0
043C7B             3873   
043C7B             3874   header:
043C7B 4A 41 53 43 3875   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043C85 30 31 30 30 3876   	db "0100",13,10
       0D 0A       
043C8B             3877   
043C8B             3878   ; buffer to perform some operations
043C8B             3879   swap_sprite_buffer:
043C8B             3880   	ds ONE_FRAME_BUFFER_SIZE
04408B             3881   
04408B             3882   asm_line:
04408B 44 42 20    3883   	DB "DB "
04408E             3884   
04408E             3885   asm_line_length:
04408E 03          3886   	DB 3
04408F             3887   
04408F             3888   rgb_palette:
04408F 00 00 00    3889   	db $00,$00,$00
044092 AA 00 00    3890   	db $AA,$00,$00
044095 00 AA 00    3891   	db $00,$AA,$00
044098 AA AA 00    3892   	db $AA,$AA,$00
04409B 00 00 AA    3893   	db $00,$00,$AA
04409E AA 00 AA    3894   	db $AA,$00,$AA
0440A1 00 AA AA    3895   	db $00,$AA,$AA
0440A4 AA AA AA    3896   	db $AA,$AA,$AA
0440A7             3897   
0440A7 55 55 55    3898   	db $55,$55,$55
0440AA FF 00 00    3899   	db $FF,$00,$00
0440AD 00 FF 00    3900   	db $00,$FF,$00
0440B0 FF FF 00    3901   	db $FF,$FF,$00
0440B3 00 00 FF    3902   	db $00,$00,$FF
0440B6 FF 00 FF    3903   	db $FF,$00,$FF
0440B9 00 FF FF    3904   	db $00,$FF,$FF
0440BC FF FF FF    3905   	db $FF,$FF,$FF
0440BF             3906   
0440BF 00 00 55    3907   	db $00,$00,$55
0440C2 00 55 00    3908   	db $00,$55,$00
0440C5 00 55 55    3909   	db $00,$55,$55
0440C8 00 55 AA    3910   	db $00,$55,$AA
0440CB 00 55 FF    3911   	db $00,$55,$FF
0440CE 00 AA 55    3912   	db $00,$AA,$55
0440D1 00 AA FF    3913   	db $00,$AA,$FF
0440D4 00 FF 55    3914   	db $00,$FF,$55
0440D7             3915   
0440D7 00 FF AA    3916   	db $00,$FF,$AA
0440DA 55 00 00    3917   	db $55,$00,$00
0440DD 55 00 55    3918   	db $55,$00,$55
0440E0 55 00 AA    3919   	db $55,$00,$AA
0440E3 55 00 FF    3920   	db $55,$00,$FF
0440E6 55 55 00    3921   	db $55,$55,$00
0440E9 55 55 AA    3922   	db $55,$55,$AA
0440EC 55 55 FF    3923   	db $55,$55,$FF
0440EF             3924   
0440EF 55 AA 00    3925   	db $55,$AA,$00
0440F2 55 AA 55    3926   	db $55,$AA,$55
0440F5 55 AA AA    3927   	db $55,$AA,$AA
0440F8 55 AA FF    3928   	db $55,$AA,$FF
0440FB 55 FF 00    3929   	db $55,$FF,$00
0440FE 55 FF 55    3930   	db $55,$FF,$55
044101 55 FF AA    3931   	db $55,$FF,$AA
044104 55 FF FF    3932   	db $55,$FF,$FF
044107             3933   
044107 AA 00 55    3934   	db $AA,$00,$55
04410A AA 00 FF    3935   	db $AA,$00,$FF
04410D AA 55 00    3936   	db $AA,$55,$00
044110 AA 55 55    3937   	db $AA,$55,$55
044113 AA 55 AA    3938   	db $AA,$55,$AA
044116 AA 55 FF    3939   	db $AA,$55,$FF
044119 AA AA 55    3940   	db $AA,$AA,$55
04411C AA AA FF    3941   	db $AA,$AA,$FF
04411F             3942   
04411F AA FF 00    3943   	db $AA,$FF,$00
044122 AA FF 55    3944   	db $AA,$FF,$55
044125 AA FF AA    3945   	db $AA,$FF,$AA
044128 AA FF FF    3946   	db $AA,$FF,$FF
04412B FF 00 55    3947   	db $FF,$00,$55
04412E FF 00 AA    3948   	db $FF,$00,$AA
044131 FF 55 00    3949   	db $FF,$55,$00
044134 FF 55 55    3950   	db $FF,$55,$55
044137             3951   
044137 FF 55 AA    3952   	db $FF,$55,$AA
04413A FF 55 FF    3953   	db $FF,$55,$FF
04413D FF AA 00    3954   	db $FF,$AA,$00
044140 FF AA 55    3955   	db $FF,$AA,$55
044143 FF AA AA    3956   	db $FF,$AA,$AA
044146 FF AA FF    3957   	db $FF,$AA,$FF
044149 FF FF 55    3958   	db $FF,$FF,$55
04414C FF FF AA    3959   	db $FF,$FF,$AA
04414F             3960   
04414F             3961   ; sprite structure:
04414F             3962   ; =================
04414F             3963   ; colors_count  :   byte
04414F             3964   ; frames count	:	byte
04414F             3965   ; spr size		:	byte
04414F             3966   ; data			:   width x height bytes of colors
04414F             3967   
04414F             3968   ; ===============================================
04414F             3969   
04414F             3970   
04414F             3971   ; A = byte to debug
04414F             3972   debug_byte:
04414F F5          3973   	PUSH AF
044150 C5          3974   	PUSH BC
044151 D5          3975   	PUSH DE
044152 E5          3976   	PUSH HL
044153 21 00 00 00 3977   	LD HL,$000000
044157 6F          3978   	LD L,A
044158 11 94 41 04 3979   	LD DE,debug_text
04415C D5          3980   	PUSH DE
04415D CD 9A 41 04 3981   	CALL num2dec
044161 E1          3982   	POP HL
044162 23          3983   	INC HL
044163 23          3984   	INC HL
044164 01 03 00 00 3985   	LD BC,3
044168 3E 00       3986   	LD A,0
04416A 49 DF       3987   	RST.LIS $18
04416C E1          3988   	POP HL
04416D D1          3989   	POP DE
04416E C1          3990   	POP BC
04416F F1          3991   	POP AF
044170 C9          3992   	RET
044171             3993   
044171             3994   ; HL = word to debug
044171             3995   debug_word:
044171 F5          3996   	PUSH AF
044172 C5          3997   	PUSH BC
044173 D5          3998   	PUSH DE
044174 E5          3999   	PUSH HL
044175 11 00 00 00 4000   	LD DE,$000000 ; remove HLU
044179 5D          4001   	LD E,L
04417A 54          4002   	LD D,H
04417B D5          4003   	PUSH DE
04417C E1          4004   	POP HL
04417D 11 94 41 04 4005   	LD DE,debug_text
044181 D5          4006   	PUSH DE
044182 CD 9A 41 04 4007   	CALL num2dec
044186 E1          4008   	POP HL
044187 01 05 00 00 4009   	LD BC,5
04418B 3E 00       4010   	LD A,0
04418D 49 DF       4011   	RST.LIS $18
04418F E1          4012   	POP HL
044190 D1          4013   	POP DE
044191 C1          4014   	POP BC
044192 F1          4015   	POP AF
044193 C9          4016   	RET
044194             4017   
044194             4018   debug_text:
044194             4019   	DS 6,0
04419A             4020   
04419A             4021   ; 16 bits number to string
04419A             4022   num2dec:
04419A 01 F0 D8 FF 4023   	LD BC,-10000
04419E CD BB 41 04 4024   	CALL num1
0441A2 01 18 FC FF 4025   	LD BC,-1000
0441A6 CD BB 41 04 4026   	CALL num1
0441AA 01 9C FF FF 4027   	LD BC,-100
0441AE CD BB 41 04 4028   	CALL num1
0441B2 01 F6 FF FF 4029   	LD BC,-10
0441B6 CD BB 41 04 4030   	CALL num1
0441BA 48          4031   	LD C,B
0441BB             4032   
0441BB 3E 2F       4033   num1: LD A,'0'-1
0441BD 3C          4034   num2: INC A
0441BE 09          4035   	ADD HL,BC
0441BF 38 FC       4036   	JR C,num2
0441C1 ED 42       4037   	SBC HL,BC
0441C3             4038   
0441C3 12          4039   	LD (DE),A
0441C4 13          4040   	INC DE
0441C5 C9          4041   	RET
