PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   COLOR_MIN:	 		equ 0
040045             0022   COLOR_MAX:	 		equ 63
040045             0023   
040045             0024   MAX_FRAMES:			equ 8
040045             0025   
040045             0026   COLOR_WHITE:		equ 15
040045             0027   COLOR_GREY:			equ 7
040045             0028   COLOR_BLACK:		equ 0
040045             0029   
040045             0030   TITLE_X: 	equ 17
040045             0031   TITLE_Y: 	equ 2
040045             0032   MENU_X: 	equ 13
040045             0033   MENU1_Y: 	equ 8
040045             0034   MENU2_Y: 	equ 12
040045             0035   MENU3_Y: 	equ 16
040045             0036   MENU4_Y: 	equ 20
040045             0037   MENU5_Y: 	equ 24
040045             0038   FILENAME_X: equ 7
040045             0039   FILENAME_Y: equ 24
040045             0040   
040045             0041   SPR44: 		equ 4
040045             0042   SPR88: 		equ 8
040045             0043   SPR1616: 	equ 16
040045             0044   SPR3232: 	equ 32
040045             0045   
040045             0046   SPR44_width: 	equ 32
040045             0047   SPR88_width: 	equ 16
040045             0048   SPR1616_width: 	equ 8
040045             0049   SPR3232_width: 	equ 4
040045             0050   
040045             0051   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0052   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0053   
040045             0054   HEADER_BUFFER_SIZE:		equ 16
040045             0055   
040045             0056   SLOWDOWN_DELAY:	equ 20
040045             0057   
040045             0058   KEY_SPACE: equ -99 ; draw with color
040045             0059   KEY_UP: equ -58 ; move
040045             0060   KEY_DOWN: equ -42
040045             0061   KEY_LEFT: equ -26
040045             0062   KEY_RIGHT: equ -122
040045             0063   KEY_DELETE: equ -90 ; remove color with black
040045             0064   KEY_N: equ -86 ; add a new void frame
040045             0065   KEY_C: equ -83 ; copy current frame to a new frame
040045             0066   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0067   KEY_PGUP: equ -64 ; select frame
040045             0068   KEY_PGDOWN: equ -79
040045             0069   KEY_L: equ -87 ; load sprite
040045             0070   KEY_S: equ -82 ; save sprite
040045             0071   KEY_E: equ -35 ; export sprite as assembler data
040045             0072   KEY_R: equ -52 ; rotate frame clockwise
040045             0073   KEY_F: equ -68 ; flip frame horizontally
040045             0074   KEY_M: equ -102 ; mirror frame vertically
040045             0075   KEY_ESCAPE: equ -113
040045             0076   KEY_F1: equ -114 ; select 4x4 sprite
040045             0077   KEY_F2: equ -115 ; select 8x8 sprite
040045             0078   KEY_F3: equ -116 ; select 16x16 sprite
040045             0079   KEY_F4: equ -21 ; select 32x32 sprite
040045             0080   KEY_RETURN: equ -74 ; floodfill
040045             0081   
040045             0082   ; play mode:
040045             0083   KEY_P:	equ -56 ; switch to play mode
040045             0084   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0085   
040045             0086   ; palette mode:
040045             0087   KEY_TAB: equ -97 ; switch to palette mode
040045             0088   KEY_1:	equ -49 ; red+
040045             0089   KEY_2:	equ -50 ; green+
040045             0090   KEY_3:	equ -18 ; blue+
040045             0091   KEY_4:	equ -19 ; red-
040045             0092   KEY_5:	equ -20 ; green-
040045             0093   KEY_6:	equ -53; blue-
040045             0094   KEY_7:	equ -37 ; reset color to black
040045             0095   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0096   ; KEY_S: save palette file
040045             0097   
040045             0098   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0099   MAX_PAL_DATA_HI: equ 03h
040045             0100   MAX_PAL_DATA_LO: equ 44h
040045             0101   
040045             0102   BITLOOKUP:
040045 01 02 04 08 0103   	DB 01h,02h,04h,08h
040049 10 20 40 80 0104   	DB 10h,20h,40h,80h
04004D             0105   
04004D             0106   ;======================================================================
04004D             0107   start:
04004D F5          0108   	push af
04004E C5          0109   	push bc
04004F D5          0110   	push de
040050 DD E5       0111   	push ix
040052 FD E5       0112   	push iy
040054             0113   
040054             0114   	; set mode 8 (320x240x64)
040054             0115   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0116   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0117   
04005C             0118   	; disable logical scale coordinates system
04005C             0119   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0120   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0121   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0122   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0123   
04006C             0124   	; set text colors
04006C             0125   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0126   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0127   
040074             0128   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0129   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0130   
04007C             0131   	; set graphics pen
04007C             0132   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0133   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0134   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0135   
040088             0136   	; hide cursor
040088             0137   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0138   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0139   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0140   
040094             0141   	; store coordinates
040094 DD 21 96 17 0142   	ld ix,x1
       04          
040099 21 00 00 00 0143   	ld hl,0
04009D DD 75 00    0144   	ld (ix+0),l
0400A0 DD 74 01    0145   	ld (ix+1),h
0400A3             0146   
0400A3 DD 21 98 17 0147   	ld ix,y1
       04          
0400A8 21 00 00 00 0148   	ld hl,0
0400AC DD 75 00    0149   	ld (ix+0),l
0400AF DD 74 01    0150   	ld (ix+1),h
0400B2             0151   
0400B2 DD 21 9A 17 0152   	ld ix,x2
       04          
0400B7 21 3F 01 00 0153   	ld hl,319
0400BB DD 75 00    0154   	ld (ix+0),l
0400BE DD 74 01    0155   	ld (ix+1),h
0400C1             0156   
0400C1 DD 21 9C 17 0157   	ld ix,y2
       04          
0400C6 21 EF 00 00 0158   	ld hl,239
0400CA DD 75 00    0159   	ld (ix+0),l
0400CD DD 74 01    0160   	ld (ix+1),h
0400D0             0161   
0400D0             0162   	; draw the border rectangle
0400D0 CD E1 0A 04 0163   	call fn_rect
0400D4             0164   
0400D4             0165   	; locate x,y
0400D4             0166   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0167   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0168   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0169   
0400E0             0170   	; print text
0400E0 21 AD 17 04 0171   	ld hl,title
0400E4 01 00 00 00 0172   	ld bc,0
0400E8 AF          0173   	xor a
0400E9 49 DF       0174   	rst.lis $18
0400EB             0175   
0400EB             0176   	; locate x,y
0400EB             0177   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0178   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0179   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0180   
0400F7             0181   	; print text
0400F7 21 B6 17 04 0182   	ld hl,menu1
0400FB 01 00 00 00 0183   	ld bc,0
0400FF AF          0184   	xor a
040100 49 DF       0185   	rst.lis $18
040102             0186   
040102             0187   	; locate x,y
040102             0188   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0189   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0190   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0191   
04010E             0192   	; print text
04010E 21 C5 17 04 0193   	ld hl,menu2
040112 01 00 00 00 0194   	ld bc,0
040116 AF          0195   	xor a
040117 49 DF       0196   	rst.lis $18
040119             0197   
040119             0198   	; locate x,y
040119             0199   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0200   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0201   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0202   
040125             0203   	; print text
040125 21 D4 17 04 0204   	ld hl,menu3
040129 01 00 00 00 0205   	ld bc,0
04012D AF          0206   	xor a
04012E 49 DF       0207   	rst.lis $18
040130             0208   
040130             0209   	; locate x,y
040130             0210   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0211   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0212   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0213   
04013C             0214   	; print text
04013C 21 E5 17 04 0215   	ld hl,menu4
040140 01 00 00 00 0216   	ld bc,0
040144 AF          0217   	xor a
040145 49 DF       0218   	rst.lis $18
040147             0219   
040147             0220   ; menu loop
040147             0221   menu_loop:
040147 21 8F FF FF 0222   	ld hl,KEY_ESCAPE
04014B CD 48 17 04 0223   	call fn_inkey
04014F FE 01       0224   	CP 1
040151 CA BD 0A 04 0225   	jp z,exit_program
040155             0226   
040155 21 8E FF FF 0227   	ld hl,KEY_F1
040159 CD 48 17 04 0228   	call fn_inkey
04015D FE 01       0229   	CP 1
04015F CA 91 01 04 0230   	jp z,ml_menu1
040163             0231   
040163 21 8D FF FF 0232   	ld hl,KEY_F2
040167 CD 48 17 04 0233   	call fn_inkey
04016B FE 01       0234   	CP 1
04016D CA 97 01 04 0235   	jp z,ml_menu2
040171             0236   
040171 21 8C FF FF 0237   	ld hl,KEY_F3
040175 CD 48 17 04 0238   	call fn_inkey
040179 FE 01       0239   	CP 1
04017B CA 9D 01 04 0240   	jp z,ml_menu3
04017F             0241   
04017F 21 EB FF FF 0242   	ld hl,KEY_F4
040183 CD 48 17 04 0243   	call fn_inkey
040187 FE 01       0244   	CP 1
040189 CA A3 01 04 0245   	jp z,ml_menu4
04018D             0246   
04018D C3 47 01 04 0247   	jp menu_loop
040191             0248   
040191             0249   ml_menu1:
040191 3E 04       0250   	ld a,SPR44
040193 16 20       0251   	ld d,SPR44_width
040195 18 10       0252   	jr exit_menu_loop
040197             0253   
040197             0254   ml_menu2:
040197 3E 08       0255   	ld a,SPR88
040199 16 10       0256   	ld d,SPR88_width
04019B 18 0A       0257   	jr exit_menu_loop
04019D             0258   
04019D             0259   ml_menu3:
04019D 3E 10       0260   	ld a,SPR1616
04019F 16 08       0261   	ld d,SPR1616_width
0401A1 18 04       0262   	jr exit_menu_loop
0401A3             0263   
0401A3             0264   ml_menu4:
0401A3 3E 20       0265   	ld a,SPR3232
0401A5 16 04       0266   	ld d,SPR3232_width
0401A7             0267   
0401A7             0268   exit_menu_loop:
0401A7             0269   	; store edited sprite size
0401A7 21 AB 17 04 0270   	ld hl,spr_size
0401AB 77          0271   	ld (hl),a
0401AC 21 AA 17 04 0272   	ld hl,pixel_width
0401B0 72          0273   	ld (hl),d
0401B1             0274   
0401B1             0275   	; clear the text screen
0401B1             0276   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0277   
0401B5             0278   	; draw the palette
0401B5 0E 00       0279   	ld c,0
0401B7             0280   
0401B7             0281   palette_loop:
0401B7 C5          0282   	push bc
0401B8             0283   
0401B8             0284   	; choose palette color
0401B8             0285   	vdu 18
0401B8 3E 12       0001M  		LD	A, function
0401BA 49 D7       0002M  		RST.LIS	10h
0401BC             0286   	vdu 0
0401BC 3E 00       0001M  		LD	A, function
0401BE 49 D7       0002M  		RST.LIS	10h
0401C0 C1          0287   	pop bc
0401C1 C5          0288   	push bc
0401C2 79          0289   	ld a,c
0401C3             0290   	vdu_a
0401C3 49 D7       0001M  		RST.LIS	10h
0401C5             0291   
0401C5             0292   	; store coordinates for a palette square
0401C5 DD 21 96 17 0293   	ld ix,x1
       04          
0401CA E1          0294   	pop hl
0401CB E5          0295   	push hl
0401CC 26 05       0296   	ld h,5
0401CE ED 6C       0297   	mlt hl
0401D0 E5          0298   	push hl
0401D1 DD 75 00    0299   	ld (ix+0),l
0401D4 DD 74 01    0300   	ld (ix+1),h
0401D7             0301   
0401D7 DD 21 98 17 0302   	ld ix,y1
       04          
0401DC 21 00 00 00 0303   	ld hl,0
0401E0 DD 75 00    0304   	ld (ix+0),l
0401E3 DD 74 01    0305   	ld (ix+1),h
0401E6             0306   
0401E6 DD 21 9A 17 0307   	ld ix,x2
       04          
0401EB E1          0308   	pop hl
0401EC 11 04 00 00 0309   	ld de,4
0401F0 19          0310   	add hl,de
0401F1 DD 75 00    0311   	ld (ix+0),l
0401F4 DD 74 01    0312   	ld (ix+1),h
0401F7             0313   
0401F7 DD 21 9C 17 0314   	ld ix,y2
       04          
0401FC 21 0A 00 00 0315   	ld hl,10
040200 DD 75 00    0316   	ld (ix+0),l
040203 DD 74 01    0317   	ld (ix+1),h
040206             0318   
040206             0319   	; draw the palette filled square
040206 CD A0 0B 04 0320   	call fn_rectf
04020A             0321   
04020A             0322   	; next color ?
04020A C1          0323   	pop bc
04020B 0C          0324   	inc c
04020C 79          0325   	ld a,c
04020D FE 40       0326   	cp MAX_COLORS
04020F C2 B7 01 04 0327   	jp nz,palette_loop
040213             0328   
040213             0329   	; store coordinates
040213 DD 21 96 17 0330   	ld ix,x1
       04          
040218 21 00 00 00 0331   	ld hl,0
04021C DD 75 00    0332   	ld (ix+0),l
04021F DD 74 01    0333   	ld (ix+1),h
040222             0334   
040222 DD 21 98 17 0335   	ld ix,y1
       04          
040227 21 0B 00 00 0336   	ld hl,11
04022B DD 75 00    0337   	ld (ix+0),l
04022E DD 74 01    0338   	ld (ix+1),h
040231             0339   
040231 DD 21 9A 17 0340   	ld ix,x2
       04          
040236 21 3F 01 00 0341   	ld hl,319
04023A DD 75 00    0342   	ld (ix+0),l
04023D DD 74 01    0343   	ld (ix+1),h
040240             0344   
040240 DD 21 9C 17 0345   	ld ix,y2
       04          
040245 21 EF 00 00 0346   	ld hl,239
040249 DD 75 00    0347   	ld (ix+0),l
04024C DD 74 01    0348   	ld (ix+1),h
04024F             0349   
04024F             0350   	; draw the border rectangle
04024F CD E1 0A 04 0351   	call fn_rect
040253             0352   
040253             0353   	; store edited sprite coordinates
040253 DD 21 9E 17 0354   	ld ix,xs1
       04          
040258 FD 21 96 17 0355   	ld iy,x1
       04          
04025D DD 6E 00    0356   	ld l,(ix+0)
040260 DD 66 01    0357   	ld h,(ix+1)
040263 FD 75 00    0358   	ld (iy+0),l
040266 FD 74 01    0359   	ld (iy+1),h
040269             0360   
040269 DD 21 A0 17 0361   	ld ix,ys1
       04          
04026E FD 21 98 17 0362   	ld iy,y1
       04          
040273 DD 6E 00    0363   	ld l,(ix+0)
040276 DD 66 01    0364   	ld h,(ix+1)
040279 FD 75 00    0365   	ld (iy+0),l
04027C FD 74 01    0366   	ld (iy+1),h
04027F             0367   
04027F DD 21 A2 17 0368   	ld ix,xs2
       04          
040284 FD 21 9A 17 0369   	ld iy,x2
       04          
040289 DD 6E 00    0370   	ld l,(ix+0)
04028C DD 66 01    0371   	ld h,(ix+1)
04028F FD 75 00    0372   	ld (iy+0),l
040292 FD 74 01    0373   	ld (iy+1),h
040295             0374   
040295 DD 21 A4 17 0375   	ld ix,ys2
       04          
04029A FD 21 9C 17 0376   	ld iy,y2
       04          
04029F DD 6E 00    0377   	ld l,(ix+0)
0402A2 DD 66 01    0378   	ld h,(ix+1)
0402A5 FD 75 00    0379   	ld (iy+0),l
0402A8 FD 74 01    0380   	ld (iy+1),h
0402AB             0381   
0402AB             0382   	; draw the sprite's border rectangle
0402AB CD E1 0A 04 0383   	call fn_rect
0402AF             0384   
0402AF             0385   	; update sprite size descriptions
0402AF CD E4 16 04 0386   	call fn_show_spr_descr
0402B3             0387   
0402B3             0388   ; initialize sprite vars
0402B3             0389   init_sprite_vars:
0402B3             0390   	; initialize coordinates before drawing the sprite
0402B3 DD 21 A6 17 0391   	ld ix,xpix
       04          
0402B8 AF          0392   	xor a
0402B9 DD 77 00    0393   	ld (ix+0),a ; xpix = 0
0402BC DD 77 01    0394   	ld (ix+1),a	; ypix = 0
0402BF DD 21 AC 17 0395   	ld ix,current_pen
       04          
0402C4 3E 0F       0396   	ld a,COLOR_WHITE
0402C6 DD 77 00    0397   	ld (ix+0),a ; current pen -> white
0402C9             0398   
0402C9             0399   	; set vars
0402C9 21 B6 18 04 0400   	ld hl,colors_count
0402CD 3E 40       0401   	ld a,MAX_COLORS
0402CF 77          0402   	ld (hl),a
0402D0 21 BB 18 04 0403   	ld hl,current_frame
0402D4 AF          0404   	xor a
0402D5 77          0405   	ld (hl),a
0402D6 3C          0406   	inc a
0402D7 21 BC 18 04 0407   	ld hl,frames_count
0402DB 77          0408   	ld (hl),a
0402DC             0409   
0402DC             0410   	; fill buffers with zeros
0402DC 01 00 20 00 0411   	ld bc,BUFFER_SIZE
0402E0 21 C4 18 04 0412   	ld hl,sprite_buffer
0402E4             0413   
0402E4             0414   isv_fill_loop:
0402E4 AF          0415   	xor a
0402E5 77          0416   	ld (hl),a
0402E6 0B          0417   	dec bc
0402E7 23          0418   	inc hl
0402E8 78          0419   	ld a,b
0402E9 B1          0420   	or c
0402EA FE 00       0421   	cp 0
0402EC 20 F6       0422   	jr nz,isv_fill_loop
0402EE             0423   
0402EE             0424   ; draw the pixel with a border
0402EE CD 6E 0C 04 0425   	call fn_draw_pixel_with_border
0402F2             0426   
0402F2             0427   ; draw sprite loop
0402F2             0428   draw_sprite_loop:
0402F2 21 9D FF FF 0429   	ld hl,KEY_SPACE
0402F6 CD 48 17 04 0430   	call fn_inkey
0402FA FE 01       0431   	cp 1
0402FC CC 0E 04 04 0432   	call z,dsl_set_pen
040300             0433   
040300 21 C6 FF FF 0434   	ld hl,KEY_UP
040304 CD 48 17 04 0435   	call fn_inkey
040308 FE 01       0436   	cp 1
04030A CC 33 04 04 0437   	call z,dsl_up
04030E             0438   
04030E 21 D6 FF FF 0439   	ld hl,KEY_DOWN
040312 CD 48 17 04 0440   	call fn_inkey
040316 FE 01       0441   	cp 1
040318 CC 5A 04 04 0442   	call z,dsl_down
04031C             0443   
04031C 21 E6 FF FF 0444   	ld hl,KEY_LEFT
040320 CD 48 17 04 0445   	call fn_inkey
040324 FE 01       0446   	cp 1
040326 CC 86 04 04 0447   	call z,dsl_left
04032A             0448   
04032A 21 86 FF FF 0449   	ld hl,KEY_RIGHT
04032E CD 48 17 04 0450   	call fn_inkey
040332 FE 01       0451   	cp 1
040334 CC AD 04 04 0452   	call z,dsl_right
040338             0453   
040338 21 A6 FF FF 0454   	ld hl,KEY_DELETE
04033C CD 48 17 04 0455   	call fn_inkey
040340 FE 01       0456   	cp 1
040342 CC 22 04 04 0457   	call z,dsl_reset_pen
040346             0458   
040346 21 9F FF FF 0459   	ld hl,KEY_TAB
04034A CD 48 17 04 0460   	call fn_inkey
04034E FE 01       0461   	cp 1
040350 CA 85 09 04 0462   	jp z,dsl_palette_tool
040354             0463   
040354 21 AA FF FF 0464   	ld hl,KEY_N
040358 CD 48 17 04 0465   	call fn_inkey
04035C FE 01       0466   	cp 1
04035E CC 2C 05 04 0467   	call z,dsl_add_frame
040362             0468   
040362 21 AD FF FF 0469   	ld hl,KEY_C
040366 CD 48 17 04 0470   	call fn_inkey
04036A FE 01       0471   	cp 1
04036C CC C3 05 04 0472   	call z,dsl_add_and_copy_frame
040370             0473   
040370 21 D0 FF FF 0474   	ld hl,KEY_BACKSPACE
040374 CD 48 17 04 0475   	call fn_inkey
040378 FE 01       0476   	cp 1
04037A CC 2A 06 04 0477   	call z,dsl_delete_frame
04037E             0478   
04037E 21 C0 FF FF 0479   	ld hl,KEY_PGUP
040382 CD 48 17 04 0480   	call fn_inkey
040386 FE 01       0481   	cp 1
040388 CC 23 07 04 0482   	call z,dsl_next_frame
04038C             0483   
04038C 21 B1 FF FF 0484   	ld hl,KEY_PGDOWN
040390 CD 48 17 04 0485   	call fn_inkey
040394 FE 01       0486   	cp 1
040396 CC 04 07 04 0487   	call z,dsl_previous_frame
04039A             0488   
04039A 21 A9 FF FF 0489   	ld hl,KEY_L
04039E CD 48 17 04 0490   	call fn_inkey
0403A2 FE 01       0491   	cp 1
0403A4 CC D9 04 04 0492   	call z,dsl_load_sprite
0403A8             0493   
0403A8 21 AE FF FF 0494   	ld hl,KEY_S
0403AC CD 48 17 04 0495   	call fn_inkey
0403B0 FE 01       0496   	cp 1
0403B2 CC FA 04 04 0497   	call z,dsl_save_sprite
0403B6             0498   
0403B6 21 DD FF FF 0499   	ld hl,KEY_E
0403BA CD 48 17 04 0500   	call fn_inkey
0403BE FE 01       0501   	cp 1
0403C0 CC 13 05 04 0502   	call z,dsl_export_sprite
0403C4             0503   
0403C4 21 CC FF FF 0504   	ld hl,KEY_R
0403C8 CD 48 17 04 0505   	call fn_inkey
0403CC FE 01       0506   	cp 1
0403CE CC 49 07 04 0507   	call z,dsl_rotate_frame
0403D2             0508   
0403D2 21 BC FF FF 0509   	ld hl,KEY_F
0403D6 CD 48 17 04 0510   	call fn_inkey
0403DA FE 01       0511   	cp 1
0403DC CC FE 07 04 0512   	call z,dsl_flip_frame
0403E0             0513   
0403E0 21 9A FF FF 0514   	ld hl,KEY_M
0403E4 CD 48 17 04 0515   	call fn_inkey
0403E8 FE 01       0516   	cp 1
0403EA CC 65 08 04 0517   	call z,dsl_mirror_frame
0403EE             0518   
0403EE 21 B6 FF FF 0519   	ld hl,KEY_RETURN
0403F2 CD 48 17 04 0520   	call fn_inkey
0403F6 FE 01       0521   	cp 1
0403F8 CC E5 08 04 0522   	call z,dsl_flood_fill
0403FC             0523   
0403FC 21 8F FF FF 0524   	ld hl,KEY_ESCAPE
040400 CD 48 17 04 0525   	call fn_inkey
040404 FE 01       0526   	cp 1
040406 CA BD 0A 04 0527   	jp z,exit_program
04040A             0528   
04040A C3 F2 02 04 0529   	jp draw_sprite_loop
04040E             0530   
04040E             0531   ; set the pen of the current pixel
04040E             0532   dsl_set_pen:
04040E CD 98 0C 04 0533   	call fn_get_pixel_color
040412 21 AC 17 04 0534   	ld hl,current_pen
040416 BE          0535   	cp (hl)
040417 C8          0536   	ret z
040418 7E          0537   	ld a,(hl)
040419 CD DA 0C 04 0538   	call fn_set_pixel_color
04041D CD 6E 0C 04 0539   	call fn_draw_pixel_with_border
040421 C9          0540   	ret
040422             0541   
040422             0542   ; reset the pen of the current pixel
040422             0543   dsl_reset_pen:
040422 CD 98 0C 04 0544   	call fn_get_pixel_color
040426 FE 00       0545   	cp 0
040428 C8          0546   	ret z
040429 AF          0547   	xor a
04042A CD DA 0C 04 0548   	call fn_set_pixel_color
04042E CD 6E 0C 04 0549   	call fn_draw_pixel_with_border
040432 C9          0550   	ret
040433             0551   
040433             0552   ; move pixel up
040433             0553   dsl_up:
040433 21 A7 17 04 0554   	ld hl,ypix
040437 7E          0555   	ld a,(hl)
040438 FE 00       0556   	cp 0
04043A C8          0557   	ret z
04043B             0558   
04043B 21 9D FF FF 0559   	ld hl,KEY_SPACE
04043F CD 48 17 04 0560   	call fn_inkey
040443 FE 01       0561   	cp 1
040445 CC 0E 04 04 0562   	call z,dsl_set_pen
040449             0563   
040449 CD 82 0C 04 0564   	call fn_draw_pixel_without_border
04044D CD 1E 0D 04 0565   	call fn_move_up
040451 CD 6E 0C 04 0566   	call fn_draw_pixel_with_border
040455 CD C3 16 04 0567   	call fn_slowdown
040459 C9          0568   	ret
04045A             0569   
04045A             0570   ; move pixel down
04045A             0571   dsl_down:
04045A 21 AB 17 04 0572   	ld hl,spr_size
04045E 56          0573   	ld d,(hl)
04045F 15          0574   	dec d
040460             0575   
040460 21 A7 17 04 0576   	ld hl,ypix
040464 7E          0577   	ld a,(hl)
040465 BA          0578   	cp d
040466 C8          0579   	ret z
040467             0580   
040467 21 9D FF FF 0581   	ld hl,KEY_SPACE
04046B CD 48 17 04 0582   	call fn_inkey
04046F FE 01       0583   	cp 1
040471 CC 0E 04 04 0584   	call z,dsl_set_pen
040475             0585   
040475 CD 82 0C 04 0586   	call fn_draw_pixel_without_border
040479 CD 24 0D 04 0587   	call fn_move_down
04047D CD 6E 0C 04 0588   	call fn_draw_pixel_with_border
040481 CD C3 16 04 0589   	call fn_slowdown
040485 C9          0590   	ret
040486             0591   
040486             0592   ; move pixel left
040486             0593   dsl_left:
040486 21 A6 17 04 0594   	ld hl,xpix
04048A 7E          0595   	ld a,(hl)
04048B FE 00       0596   	cp 0
04048D C8          0597   	ret z
04048E             0598   
04048E 21 9D FF FF 0599   	ld hl,KEY_SPACE
040492 CD 48 17 04 0600   	call fn_inkey
040496 FE 01       0601   	cp 1
040498 CC 0E 04 04 0602   	call z,dsl_set_pen
04049C             0603   
04049C CD 82 0C 04 0604   	call fn_draw_pixel_without_border
0404A0 CD 2A 0D 04 0605   	call fn_move_left
0404A4 CD 6E 0C 04 0606   	call fn_draw_pixel_with_border
0404A8 CD C3 16 04 0607   	call fn_slowdown
0404AC C9          0608   	ret
0404AD             0609   
0404AD             0610   ; move pixel right
0404AD             0611   dsl_right:
0404AD 21 AB 17 04 0612   	ld hl,spr_size
0404B1 56          0613   	ld d,(hl)
0404B2 15          0614   	dec d
0404B3             0615   
0404B3 21 A6 17 04 0616   	ld hl,xpix
0404B7 7E          0617   	ld a,(hl)
0404B8 BA          0618   	cp d
0404B9 C8          0619   	ret z
0404BA             0620   
0404BA 21 9D FF FF 0621   	ld hl,KEY_SPACE
0404BE CD 48 17 04 0622   	call fn_inkey
0404C2 FE 01       0623   	cp 1
0404C4 CC 0E 04 04 0624   	call z,dsl_set_pen
0404C8             0625   
0404C8 CD 82 0C 04 0626   	call fn_draw_pixel_without_border
0404CC CD 30 0D 04 0627   	call fn_move_right
0404D0 CD 6E 0C 04 0628   	call fn_draw_pixel_with_border
0404D4 CD C3 16 04 0629   	call fn_slowdown
0404D8 C9          0630   	ret
0404D9             0631   
0404D9             0632   ; load a sprite
0404D9             0633   dsl_load_sprite:
0404D9 21 A9 FF FF 0634   	ld hl,KEY_L
0404DD CD 48 17 04 0635   	call fn_inkey
0404E1 FE 00       0636   	cp 0
0404E3 20 F4       0637   	jr nz,dsl_load_sprite
0404E5             0638   
0404E5 CD 82 0C 04 0639   	call fn_draw_pixel_without_border
0404E9 CD EF 11 04 0640   	call fn_load_sprite
0404ED CD 3A 16 04 0641   	call fn_refresh_sprite
0404F1 CD 6E 0C 04 0642   	call fn_draw_pixel_with_border
0404F5 CD 7A 16 04 0643   	call fn_change_frame
0404F9 C9          0644   	ret
0404FA             0645   
0404FA             0646   ; save a sprite
0404FA             0647   dsl_save_sprite:
0404FA 21 AE FF FF 0648   	ld hl,KEY_S
0404FE CD 48 17 04 0649   	call fn_inkey
040502 FE 00       0650   	cp 0
040504 20 F4       0651   	jr nz,dsl_save_sprite
040506             0652   
040506 CD 82 0C 04 0653   	call fn_draw_pixel_without_border
04050A CD 18 13 04 0654   	call fn_save_sprite
04050E CD 3A 16 04 0655   	call fn_refresh_sprite
040512 C9          0656   	ret
040513             0657   
040513             0658   dsl_export_sprite:
040513 21 DD FF FF 0659   	ld hl,KEY_E
040517 CD 48 17 04 0660   	call fn_inkey
04051B FE 00       0661   	cp 0
04051D 20 F4       0662   	jr nz,dsl_export_sprite
04051F             0663   
04051F CD 82 0C 04 0664   	call fn_draw_pixel_without_border
040523 CD 17 14 04 0665   	call fn_export_sprite
040527 CD 3A 16 04 0666   	call fn_refresh_sprite
04052B C9          0667   	ret
04052C             0668   
04052C             0669   
04052C             0670   ; add a frame to the animation
04052C             0671   dsl_add_frame:
04052C 21 AA FF FF 0672   	ld hl,KEY_N
040530 CD 48 17 04 0673   	call fn_inkey
040534 FE 00       0674   	cp 0
040536 20 F4       0675   	jr nz,dsl_add_frame
040538             0676   
040538             0677   	; frames limit reached ? exit
040538 21 BC 18 04 0678   	ld hl,frames_count
04053C 7E          0679   	ld a,(hl)
04053D FE 08       0680   	cp MAX_FRAMES
04053F C8          0681   	ret z
040540             0682   
040540             0683   	; get the number of frames to copy
040540 21 BC 18 04 0684   	ld hl,frames_count
040544 7E          0685   	ld a,(hl)
040545 21 BB 18 04 0686   	ld hl,current_frame
040549 46          0687   	ld b,(hl)
04054A 90          0688   	sub b
04054B 3D          0689   	dec a
04054C             0690   
04054C             0691   	; get sprsize² (length of a sprite, in bytes)
04054C 21 AB 17 04 0692   	ld hl,spr_size
040550 11 00 00 00 0693   	ld de,$000000
040554 5E          0694   	ld e,(hl)
040555 56          0695   	ld d,(hl)
040556 ED 5C       0696   	mlt de ; DE = sprsize²
040558             0697   
040558             0698   	; prepare for the case we goto af_zap...
040558 21 C4 18 04 0699   	ld hl,sprite_buffer
04055C             0700   
04055C F5          0701   	push af
04055D E5          0702   	push hl
04055E 21 BB 18 04 0703   	ld hl,current_frame
040562 7E          0704   	ld a,(hl)
040563 3C          0705   	inc a
040564 47          0706   	ld b,a
040565 E1          0707   	pop hl
040566 F1          0708   	pop af
040567             0709   
040567             0710   af_loop0:
040567 19          0711   	add hl,de ; for if current frame = 0 (prepare to zap!)
040568 10 FD       0712   	djnz af_loop0
04056A             0713   
04056A E5          0714   	push hl ; store HL = sprite buffer + sprsize²
04056B FE 00       0715   	cp 0
04056D CA 95 05 04 0716   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040571 E1          0717   	pop hl ; HL unused in this case
040572             0718   
040572 21 00 00 00 0719   	ld hl,$000000 ; HL is 0 to store the result
040576 47          0720   	ld b,a ; B = frames to copy
040577             0721   
040577             0722   ; multiply number of frames to copy by sprsize²
040577             0723   af_loop1:
040577 19          0724   	add hl,de ; HL = length (in bytes) to copy (a few frames)
040578 10 FD       0725   	djnz af_loop1
04057A             0726   
04057A E5          0727   	push hl
04057B C1          0728   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04057C             0729   
04057C 21 BB 18 04 0730   	ld hl,current_frame
040580 7E          0731   	ld a,(hl)
040581 3C          0732   	inc a
040582 21 C4 18 04 0733   	ld hl,sprite_buffer
040586             0734   
040586 C5          0735   	push bc
040587 47          0736   	ld b,a
040588             0737   
040588             0738   af_loop2:
040588 19          0739   	add hl,de ; HL = sprite buffer + length to copy
040589 10 FD       0740   	djnz af_loop2
04058B             0741   
04058B C1          0742   	pop bc
04058C             0743   
04058C E5          0744   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
04058D             0745   
04058D 09          0746   	add hl,bc
04058E 2B          0747   	dec hl ; HL = end address to copy to end target address
04058F             0748   
04058F E5          0749   	push hl
040590 19          0750   	add hl,de
040591 EB          0751   	ex de,hl ; DE = end target address
040592 E1          0752   	pop hl
040593             0753   
040593 ED B8       0754   	lddr
040595             0755   
040595             0756   af_zap:
040595             0757   	; multiply number of frames to copy by sprsize²
040595 21 AB 17 04 0758   	ld hl,spr_size
040599 01 00 00 00 0759   	ld bc,$000000
04059D 4E          0760   	ld c,(hl)
04059E 46          0761   	ld b,(hl)
04059F ED 4C       0762   	mlt bc ; BC = sprsize²
0405A1             0763   
0405A1 E1          0764   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
0405A2             0765   
0405A2             0766   ; fill frame with 0 color
0405A2             0767   af_loop3:
0405A2 AF          0768   	xor a
0405A3 77          0769   	ld (hl),a
0405A4 23          0770   	inc hl
0405A5 0B          0771   	dec bc
0405A6 78          0772   	ld a,b
0405A7 B1          0773   	or c
0405A8 FE 00       0774   	cp 0
0405AA 20 F6       0775   	jr nz,af_loop3
0405AC             0776   
0405AC             0777   	; increment the frames count and the current frame values
0405AC 21 BC 18 04 0778   	ld hl,frames_count
0405B0 34          0779   	inc (hl)
0405B1 21 BB 18 04 0780   	ld hl,current_frame
0405B5 34          0781   	inc (hl)
0405B6             0782   
0405B6 CD 7A 16 04 0783   	call fn_change_frame
0405BA CD 9F 16 04 0784   	call fn_change_frames_count
0405BE CD 3A 16 04 0785   	call fn_refresh_sprite
0405C2 C9          0786   	ret
0405C3             0787   
0405C3             0788   ; add a copy of the current frame to the animation
0405C3             0789   dsl_add_and_copy_frame: ; TODO! debug me!
0405C3 21 AD FF FF 0790   	ld hl,KEY_C
0405C7 CD 48 17 04 0791   	call fn_inkey
0405CB FE 00       0792   	cp 0
0405CD 20 F4       0793   	jr nz,dsl_add_and_copy_frame
0405CF             0794   
0405CF             0795   	; frames limit reached ? exit
0405CF 21 BC 18 04 0796   	ld hl,frames_count
0405D3 7E          0797   	ld a,(hl)
0405D4 FE 08       0798   	cp MAX_FRAMES
0405D6 C8          0799   	ret z
0405D7             0800   
0405D7             0801   	; get the number of frames to copy
0405D7 21 BC 18 04 0802   	ld hl,frames_count
0405DB 7E          0803   	ld a,(hl)
0405DC 21 BB 18 04 0804   	ld hl,current_frame
0405E0 46          0805   	ld b,(hl)
0405E1 90          0806   	sub b
0405E2             0807   
0405E2             0808   	; get sprsize² (length of a sprite, in bytes)
0405E2 21 AB 17 04 0809   	ld hl,spr_size
0405E6 11 00 00 00 0810   	ld de,$000000
0405EA 5E          0811   	ld e,(hl)
0405EB 56          0812   	ld d,(hl)
0405EC ED 5C       0813   	mlt de ; DE = sprsize²
0405EE             0814   
0405EE 21 00 00 00 0815   	ld hl,$000000 ; HL is 0 to store the result
0405F2 47          0816   	ld b,a ; B = frames to copy
0405F3             0817   
0405F3             0818   ; multiply number of frames to copy by sprsize²
0405F3             0819   aacf_loop1:
0405F3 19          0820   	add hl,de ; HL = length (in bytes) to copy (a few frames)
0405F4 10 FD       0821   	djnz aacf_loop1
0405F6             0822   
0405F6 E5          0823   	push hl
0405F7 C1          0824   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
0405F8             0825   
0405F8 21 BB 18 04 0826   	ld hl,current_frame
0405FC 7E          0827   	ld a,(hl)
0405FD 21 C4 18 04 0828   	ld hl,sprite_buffer
040601 FE 00       0829   	cp 0
040603 28 06       0830   	jr z,aacf_loop_end2
040605             0831   
040605 C5          0832   	push bc
040606 47          0833   	ld b,a
040607             0834   
040607             0835   aacf_loop2:
040607 19          0836   	add hl,de ; HL = sprite buffer + length to copy
040608 10 FD       0837   	djnz aacf_loop2
04060A             0838   
04060A C1          0839   	pop bc
04060B             0840   
04060B             0841   aacf_loop_end2:
04060B 09          0842   	add hl,bc
04060C 2B          0843   	dec hl ; HL = end address to copy to end target address
04060D             0844   
04060D E5          0845   	push hl
04060E 19          0846   	add hl,de
04060F EB          0847   	ex de,hl ; DE = end target address
040610 E1          0848   	pop hl
040611             0849   
040611 ED B8       0850   	lddr
040613             0851   
040613             0852   	; increment the frames count and the current frame values
040613 21 BC 18 04 0853   	ld hl,frames_count
040617 34          0854   	inc (hl)
040618 21 BB 18 04 0855   	ld hl,current_frame
04061C 34          0856   	inc (hl)
04061D             0857   
04061D CD 7A 16 04 0858   	call fn_change_frame
040621 CD 9F 16 04 0859   	call fn_change_frames_count
040625 CD 3A 16 04 0860   	call fn_refresh_sprite
040629 C9          0861   	ret
04062A             0862   
04062A             0863   ; delete last frame from animation
04062A             0864   dsl_delete_frame:
04062A 21 D0 FF FF 0865   	ld hl,KEY_BACKSPACE
04062E CD 48 17 04 0866   	call fn_inkey
040632 FE 00       0867   	cp 0
040634 20 F4       0868   	jr nz,dsl_delete_frame
040636             0869   
040636             0870   	; delete current selected frame
040636 21 AB 17 04 0871   	ld hl,spr_size
04063A 01 00 00 00 0872   	ld bc,$000000
04063E 4E          0873   	ld c,(hl)
04063F 46          0874   	ld b,(hl)
040640 ED 4C       0875   	mlt bc ; BC = sprsize²
040642 21 BB 18 04 0876   	ld hl,current_frame
040646 7E          0877   	ld a,(hl) ; A = current frame
040647 21 C4 18 04 0878   	ld hl,sprite_buffer ; HL = sprite buffer
04064B C5          0879   	push bc
04064C FE 00       0880   	cp 0
04064E 28 06       0881   	jr z,df_loop2
040650             0882   
040650             0883   df_loop1:
040650 09          0884   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
040651 3D          0885   	dec a
040652 FE 00       0886   	cp 0
040654 20 FA       0887   	jr nz,df_loop1
040656             0888   
040656             0889   ; clear the current frame
040656             0890   df_loop2:
040656 AF          0891   	xor a
040657 77          0892   	ld (hl),a
040658 23          0893   	inc hl
040659 0B          0894   	dec bc
04065A 78          0895   	ld a,b
04065B B1          0896   	or c
04065C FE 00       0897   	cp 0
04065E 20 F6       0898   	jr nz,df_loop2
040660             0899   
040660             0900   	; current frame + 1 = frames count ?
040660 E5          0901   	push hl
040661 21 BB 18 04 0902   	ld hl,current_frame
040665 5E          0903   	ld e,(hl)
040666 1C          0904   	inc e
040667 21 BC 18 04 0905   	ld hl,frames_count
04066B 7E          0906   	ld a,(hl)
04066C BB          0907   	cp e
04066D E1          0908   	pop hl
04066E C1          0909   	pop bc
04066F CA E8 06 04 0910   	jp z,df_exit
040673             0911   
040673 11 BC 18 04 0912   	ld de,frames_count
040677 1A          0913   	ld a,(de) ; A = frames count
040678 E5          0914   	push hl
040679 21 BB 18 04 0915   	ld hl,current_frame
04067D 5E          0916   	ld e,(hl) ; E = current frame
04067E E1          0917   	pop hl
04067F 93          0918   	sub e
040680 3D          0919   	dec a ; A = number of frames to copy back
040681             0920   
040681 EB          0921   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040682 21 00 00 00 0922   	ld hl,$000000
040686 FE 00       0923   	cp 0 ; 0 frames to copy ?
040688 28 06       0924   	jr z,df_exit_loop3
04068A             0925   
04068A             0926   df_loop3:
04068A 09          0927   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
04068B 3D          0928   	dec a
04068C FE 00       0929   	cp 0
04068E 20 FA       0930   	jr nz,df_loop3
040690             0931   
040690             0932   df_exit_loop3:
040690 E5          0933   	push hl
040691 C1          0934   	pop bc ; BC = total length of area to copy
040692 D5          0935   	push de
040693 E1          0936   	pop hl ; HL = DE = start of area to copy
040694             0937   
040694 C5          0938   	push bc
040695 D5          0939   	push de
040696 E5          0940   	push hl
040697 21 AB 17 04 0941   	ld hl,spr_size
04069B 11 00 00 00 0942   	ld de,$000000
04069F 5E          0943   	ld e,(hl)
0406A0 56          0944   	ld d,(hl)
0406A1 ED 5C       0945   	mlt de ; DE = one sprite frame length
0406A3 E1          0946   	pop hl
0406A4 B7          0947   	or a
0406A5 ED 52       0948   	sbc hl,de ; HL = target area to copy
0406A7 D1          0949   	pop de
0406A8 EB          0950   	ex de,hl ; DE = target, HL = start
0406A9 C1          0951   	pop bc
0406AA ED B0       0952   	ldir
0406AC             0953   
0406AC 21 AB 17 04 0954   	ld hl,spr_size
0406B0 01 00 00 00 0955   	ld bc,$000000
0406B4 4E          0956   	ld c,(hl)
0406B5 46          0957   	ld b,(hl)
0406B6 ED 4C       0958   	mlt bc ; DE = one sprite frame length
0406B8             0959   
0406B8             0960   	; delete last frame data
0406B8 21 BC 18 04 0961   	ld hl,frames_count
0406BC 7E          0962   	ld a,(hl) ; A =frames count
0406BD 3D          0963   	dec a ; A = last frame
0406BE 21 C4 18 04 0964   	ld hl,sprite_buffer ; HL = sprite buffer
0406C2 FE 00       0965   	cp 0
0406C4 28 06       0966   	jr z,df_loop5
0406C6             0967   
0406C6             0968   df_loop4:
0406C6 09          0969   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
0406C7 3D          0970   	dec a
0406C8 FE 00       0971   	cp 0
0406CA 20 FA       0972   	jr nz,df_loop4
0406CC             0973   
0406CC             0974   ; clear the current frame
0406CC             0975   df_loop5:
0406CC AF          0976   	xor a
0406CD 77          0977   	ld (hl),a
0406CE 23          0978   	inc hl
0406CF 0B          0979   	dec bc
0406D0 78          0980   	ld a,b
0406D1 B1          0981   	or c
0406D2 FE 00       0982   	cp 0
0406D4 20 F6       0983   	jr nz,df_loop5
0406D6             0984   
0406D6             0985   	; decrement frames count
0406D6 21 BC 18 04 0986   	ld hl,frames_count
0406DA 35          0987   	dec (hl)
0406DB             0988   
0406DB CD 7A 16 04 0989   	call fn_change_frame
0406DF CD 9F 16 04 0990   	call fn_change_frames_count
0406E3 CD 3A 16 04 0991   	call fn_refresh_sprite
0406E7 C9          0992   	ret
0406E8             0993   
0406E8             0994   df_exit:
0406E8 21 BC 18 04 0995   	ld hl,frames_count
0406EC 7E          0996   	ld a,(hl)
0406ED FE 01       0997   	cp 1
0406EF 28 06       0998   	jr z,df_exit_end
0406F1 35          0999   	dec (hl)
0406F2 21 BB 18 04 1000   	ld hl,current_frame
0406F6 35          1001   	dec (hl)
0406F7             1002   
0406F7             1003   df_exit_end:
0406F7 CD 7A 16 04 1004   	call fn_change_frame
0406FB CD 9F 16 04 1005   	call fn_change_frames_count
0406FF CD 3A 16 04 1006   	call fn_refresh_sprite
040703 C9          1007   	ret
040704             1008   
040704             1009   ; goto previous frame
040704             1010   dsl_previous_frame:
040704 21 B1 FF FF 1011   	ld hl,KEY_PGDOWN
040708 CD 48 17 04 1012   	call fn_inkey
04070C FE 00       1013   	cp 0
04070E 20 F4       1014   	jr nz,dsl_previous_frame
040710             1015   
040710 21 BB 18 04 1016   	ld hl,current_frame
040714 7E          1017   	ld a,(hl)
040715 FE 00       1018   	cp 0
040717 C8          1019   	ret z
040718             1020   
040718 3D          1021   	dec a
040719 77          1022   	ld (hl),a
04071A CD 7A 16 04 1023   	call fn_change_frame
04071E CD 3A 16 04 1024   	call fn_refresh_sprite
040722 C9          1025   	ret
040723             1026   
040723             1027   ; goto next frame
040723             1028   dsl_next_frame:
040723 21 C0 FF FF 1029   	ld hl,KEY_PGUP
040727 CD 48 17 04 1030   	call fn_inkey
04072B FE 00       1031   	cp 0
04072D 20 F4       1032   	jr nz,dsl_next_frame
04072F             1033   
04072F 21 BB 18 04 1034   	ld hl,current_frame
040733 7E          1035   	ld a,(hl)
040734 3C          1036   	inc a
040735 21 BC 18 04 1037   	ld hl,frames_count
040739 BE          1038   	cp (hl)
04073A C8          1039   	ret z
04073B             1040   
04073B 21 BB 18 04 1041   	ld hl,current_frame
04073F 77          1042   	ld (hl),a
040740 CD 7A 16 04 1043   	call fn_change_frame
040744 CD 3A 16 04 1044   	call fn_refresh_sprite
040748 C9          1045   	ret
040749             1046   
040749             1047   ; rotate a frame 90° clockwise
040749             1048   dsl_rotate_frame:
040749 21 CC FF FF 1049   	ld hl,KEY_R
04074D CD 48 17 04 1050   	call fn_inkey
040751 FE 00       1051   	cp 0
040753 20 F4       1052   	jr nz,dsl_rotate_frame
040755             1053   
040755             1054   	; find HL as start of the first frame (buffer)
040755 21 AB 17 04 1055   	ld hl,spr_size
040759 01 00 00 00 1056   	ld bc,$000000
04075D 11 00 00 00 1057   	ld de,$000000
040761 5E          1058   	ld e,(hl)
040762 56          1059   	ld d,(hl)
040763 4B          1060   	ld c,e
040764 ED 5C       1061   	mlt de ; DE = sprite length in bytes
040766 21 BB 18 04 1062   	ld hl,current_frame
04076A 7E          1063   	ld a,(hl) ; A = current frame
04076B 21 C4 18 04 1064   	ld hl,sprite_buffer
04076F FE 00       1065   	cp 0
040771 28 04       1066   	jr z,rf_noloop1
040773 47          1067   	ld b,a
040774             1068   
040774             1069   rf_loop1:
040774 19          1070   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040775 10 FD       1071   	djnz rf_loop1
040777             1072   
040777             1073   rf_noloop1:
040777 C5          1074   	push bc
040778 E5          1075   	push hl
040779             1076   
040779             1077   	; copy current frame to swap sprite buffer
040779 11 30 3C 04 1078   	ld de,swap_sprite_buffer
04077D 41          1079   	ld b,c
04077E ED 4C       1080   	mlt bc
040780 ED B0       1081   	ldir
040782             1082   
040782 FD E1       1083   	pop iy ; IY: destination
040784 C1          1084   	pop bc
040785             1085   
040785 79          1086   	ld a,c
040786 01 00 00 00 1087   	ld bc,$000000
04078A 4F          1088   	ld c,a ; BC = sprite size
04078B             1089   
04078B             1090   	; turn and copy swap sprite buffer frame to sprite buffer
04078B DD 21 30 3C 1091   	ld ix,swap_sprite_buffer ; IX: source
       04          
040790 11 00 00 00 1092   	ld de,0 ; x
040794 21 00 00 00 1093   	ld hl,0 ; y
040798             1094   
040798             1095   rf_loop2:
040798 DD E5       1096   	push ix
04079A FD E5       1097   	push iy
04079C             1098   
04079C D5          1099   	push de
04079D E5          1100   	push hl
04079E             1101   
04079E             1102   	; add x
04079E DD 19       1103   	add ix,de
0407A0             1104   
0407A0             1105   	; add y * width
0407A0 7C          1106   	ld a,h
0407A1 B5          1107   	or l
0407A2 FE 00       1108   	cp 0
0407A4 28 09       1109   	jr z,rf_done1
0407A6             1110   rf_loop3:
0407A6 DD 09       1111   	add ix,bc
0407A8 2B          1112   	dec hl
0407A9 7C          1113   	ld a,h
0407AA B5          1114   	or l
0407AB FE 00       1115   	cp 0
0407AD 20 F7       1116   	jr nz,rf_loop3
0407AF             1117   
0407AF             1118   rf_done1:
0407AF             1119   	; found the pixel value
0407AF DD 7E 00    1120   	ld a,(ix+0)
0407B2             1121   
0407B2 E1          1122   	pop hl
0407B3 D1          1123   	pop de
0407B4 D5          1124   	push de
0407B5 E5          1125   	push hl
0407B6             1126   
0407B6             1127   	; add y
0407B6 EB          1128   	ex de,hl
0407B7 FD 09       1129   	add iy,bc
0407B9 B7          1130   	or a
0407BA E5          1131   	push hl
0407BB FD E5       1132   	push iy
0407BD E1          1133   	pop hl
0407BE ED 52       1134   	sbc hl,de
0407C0 E5          1135   	push hl
0407C1 FD E1       1136   	pop iy
0407C3 FD 2B       1137   	dec iy
0407C5 E1          1138   	pop hl
0407C6 EB          1139   	ex de,hl
0407C7             1140   
0407C7             1141   	; add x * width
0407C7 F5          1142   	push af
0407C8 7A          1143   	ld a,d
0407C9 B3          1144   	or e
0407CA FE 00       1145   	cp 0
0407CC 28 09       1146   	jr z,rf_done2
0407CE             1147   rf_loop5:
0407CE FD 09       1148   	add iy,bc
0407D0 1B          1149   	dec de
0407D1 7A          1150   	ld a,d
0407D2 B3          1151   	or e
0407D3 FE 00       1152   	cp 0
0407D5 20 F7       1153   	jr nz,rf_loop5
0407D7             1154   
0407D7             1155   rf_done2:
0407D7 F1          1156   	pop af
0407D8             1157   
0407D8             1158   	; store the pixel value
0407D8 FD 77 00    1159   	ld (iy+0),a
0407DB             1160   
0407DB E1          1161   	pop hl
0407DC D1          1162   	pop de
0407DD             1163   
0407DD FD E1       1164   	pop iy
0407DF DD E1       1165   	pop ix
0407E1             1166   
0407E1 13          1167   	inc de
0407E2 EB          1168   	ex de,hl
0407E3 B7          1169   	or a
0407E4 ED 42       1170   	sbc hl,bc
0407E6 09          1171   	add hl,bc
0407E7 EB          1172   	ex de,hl
0407E8 DA 98 07 04 1173   	jp c,rf_loop2
0407EC             1174   
0407EC 11 00 00 00 1175   	ld de,0
0407F0 23          1176   	inc hl
0407F1 B7          1177   	or a
0407F2 ED 42       1178   	sbc hl,bc
0407F4 09          1179   	add hl,bc
0407F5 DA 98 07 04 1180   	jp c,rf_loop2
0407F9             1181   
0407F9 CD 3A 16 04 1182   	call fn_refresh_sprite
0407FD C9          1183   	ret
0407FE             1184   
0407FE             1185   ; flip frame horizontally
0407FE             1186   dsl_flip_frame:
0407FE 21 BC FF FF 1187   	ld hl,KEY_F
040802 CD 48 17 04 1188   	call fn_inkey
040806 FE 00       1189   	cp 0
040808 20 F4       1190   	jr nz,dsl_flip_frame
04080A             1191   
04080A 21 AB 17 04 1192   	ld hl,spr_size
04080E 11 00 00 00 1193   	ld de,$000000
040812 5E          1194   	ld e,(hl)
040813 56          1195   	ld d,(hl)
040814 4B          1196   	ld c,e
040815 ED 5C       1197   	mlt de ; DE = sprite length in bytes
040817 21 BB 18 04 1198   	ld hl,current_frame
04081B 7E          1199   	ld a,(hl) ; A = current frame
04081C 21 C4 18 04 1200   	ld hl,sprite_buffer
040820 FE 00       1201   	cp 0
040822 28 04       1202   	jr z,ff_noloop1
040824 47          1203   	ld b,a
040825             1204   
040825             1205   ff_loop1:
040825 19          1206   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040826 10 FD       1207   	djnz ff_loop1
040828             1208   
040828             1209   ff_noloop1:
040828 41          1210   	ld b,c ; B = sprite height
040829 11 00 00 00 1211   	ld de,$000000
04082D 59          1212   	ld e,c ; DE = sprite width
04082E 79          1213   	ld a,c ; A = sprite width
04082F CB 3F       1214   	srl a ; A = sprite height / 2
040831             1215   
040831 E5          1216   	push hl
040832 DD E1       1217   	pop ix ; IX = frame address
040834 19          1218   	add hl,de ; HL = frame address + sprite width - 1
040835 2B          1219   	dec hl
040836 E5          1220   	push hl
040837 FD E1       1221   	pop iy ; IY = IX + sprite width - 1
040839             1222   
040839             1223   ff_loop2:
040839 F5          1224   	push af
04083A D5          1225   	push de
04083B DD E5       1226   	push ix
04083D FD E5       1227   	push iy
04083F             1228   ff_loop3:
04083F DD 5E 00    1229   	ld e,(ix+0)
040842 FD 56 00    1230   	ld d,(iy+0)
040845 DD 72 00    1231   	ld (ix+0),d
040848 FD 73 00    1232   	ld (iy+0),e
04084B DD 23       1233   	inc ix
04084D FD 2B       1234   	dec iy
04084F 3D          1235   	dec a
040850 FE 00       1236   	cp 0
040852 20 EB       1237   	jr nz,ff_loop3
040854 FD E1       1238   	pop iy
040856 DD E1       1239   	pop ix
040858 D1          1240   	pop de
040859 F1          1241   	pop af
04085A DD 19       1242   	add ix,de
04085C FD 19       1243   	add iy,de
04085E 10 D9       1244   	djnz ff_loop2
040860             1245   
040860 CD 3A 16 04 1246   	call fn_refresh_sprite
040864 C9          1247   	ret
040865             1248   
040865             1249   ; mirror frame vertically
040865             1250   dsl_mirror_frame:
040865 21 9A FF FF 1251   	ld hl,KEY_M
040869 CD 48 17 04 1252   	call fn_inkey
04086D FE 00       1253   	cp 0
04086F 20 F4       1254   	jr nz,dsl_mirror_frame
040871             1255   
040871 21 AB 17 04 1256   	ld hl,spr_size
040875 01 00 00 00 1257   	ld bc,$000000
040879 11 00 00 00 1258   	ld de,$000000
04087D 5E          1259   	ld e,(hl)
04087E 56          1260   	ld d,(hl)
04087F 4B          1261   	ld c,e
040880 ED 5C       1262   	mlt de ; DE = sprite length in bytes
040882 21 BB 18 04 1263   	ld hl,current_frame
040886 7E          1264   	ld a,(hl) ; A = current frame
040887 21 C4 18 04 1265   	ld hl,sprite_buffer
04088B FE 00       1266   	cp 0
04088D 28 04       1267   	jr z,mf_noloop1
04088F 47          1268   	ld b,a
040890             1269   
040890             1270   mf_loop1:
040890 19          1271   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040891 10 FD       1272   	djnz mf_loop1
040893             1273   
040893             1274   mf_noloop1:
040893 11 00 00 00 1275   	ld de,$000000
040897 59          1276   	ld e,c ; E = sprite height
040898 79          1277   	ld a,c ; A = sprite width
040899 41          1278   	ld b,c ; B = sprite height
04089A CB 38       1279   	srl b ; divide B by 2, so B = sprite height / 2
04089C             1280   
04089C E5          1281   	push hl
04089D DD E1       1282   	pop ix ; IX = frame address
04089F 51          1283   	ld d,c
0408A0 15          1284   	dec d
0408A1 ED 5C       1285   	mlt de ; DE = sprite length - sprite width
0408A3 19          1286   	add hl,de ; HL = frame address + sprite length - sprite width
0408A4 E5          1287   	push hl
0408A5 FD E1       1288   	pop iy ; IY = IX + sprite length - sprite width
0408A7 21 00 00 00 1289   	ld hl,$000000
0408AB 69          1290   	ld l,c ; HL = sprite width
0408AC             1291   
0408AC             1292   mf_loop2:
0408AC F5          1293   	push af
0408AD D5          1294   	push de
0408AE DD E5       1295   	push ix
0408B0 FD E5       1296   	push iy
0408B2             1297   mf_loop3:
0408B2 DD 5E 00    1298   	ld e,(ix+0)
0408B5 FD 56 00    1299   	ld d,(iy+0)
0408B8 DD 72 00    1300   	ld (ix+0),d
0408BB FD 73 00    1301   	ld (iy+0),e
0408BE DD 23       1302   	inc ix
0408C0 FD 23       1303   	inc iy
0408C2 3D          1304   	dec a
0408C3 FE 00       1305   	cp 0
0408C5 20 EB       1306   	jr nz,mf_loop3
0408C7 FD E1       1307   	pop iy
0408C9 DD E1       1308   	pop ix
0408CB D1          1309   	pop de
0408CC F1          1310   	pop af
0408CD EB          1311   	ex de,hl
0408CE DD 19       1312   	add ix,de
0408D0 EB          1313   	ex de,hl
0408D1 E5          1314   	push hl
0408D2 FD E5       1315   	push iy
0408D4 E1          1316   	pop hl
0408D5 D1          1317   	pop de
0408D6 B7          1318   	or a
0408D7 ED 52       1319   	sbc hl,de
0408D9 E5          1320   	push hl
0408DA D5          1321   	push de
0408DB E1          1322   	pop hl
0408DC FD E1       1323   	pop iy
0408DE 10 CC       1324   	djnz mf_loop2
0408E0             1325   
0408E0 CD 3A 16 04 1326   	call fn_refresh_sprite
0408E4 C9          1327   	ret
0408E5             1328   
0408E5             1329   dsl_flood_fill:
0408E5 21 B6 FF FF 1330   	ld hl,KEY_RETURN
0408E9 CD 48 17 04 1331   	call fn_inkey
0408ED FE 00       1332   	cp 0
0408EF 20 F4       1333   	jr nz,dsl_flood_fill
0408F1             1334   
0408F1             1335   	; hide the cursor
0408F1 CD 82 0C 04 1336   	call fn_draw_pixel_without_border
0408F5             1337   
0408F5             1338   	; memorize pixel coordinates
0408F5 3A A6 17 04 1339   	ld a,(xpix)
0408F9 32 A8 17 04 1340   	ld (memxpix),a
0408FD 3A A7 17 04 1341   	ld a,(ypix)
040901 32 A9 17 04 1342   	ld (memypix),a
040905             1343   
040905             1344   	; fill all recursively
040905 3A A6 17 04 1345   	ld a,(xpix)
040909 5F          1346   	ld e,a
04090A 3A A7 17 04 1347   	ld a,(ypix)
04090E 57          1348   	ld d,a
04090F CD 30 09 04 1349   	call dsl_flood_fill_loop
040913             1350   
040913             1351   	; refresh all the sprite
040913 CD 3A 16 04 1352   	call fn_refresh_sprite
040917             1353   
040917             1354   	; hide the cursor again
040917 CD 82 0C 04 1355   	call fn_draw_pixel_without_border
04091B             1356   
04091B             1357   	; restore pixel coordinates
04091B             1358   	; and cursor
04091B 3A A8 17 04 1359   	ld a,(memxpix)
04091F 32 A6 17 04 1360   	ld (xpix),a
040923 3A A9 17 04 1361   	ld a,(memypix)
040927 32 A7 17 04 1362   	ld (ypix),a
04092B CD 6E 0C 04 1363   	call fn_draw_pixel_with_border
04092F C9          1364   	ret
040930             1365   
040930             1366   dsl_flood_fill_loop:
040930 D5          1367   	push de
040931             1368   
040931 DD 21 AB 17 1369   	ld ix,spr_size
       04          
040936             1370   
040936             1371   	; out  of the sprite area ?
040936 7B          1372   	ld a,e
040937 DD BE 00    1373   	cp (ix+0)
04093A D2 83 09 04 1374   	jp nc,ffl_exit
04093E             1375   
04093E             1376   	; out  of the sprite area ?
04093E 7A          1377   	ld a,d
04093F DD BE 00    1378   	cp (ix+0)
040942 D2 83 09 04 1379   	jp nc,ffl_exit
040946             1380   
040946             1381   	; replace current pixel, if it is
040946             1382   	; inside the sprite area,
040946             1383   	; and has not the select palette color
040946 7B          1384   	ld a,e
040947 32 A6 17 04 1385   	ld (xpix),a
04094B 7A          1386   	ld a,d
04094C 32 A7 17 04 1387   	ld (ypix),a
040950 CD 98 0C 04 1388   	call fn_get_pixel_color
040954 21 AC 17 04 1389   	ld hl,current_pen
040958 BE          1390   	cp (hl)
040959 CA 83 09 04 1391   	jp z,ffl_exit
04095D 7E          1392   	ld a,(hl)
04095E CD DA 0C 04 1393   	call fn_set_pixel_color
040962             1394   
040962             1395   	; restore coordinates
040962 3A A6 17 04 1396   	ld a,(xpix)
040966 5F          1397   	ld e,a
040967 3A A7 17 04 1398   	ld a,(ypix)
04096B 57          1399   	ld d,a
04096C             1400   
04096C             1401   	; draw pixel at right
04096C 1C          1402   	inc e
04096D CD 30 09 04 1403   	call dsl_flood_fill_loop
040971 1D          1404   	dec e
040972             1405   	; draw pixel at left
040972 1D          1406   	dec e
040973 CD 30 09 04 1407   	call dsl_flood_fill_loop
040977 1C          1408   	inc e
040978             1409   	; draw pixel up
040978 14          1410   	inc d
040979 CD 30 09 04 1411   	call dsl_flood_fill_loop
04097D 15          1412   	dec d
04097E             1413   	; draw pixel down
04097E 15          1414   	dec d
04097F CD 30 09 04 1415   	call dsl_flood_fill_loop
040983             1416   
040983             1417   ffl_exit:
040983 D1          1418   	pop de
040984 C9          1419   	ret
040985             1420   
040985             1421   ; change current tool to palette tool
040985             1422   dsl_palette_tool:
040985 21 9F FF FF 1423   	ld hl,KEY_TAB
040989 CD 48 17 04 1424   	call fn_inkey
04098D FE 00       1425   	cp 0
04098F 20 F4       1426   	jr nz,dsl_palette_tool
040991             1427   
040991             1428   	; hide sprite drawing cursor
040991 CD 82 0C 04 1429   	call fn_draw_pixel_without_border
040995             1430   
040995             1431   	; draw selected palette color
040995 21 AC 17 04 1432   	ld hl,current_pen
040999 4E          1433   	ld c,(hl)
04099A CD 36 0D 04 1434   	call fn_draw_palette_with_border
04099E             1435   
04099E             1436   ; select palette color
04099E             1437   dsl_palette_tool_loop:
04099E             1438   	; move to left color in the palette
04099E 21 E6 FF FF 1439   	ld hl,KEY_LEFT
0409A2 CD 48 17 04 1440   	call fn_inkey
0409A6 FE 01       1441   	cp 1
0409A8 CC 67 0A 04 1442   	call z,dsl_dec_pen
0409AC             1443   
0409AC             1444   	; move to right color in the palette
0409AC 21 86 FF FF 1445   	ld hl,KEY_RIGHT
0409B0 CD 48 17 04 1446   	call fn_inkey
0409B4 FE 01       1447   	cp 1
0409B6 CC 92 0A 04 1448   	call z,dsl_inc_pen
0409BA             1449   
0409BA             1450   	; return to draw sprite tool
0409BA 21 9F FF FF 1451   	ld hl,KEY_TAB
0409BE CD 48 17 04 1452   	call fn_inkey
0409C2 FE 01       1453   	cp 1
0409C4 CA 4A 0A 04 1454   	jp z,dsl_draw_sprite_tool
0409C8             1455   
0409C8             1456   	; load palette
0409C8 21 A9 FF FF 1457   	ld hl,KEY_L
0409CC CD 48 17 04 1458   	call fn_inkey
0409D0 FE 01       1459   	cp 1
0409D2 CC F6 09 04 1460   	call z,dslp_load_palette
0409D6             1461   
0409D6             1462   	; save palette
0409D6 21 AE FF FF 1463   	ld hl,KEY_S
0409DA CD 48 17 04 1464   	call fn_inkey
0409DE FE 01       1465   	cp 1
0409E0 CC 24 0A 04 1466   	call z,dslp_save_palette
0409E4             1467   
0409E4             1468   	; exit program
0409E4 21 8F FF FF 1469   	ld hl,KEY_ESCAPE
0409E8 CD 48 17 04 1470   	call fn_inkey
0409EC FE 01       1471   	cp 1
0409EE CA BD 0A 04 1472   	jp z,exit_program
0409F2             1473   
0409F2 C3 9E 09 04 1474   	jp dsl_palette_tool_loop
0409F6             1475   
0409F6             1476   dslp_load_palette:
0409F6 21 A9 FF FF 1477   	ld hl,KEY_L
0409FA CD 48 17 04 1478   	call fn_inkey
0409FE FE 00       1479   	cp 0
040A00 20 F4       1480   	jr nz,dslp_load_palette
040A02             1481   
040A02 21 AC 17 04 1482   	ld hl,current_pen
040A06 4E          1483   	ld c,(hl)
040A07 CD 9B 0D 04 1484   	call fn_draw_palette_without_border
040A0B CD 06 0F 04 1485   	call fn_load_palette
040A0F 21 AC 17 04 1486   	ld hl,current_pen
040A13 4E          1487   	ld c,(hl)
040A14 CD 3A 16 04 1488   	call fn_refresh_sprite
040A18 CD 36 0D 04 1489   	call fn_draw_palette_with_border
040A1C CD 7A 16 04 1490   	call fn_change_frame
040A20 C3 9E 09 04 1491   	jp dsl_palette_tool_loop
040A24             1492   
040A24             1493   dslp_save_palette:
040A24 21 AE FF FF 1494   	ld hl,KEY_S
040A28 CD 48 17 04 1495   	call fn_inkey
040A2C FE 00       1496   	cp 0
040A2E 20 F4       1497   	jr nz,dslp_save_palette
040A30             1498   
040A30 21 AC 17 04 1499   	ld hl,current_pen
040A34 4E          1500   	ld c,(hl)
040A35 CD 9B 0D 04 1501   	call fn_draw_palette_without_border
040A39 CD EE 11 04 1502   	call fn_save_palette
040A3D 21 AC 17 04 1503   	ld hl,current_pen
040A41 4E          1504   	ld c,(hl)
040A42 CD 36 0D 04 1505   	call fn_draw_palette_with_border
040A46 C3 9E 09 04 1506   	jp dsl_palette_tool_loop
040A4A             1507   
040A4A             1508   dsl_draw_sprite_tool:
040A4A 21 9F FF FF 1509   	ld hl,KEY_TAB
040A4E CD 48 17 04 1510   	call fn_inkey
040A52 FE 00       1511   	cp 0
040A54 20 F4       1512   	jr nz,dsl_draw_sprite_tool
040A56             1513   
040A56             1514   	; unselect palette color
040A56 21 AC 17 04 1515   	ld hl,current_pen
040A5A 4E          1516   	ld c,(hl)
040A5B CD 9B 0D 04 1517   	call fn_draw_palette_without_border
040A5F             1518   
040A5F             1519   	; draw the pixel with a border
040A5F CD 6E 0C 04 1520   	call fn_draw_pixel_with_border
040A63             1521   
040A63 C3 F2 02 04 1522   	jp draw_sprite_loop
040A67             1523   
040A67             1524   dsl_dec_pen:
040A67 21 AC 17 04 1525   	ld hl,current_pen
040A6B 7E          1526   	ld a,(hl)
040A6C FE 00       1527   	cp COLOR_MIN
040A6E CA 9E 09 04 1528   	jp z,dsl_palette_tool_loop
040A72             1529   
040A72 F5          1530   	push af
040A73 E5          1531   	push hl
040A74             1532   
040A74             1533   	; unselect palette color
040A74 21 AC 17 04 1534   	ld hl,current_pen
040A78 4E          1535   	ld c,(hl)
040A79 CD 9B 0D 04 1536   	call fn_draw_palette_without_border
040A7D             1537   
040A7D E1          1538   	pop hl
040A7E F1          1539   	pop af
040A7F             1540   
040A7F             1541   	; dec the pen
040A7F 3D          1542   	dec a
040A80 77          1543   	ld (hl),a
040A81             1544   
040A81             1545   	; select palette color
040A81 21 AC 17 04 1546   	ld hl,current_pen
040A85 4E          1547   	ld c,(hl)
040A86 CD 36 0D 04 1548   	call fn_draw_palette_with_border
040A8A CD C3 16 04 1549   	call fn_slowdown
040A8E C3 9E 09 04 1550   	jp dsl_palette_tool_loop
040A92             1551   
040A92             1552   dsl_inc_pen:
040A92 21 AC 17 04 1553   	ld hl,current_pen
040A96 7E          1554   	ld a,(hl)
040A97 FE 3F       1555   	cp COLOR_MAX
040A99 CA 9E 09 04 1556   	jp z,dsl_palette_tool_loop
040A9D             1557   
040A9D F5          1558   	push af
040A9E E5          1559   	push hl
040A9F             1560   
040A9F             1561   	; unselect palette color
040A9F 21 AC 17 04 1562   	ld hl,current_pen
040AA3 4E          1563   	ld c,(hl)
040AA4 CD 9B 0D 04 1564   	call fn_draw_palette_without_border
040AA8             1565   
040AA8 E1          1566   	pop hl
040AA9 F1          1567   	pop af
040AAA             1568   
040AAA             1569   	; inc the pen
040AAA 3C          1570   	inc a
040AAB 77          1571   	ld (hl),a
040AAC             1572   
040AAC             1573   	; select palette color
040AAC 21 AC 17 04 1574   	ld hl,current_pen
040AB0 4E          1575   	ld c,(hl)
040AB1 CD 36 0D 04 1576   	call fn_draw_palette_with_border
040AB5 CD C3 16 04 1577   	call fn_slowdown
040AB9 C3 9E 09 04 1578   	jp dsl_palette_tool_loop
040ABD             1579   
040ABD             1580   ; exit program
040ABD             1581   exit_program:
040ABD             1582   	; reset to mode 1
040ABD             1583   	vdu 22
040ABD 3E 16       0001M  		LD	A, function
040ABF 49 D7       0002M  		RST.LIS	10h
040AC1             1584   	vdu 1
040AC1 3E 01       0001M  		LD	A, function
040AC3 49 D7       0002M  		RST.LIS	10h
040AC5             1585   
040AC5             1586   	; position the texte cursor at home
040AC5             1587   	vdu 30
040AC5 3E 1E       0001M  		LD	A, function
040AC7 49 D7       0002M  		RST.LIS	10h
040AC9             1588   
040AC9             1589   	; show cursor
040AC9             1590   	vdu 23
040AC9 3E 17       0001M  		LD	A, function
040ACB 49 D7       0002M  		RST.LIS	10h
040ACD             1591   	vdu 1
040ACD 3E 01       0001M  		LD	A, function
040ACF 49 D7       0002M  		RST.LIS	10h
040AD1             1592   	vdu 1
040AD1 3E 01       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5             1593   
040AD5 FD E1       1594   	pop iy
040AD7 DD E1       1595   	pop ix
040AD9 D1          1596   	pop de
040ADA C1          1597   	pop bc
040ADB F1          1598   	pop af
040ADC 21 00 00 00 1599   	ld hl,0
040AE0             1600   
040AE0 C9          1601   	ret
040AE1             1602   ;======================================================================
040AE1             1603   
040AE1             1604   ; draw a rectangle
040AE1             1605   fn_rect:
040AE1             1606   	vdu 25
040AE1 3E 19       0001M  		LD	A, function
040AE3 49 D7       0002M  		RST.LIS	10h
040AE5             1607   	vdu 4
040AE5 3E 04       0001M  		LD	A, function
040AE7 49 D7       0002M  		RST.LIS	10h
040AE9 DD 21 96 17 1608   	ld ix,x1
       04          
040AEE DD 7E 00    1609   	ld a,(ix + 0)
040AF1             1610   	vdu_a
040AF1 49 D7       0001M  		RST.LIS	10h
040AF3 DD 7E 01    1611   	ld a,(ix + 1)
040AF6             1612   	vdu_a
040AF6 49 D7       0001M  		RST.LIS	10h
040AF8 FD 21 98 17 1613   	ld iy,y1
       04          
040AFD FD 7E 00    1614   	ld a,(iy + 0)
040B00             1615   	vdu_a
040B00 49 D7       0001M  		RST.LIS	10h
040B02 FD 7E 01    1616   	ld a,(iy + 1)
040B05             1617   	vdu_a
040B05 49 D7       0001M  		RST.LIS	10h
040B07             1618   
040B07             1619   	vdu 25
040B07 3E 19       0001M  		LD	A, function
040B09 49 D7       0002M  		RST.LIS	10h
040B0B             1620   	vdu 5
040B0B 3E 05       0001M  		LD	A, function
040B0D 49 D7       0002M  		RST.LIS	10h
040B0F DD 21 9A 17 1621   	ld ix,x2
       04          
040B14 DD 7E 00    1622   	ld a,(ix + 0)
040B17             1623   	vdu_a
040B17 49 D7       0001M  		RST.LIS	10h
040B19 DD 7E 01    1624   	ld a,(ix + 1)
040B1C             1625   	vdu_a
040B1C 49 D7       0001M  		RST.LIS	10h
040B1E FD 21 98 17 1626   	ld iy,y1
       04          
040B23 FD 7E 00    1627   	ld a,(iy + 0)
040B26             1628   	vdu_a
040B26 49 D7       0001M  		RST.LIS	10h
040B28 FD 7E 01    1629   	ld a,(iy + 1)
040B2B             1630   	vdu_a
040B2B 49 D7       0001M  		RST.LIS	10h
040B2D             1631   
040B2D             1632   	vdu 25
040B2D 3E 19       0001M  		LD	A, function
040B2F 49 D7       0002M  		RST.LIS	10h
040B31             1633   	vdu 5
040B31 3E 05       0001M  		LD	A, function
040B33 49 D7       0002M  		RST.LIS	10h
040B35 DD 21 9A 17 1634   	ld ix,x2
       04          
040B3A DD 7E 00    1635   	ld a,(ix + 0)
040B3D             1636   	vdu_a
040B3D 49 D7       0001M  		RST.LIS	10h
040B3F DD 7E 01    1637   	ld a,(ix + 1)
040B42             1638   	vdu_a
040B42 49 D7       0001M  		RST.LIS	10h
040B44 FD 21 9C 17 1639   	ld iy,y2
       04          
040B49 FD 7E 00    1640   	ld a,(iy + 0)
040B4C             1641   	vdu_a
040B4C 49 D7       0001M  		RST.LIS	10h
040B4E FD 7E 01    1642   	ld a,(iy + 1)
040B51             1643   	vdu_a
040B51 49 D7       0001M  		RST.LIS	10h
040B53             1644   
040B53             1645   	vdu 25
040B53 3E 19       0001M  		LD	A, function
040B55 49 D7       0002M  		RST.LIS	10h
040B57             1646   	vdu 5
040B57 3E 05       0001M  		LD	A, function
040B59 49 D7       0002M  		RST.LIS	10h
040B5B DD 21 96 17 1647   	ld ix,x1
       04          
040B60 DD 7E 00    1648   	ld a,(ix + 0)
040B63             1649   	vdu_a
040B63 49 D7       0001M  		RST.LIS	10h
040B65 DD 7E 01    1650   	ld a,(ix + 1)
040B68             1651   	vdu_a
040B68 49 D7       0001M  		RST.LIS	10h
040B6A FD 21 9C 17 1652   	ld iy,y2
       04          
040B6F FD 7E 00    1653   	ld a,(iy + 0)
040B72             1654   	vdu_a
040B72 49 D7       0001M  		RST.LIS	10h
040B74 FD 7E 01    1655   	ld a,(iy + 1)
040B77             1656   	vdu_a
040B77 49 D7       0001M  		RST.LIS	10h
040B79             1657   
040B79             1658   	vdu 25
040B79 3E 19       0001M  		LD	A, function
040B7B 49 D7       0002M  		RST.LIS	10h
040B7D             1659   	vdu 5
040B7D 3E 05       0001M  		LD	A, function
040B7F 49 D7       0002M  		RST.LIS	10h
040B81 DD 21 96 17 1660   	ld ix,x1
       04          
040B86 DD 7E 00    1661   	ld a,(ix + 0)
040B89             1662   	vdu_a
040B89 49 D7       0001M  		RST.LIS	10h
040B8B DD 7E 01    1663   	ld a,(ix + 1)
040B8E             1664   	vdu_a
040B8E 49 D7       0001M  		RST.LIS	10h
040B90 FD 21 98 17 1665   	ld iy,y1
       04          
040B95 FD 7E 00    1666   	ld a,(iy + 0)
040B98             1667   	vdu_a
040B98 49 D7       0001M  		RST.LIS	10h
040B9A FD 7E 01    1668   	ld a,(iy + 1)
040B9D             1669   	vdu_a
040B9D 49 D7       0001M  		RST.LIS	10h
040B9F             1670   
040B9F C9          1671   	ret
040BA0             1672   
040BA0             1673   ; draw a filled rectangle
040BA0             1674   fn_rectf:
040BA0 DD 21 96 17 1675   	ld ix,x1
       04          
040BA5 FD 21 98 17 1676   	ld iy,y1
       04          
040BAA             1677   
040BAA             1678   	vdu 25
040BAA 3E 19       0001M  		LD	A, function
040BAC 49 D7       0002M  		RST.LIS	10h
040BAE             1679   	vdu 4
040BAE 3E 04       0001M  		LD	A, function
040BB0 49 D7       0002M  		RST.LIS	10h
040BB2 DD 7E 00    1680   	ld a,(ix+0)
040BB5             1681   	vdu_a
040BB5 49 D7       0001M  		RST.LIS	10h
040BB7 DD 7E 01    1682   	ld a,(ix+1)
040BBA             1683   	vdu_a
040BBA 49 D7       0001M  		RST.LIS	10h
040BBC FD 7E 00    1684   	ld a,(iy+0)
040BBF             1685   	vdu_a
040BBF 49 D7       0001M  		RST.LIS	10h
040BC1 FD 7E 01    1686   	ld a,(iy+1)
040BC4             1687   	vdu_a
040BC4 49 D7       0001M  		RST.LIS	10h
040BC6             1688   
040BC6 DD 21 9A 17 1689   	ld ix,x2
       04          
040BCB FD 21 9C 17 1690   	ld iy,y2
       04          
040BD0             1691   
040BD0             1692   	vdu 25
040BD0 3E 19       0001M  		LD	A, function
040BD2 49 D7       0002M  		RST.LIS	10h
040BD4             1693   	vdu 101
040BD4 3E 65       0001M  		LD	A, function
040BD6 49 D7       0002M  		RST.LIS	10h
040BD8 DD 7E 00    1694   	ld a,(ix+0)
040BDB             1695   	vdu_a
040BDB 49 D7       0001M  		RST.LIS	10h
040BDD DD 7E 01    1696   	ld a,(ix+1)
040BE0             1697   	vdu_a
040BE0 49 D7       0001M  		RST.LIS	10h
040BE2 FD 7E 00    1698   	ld a,(iy+0)
040BE5             1699   	vdu_a
040BE5 49 D7       0001M  		RST.LIS	10h
040BE7 FD 7E 01    1700   	ld a,(iy+1)
040BEA             1701   	vdu_a
040BEA 49 D7       0001M  		RST.LIS	10h
040BEC             1702   
040BEC C9          1703   	ret
040BED             1704   
040BED             1705   fn_calc_pixel_coords:
040BED 11 00 00 00 1706   	ld de,$000000 ; reset deu
040BF1             1707   
040BF1             1708   	; calculate coordinates x of the resized pixel
040BF1 21 A6 17 04 1709   	ld hl,xpix
040BF5 5E          1710   	ld e,(hl) ; E = xpix
040BF6 21 AA 17 04 1711   	ld hl,pixel_width
040BFA 56          1712   	ld d,(hl) ; D = pixel_width
040BFB D5          1713   	push de
040BFC E1          1714   	pop hl ; HL = DE
040BFD ED 6C       1715   	mlt hl ; HL = xpix * pixel_width
040BFF DD 21 9E 17 1716   	ld ix,xs1
       04          
040C04 DD 5E 00    1717   	ld e,(ix+0)
040C07 DD 56 01    1718   	ld d,(ix+1)
040C0A 13          1719   	inc de ; DE = xs1 + 1
040C0B 19          1720   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040C0C FD 21 96 17 1721   	ld iy,x1
       04          
040C11 FD 75 00    1722   	ld (iy+0),l
040C14 FD 74 01    1723   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040C17 E5          1724   	push hl
040C18 21 AA 17 04 1725   	ld hl,pixel_width
040C1C 16 00       1726   	ld d,0
040C1E 5E          1727   	ld e,(hl)
040C1F E1          1728   	pop hl
040C20 19          1729   	add hl,de
040C21 2B          1730   	dec hl
040C22 FD 21 9A 17 1731   	ld iy,x2
       04          
040C27 FD 75 00    1732   	ld (iy+0),l
040C2A FD 74 01    1733   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040C2D             1734   
040C2D 11 00 00 00 1735   	ld de,$000000 ; reset deu
040C31             1736   
040C31             1737   	; calculate coordinates y of the resized pixel
040C31 21 A7 17 04 1738   	ld hl,ypix
040C35 5E          1739   	ld e,(hl) ; E = ypix
040C36 21 AA 17 04 1740   	ld hl,pixel_width
040C3A 56          1741   	ld d,(hl) ; D = pixel_width
040C3B D5          1742   	push de
040C3C E1          1743   	pop hl ; HL = DE
040C3D ED 6C       1744   	mlt hl ; HL = ypix * pixel_width
040C3F DD 21 A0 17 1745   	ld ix,ys1
       04          
040C44 DD 5E 00    1746   	ld e,(ix+0)
040C47 DD 56 01    1747   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040C4A 13          1748   	inc de ; DE = ys1 + 1
040C4B 19          1749   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040C4C FD 21 98 17 1750   	ld iy,y1
       04          
040C51 FD 75 00    1751   	ld (iy+0),l
040C54 FD 74 01    1752   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040C57 E5          1753   	push hl
040C58 21 AA 17 04 1754   	ld hl,pixel_width
040C5C 16 00       1755   	ld d,0
040C5E 5E          1756   	ld e,(hl)
040C5F E1          1757   	pop hl
040C60 19          1758   	add hl,de
040C61 2B          1759   	dec hl
040C62 FD 21 9C 17 1760   	ld iy,y2
       04          
040C67 FD 75 00    1761   	ld (iy+0),l
040C6A FD 74 01    1762   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C6D             1763   
040C6D C9          1764   	ret
040C6E             1765   
040C6E             1766   ; draw the resized pixel border, with its color
040C6E             1767   fn_draw_pixel_with_border:
040C6E CD 82 0C 04 1768   	call fn_draw_pixel_without_border
040C72             1769   
040C72             1770   	; set graphics pen
040C72             1771   	vdu 18
040C72 3E 12       0001M  		LD	A, function
040C74 49 D7       0002M  		RST.LIS	10h
040C76             1772   	vdu 0
040C76 3E 00       0001M  		LD	A, function
040C78 49 D7       0002M  		RST.LIS	10h
040C7A             1773   	vdu COLOR_GREY ; grey pen
040C7A 3E 07       0001M  		LD	A, function
040C7C 49 D7       0002M  		RST.LIS	10h
040C7E             1774   
040C7E             1775   	; draw the sprite's border rectangle
040C7E C3 E1 0A 04 1776   	jp fn_rect
040C82             1777   
040C82             1778   ; draw the resized pixel color
040C82             1779   fn_draw_pixel_without_border:
040C82 CD ED 0B 04 1780   	call fn_calc_pixel_coords
040C86             1781   
040C86             1782   	; set graphics pen
040C86             1783   	vdu 18
040C86 3E 12       0001M  		LD	A, function
040C88 49 D7       0002M  		RST.LIS	10h
040C8A             1784   	vdu 0
040C8A 3E 00       0001M  		LD	A, function
040C8C 49 D7       0002M  		RST.LIS	10h
040C8E CD 98 0C 04 1785   	call fn_get_pixel_color
040C92             1786   	vdu_a
040C92 49 D7       0001M  		RST.LIS	10h
040C94             1787   
040C94             1788   	; draw the sprite's color rectangle
040C94 C3 A0 0B 04 1789   	jp fn_rectf
040C98             1790   
040C98             1791   ; get pixel color value in the sprite buffer
040C98             1792   ; returns A: pixel color (0-63)
040C98             1793   fn_get_pixel_color:
040C98 11 00 00 00 1794   	ld de,$000000 ; reset deu
040C9C             1795   
040C9C             1796   	; calculate the offset to add to the address
040C9C 21 A7 17 04 1797   	ld hl,ypix
040CA0 5E          1798   	ld e,(hl) ; E = ypix
040CA1 21 AB 17 04 1799   	ld hl,spr_size
040CA5 56          1800   	ld d,(hl) ; D = sprsize
040CA6 D5          1801   	push de
040CA7 E1          1802   	pop hl
040CA8 ED 6C       1803   	mlt hl ; HL = ypix * sprsize
040CAA E5          1804   	push hl
040CAB 21 A6 17 04 1805   	ld hl,xpix
040CAF 5E          1806   	ld e,(hl)
040CB0 16 00       1807   	ld d,0
040CB2 E1          1808   	pop hl
040CB3 19          1809   	add hl,de ; HL = (ypix * sprsize) + xpix
040CB4             1810   
040CB4 11 BB 18 04 1811   	ld de,current_frame
040CB8 1A          1812   	ld a,(de)
040CB9 FE 00       1813   	cp 0
040CBB 28 16       1814   	jr z,gpc_end_loop
040CBD             1815   
040CBD 47          1816   	ld b,a
040CBE E5          1817   	push hl
040CBF 11 00 00 00 1818   	ld de,$000000
040CC3 21 AB 17 04 1819   	ld hl,spr_size
040CC7 5E          1820   	ld e,(hl)
040CC8 56          1821   	ld d,(hl)
040CC9 D5          1822   	push de
040CCA E1          1823   	pop hl
040CCB ED 6C       1824   	mlt hl
040CCD E5          1825   	push hl
040CCE D1          1826   	pop de ; DE = sprsize²
040CCF E1          1827   	pop hl
040CD0             1828   
040CD0             1829   gpc_loop:
040CD0 19          1830   	add hl,de
040CD1 10 FD       1831   	djnz gpc_loop
040CD3             1832   
040CD3             1833   gpc_end_loop:
040CD3             1834   	; add the offset to the address
040CD3 11 C4 18 04 1835   	ld de,sprite_buffer
040CD7 19          1836   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CD8             1837   
040CD8             1838   	; get pixel color value
040CD8 7E          1839   	ld a,(hl)
040CD9             1840   
040CD9 C9          1841   	ret
040CDA             1842   
040CDA             1843   ; get pixel color value in the sprite buffer
040CDA             1844   ; A: pixel color (0-63)
040CDA             1845   fn_set_pixel_color:
040CDA 11 00 00 00 1846   	ld de,$000000 ; reset deu
040CDE             1847   
040CDE             1848   	; calculate the offset to add to the address
040CDE 21 A7 17 04 1849   	ld hl,ypix
040CE2 5E          1850   	ld e,(hl) ; E = ypix
040CE3 21 AB 17 04 1851   	ld hl,spr_size
040CE7 56          1852   	ld d,(hl) ; D = sprsize
040CE8 D5          1853   	push de
040CE9 E1          1854   	pop hl
040CEA ED 6C       1855   	mlt hl ; HL = ypix * sprsize
040CEC E5          1856   	push hl
040CED 21 A6 17 04 1857   	ld hl,xpix
040CF1 5E          1858   	ld e,(hl)
040CF2 16 00       1859   	ld d,0
040CF4 E1          1860   	pop hl
040CF5 19          1861   	add hl,de ; HL = (ypix * sprsize) + xpix
040CF6 F5          1862   	push af
040CF7             1863   
040CF7 11 BB 18 04 1864   	ld de,current_frame
040CFB 1A          1865   	ld a,(de)
040CFC FE 00       1866   	cp 0
040CFE 28 16       1867   	jr z,spc_end_loop
040D00             1868   
040D00 47          1869   	ld b,a
040D01 E5          1870   	push hl
040D02 11 00 00 00 1871   	ld de,$000000
040D06 21 AB 17 04 1872   	ld hl,spr_size
040D0A 5E          1873   	ld e,(hl)
040D0B 56          1874   	ld d,(hl)
040D0C D5          1875   	push de
040D0D E1          1876   	pop hl
040D0E ED 6C       1877   	mlt hl
040D10 E5          1878   	push hl
040D11 D1          1879   	pop de ; DE = sprsize²
040D12 E1          1880   	pop hl
040D13             1881   
040D13             1882   spc_loop:
040D13 19          1883   	add hl,de
040D14 10 FD       1884   	djnz spc_loop
040D16             1885   
040D16             1886   spc_end_loop:
040D16             1887   
040D16             1888   	; add the offset to the address
040D16 11 C4 18 04 1889   	ld de,sprite_buffer
040D1A 19          1890   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040D1B             1891   
040D1B             1892   	; set pixel color value
040D1B F1          1893   	pop af
040D1C 77          1894   	ld (hl),a
040D1D             1895   
040D1D C9          1896   	ret
040D1E             1897   
040D1E             1898   fn_move_up:
040D1E 21 A7 17 04 1899   	ld hl,ypix
040D22 35          1900   	dec (hl)
040D23 C9          1901   	ret
040D24             1902   
040D24             1903   fn_move_down:
040D24 21 A7 17 04 1904   	ld hl,ypix
040D28 34          1905   	inc (hl)
040D29 C9          1906   	ret
040D2A             1907   
040D2A             1908   fn_move_left:
040D2A 21 A6 17 04 1909   	ld hl,xpix
040D2E 35          1910   	dec (hl)
040D2F C9          1911   	ret
040D30             1912   
040D30             1913   fn_move_right:
040D30 21 A6 17 04 1914   	ld hl,xpix
040D34 34          1915   	inc (hl)
040D35 C9          1916   	ret
040D36             1917   
040D36             1918   ; draw palette color whit border and selection
040D36             1919   ; C = color number (0-63)
040D36             1920   fn_draw_palette_with_border:
040D36 C5          1921   	push bc
040D37             1922   
040D37             1923   	; choose palette color
040D37             1924   	vdu 18
040D37 3E 12       0001M  		LD	A, function
040D39 49 D7       0002M  		RST.LIS	10h
040D3B             1925   	vdu 0
040D3B 3E 00       0001M  		LD	A, function
040D3D 49 D7       0002M  		RST.LIS	10h
040D3F C1          1926   	pop bc
040D40 C5          1927   	push bc
040D41 79          1928   	ld a,c
040D42             1929   	vdu_a
040D42 49 D7       0001M  		RST.LIS	10h
040D44             1930   
040D44             1931   	; store coordinates for a palette square
040D44 DD 21 96 17 1932   	ld ix,x1
       04          
040D49 E1          1933   	pop hl
040D4A E5          1934   	push hl
040D4B 26 05       1935   	ld h,5
040D4D ED 6C       1936   	mlt hl
040D4F E5          1937   	push hl
040D50 DD 75 00    1938   	ld (ix+0),l
040D53 DD 74 01    1939   	ld (ix+1),h
040D56             1940   
040D56 DD 21 98 17 1941   	ld ix,y1
       04          
040D5B 21 00 00 00 1942   	ld hl,0
040D5F DD 75 00    1943   	ld (ix+0),l
040D62 DD 74 01    1944   	ld (ix+1),h
040D65             1945   
040D65 DD 21 9A 17 1946   	ld ix,x2
       04          
040D6A E1          1947   	pop hl
040D6B 11 04 00 00 1948   	ld de,4
040D6F 19          1949   	add hl,de
040D70 DD 75 00    1950   	ld (ix+0),l
040D73 DD 74 01    1951   	ld (ix+1),h
040D76             1952   
040D76 DD 21 9C 17 1953   	ld ix,y2
       04          
040D7B 21 0A 00 00 1954   	ld hl,10
040D7F DD 75 00    1955   	ld (ix+0),l
040D82 DD 74 01    1956   	ld (ix+1),h
040D85             1957   
040D85             1958   	; draw the palette filled square
040D85 CD A0 0B 04 1959   	call fn_rectf
040D89             1960   
040D89             1961   	; choose grey color
040D89             1962   	vdu 18
040D89 3E 12       0001M  		LD	A, function
040D8B 49 D7       0002M  		RST.LIS	10h
040D8D             1963   	vdu 0
040D8D 3E 00       0001M  		LD	A, function
040D8F 49 D7       0002M  		RST.LIS	10h
040D91 3E 07       1964   	ld a,COLOR_GREY
040D93             1965   	vdu_a
040D93 49 D7       0001M  		RST.LIS	10h
040D95             1966   
040D95             1967   	; draw the palette square border
040D95 CD E1 0A 04 1968   	call fn_rect
040D99             1969   
040D99             1970   	; next color ?
040D99 C1          1971   	pop bc
040D9A             1972   
040D9A C9          1973   	ret
040D9B             1974   
040D9B             1975   ; draw palette color whitout border and selection
040D9B             1976   ; C = color number (0-63)
040D9B             1977   fn_draw_palette_without_border:
040D9B C5          1978   	push bc
040D9C             1979   
040D9C             1980   	; choose palette color
040D9C             1981   	vdu 18
040D9C 3E 12       0001M  		LD	A, function
040D9E 49 D7       0002M  		RST.LIS	10h
040DA0             1982   	vdu 0
040DA0 3E 00       0001M  		LD	A, function
040DA2 49 D7       0002M  		RST.LIS	10h
040DA4 C1          1983   	pop bc
040DA5 C5          1984   	push bc
040DA6 79          1985   	ld a,c
040DA7             1986   	vdu_a
040DA7 49 D7       0001M  		RST.LIS	10h
040DA9             1987   
040DA9             1988   	; store coordinates for a palette square
040DA9 DD 21 96 17 1989   	ld ix,x1
       04          
040DAE E1          1990   	pop hl
040DAF E5          1991   	push hl
040DB0 26 05       1992   	ld h,5
040DB2 ED 6C       1993   	mlt hl
040DB4 E5          1994   	push hl
040DB5 DD 75 00    1995   	ld (ix+0),l
040DB8 DD 74 01    1996   	ld (ix+1),h
040DBB             1997   
040DBB DD 21 98 17 1998   	ld ix,y1
       04          
040DC0 21 00 00 00 1999   	ld hl,0
040DC4 DD 75 00    2000   	ld (ix+0),l
040DC7 DD 74 01    2001   	ld (ix+1),h
040DCA             2002   
040DCA DD 21 9A 17 2003   	ld ix,x2
       04          
040DCF E1          2004   	pop hl
040DD0 11 04 00 00 2005   	ld de,4
040DD4 19          2006   	add hl,de
040DD5 DD 75 00    2007   	ld (ix+0),l
040DD8 DD 74 01    2008   	ld (ix+1),h
040DDB             2009   
040DDB DD 21 9C 17 2010   	ld ix,y2
       04          
040DE0 21 0A 00 00 2011   	ld hl,10
040DE4 DD 75 00    2012   	ld (ix+0),l
040DE7 DD 74 01    2013   	ld (ix+1),h
040DEA             2014   
040DEA             2015   	; draw the palette filled square
040DEA CD A0 0B 04 2016   	call fn_rectf
040DEE             2017   
040DEE C1          2018   	pop bc
040DEF             2019   
040DEF C9          2020   	ret
040DF0             2021   
040DF0             2022   ; get an ascii key value
040DF0             2023   fn_input_key:
040DF0 C5          2024   	push bc
040DF1             2025   	moscall mos_getkey
040DF1 3E 00       0001M  		LD	A, function
040DF3 49 CF       0002M  		RST.LIS	08h
040DF5 C1          2026   	pop bc
040DF6 C9          2027   	ret
040DF7             2028   
040DF7             2029   ; input a text of 8 chars
040DF7             2030   fn_input_text8:
040DF7             2031   	; locate x,y
040DF7             2032   	vdu 31
040DF7 3E 1F       0001M  		LD	A, function
040DF9 49 D7       0002M  		RST.LIS	10h
040DFB             2033   	vdu FILENAME_X
040DFB 3E 07       0001M  		LD	A, function
040DFD 49 D7       0002M  		RST.LIS	10h
040DFF             2034   	vdu FILENAME_Y
040DFF 3E 18       0001M  		LD	A, function
040E01 49 D7       0002M  		RST.LIS	10h
040E03             2035   
040E03             2036   	; print text
040E03 21 18 18 04 2037   	ld hl,filename_label
040E07 01 00 00 00 2038   	ld bc,0
040E0B AF          2039   	xor a
040E0C 49 DF       2040   	rst.lis $18
040E0E             2041   
040E0E             2042   	; show cursor
040E0E             2043   	vdu 23
040E0E 3E 17       0001M  		LD	A, function
040E10 49 D7       0002M  		RST.LIS	10h
040E12             2044   	vdu 1
040E12 3E 01       0001M  		LD	A, function
040E14 49 D7       0002M  		RST.LIS	10h
040E16             2045   	vdu 1
040E16 3E 01       0001M  		LD	A, function
040E18 49 D7       0002M  		RST.LIS	10h
040E1A             2046   
040E1A 0E 00       2047   	ld c,0
040E1C             2048   
040E1C             2049   it8_loop:
040E1C             2050   	; get ascii key
040E1C CD F0 0D 04 2051   	call fn_input_key
040E20 B7          2052   	or a
040E21 CA 1C 0E 04 2053   	jp z,it8_loop
040E25             2054   
040E25 FE 2E       2055   	cp '.'
040E27 CA 71 0E 04 2056   	jp z,it8l_add_char
040E2B             2057   
040E2B FE 2D       2058   	cp '-'
040E2D CA 71 0E 04 2059   	jp z,it8l_add_char
040E31             2060   
040E31 FE 5F       2061   	cp '_'
040E33 CA 71 0E 04 2062   	jp z,it8l_add_char
040E37             2063   
040E37 FE 7F       2064   	cp 127
040E39 CA A5 0E 04 2065   	jp z,it8l_backspace
040E3D             2066   
040E3D FE 0D       2067   	cp 13
040E3F CA D4 0E 04 2068   	jp z,it8l_return
040E43             2069   
040E43 FE 30       2070   	cp '0'
040E45 DA 1C 0E 04 2071   	jp c,it8_loop
040E49             2072   
040E49 16 39       2073   	ld d,'9'
040E4B 14          2074   	inc d
040E4C BA          2075   	cp d
040E4D DA 71 0E 04 2076   	jp c,it8l_add_char
040E51             2077   
040E51 FE 41       2078   	cp 'A'
040E53 DA 1C 0E 04 2079   	jp c,it8_loop
040E57             2080   
040E57 16 5A       2081   	ld d,'Z'
040E59 14          2082   	inc d
040E5A BA          2083   	cp d
040E5B DA 71 0E 04 2084   	jp c,it8l_add_char
040E5F             2085   
040E5F FE 61       2086   	cp 'a'
040E61 DA 1C 0E 04 2087   	jp c,it8_loop
040E65             2088   
040E65 16 7A       2089   	ld d,'z'
040E67 14          2090   	inc d
040E68 BA          2091   	cp d
040E69 DA 71 0E 04 2092   	jp c,it8l_add_char
040E6D             2093   
040E6D C3 1C 0E 04 2094   	jp it8_loop
040E71             2095   
040E71             2096   it8l_add_char:
040E71 F5          2097   	push af
040E72 79          2098   	ld a,c
040E73 FE 0C       2099   	cp 12
040E75 38 05       2100   	jr c,it8l_poke_char
040E77 F1          2101   	pop af
040E78 C3 1C 0E 04 2102   	jp it8_loop
040E7C             2103   
040E7C             2104   it8l_poke_char:
040E7C F1          2105   	pop af
040E7D 21 22 18 04 2106   	ld hl,filename
040E81 06 00       2107   	ld b,0
040E83 09          2108   	add hl,bc
040E84 77          2109   	ld (hl),a
040E85 0C          2110   	inc c
040E86 F5          2111   	push af
040E87 C5          2112   	push bc
040E88             2113   
040E88             2114   	; locate x,y
040E88             2115   	vdu 31
040E88 3E 1F       0001M  		LD	A, function
040E8A 49 D7       0002M  		RST.LIS	10h
040E8C             2116   	vdu FILENAME_X+10
040E8C 3E 11       0001M  		LD	A, function
040E8E 49 D7       0002M  		RST.LIS	10h
040E90             2117   	vdu FILENAME_Y
040E90 3E 18       0001M  		LD	A, function
040E92 49 D7       0002M  		RST.LIS	10h
040E94             2118   
040E94             2119   	; print text
040E94 21 22 18 04 2120   	ld hl,filename
040E98 01 00 00 00 2121   	ld bc,0
040E9C AF          2122   	xor a
040E9D 49 DF       2123   	rst.lis $18
040E9F             2124   
040E9F C1          2125   	pop bc
040EA0 F1          2126   	pop af
040EA1             2127   
040EA1 C3 1C 0E 04 2128   	jp it8_loop
040EA5             2129   
040EA5             2130   it8l_backspace:
040EA5 79          2131   	ld a,c
040EA6 FE 00       2132   	cp 0
040EA8 CA 1C 0E 04 2133   	jp z,it8_loop
040EAC             2134   
040EAC             2135   	; delete a character of the filename
040EAC 21 22 18 04 2136   	ld hl,filename
040EB0 06 00       2137   	ld b,0
040EB2 09          2138   	add hl,bc
040EB3 AF          2139   	xor a
040EB4 77          2140   	ld (hl),a
040EB5 0D          2141   	dec c
040EB6 C5          2142   	push bc
040EB7             2143   
040EB7             2144   	; locate x,y
040EB7             2145   	vdu 31
040EB7 3E 1F       0001M  		LD	A, function
040EB9 49 D7       0002M  		RST.LIS	10h
040EBB 3E 11       2146   	ld a,FILENAME_X+10
040EBD 81          2147   	add a,c
040EBE             2148   	vdu_a
040EBE 49 D7       0001M  		RST.LIS	10h
040EC0             2149   	vdu FILENAME_Y
040EC0 3E 18       0001M  		LD	A, function
040EC2 49 D7       0002M  		RST.LIS	10h
040EC4             2150   
040EC4             2151   	; print text
040EC4 21 43 18 04 2152   	ld hl,spacechar
040EC8 01 00 00 00 2153   	ld bc,0
040ECC AF          2154   	xor a
040ECD 49 DF       2155   	rst.lis $18
040ECF             2156   
040ECF C1          2157   	pop bc
040ED0 C3 1C 0E 04 2158   	jp it8_loop
040ED4             2159   
040ED4             2160   it8l_return:
040ED4             2161   	; locate x,y
040ED4             2162   	vdu 31
040ED4 3E 1F       0001M  		LD	A, function
040ED6 49 D7       0002M  		RST.LIS	10h
040ED8             2163   	vdu FILENAME_X
040ED8 3E 07       0001M  		LD	A, function
040EDA 49 D7       0002M  		RST.LIS	10h
040EDC             2164   	vdu FILENAME_Y
040EDC 3E 18       0001M  		LD	A, function
040EDE 49 D7       0002M  		RST.LIS	10h
040EE0             2165   
040EE0             2166   	; print text
040EE0 21 45 18 04 2167   	ld hl,void_filename
040EE4 01 00 00 00 2168   	ld bc,0
040EE8 AF          2169   	xor a
040EE9 49 DF       2170   	rst.lis $18
040EEB             2171   
040EEB             2172   	; hide cursor
040EEB             2173   	vdu 23
040EEB 3E 17       0001M  		LD	A, function
040EED 49 D7       0002M  		RST.LIS	10h
040EEF             2174   	vdu 1
040EEF 3E 01       0001M  		LD	A, function
040EF1 49 D7       0002M  		RST.LIS	10h
040EF3             2175   	vdu 0
040EF3 3E 00       0001M  		LD	A, function
040EF5 49 D7       0002M  		RST.LIS	10h
040EF7             2176   
040EF7             2177   it8l_endloop:
040EF7 21 B6 FF FF 2178   	ld hl,KEY_RETURN
040EFB CD 48 17 04 2179   	call fn_inkey
040EFF FE 01       2180   	CP 1
040F01 CA F7 0E 04 2181   	jp z,it8l_endloop
040F05             2182   
040F05 C9          2183   	ret
040F06             2184   
040F06             2185   ; load a palette
040F06             2186   fn_load_palette:
040F06             2187   	; clear the filename on the screen
040F06 21 22 18 04 2188   	ld hl,filename
040F0A 06 0C       2189   	ld b,12
040F0C AF          2190   	xor a
040F0D             2191   
040F0D             2192   lp_clear_filename:
040F0D 77          2193   	ld (hl),a
040F0E 23          2194   	inc hl
040F0F 10 FC       2195   	djnz lp_clear_filename
040F11             2196   
040F11             2197   	; get filename
040F11 CD F7 0D 04 2198   	call fn_input_text8
040F15             2199   
040F15             2200   	; set path to 'palettes/'
040F15 21 37 18 04 2201   	ld hl,palette_path
040F19             2202   	moscall mos_cd
040F19 3E 03       0001M  		LD	A, function
040F1B 49 CF       0002M  		RST.LIS	08h
040F1D             2203   
040F1D             2204   	; exit on folder error
040F1D FE 00       2205   	cp 0
040F1F C2 E1 0F 04 2206   	jp nz,lp_folder_error
040F23             2207   
040F23             2208   	; open the file for read
040F23 21 22 18 04 2209   	ld hl,filename
040F27 0E 01       2210   	ld c,fa_open_existing|fa_read
040F29             2211   	moscall mos_fopen
040F29 3E 0A       0001M  		LD	A, function
040F2B 49 CF       0002M  		RST.LIS	08h
040F2D             2212   
040F2D             2213   	; exit on file error
040F2D FE 00       2214   	cp 0
040F2F CA 23 11 04 2215   	jp z,lp_file_error
040F33             2216   
040F33             2217   	; filehandle -> C
040F33 4F          2218   	ld c,a
040F34             2219   
040F34             2220   	; get palette header
040F34 21 C4 38 04 2221   	ld hl,header_buffer
040F38 11 10 00 00 2222   	ld de,16
040F3C C5          2223   	push bc ; store filehandle
040F3D             2224   	moscall mos_fread
040F3D 3E 1A       0001M  		LD	A, function
040F3F 49 CF       0002M  		RST.LIS	08h
040F41 C1          2225   	pop bc ; restore filehandle
040F42 3E 10       2226   	ld a,16
040F44 BB          2227   	cp e
040F45 C2 C5 0F 04 2228   	jp nz,lp_close_error
040F49             2229   
040F49             2230   	; compare loaded header with needed header
040F49 11 20 3C 04 2231   	ld de,header
040F4D 21 C4 38 04 2232   	ld hl,header_buffer
040F51 47          2233   	ld b,a
040F52             2234   
040F52             2235   lp_compare:
040F52 1A          2236   	ld a,(de)
040F53 BE          2237   	cp (hl)
040F54 C2 E9 0F 04 2238   	jp nz,lp_header_error
040F58             2239   
040F58 13          2240   	inc de
040F59 23          2241   	inc hl
040F5A 05          2242   	dec b
040F5B             2243   
040F5B 78          2244   	ld a,b
040F5C FE 00       2245   	cp 0
040F5E C2 52 0F 04 2246   	jp nz,lp_compare
040F62             2247   
040F62             2248   	; prepare to read the number of colors
040F62 21 D4 38 04 2249   	ld hl,color_buffer
040F66             2250   
040F66             2251   lp_getcount:
040F66             2252   	; read a string for colors count
040F66 C5          2253   	push bc
040F67 E5          2254   	push hl
040F68             2255   
040F68             2256   	; read colors data
040F68             2257   	moscall mos_fgetc
040F68 3E 0C       0001M  		LD	A, function
040F6A 49 CF       0002M  		RST.LIS	08h
040F6C             2258   
040F6C E1          2259   	pop hl
040F6D C1          2260   	pop bc
040F6E             2261   
040F6E             2262   	; exit if eof
040F6E DA C5 0F 04 2263   	jp c,lp_close_error
040F72             2264   
040F72 FE 30       2265   	cp 48 ; < 0
040F74 38 0A       2266   	jr c,lpgc_next
040F76 FE 3A       2267   	cp 58 ; > 9
040F78 D2 1E 11 04 2268   	jp nc,lp_data_error
040F7C             2269   
040F7C 77          2270   	ld (hl),a
040F7D 23          2271   	inc hl
040F7E 18 E6       2272   	jr lp_getcount
040F80             2273   
040F80             2274   lpgc_next:
040F80 F5          2275   	push af
040F81 3E 0D       2276   	ld a,13
040F83 77          2277   	ld (hl),a ; store cr
040F84 F1          2278   	pop af
040F85             2279   
040F85             2280   	; test CR
040F85 FE 0D       2281   	cp 13
040F87 C2 C5 0F 04 2282   	jp nz,lp_close_error
040F8B             2283   
040F8B C5          2284   	push bc
040F8C             2285   
040F8C             2286   	; read LF
040F8C             2287   	moscall mos_fgetc
040F8C 3E 0C       0001M  		LD	A, function
040F8E 49 CF       0002M  		RST.LIS	08h
040F90             2288   
040F90 C1          2289   	pop bc
040F91             2290   
040F91             2291   	; test LF
040F91 FE 0A       2292   	cp 10
040F93 C2 C5 0F 04 2293   	jp nz,lp_close_error
040F97             2294   
040F97             2295   	; prepare to read color strings
040F97 11 00 00 00 2296   	ld de,#000000
040F9B 21 D7 38 04 2297   	ld hl,palette_buffer
040F9F             2298   
040F9F             2299   lp_load_pal_loop:
040F9F C5          2300   	push bc
040FA0 D5          2301   	push de
040FA1 E5          2302   	push hl
040FA2             2303   
040FA2             2304   	; read colors data
040FA2             2305   	moscall mos_fgetc
040FA2 3E 0C       0001M  		LD	A, function
040FA4 49 CF       0002M  		RST.LIS	08h
040FA6             2306   
040FA6             2307   	; exit if eof
040FA6 DA BE 0F 04 2308   	jp c,lp_loaded
040FAA             2309   
040FAA E1          2310   	pop hl
040FAB D1          2311   	pop de
040FAC C1          2312   	pop bc
040FAD             2313   
040FAD 77          2314   	ld (hl),a ; store loaded char in palette buffer
040FAE 23          2315   	inc hl
040FAF 13          2316   	inc de ; count chars
040FB0 7A          2317   	ld a,d
040FB1 FE 03       2318   	cp MAX_PAL_DATA_HI
040FB3 DA 9F 0F 04 2319   	jp c,lp_load_pal_loop
040FB7 7B          2320   	ld a,e
040FB8 FE 44       2321   	cp MAX_PAL_DATA_LO
040FBA DA 9F 0F 04 2322   	jp c,lp_load_pal_loop
040FBE             2323   
040FBE             2324   ; end of file
040FBE             2325   lp_loaded:
040FBE E1          2326   	pop hl
040FBF D1          2327   	pop de
040FC0 C1          2328   	pop bc
040FC1             2329   
040FC1 C3 F1 0F 04 2330   	jp lp_close
040FC5             2331   
040FC5             2332   lp_close_error:
040FC5 C5          2333   	push bc
040FC6             2334   
040FC6             2335   	; read error
040FC6 CD 5E 15 04 2336   	call fn_print_file_error
040FCA             2337   
040FCA C1          2338   	pop bc
040FCB             2339   
040FCB             2340   	; close the file
040FCB             2341   	moscall mos_fclose
040FCB 3E 0B       0001M  		LD	A, function
040FCD 49 CF       0002M  		RST.LIS	08h
040FCF             2342   
040FCF             2343   	; set path to home
040FCF 21 40 18 04 2344   	ld hl,back_path
040FD3             2345   	moscall mos_cd
040FD3 3E 03       0001M  		LD	A, function
040FD5 49 CF       0002M  		RST.LIS	08h
040FD7             2346   
040FD7             2347   	; exit on error
040FD7 FE 00       2348   	cp 0
040FD9 C2 E1 0F 04 2349   	jp nz,lp_folder_error
040FDD             2350   
040FDD C3 14 11 04 2351   	jp lp_exit
040FE1             2352   
040FE1             2353   lp_folder_error:
040FE1             2354   	; write error
040FE1 CD 95 15 04 2355   	call fn_print_folder_error
040FE5 C3 14 11 04 2356   	jp lp_exit
040FE9             2357   
040FE9             2358   lp_header_error:
040FE9             2359   	; write error
040FE9 CD CC 15 04 2360   	call fn_print_header_error
040FED C3 14 11 04 2361   	jp lp_exit
040FF1             2362   
040FF1             2363   lp_close:
040FF1 C5          2364   	push bc
040FF2             2365   
040FF2             2366   	; close the file
040FF2             2367   	moscall mos_fclose
040FF2 3E 0B       0001M  		LD	A, function
040FF4 49 CF       0002M  		RST.LIS	08h
040FF6             2368   
040FF6 C1          2369   	pop bc
040FF7             2370   
040FF7             2371   	; set path to home
040FF7 21 40 18 04 2372   	ld hl,back_path
040FFB             2373   	moscall mos_cd
040FFB 3E 03       0001M  		LD	A, function
040FFD 49 CF       0002M  		RST.LIS	08h
040FFF             2374   
040FFF             2375   	; exit on error
040FFF FE 00       2376   	cp 0
041001 C2 E1 0F 04 2377   	jp nz,lp_folder_error
041005             2378   
041005             2379   	; read the number of colors we have in the palette
041005 21 D4 38 04 2380   	ld hl,color_buffer
041009 7E          2381   	ld a,(hl)
04100A 47          2382   	ld b,a
04100B 23          2383   	inc hl
04100C 7E          2384   	ld a,(hl)
04100D 4F          2385   	ld c,a ; bc = 1st char, 2nd char or CR
04100E             2386   
04100E             2387   	; first is a char number ?
04100E 78          2388   	ld a,b
04100F FE 30       2389   	cp 48
041011 DA 1E 11 04 2390   	jp c,lp_data_error
041015 FE 3A       2391   	cp 58
041017 D2 1E 11 04 2392   	jp nc,lp_data_error
04101B             2393   
04101B 79          2394   	ld a,c
04101C FE 0D       2395   	cp 13
04101E C2 40 10 04 2396   	jp nz,lp_two_numbers
041022             2397   
041022             2398   ; only one number
041022 78          2399   	ld a,b
041023 D6 30       2400   	sub 48
041025             2401   
041025 21 B7 18 04 2402   	ld hl,new_colors_count
041029 77          2403   	ld (hl),a
04102A             2404   
04102A FE 00       2405   	cp 0
04102C CA 1E 11 04 2406   	jp z,lp_data_error
041030 FE 03       2407   	cp 3
041032 DA 75 10 04 2408   	jp c,lp_two_colors
041036 FE 05       2409   	cp 5
041038 DA 8B 10 04 2410   	jp c,lp_four_colors
04103C             2411   
04103C C3 A1 10 04 2412   	jp lp_sixteen_colors
041040             2413   
041040             2414   ; two numbers
041040             2415   lp_two_numbers:
041040 79          2416   	ld a,c
041041 FE 30       2417   	cp 48
041043 DA 1E 11 04 2418   	jp c,lp_data_error
041047 FE 3A       2419   	cp 58
041049 D2 1E 11 04 2420   	jp nc,lp_data_error
04104D             2421   
04104D 78          2422   	ld a,b
04104E D6 30       2423   	sub 48
041050 01 00 00 00 2424   	ld bc,#000000
041054 47          2425   	ld b,a
041055 0E 0A       2426   	ld c,10
041057 ED 4C       2427   	mlt bc
041059 81          2428   	add a,c
04105A             2429   
04105A 21 B7 18 04 2430   	ld hl,new_colors_count
04105E 77          2431   	ld (hl),a
04105F             2432   
04105F FE 0A       2433   	cp 10
041061 DA 1E 11 04 2434   	jp c,lp_data_error
041065 FE 11       2435   	cp 17
041067 DA A1 10 04 2436   	jp c,lp_sixteen_colors
04106B FE 41       2437   	cp 65
04106D DA B7 10 04 2438   	jp c,lp_sixty_four_colors
041071             2439   
041071 C3 1E 11 04 2440   	jp lp_data_error
041075             2441   
041075             2442   lp_two_colors:
041075 21 B6 18 04 2443   	ld hl,colors_count
041079 3E 02       2444   	ld a,2
04107B 77          2445   	ld (hl),a
04107C 21 B7 18 04 2446   	ld hl,new_colors_count
041080 7E          2447   	ld a,(hl) ; real number of coulours
041081 06 00       2448   	ld b,0 ; start wit color 0
041083 21 D7 38 04 2449   	ld hl,palette_buffer ; palette will be got here
041087 C3 CD 10 04 2450   	jp lp_read_colors
04108B             2451   
04108B             2452   lp_four_colors:
04108B 21 B6 18 04 2453   	ld hl,colors_count
04108F 3E 04       2454   	ld a,4
041091 77          2455   	ld (hl),a
041092 21 B7 18 04 2456   	ld hl,new_colors_count
041096 7E          2457   	ld a,(hl) ; real number of coulours
041097 06 00       2458   	ld b,0 ; start wit color 0
041099 21 D7 38 04 2459   	ld hl,palette_buffer ; palette will be got here
04109D C3 CD 10 04 2460   	jp lp_read_colors
0410A1             2461   
0410A1             2462   lp_sixteen_colors:
0410A1 21 B6 18 04 2463   	ld hl,colors_count
0410A5 3E 10       2464   	ld a,16
0410A7 77          2465   	ld (hl),a
0410A8 21 B7 18 04 2466   	ld hl,new_colors_count
0410AC 7E          2467   	ld a,(hl) ; real number of coulours
0410AD 06 00       2468   	ld b,0 ; start wit color 0
0410AF 21 D7 38 04 2469   	ld hl,palette_buffer ; palette will be got here
0410B3 C3 CD 10 04 2470   	jp lp_read_colors
0410B7             2471   
0410B7             2472   lp_sixty_four_colors:
0410B7 21 B6 18 04 2473   	ld hl,colors_count
0410BB 3E 40       2474   	ld a,64
0410BD 77          2475   	ld (hl),a
0410BE 21 B7 18 04 2476   	ld hl,new_colors_count
0410C2 7E          2477   	ld a,(hl) ; real number of coulours
0410C3 06 00       2478   	ld b,0 ; start wit color 0
0410C5 21 D7 38 04 2479   	ld hl,palette_buffer ; palette will be got here
0410C9 C3 CD 10 04 2480   	jp lp_read_colors
0410CD             2481   
0410CD             2482   lp_read_colors:
0410CD F5          2483   	push af
0410CE E5          2484   	push hl
0410CF C5          2485   	push bc
0410D0             2486   
0410D0 CD 36 11 04 2487   	call lp_read_tint ; read red tint
0410D4 FE FF       2488   	cp 255
0410D6 CA 17 11 04 2489   	jp z,lp_wrong_exit1
0410DA             2490   
0410DA E5          2491   	push hl
0410DB 21 B8 18 04 2492   	ld hl,red_tint
0410DF 77          2493   	ld (hl),a
0410E0 E1          2494   	pop hl
0410E1             2495   
0410E1 CD 36 11 04 2496   	call lp_read_tint ; read green tint
0410E5 FE FF       2497   	cp 255
0410E7 CA 16 11 04 2498   	jp z,lp_wrong_exit2
0410EB             2499   
0410EB E5          2500   	push hl
0410EC 21 B9 18 04 2501   	ld hl,green_tint
0410F0 77          2502   	ld (hl),a
0410F1 E1          2503   	pop hl
0410F2             2504   
0410F2 CD 36 11 04 2505   	call lp_read_tint ; read blue tint
0410F6 FE FF       2506   	cp 255
0410F8 CA 15 11 04 2507   	jp z,lp_wrong_exit3
0410FC             2508   
0410FC E5          2509   	push hl
0410FD 21 BA 18 04 2510   	ld hl,blue_tint
041101 77          2511   	ld (hl),a
041102 E1          2512   	pop hl
041103             2513   
041103 C1          2514   	pop bc
041104 C5          2515   	push bc
041105             2516   
041105 CD C3 11 04 2517   	call lp_set_tint
041109             2518   
041109 C1          2519   	pop bc
04110A E1          2520   	pop hl
04110B F1          2521   	pop af
04110C             2522   
04110C 04          2523   	inc b ; increment number of colors
04110D 3D          2524   	dec a ; decrement real number of colors
04110E FE 00       2525   	cp 0
041110 C2 CD 10 04 2526   	jp nz,lp_read_colors
041114             2527   
041114             2528   lp_exit:
041114 C9          2529   	ret
041115             2530   
041115             2531   lp_wrong_exit3:
041115 D1          2532   	pop de
041116             2533   
041116             2534   lp_wrong_exit2:
041116 C1          2535   	pop bc
041117             2536   
041117             2537   lp_wrong_exit1:
041117 E1          2538   	pop hl
041118 C1          2539   	pop bc
041119 F1          2540   	pop af
04111A C3 1E 11 04 2541   	jp lp_data_error
04111E             2542   
04111E             2543   lp_data_error:
04111E CD 03 16 04 2544   	call fn_print_data_error
041122             2545   
041122 C9          2546   	ret
041123             2547   
041123             2548   lp_file_error:
041123 CD 5E 15 04 2549   	call fn_print_file_error
041127             2550   
041127             2551   	; set path to home
041127 21 40 18 04 2552   	ld hl,back_path
04112B             2553   	moscall mos_cd
04112B 3E 03       0001M  		LD	A, function
04112D 49 CF       0002M  		RST.LIS	08h
04112F             2554   
04112F             2555   	; exit on error
04112F FE 00       2556   	cp 0
041131 C2 E1 0F 04 2557   	jp nz,lp_folder_error
041135             2558   
041135 C9          2559   	ret
041136             2560   
041136             2561   lp_read_tint:
041136 0E 00       2562   	ld c,0 ; number of chars readen for a single string number
041138 11 1C 3C 04 2563   	ld de,temp_chars_buffer ; temp buffer for a string number
04113C             2564   
04113C             2565   	; read next string number
04113C CD A3 11 04 2566   	call lprt_read_chars
041140             2567   
041140 79          2568   	ld a,c
041141 FE 00       2569   	cp 0 ; no numbers
041143 CA 5D 11 04 2570   	jp z,lprt_exit
041147 FE 04       2571   	cp 4 ; too many numbers
041149 D2 5D 11 04 2572   	jp nc,lprt_exit
04114D             2573   
04114D FE 03       2574   	cp 3
04114F 28 28       2575   	jr z,lprt_three_int
041151             2576   
041151 FE 02       2577   	cp 2
041153 28 0B       2578   	jr z,lprt_two_int
041155             2579   
041155             2580   	; one int only
041155 11 1C 3C 04 2581   	ld de,temp_chars_buffer
041159 1A          2582   	ld a,(de)
04115A D6 30       2583   	sub 48
04115C C9          2584   	ret
04115D             2585   
04115D             2586   lprt_exit:
04115D 3E FF       2587   	ld a,255
04115F C9          2588   	ret
041160             2589   
041160             2590   ; two int
041160             2591   lprt_two_int:
041160 11 1C 3C 04 2592   	ld de,temp_chars_buffer
041164 1A          2593   	ld a,(de)
041165 D6 30       2594   	sub 48
041167 D5          2595   	push de
041168 11 00 00 00 2596   	ld de,#000000
04116C 5F          2597   	ld e,a
04116D 16 0A       2598   	ld d,10
04116F ED 5C       2599   	mlt de
041171 43          2600   	ld b,e
041172 D1          2601   	pop de
041173 13          2602   	inc de
041174 1A          2603   	ld a,(de)
041175 D6 30       2604   	sub 48
041177 80          2605   	add a,b ; full int value is here
041178 C9          2606   	ret
041179             2607   
041179             2608   ; three int
041179             2609   lprt_three_int:
041179 11 1C 3C 04 2610   	ld de,temp_chars_buffer
04117D 1A          2611   	ld a,(de)
04117E D6 30       2612   	sub 48
041180 D5          2613   	push de
041181 11 00 00 00 2614   	ld de,#000000
041185 5F          2615   	ld e,a
041186 16 64       2616   	ld d,100
041188 ED 5C       2617   	mlt de
04118A 43          2618   	ld b,e
04118B D1          2619   	pop de
04118C 13          2620   	inc de
04118D 1A          2621   	ld a,(de)
04118E D6 30       2622   	sub 48
041190 D5          2623   	push de
041191 11 00 00 00 2624   	ld de,#000000
041195 5F          2625   	ld e,a
041196 16 0A       2626   	ld d,10
041198 ED 5C       2627   	mlt de
04119A 4B          2628   	ld c,e
04119B D1          2629   	pop de
04119C 13          2630   	inc de
04119D 1A          2631   	ld a,(de)
04119E D6 30       2632   	sub 48
0411A0 81          2633   	add a,c
0411A1 80          2634   	add a,b ; full int value is here
0411A2 C9          2635   	ret
0411A3             2636   
0411A3             2637   lprt_read_chars:
0411A3 3E 0D       2638   	ld a,13
0411A5 12          2639   	ld (de),a ; store eol as default char
0411A6             2640   
0411A6 7E          2641   	ld a,(hl) ; get a new char
0411A7 23          2642   	inc hl
0411A8             2643   
0411A8 CD F4 40 04 2644   	call debug_byte
0411AC             2645   
0411AC FE 20       2646   	cp ' '
0411AE C8          2647   	ret z ; ret if space
0411AF FE 0D       2648   	cp 13
0411B1 28 F0       2649   	jr z,lprt_read_chars ; loop if cr
0411B3 FE 0A       2650   	cp 10
0411B5 C8          2651   	ret z ; ret if lf
0411B6 FE 30       2652   	cp 48
0411B8 D8          2653   	ret c ; ret if not number
0411B9 FE 3A       2654   	cp 58
0411BB D0          2655   	ret nc ; ret if not number
0411BC             2656   
0411BC             2657   ; found a number, store it
0411BC 12          2658   	ld (de),a
0411BD 13          2659   	inc de
0411BE 0C          2660   	inc c
0411BF             2661   
0411BF C3 A3 11 04 2662   	jp lprt_read_chars
0411C3             2663   
0411C3             2664   ; set tint (RGB = c,e,l)
0411C3             2665   lp_set_tint:
0411C3 F5          2666   	push af
0411C4 C5          2667   	push bc
0411C5 D5          2668   	push de
0411C6 E5          2669   	push hl
0411C7             2670   
0411C7 C5          2671   	push bc
0411C8             2672   	vdu 19
0411C8 3E 13       0001M  		LD	A, function
0411CA 49 D7       0002M  		RST.LIS	10h
0411CC C1          2673   	pop bc
0411CD 78          2674   	ld a,b
0411CE             2675   	vdu_a
0411CE 49 D7       0001M  		RST.LIS	10h
0411D0             2676   	vdu 255
0411D0 3E FF       0001M  		LD	A, function
0411D2 49 D7       0002M  		RST.LIS	10h
0411D4             2677   
0411D4 21 B8 18 04 2678   	ld hl,red_tint
0411D8 7E          2679   	ld a,(hl)
0411D9             2680   	vdu_a
0411D9 49 D7       0001M  		RST.LIS	10h
0411DB             2681   
0411DB 21 B9 18 04 2682   	ld hl,green_tint
0411DF 7E          2683   	ld a,(hl)
0411E0             2684   	vdu_a
0411E0 49 D7       0001M  		RST.LIS	10h
0411E2             2685   
0411E2 21 BA 18 04 2686   	ld hl,blue_tint
0411E6 7E          2687   	ld a,(hl)
0411E7             2688   	vdu_a
0411E7 49 D7       0001M  		RST.LIS	10h
0411E9             2689   
0411E9 E1          2690   	pop hl
0411EA D1          2691   	pop de
0411EB C1          2692   	pop bc
0411EC F1          2693   	pop af
0411ED C9          2694   	ret
0411EE             2695   
0411EE             2696   ; save the palette
0411EE             2697   fn_save_palette:
0411EE C9          2698   	ret
0411EF             2699   
0411EF             2700   ; load a sprite, giving its full name, with extension
0411EF             2701   fn_load_sprite:
0411EF             2702   	; clear the filename on the screen
0411EF 21 22 18 04 2703   	ld hl,filename
0411F3 06 0C       2704   	ld b,12
0411F5 AF          2705   	xor a
0411F6             2706   
0411F6             2707   ls_clear_filename:
0411F6 77          2708   	ld (hl),a
0411F7 23          2709   	inc hl
0411F8 10 FC       2710   	djnz ls_clear_filename
0411FA             2711   
0411FA             2712   	; get filename
0411FA CD F7 0D 04 2713   	call fn_input_text8
0411FE             2714   
0411FE             2715   	; set path to 'sprites/'
0411FE 21 2F 18 04 2716   	ld hl,sprite_path
041202             2717   	moscall mos_cd
041202 3E 03       0001M  		LD	A, function
041204 49 CF       0002M  		RST.LIS	08h
041206             2718   
041206             2719   	; exit on folder error
041206 FE 00       2720   	cp 0
041208 C2 D7 12 04 2721   	jp nz,ls_folder_error
04120C             2722   
04120C             2723   	; open the file for read
04120C 21 22 18 04 2724   	ld hl,filename
041210 0E 01       2725   	ld c,fa_open_existing|fa_read
041212             2726   	moscall mos_fopen
041212 3E 0A       0001M  		LD	A, function
041214 49 CF       0002M  		RST.LIS	08h
041216             2727   
041216             2728   	; exit on file error
041216 FE 00       2729   	cp 0
041218 CA 05 13 04 2730   	jp z,ls_file_error
04121C             2731   
04121C             2732   	; filehandle -> C
04121C 4F          2733   	ld c,a
04121D             2734   
04121D             2735   	; get colors count
04121D             2736   	moscall mos_fgetc
04121D 3E 0C       0001M  		LD	A, function
04121F 49 CF       0002M  		RST.LIS	08h
041221 DA B2 12 04 2737   	jp c,ls_close_error
041225             2738   
041225 FE 41       2739   	cp MAX_COLORS + 1
041227 D2 B2 12 04 2740   	jp nc,ls_close_error
04122B             2741   
04122B             2742   	; store colors count
04122B 21 B6 18 04 2743   	ld hl,colors_count
04122F 77          2744   	ld (hl),a
041230             2745   
041230             2746   	; get frames count
041230             2747   	moscall mos_fgetc
041230 3E 0C       0001M  		LD	A, function
041232 49 CF       0002M  		RST.LIS	08h
041234 DA B2 12 04 2748   	jp c,ls_close_error
041238             2749   
041238             2750   	; store frames count
041238 21 BC 18 04 2751   	ld hl,frames_count
04123C 77          2752   	ld (hl),a
04123D             2753   
04123D             2754   	; set last frame as current frame
04123D 21 BB 18 04 2755   	ld hl,current_frame
041241 3D          2756   	dec a
041242 77          2757   	ld (hl),a
041243             2758   
041243             2759   	; get sprite size
041243             2760   	moscall mos_fgetc
041243 3E 0C       0001M  		LD	A, function
041245 49 CF       0002M  		RST.LIS	08h
041247 DA B2 12 04 2761   	jp c,ls_close_error
04124B             2762   
04124B             2763   	; store sprite size
04124B 21 AB 17 04 2764   	ld hl,spr_size
04124F 77          2765   	ld (hl),a
041250             2766   
041250             2767   	; set 4x4 pixel width
041250 FE 04       2768   	cp SPR44
041252 20 09       2769   	jr nz,ls_next1
041254             2770   
041254 21 AA 17 04 2771   	ld hl,pixel_width
041258 06 20       2772   	ld b,SPR44_width
04125A 70          2773   	ld (hl),b
04125B 18 21       2774   	jr ls_next4
04125D             2775   
04125D             2776   ls_next1:
04125D             2777   	; set 8x8 pixel width
04125D FE 08       2778   	cp SPR88
04125F 20 09       2779   	jr nz,ls_next2
041261             2780   
041261 21 AA 17 04 2781   	ld hl,pixel_width
041265 06 10       2782   	ld b,SPR88_width
041267 70          2783   	ld (hl),b
041268 18 14       2784   	jr ls_next4
04126A             2785   
04126A             2786   ls_next2:
04126A             2787   
04126A             2788   	; set 16x16 pixel width
04126A FE 10       2789   	cp SPR1616
04126C 20 09       2790   	jr nz,ls_next3
04126E             2791   
04126E 21 AA 17 04 2792   	ld hl,pixel_width
041272 06 08       2793   	ld b,SPR1616_width
041274 70          2794   	ld (hl),b
041275 18 07       2795   	jr ls_next4
041277             2796   
041277             2797   ls_next3:
041277             2798   
041277 21 AA 17 04 2799   	ld hl,pixel_width
04127B 06 04       2800   	ld b,SPR3232_width
04127D 70          2801   	ld (hl),b
04127E             2802   
04127E             2803   ls_next4:
04127E 21 00 00 00 2804   	ld hl,#000000
041282 6F          2805   	ld l,a
041283 67          2806   	ld h,a
041284 ED 6C       2807   	mlt hl ; HL = sprite length
041286 E5          2808   	push hl
041287             2809   
041287             2810   	; get frames count
041287 21 BB 18 04 2811   	ld hl,current_frame
04128B 46          2812   	ld b,(hl)
04128C             2813   
04128C E1          2814   	pop hl
04128D             2815   
04128D 78          2816   	ld a,b
04128E FE 00       2817   	cp 0
041290 28 07       2818   	jr z,ls_read_data
041292             2819   
041292             2820   	; de = size²
041292 11 00 04 00 2821   	ld de,ONE_FRAME_BUFFER_SIZE
041296             2822   ls_add_length:
041296 19          2823   	add hl,de
041297 10 FD       2824   	djnz ls_add_length
041299             2825   
041299             2826   ls_read_data:
041299 E5          2827   	push hl
04129A E5          2828   	push hl
04129B D1          2829   	pop de
04129C 7B          2830   	ld a,e
04129D 21 C4 18 04 2831   	ld hl,sprite_buffer
0412A1             2832   	moscall mos_fread
0412A1 3E 1A       0001M  		LD	A, function
0412A3 49 CF       0002M  		RST.LIS	08h
0412A5 E1          2833   	pop hl
0412A6 7C          2834   	ld a,h
0412A7 BA          2835   	cp d
0412A8 20 08       2836   	jr nz,ls_close_error
0412AA 7D          2837   	ld a,l
0412AB BB          2838   	cp e
0412AC 20 04       2839   	jr nz,ls_close_error
0412AE C3 DF 12 04 2840   	jp ls_close
0412B2             2841   
0412B2             2842   ls_close_error:
0412B2 C5          2843   	push bc
0412B3             2844   
0412B3             2845   	; read error
0412B3 CD 5E 15 04 2846   	call fn_print_file_error
0412B7             2847   
0412B7 C1          2848   	pop bc
0412B8             2849   
0412B8             2850   	; close the file
0412B8             2851   	moscall mos_fclose
0412B8 3E 0B       0001M  		LD	A, function
0412BA 49 CF       0002M  		RST.LIS	08h
0412BC             2852   
0412BC             2853   	; set path to home
0412BC 21 40 18 04 2854   	ld hl,back_path
0412C0             2855   	moscall mos_cd
0412C0 3E 03       0001M  		LD	A, function
0412C2 49 CF       0002M  		RST.LIS	08h
0412C4             2856   
0412C4             2857   	; exit on error
0412C4 FE 00       2858   	cp 0
0412C6 C2 D7 12 04 2859   	jp nz,ls_folder_error
0412CA             2860   
0412CA             2861   
0412CA             2862   	; reset current frame and coordinates of the drawing pixel
0412CA 21 A6 17 04 2863   	ld hl,xpix
0412CE AF          2864   	xor a
0412CF 77          2865   	ld (hl),a
0412D0 21 A7 17 04 2866   	ld hl,ypix
0412D4 77          2867   	ld (hl),a
0412D5 18 25       2868   	jr ls_exit
0412D7             2869   
0412D7             2870   ls_folder_error:
0412D7             2871   	; write error
0412D7 CD 95 15 04 2872   	call fn_print_folder_error
0412DB C3 FC 12 04 2873   	jp ls_exit
0412DF             2874   
0412DF             2875   ls_close:
0412DF             2876   	; close the file
0412DF             2877   	moscall mos_fclose
0412DF 3E 0B       0001M  		LD	A, function
0412E1 49 CF       0002M  		RST.LIS	08h
0412E3             2878   
0412E3             2879   	; set path to home
0412E3 21 40 18 04 2880   	ld hl,back_path
0412E7             2881   	moscall mos_cd
0412E7 3E 03       0001M  		LD	A, function
0412E9 49 CF       0002M  		RST.LIS	08h
0412EB             2882   
0412EB             2883   	; exit on error
0412EB FE 00       2884   	cp 0
0412ED C2 D7 12 04 2885   	jp nz,ls_folder_error
0412F1             2886   
0412F1             2887   	; reset current frame and coordinates of the drawing pixel
0412F1 21 A6 17 04 2888   	ld hl,xpix
0412F5 AF          2889   	xor a
0412F6 77          2890   	ld (hl),a
0412F7 21 A7 17 04 2891   	ld hl,ypix
0412FB 77          2892   	ld (hl),a
0412FC             2893   
0412FC             2894   ls_exit:
0412FC CD E4 16 04 2895   	call fn_show_spr_descr
041300 CD 9F 16 04 2896   	call fn_change_frames_count
041304 C9          2897   	ret
041305             2898   
041305             2899   ls_file_error:
041305 CD 5E 15 04 2900   	call fn_print_file_error
041309             2901   
041309             2902   	; set path to home
041309 21 40 18 04 2903   	ld hl,back_path
04130D             2904   	moscall mos_cd
04130D 3E 03       0001M  		LD	A, function
04130F 49 CF       0002M  		RST.LIS	08h
041311             2905   
041311             2906   	; exit on error
041311 FE 00       2907   	cp 0
041313 C2 D7 12 04 2908   	jp nz,ls_folder_error
041317             2909   
041317 C9          2910   	ret
041318             2911   
041318             2912   ; save a sprite, giving its name
041318             2913   fn_save_sprite:
041318             2914   	; clear filename on the screen
041318 21 22 18 04 2915   	ld hl,filename
04131C 06 0C       2916   	ld b,12
04131E AF          2917   	xor a
04131F             2918   
04131F             2919   ss_clear_filename:
04131F 77          2920   	ld (hl),a
041320 23          2921   	inc hl
041321 10 FC       2922   	djnz ss_clear_filename
041323             2923   
041323             2924   	; get filename
041323 CD F7 0D 04 2925   	call fn_input_text8
041327             2926   
041327             2927   	; set path to sprite path
041327 21 2F 18 04 2928   	ld hl,sprite_path
04132B             2929   	moscall mos_cd
04132B 3E 03       0001M  		LD	A, function
04132D 49 CF       0002M  		RST.LIS	08h
04132F             2930   
04132F             2931   	; create it on error
04132F FE 00       2932   	cp 0
041331 F5          2933   	push af
041332 C4 79 17 04 2934   	call nz,fn_create_sprite_folder
041336 F1          2935   	pop af
041337 28 08       2936   	jr z,ss_next
041339             2937   
041339             2938   	; set path to sprite path
041339 21 2F 18 04 2939   	ld hl,sprite_path
04133D             2940   	moscall mos_cd
04133D 3E 03       0001M  		LD	A, function
04133F 49 CF       0002M  		RST.LIS	08h
041341             2941   
041341             2942   ss_next:
041341             2943   
041341             2944   	; exit on error
041341 FE 00       2945   	cp 0
041343 C2 D3 13 04 2946   	jp nz,ss_folder_error
041347             2947   
041347             2948   	; open the file for write
041347 21 22 18 04 2949   	ld hl,filename
04134B 0E 0A       2950   	ld c,fa_create_always|fa_write
04134D             2951   	moscall mos_fopen
04134D 3E 0A       0001M  		LD	A, function
04134F 49 CF       0002M  		RST.LIS	08h
041351             2952   
041351             2953   	; exit on error
041351 FE 00       2954   	cp 0
041353 CA 04 14 04 2955   	jp z,ss_file_error
041357             2956   
041357             2957   	; filehandle -> C
041357 4F          2958   	ld c,a
041358             2959   
041358             2960   	; store colors count in the file
041358 06 40       2961   	ld b,MAX_COLORS
04135A             2962   	moscall mos_fputc
04135A 3E 0D       0001M  		LD	A, function
04135C 49 CF       0002M  		RST.LIS	08h
04135E             2963   
04135E             2964   	; store frames count in the file
04135E 21 BC 18 04 2965   	ld hl,frames_count
041362 46          2966   	ld b,(hl)
041363             2967   	moscall mos_fputc
041363 3E 0D       0001M  		LD	A, function
041365 49 CF       0002M  		RST.LIS	08h
041367             2968   
041367             2969   	; store sprite size in the file
041367 21 AB 17 04 2970   	ld hl,spr_size
04136B 46          2971   	ld b,(hl)
04136C             2972   	moscall mos_fputc
04136C 3E 0D       0001M  		LD	A, function
04136E 49 CF       0002M  		RST.LIS	08h
041370             2973   
041370             2974   	; de = size²
041370 21 00 00 00 2975   	ld hl,#000000
041374 68          2976   	ld l,b
041375 60          2977   	ld h,b
041376 ED 6C       2978   	mlt hl ; HL = sprite length
041378 E5          2979   	push hl
041379             2980   
041379             2981   	; get frames count
041379 21 BB 18 04 2982   	ld hl,current_frame
04137D 46          2983   	ld b,(hl)
04137E             2984   
04137E E1          2985   	pop hl
04137F             2986   
04137F 78          2987   	ld a,b
041380 FE 00       2988   	cp 0
041382 28 07       2989   	jr z,ss_write_data
041384             2990   
041384 11 00 04 00 2991   	ld de,ONE_FRAME_BUFFER_SIZE
041388             2992   ss_add_length:
041388 19          2993   	add hl,de
041389 10 FD       2994   	djnz ss_add_length
04138B             2995   
04138B             2996   ss_write_data:
04138B E5          2997   	push hl
04138C E5          2998   	push hl
04138D D1          2999   	pop de
04138E 21 C4 18 04 3000   	ld hl,sprite_buffer
041392             3001   	moscall mos_fwrite
041392 3E 1B       0001M  		LD	A, function
041394 49 CF       0002M  		RST.LIS	08h
041396 E1          3002   	pop hl
041397 7C          3003   	ld a,h
041398 BA          3004   	cp d
041399 20 08       3005   	jr nz,ss_close_error
04139B 7D          3006   	ld a,l
04139C BB          3007   	cp e
04139D 20 04       3008   	jr nz,ss_close_error
04139F C3 DB 13 04 3009   	jp ss_close
0413A3             3010   
0413A3             3011   ss_close_error:
0413A3 C5          3012   	push bc
0413A4             3013   
0413A4             3014   	; write error
0413A4 CD 5E 15 04 3015   	call fn_print_file_error
0413A8             3016   
0413A8 C1          3017   	pop bc
0413A9             3018   
0413A9             3019   	; close the file
0413A9             3020   	moscall mos_fclose
0413A9 3E 0B       0001M  		LD	A, function
0413AB 49 CF       0002M  		RST.LIS	08h
0413AD             3021   
0413AD             3022   	; set path to home
0413AD 21 40 18 04 3023   	ld hl,back_path
0413B1             3024   	moscall mos_cd
0413B1 3E 03       0001M  		LD	A, function
0413B3 49 CF       0002M  		RST.LIS	08h
0413B5             3025   
0413B5             3026   	; exit on error
0413B5 FE 00       3027   	cp 0
0413B7 C2 D3 13 04 3028   	jp nz,ss_folder_error
0413BB             3029   
0413BB             3030   	; reset current frame and coordinates of the drawing pixel
0413BB 21 BC 18 04 3031   	ld hl,frames_count
0413BF 7E          3032   	ld a,(hl)
0413C0 3D          3033   	dec a
0413C1 21 BB 18 04 3034   	ld hl,current_frame
0413C5 77          3035   	ld (hl),a
0413C6 21 A6 17 04 3036   	ld hl,xpix
0413CA AF          3037   	xor a
0413CB 77          3038   	ld (hl),a
0413CC 21 A7 17 04 3039   	ld hl,ypix
0413D0 77          3040   	ld (hl),a
0413D1 18 30       3041   	jr ss_exit
0413D3             3042   
0413D3             3043   ss_folder_error:
0413D3             3044   	; write error
0413D3 CD 95 15 04 3045   	call fn_print_folder_error
0413D7 C3 03 14 04 3046   	jp ss_exit
0413DB             3047   
0413DB             3048   ss_close:
0413DB             3049   	; close the file
0413DB             3050   	moscall mos_fclose
0413DB 3E 0B       0001M  		LD	A, function
0413DD 49 CF       0002M  		RST.LIS	08h
0413DF             3051   
0413DF             3052   	; set path to home
0413DF 21 40 18 04 3053   	ld hl,back_path
0413E3             3054   	moscall mos_cd
0413E3 3E 03       0001M  		LD	A, function
0413E5 49 CF       0002M  		RST.LIS	08h
0413E7             3055   
0413E7             3056   	; exit on error
0413E7 FE 00       3057   	cp 0
0413E9 C2 D3 13 04 3058   	jp nz,ss_folder_error
0413ED             3059   
0413ED             3060   	; reset current frame and coordinates of the drawing pixel
0413ED 21 BC 18 04 3061   	ld hl,frames_count
0413F1 7E          3062   	ld a,(hl)
0413F2 3D          3063   	dec a
0413F3 21 BB 18 04 3064   	ld hl,current_frame
0413F7 77          3065   	ld (hl),a
0413F8 21 A6 17 04 3066   	ld hl,xpix
0413FC AF          3067   	xor a
0413FD 77          3068   	ld (hl),a
0413FE 21 A7 17 04 3069   	ld hl,ypix
041402 77          3070   	ld (hl),a
041403             3071   
041403             3072   ss_exit:
041403 C9          3073   	ret
041404             3074   
041404             3075   ss_file_error:
041404 CD 5E 15 04 3076   	call fn_print_file_error
041408             3077   
041408             3078   	; set path to home
041408 21 40 18 04 3079   	ld hl,back_path
04140C             3080   	moscall mos_cd
04140C 3E 03       0001M  		LD	A, function
04140E 49 CF       0002M  		RST.LIS	08h
041410             3081   
041410             3082   	; exit on error
041410 FE 00       3083   	cp 0
041412 C2 D3 13 04 3084   	jp nz,ss_folder_error
041416 C9          3085   	ret
041417             3086   
041417             3087   ; export sprite data in assembly language, giving its name
041417             3088   fn_export_sprite:
041417             3089   	; clear filename
041417 21 22 18 04 3090   	ld hl,filename
04141B 06 0C       3091   	ld b,12
04141D AF          3092   	xor a
04141E             3093   
04141E             3094   es_clear_filename:
04141E 77          3095   	ld (hl),a
04141F 23          3096   	inc hl
041420 10 FC       3097   	djnz es_clear_filename
041422             3098   
041422             3099   	; get filename
041422 CD F7 0D 04 3100   	call fn_input_text8
041426             3101   
041426             3102   	; set path to sprite path
041426 21 2F 18 04 3103   	ld hl,sprite_path
04142A             3104   	moscall mos_cd
04142A 3E 03       0001M  		LD	A, function
04142C 49 CF       0002M  		RST.LIS	08h
04142E             3105   
04142E             3106   	; create it on error
04142E FE 00       3107   	cp 0
041430 F5          3108   	push af
041431 C4 79 17 04 3109   	call nz,fn_create_sprite_folder
041435 F1          3110   	pop af
041436 28 0E       3111   	jr z,es_next
041438             3112   
041438             3113   	; set path to sprite path
041438 21 2F 18 04 3114   	ld hl,sprite_path
04143C             3115   	moscall mos_cd
04143C 3E 03       0001M  		LD	A, function
04143E 49 CF       0002M  		RST.LIS	08h
041440             3116   
041440             3117   	; exit on error
041440 FE 00       3118   	cp 0
041442 C2 42 15 04 3119   	jp nz,es_folder_error
041446             3120   
041446             3121   es_next:
041446             3122   	; open the file for write
041446 21 22 18 04 3123   	ld hl,filename
04144A 0E 0A       3124   	ld c,fa_create_always|fa_write
04144C             3125   	moscall mos_fopen
04144C 3E 0A       0001M  		LD	A, function
04144E 49 CF       0002M  		RST.LIS	08h
041450             3126   
041450             3127   	; exit on error
041450 FE 00       3128   	cp 0
041452 CA 4B 15 04 3129   	jp z,es_file_error
041456             3130   
041456             3131   	; filehandle -> C
041456 4F          3132   	ld c,a
041457             3133   
041457             3134   
041457             3135   	; L = first frame
041457 3E 00       3136   	ld a,0
041459 21 C4 18 04 3137   	ld hl,sprite_buffer
04145D 11 00 00 00 3138   	ld de,$000000
041461             3139   
041461             3140   es_frames_repeat:
041461 F5          3141   	push af
041462 E5          3142   	push hl
041463             3143   
041463 F5          3144   	push af
041464             3145   
041464             3146   	; start to write...
041464 1E 00       3147   	ld e,0 ; rows
041466             3148   
041466 06 3B       3149   	ld b,';'
041468             3150   	moscall mos_fputc
041468 3E 0D       0001M  		LD	A, function
04146A 49 CF       0002M  		RST.LIS	08h
04146C             3151   
04146C 06 20       3152   	ld b,' '
04146E             3153   	moscall mos_fputc
04146E 3E 0D       0001M  		LD	A, function
041470 49 CF       0002M  		RST.LIS	08h
041472             3154   
041472 06 46       3155   	ld b,'F'
041474             3156   	moscall mos_fputc
041474 3E 0D       0001M  		LD	A, function
041476 49 CF       0002M  		RST.LIS	08h
041478             3157   
041478 06 72       3158   	ld b,'r'
04147A             3159   	moscall mos_fputc
04147A 3E 0D       0001M  		LD	A, function
04147C 49 CF       0002M  		RST.LIS	08h
04147E             3160   
04147E 06 6D       3161   	ld b,'m'
041480             3162   	moscall mos_fputc
041480 3E 0D       0001M  		LD	A, function
041482 49 CF       0002M  		RST.LIS	08h
041484             3163   
041484 06 20       3164   	ld b,' '
041486             3165   	moscall mos_fputc
041486 3E 0D       0001M  		LD	A, function
041488 49 CF       0002M  		RST.LIS	08h
04148A             3166   
04148A F1          3167   	pop af
04148B C6 30       3168   	add a,'0'
04148D 47          3169   	ld b,a
04148E             3170   	moscall mos_fputc
04148E 3E 0D       0001M  		LD	A, function
041490 49 CF       0002M  		RST.LIS	08h
041492             3171   
041492 06 0D       3172   	ld b,13
041494             3173   	moscall mos_fputc
041494 3E 0D       0001M  		LD	A, function
041496 49 CF       0002M  		RST.LIS	08h
041498             3174   
041498 06 0A       3175   	ld b,10
04149A             3176   	moscall mos_fputc
04149A 3E 0D       0001M  		LD	A, function
04149C 49 CF       0002M  		RST.LIS	08h
04149E             3177   
04149E             3178   es_repeat:
04149E             3179   
04149E 06 44       3180   	ld b,'D'
0414A0             3181   	moscall mos_fputc
0414A0 3E 0D       0001M  		LD	A, function
0414A2 49 CF       0002M  		RST.LIS	08h
0414A4             3182   
0414A4 06 42       3183   	ld b,'B'
0414A6             3184   	moscall mos_fputc
0414A6 3E 0D       0001M  		LD	A, function
0414A8 49 CF       0002M  		RST.LIS	08h
0414AA             3185   
0414AA 06 20       3186   	ld b,' '
0414AC             3187   	moscall mos_fputc
0414AC 3E 0D       0001M  		LD	A, function
0414AE 49 CF       0002M  		RST.LIS	08h
0414B0             3188   
0414B0 16 00       3189   	ld d,0 ; columns
0414B2             3190   
0414B2             3191   es_repeat_line:
0414B2 D5          3192   	push de
0414B3             3193   
0414B3 7E          3194   	ld a,(hl)
0414B4 23          3195   	inc hl
0414B5             3196   
0414B5             3197   	; convert A to BCD
0414B5 CD 89 17 04 3198   	call fn_hex2bcd
0414B9             3199   
0414B9             3200   	; write two numbers (chars)
0414B9 5F          3201   	ld e,a
0414BA E6 F0       3202   	and $f0
0414BC 0F          3203   	rrca
0414BD 0F          3204   	rrca
0414BE 0F          3205   	rrca
0414BF 0F          3206   	rrca
0414C0 C6 30       3207   	add '0'
0414C2             3208   
0414C2 47          3209   	ld b,a
0414C3             3210   	moscall mos_fputc
0414C3 3E 0D       0001M  		LD	A, function
0414C5 49 CF       0002M  		RST.LIS	08h
0414C7             3211   
0414C7 7B          3212   	ld a,e
0414C8 E6 0F       3213   	and $0f
0414CA C6 30       3214   	add '0'
0414CC             3215   
0414CC 47          3216   	ld b,a
0414CD             3217   	moscall mos_fputc
0414CD 3E 0D       0001M  		LD	A, function
0414CF 49 CF       0002M  		RST.LIS	08h
0414D1             3218   
0414D1 D1          3219   	pop de
0414D2 14          3220   	inc d
0414D3 3A AB 17 04 3221   	ld a,(spr_size)
0414D7 BA          3222   	cp d
0414D8 F5          3223   	push af
0414D9 C4 82 17 04 3224   	call nz,fn_comma
0414DD F1          3225   	pop af
0414DE C2 B2 14 04 3226   	jp nz,es_repeat_line
0414E2             3227   
0414E2 06 0D       3228   	ld b,13 ; CR
0414E4             3229   	moscall mos_fputc
0414E4 3E 0D       0001M  		LD	A, function
0414E6 49 CF       0002M  		RST.LIS	08h
0414E8             3230   
0414E8 06 0A       3231   	ld b,10 ; LF
0414EA             3232   	moscall mos_fputc
0414EA 3E 0D       0001M  		LD	A, function
0414EC 49 CF       0002M  		RST.LIS	08h
0414EE             3233   
0414EE 1C          3234   	inc e
0414EF 3A AB 17 04 3235   	ld a,(spr_size)
0414F3 BB          3236   	cp e
0414F4 C2 9E 14 04 3237   	jp nz,es_repeat
0414F8             3238   
0414F8 06 0D       3239   	ld b,13 ; CR
0414FA             3240   	moscall mos_fputc
0414FA 3E 0D       0001M  		LD	A, function
0414FC 49 CF       0002M  		RST.LIS	08h
0414FE             3241   
0414FE 06 0A       3242   	ld b,10 ; LF
041500             3243   	moscall mos_fputc
041500 3E 0D       0001M  		LD	A, function
041502 49 CF       0002M  		RST.LIS	08h
041504             3244   
041504 E1          3245   	pop hl
041505 D5          3246   	push de
041506 ED 5C       3247   	mlt de
041508 19          3248   	add hl,de
041509 D1          3249   	pop de
04150A F1          3250   	pop af
04150B 3C          3251   	inc a
04150C DD 21 BC 18 3252   	ld ix,frames_count
       04          
041511 DD BE 00    3253   	cp (ix+0)
041514 C2 61 14 04 3254   	jp nz,es_frames_repeat
041518             3255   
041518             3256   	; close the file
041518             3257   	moscall mos_fclose
041518 3E 0B       0001M  		LD	A, function
04151A 49 CF       0002M  		RST.LIS	08h
04151C             3258   
04151C             3259   	; set path to home
04151C 21 40 18 04 3260   	ld hl,back_path
041520             3261   	moscall mos_cd
041520 3E 03       0001M  		LD	A, function
041522 49 CF       0002M  		RST.LIS	08h
041524             3262   
041524             3263   	; exit on error
041524 FE 00       3264   	cp 0
041526 C2 42 15 04 3265   	jp nz,es_folder_error
04152A             3266   
04152A             3267   	; reset current frame and coordinates of the drawing pixel
04152A 21 BC 18 04 3268   	ld hl,frames_count
04152E 7E          3269   	ld a,(hl)
04152F 3D          3270   	dec a
041530 21 BB 18 04 3271   	ld hl,current_frame
041534 77          3272   	ld (hl),a
041535 21 A6 17 04 3273   	ld hl,xpix
041539 AF          3274   	xor a
04153A 77          3275   	ld (hl),a
04153B 21 A7 17 04 3276   	ld hl,ypix
04153F 77          3277   	ld (hl),a
041540 18 08       3278   	jr es_exit
041542             3279   
041542             3280   es_folder_error:
041542             3281   	; write error
041542 CD 95 15 04 3282   	call fn_print_folder_error
041546 C3 4A 15 04 3283   	jp es_exit
04154A             3284   
04154A             3285   es_exit:
04154A C9          3286   	ret
04154B             3287   
04154B             3288   es_file_error:
04154B CD 5E 15 04 3289   	call fn_print_file_error
04154F             3290   
04154F             3291   	; set path to home
04154F 21 40 18 04 3292   	ld hl,back_path
041553             3293   	moscall mos_cd
041553 3E 03       0001M  		LD	A, function
041555 49 CF       0002M  		RST.LIS	08h
041557             3294   
041557             3295   	; exit on error
041557 FE 00       3296   	cp 0
041559 C2 42 15 04 3297   	jp nz,es_folder_error
04155D C9          3298   	ret
04155E             3299   
04155E             3300   ; print 'file error'
04155E             3301   fn_print_file_error:
04155E             3302   	vdu 7
04155E 3E 07       0001M  		LD	A, function
041560 49 D7       0002M  		RST.LIS	10h
041562             3303   
041562             3304   	; locate x,y
041562             3305   	vdu 31
041562 3E 1F       0001M  		LD	A, function
041564 49 D7       0002M  		RST.LIS	10h
041566             3306   	vdu FILENAME_X
041566 3E 07       0001M  		LD	A, function
041568 49 D7       0002M  		RST.LIS	10h
04156A             3307   	vdu FILENAME_Y
04156A 3E 18       0001M  		LD	A, function
04156C 49 D7       0002M  		RST.LIS	10h
04156E             3308   
04156E             3309   	; print text
04156E 21 5C 18 04 3310   	ld hl,file_error
041572 01 00 00 00 3311   	ld bc,0
041576 AF          3312   	xor a
041577 49 DF       3313   	rst.lis $18
041579             3314   
041579 CD F0 0D 04 3315   	call fn_input_key
04157D             3316   
04157D             3317   	; locate x,y
04157D             3318   	vdu 31
04157D 3E 1F       0001M  		LD	A, function
04157F 49 D7       0002M  		RST.LIS	10h
041581             3319   	vdu FILENAME_X
041581 3E 07       0001M  		LD	A, function
041583 49 D7       0002M  		RST.LIS	10h
041585             3320   	vdu FILENAME_Y
041585 3E 18       0001M  		LD	A, function
041587 49 D7       0002M  		RST.LIS	10h
041589             3321   
041589             3322   	; print text
041589 21 45 18 04 3323   	ld hl,void_filename
04158D 01 00 00 00 3324   	ld bc,0
041591 AF          3325   	xor a
041592 49 DF       3326   	rst.lis $18
041594             3327   
041594 C9          3328   	ret
041595             3329   
041595             3330   ; print 'folder error'
041595             3331   fn_print_folder_error:
041595             3332   	vdu 7
041595 3E 07       0001M  		LD	A, function
041597 49 D7       0002M  		RST.LIS	10h
041599             3333   
041599             3334   	; locate x,y
041599             3335   	vdu 31
041599 3E 1F       0001M  		LD	A, function
04159B 49 D7       0002M  		RST.LIS	10h
04159D             3336   	vdu FILENAME_X
04159D 3E 07       0001M  		LD	A, function
04159F 49 D7       0002M  		RST.LIS	10h
0415A1             3337   	vdu FILENAME_Y
0415A1 3E 18       0001M  		LD	A, function
0415A3 49 D7       0002M  		RST.LIS	10h
0415A5             3338   
0415A5             3339   	; print text
0415A5 21 73 18 04 3340   	ld hl,folder_error
0415A9 01 00 00 00 3341   	ld bc,0
0415AD AF          3342   	xor a
0415AE 49 DF       3343   	rst.lis $18
0415B0             3344   
0415B0 CD F0 0D 04 3345   	call fn_input_key
0415B4             3346   
0415B4             3347   	; locate x,y
0415B4             3348   	vdu 31
0415B4 3E 1F       0001M  		LD	A, function
0415B6 49 D7       0002M  		RST.LIS	10h
0415B8             3349   	vdu FILENAME_X
0415B8 3E 07       0001M  		LD	A, function
0415BA 49 D7       0002M  		RST.LIS	10h
0415BC             3350   	vdu FILENAME_Y
0415BC 3E 18       0001M  		LD	A, function
0415BE 49 D7       0002M  		RST.LIS	10h
0415C0             3351   
0415C0             3352   	; print text
0415C0 21 45 18 04 3353   	ld hl,void_filename
0415C4 01 00 00 00 3354   	ld bc,0
0415C8 AF          3355   	xor a
0415C9 49 DF       3356   	rst.lis $18
0415CB             3357   
0415CB C9          3358   	ret
0415CC             3359   
0415CC             3360   ; print 'header error'
0415CC             3361   fn_print_header_error:
0415CC             3362   	vdu 7
0415CC 3E 07       0001M  		LD	A, function
0415CE 49 D7       0002M  		RST.LIS	10h
0415D0             3363   
0415D0             3364   	; locate x,y
0415D0             3365   	vdu 31
0415D0 3E 1F       0001M  		LD	A, function
0415D2 49 D7       0002M  		RST.LIS	10h
0415D4             3366   	vdu FILENAME_X
0415D4 3E 07       0001M  		LD	A, function
0415D6 49 D7       0002M  		RST.LIS	10h
0415D8             3367   	vdu FILENAME_Y
0415D8 3E 18       0001M  		LD	A, function
0415DA 49 D7       0002M  		RST.LIS	10h
0415DC             3368   
0415DC             3369   	; print text
0415DC 21 8A 18 04 3370   	ld hl,header_error
0415E0 01 00 00 00 3371   	ld bc,0
0415E4 AF          3372   	xor a
0415E5 49 DF       3373   	rst.lis $18
0415E7             3374   
0415E7 CD F0 0D 04 3375   	call fn_input_key
0415EB             3376   
0415EB             3377   	; locate x,y
0415EB             3378   	vdu 31
0415EB 3E 1F       0001M  		LD	A, function
0415ED 49 D7       0002M  		RST.LIS	10h
0415EF             3379   	vdu FILENAME_X
0415EF 3E 07       0001M  		LD	A, function
0415F1 49 D7       0002M  		RST.LIS	10h
0415F3             3380   	vdu FILENAME_Y
0415F3 3E 18       0001M  		LD	A, function
0415F5 49 D7       0002M  		RST.LIS	10h
0415F7             3381   
0415F7             3382   	; print text
0415F7 21 45 18 04 3383   	ld hl,void_filename
0415FB 01 00 00 00 3384   	ld bc,0
0415FF AF          3385   	xor a
041600 49 DF       3386   	rst.lis $18
041602             3387   
041602 C9          3388   	ret
041603             3389   
041603             3390   ; print 'data error'
041603             3391   fn_print_data_error:
041603             3392   	vdu 7
041603 3E 07       0001M  		LD	A, function
041605 49 D7       0002M  		RST.LIS	10h
041607             3393   
041607             3394   	; locate x,y
041607             3395   	vdu 31
041607 3E 1F       0001M  		LD	A, function
041609 49 D7       0002M  		RST.LIS	10h
04160B             3396   	vdu FILENAME_X
04160B 3E 07       0001M  		LD	A, function
04160D 49 D7       0002M  		RST.LIS	10h
04160F             3397   	vdu FILENAME_Y
04160F 3E 18       0001M  		LD	A, function
041611 49 D7       0002M  		RST.LIS	10h
041613             3398   
041613             3399   	; print text
041613 21 A1 18 04 3400   	ld hl,data_error
041617 01 00 00 00 3401   	ld bc,0
04161B AF          3402   	xor a
04161C 49 DF       3403   	rst.lis $18
04161E             3404   
04161E CD F0 0D 04 3405   	call fn_input_key
041622             3406   
041622             3407   	; locate x,y
041622             3408   	vdu 31
041622 3E 1F       0001M  		LD	A, function
041624 49 D7       0002M  		RST.LIS	10h
041626             3409   	vdu FILENAME_X
041626 3E 07       0001M  		LD	A, function
041628 49 D7       0002M  		RST.LIS	10h
04162A             3410   	vdu FILENAME_Y
04162A 3E 18       0001M  		LD	A, function
04162C 49 D7       0002M  		RST.LIS	10h
04162E             3411   
04162E             3412   	; print text
04162E 21 45 18 04 3413   	ld hl,void_filename
041632 01 00 00 00 3414   	ld bc,0
041636 AF          3415   	xor a
041637 49 DF       3416   	rst.lis $18
041639             3417   
041639 C9          3418   	ret
04163A             3419   
04163A             3420   ; refresh all the current sprite frame
04163A             3421   fn_refresh_sprite:
04163A 06 00       3422   	ld b,0 ; B -> x cordinate
04163C 0E 00       3423   	ld c,0 ; C -> y cordinate
04163E             3424   
04163E             3425   rs_loop:
04163E C5          3426   	push bc
04163F             3427   
04163F 21 A6 17 04 3428   	ld hl,xpix
041643 70          3429   	ld (hl),b
041644 21 A7 17 04 3430   	ld hl,ypix
041648 71          3431   	ld (hl),c
041649 CD 82 0C 04 3432   	call fn_draw_pixel_without_border
04164D             3433   
04164D C1          3434   	pop bc
04164E             3435   
04164E 04          3436   	inc b
04164F 21 AB 17 04 3437   	ld hl,spr_size
041653 7E          3438   	ld a,(hl)
041654 B8          3439   	cp b
041655 28 04       3440   	jr z,rs_next_line
041657 C3 3E 16 04 3441   	jp rs_loop
04165B             3442   
04165B             3443   rs_next_line:
04165B 06 00       3444   	ld b,0
04165D 0C          3445   	inc c
04165E 21 AB 17 04 3446   	ld hl,spr_size
041662 7E          3447   	ld a,(hl)
041663 B9          3448   	cp c
041664 28 04       3449   	jr z,rs_end
041666 C3 3E 16 04 3450   	jp rs_loop
04166A             3451   
04166A             3452   rs_end:
04166A AF          3453   	xor a
04166B 21 A6 17 04 3454   	ld hl,xpix
04166F 77          3455   	ld (hl),a
041670 21 A7 17 04 3456   	ld hl,ypix
041674 77          3457   	ld (hl),a
041675 CD 6E 0C 04 3458   	call fn_draw_pixel_with_border
041679             3459   
041679 C9          3460   	ret
04167A             3461   
04167A             3462   fn_change_frame:
04167A 21 BB 18 04 3463   	ld hl,current_frame
04167E 7E          3464   	ld a,(hl)
04167F 3C          3465   	inc a
041680 C6 30       3466   	add a,48
041682 21 BD 18 04 3467   	ld hl,current_frame_ascii
041686 77          3468   	ld (hl),a
041687             3469   
041687             3470   	; locate 21,3
041687             3471   	vdu 31
041687 3E 1F       0001M  		LD	A, function
041689 49 D7       0002M  		RST.LIS	10h
04168B             3472   	vdu 21
04168B 3E 15       0001M  		LD	A, function
04168D 49 D7       0002M  		RST.LIS	10h
04168F             3473   	vdu 3
04168F 3E 03       0001M  		LD	A, function
041691 49 D7       0002M  		RST.LIS	10h
041693             3474   
041693             3475   	; print text
041693 21 BD 18 04 3476   	ld hl,current_frame_ascii
041697 01 00 00 00 3477   	ld bc,0
04169B AF          3478   	xor a
04169C 49 DF       3479   	rst.lis $18
04169E             3480   
04169E C9          3481   	ret
04169F             3482   
04169F             3483   fn_change_frames_count:
04169F 21 BC 18 04 3484   	ld hl,frames_count
0416A3 7E          3485   	ld a,(hl)
0416A4 C6 30       3486   	add a,48
0416A6 21 BF 18 04 3487   	ld hl,frames_count_ascii
0416AA 77          3488   	ld (hl),a
0416AB             3489   
0416AB             3490   	; locate 23,3
0416AB             3491   	vdu 31
0416AB 3E 1F       0001M  		LD	A, function
0416AD 49 D7       0002M  		RST.LIS	10h
0416AF             3492   	vdu 23
0416AF 3E 17       0001M  		LD	A, function
0416B1 49 D7       0002M  		RST.LIS	10h
0416B3             3493   	vdu 3
0416B3 3E 03       0001M  		LD	A, function
0416B5 49 D7       0002M  		RST.LIS	10h
0416B7             3494   
0416B7             3495   	; print text
0416B7 21 BF 18 04 3496   	ld hl,frames_count_ascii
0416BB 01 00 00 00 3497   	ld bc,0
0416BF AF          3498   	xor a
0416C0 49 DF       3499   	rst.lis $18
0416C2             3500   
0416C2 C9          3501   	ret
0416C3             3502   
0416C3             3503   ; slowdown (wait delay)
0416C3             3504   fn_slowdown:
0416C3 DD 21 C1 18 3505   	ld ix,keydata
       04          
0416C8 DD 7E 02    3506   	ld a,(ix+2)
0416CB E6 02       3507   	and 2
0416CD FE 02       3508   	cp 2 ; shift key to disable delay
0416CF C8          3509   	ret z
0416D0             3510   
0416D0             3511   	moscall mos_sysvars
0416D0 3E 08       0001M  		LD	A, function
0416D2 49 CF       0002M  		RST.LIS	08h
0416D4 DD 4E 00    3512   	ld c,(ix+sysvar_time)
0416D7             3513   
0416D7             3514   sd_loop:
0416D7             3515   	moscall mos_sysvars
0416D7 3E 08       0001M  		LD	A, function
0416D9 49 CF       0002M  		RST.LIS	08h
0416DB DD 7E 00    3516   	ld a,(ix+sysvar_time)
0416DE 91          3517   	sub c
0416DF FE 14       3518   	cp SLOWDOWN_DELAY
0416E1 20 F4       3519   	jr nz,sd_loop
0416E3 C9          3520   	ret
0416E4             3521   
0416E4             3522   fn_show_spr_descr:
0416E4             3523   	; locate 15,3
0416E4             3524   	vdu 31
0416E4 3E 1F       0001M  		LD	A, function
0416E6 49 D7       0002M  		RST.LIS	10h
0416E8             3525   	vdu 15
0416E8 3E 0F       0001M  		LD	A, function
0416EA 49 D7       0002M  		RST.LIS	10h
0416EC             3526   	vdu 3
0416EC 3E 03       0001M  		LD	A, function
0416EE 49 D7       0002M  		RST.LIS	10h
0416F0             3527   
0416F0             3528   	; print text
0416F0 21 F6 17 04 3529   	ld hl,spr_descr
0416F4 01 00 00 00 3530   	ld bc,0
0416F8 AF          3531   	xor a
0416F9 49 DF       3532   	rst.lis $18
0416FB             3533   
0416FB             3534   	; locate 15,5
0416FB             3535   	vdu 31
0416FB 3E 1F       0001M  		LD	A, function
0416FD 49 D7       0002M  		RST.LIS	10h
0416FF             3536   	vdu 15
0416FF 3E 0F       0001M  		LD	A, function
041701 49 D7       0002M  		RST.LIS	10h
041703             3537   	vdu 5
041703 3E 05       0001M  		LD	A, function
041705 49 D7       0002M  		RST.LIS	10h
041707             3538   
041707             3539   	; check for sprite size...
041707 21 AB 17 04 3540   	ld hl,spr_size
04170B 7E          3541   	ld a,(hl)
04170C             3542   
04170C FE 04       3543   	cp 4
04170E 20 0C       3544   	jr nz,ssd_8x8
041710             3545   
041710             3546   	; print text 4x4
041710 21 00 18 04 3547   	ld hl,spr_descr1
041714 01 00 00 00 3548   	ld bc,0
041718 AF          3549   	xor a
041719 49 DF       3550   	rst.lis $18
04171B C9          3551   	ret
04171C             3552   
04171C             3553   ssd_8x8:
04171C FE 08       3554   	cp 8
04171E 20 0C       3555   	jr nz,ssd_16x16
041720             3556   
041720             3557   	; print text 8x8
041720 21 06 18 04 3558   	ld hl,spr_descr2
041724 01 00 00 00 3559   	ld bc,0
041728 AF          3560   	xor a
041729 49 DF       3561   	rst.lis $18
04172B C9          3562   	ret
04172C             3563   
04172C             3564   ssd_16x16:
04172C FE 10       3565   	cp 16
04172E 20 0C       3566   	jr nz,ssd_32x32
041730             3567   
041730             3568   	; print text 16x16
041730 21 0C 18 04 3569   	ld hl,spr_descr3
041734 01 00 00 00 3570   	ld bc,0
041738 AF          3571   	xor a
041739 49 DF       3572   	rst.lis $18
04173B C9          3573   	ret
04173C             3574   
04173C             3575   ssd_32x32:
04173C             3576   	; print text 32x32
04173C 21 12 18 04 3577   	ld hl,spr_descr4
041740 01 00 00 00 3578   	ld bc,0
041744 AF          3579   	xor a
041745 49 DF       3580   	rst.lis $18
041747             3581   
041747 C9          3582   	ret
041748             3583   
041748             3584   ; input: HL = negative key to check
041748             3585   fn_inkey:
041748             3586   	moscall mos_getkbmap
041748 3E 1E       0001M  		LD	A, function
04174A 49 CF       0002M  		RST.LIS	08h
04174C 23          3587   	INC	HL
04174D 7D          3588   	LD	A, L
04174E ED 44       3589   	NEG
041750 4F          3590   	LD	C, A
041751 3E 01       3591   	LD	A, 1
041753 FA 77 17 04 3592   	JP	M,i_false ; < -128 ?
041757             3593   
041757 21 45 00 04 3594   	LD	HL,BITLOOKUP
04175B 11 00 00 00 3595   	LD	DE,0
04175F 79          3596   	LD	A,C
041760 E6 07       3597   	AND	00000111b
041762 5F          3598   	LD	E,A
041763 19          3599   	ADD	HL,DE
041764 46          3600   	LD	B,(HL)
041765             3601   
041765 79          3602   	LD	A,C
041766 E6 78       3603   	AND	01111000b
041768 0F          3604   	RRCA
041769 0F          3605   	RRCA
04176A 0F          3606   	RRCA
04176B 5F          3607   	LD	E, A
04176C DD 19       3608   	ADD	IX,DE
04176E DD 7E 00    3609   	LD	A,(IX+0)
041771 A0          3610   	AND	B
041772 28 03       3611   	JR Z,i_false
041774 3E 01       3612   	LD A,1
041776 C9          3613   	RET
041777             3614   i_false:
041777 AF          3615   	XOR A
041778 C9          3616   	RET
041779             3617   
041779             3618   fn_create_sprite_folder:
041779 21 2F 18 04 3619   	ld hl,sprite_path
04177D             3620   	moscall mos_mkdir
04177D 3E 07       0001M  		LD	A, function
04177F 49 CF       0002M  		RST.LIS	08h
041781 C9          3621   	ret
041782             3622   
041782             3623   fn_comma:
041782 06 2C       3624   	ld b,','
041784             3625   	moscall mos_fputc
041784 3E 0D       0001M  		LD	A, function
041786 49 CF       0002M  		RST.LIS	08h
041788 C9          3626   	ret
041789             3627   
041789             3628   ; Hex to BCD
041789             3629   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
041789             3630   ; Input: a = hex number
041789             3631   ; Output: a = BCD number
041789             3632   ; Clobbers: b,c
041789             3633   fn_hex2bcd:
041789 C5          3634   		push bc
04178A 4F          3635   		ld c,a  ; Original (hex) number
04178B 06 08       3636   		ld b,8  ; How many bits
04178D AF          3637   		xor a   ; Output (BCD) number, starts at 0
04178E CB 21       3638   htb:	sla c   ; shift c into carry
041790 8F          3639   		adc a,a
041791 27          3640   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
041792 10 FA       3641   		djnz htb  ; Repeat for 8 bits
041794 C1          3642   		pop bc
041795 C9          3643   		ret
041796             3644   
041796             3645   ;======================================================================
041796             3646   
041796             3647   ; coordinates for rectangles
041796             3648   x1:
041796 00 00       3649   	dw $0000
041798             3650   y1:
041798 00 00       3651   	dw $0000
04179A             3652   x2:
04179A 00 00       3653   	dw $0000
04179C             3654   y2:
04179C 00 00       3655   	dw $0000
04179E             3656   
04179E             3657   ; coordinates of the edited sprite
04179E             3658   xs1:
04179E 5F 00       3659   	dw 95
0417A0             3660   ys1:
0417A0 37 00       3661   	dw 55
0417A2             3662   xs2:
0417A2 E0 00       3663   	dw 224
0417A4             3664   ys2:
0417A4 B8 00       3665   	dw 184
0417A6             3666   
0417A6             3667   ; coordinates of active pixels to draw
0417A6             3668   xpix:
0417A6 00          3669   	db 0
0417A7             3670   ypix:
0417A7 00          3671   	db 0
0417A8             3672   
0417A8             3673   ; memorized coordinates of active pixels to draw
0417A8             3674   memxpix:
0417A8 00          3675   	db 0
0417A9             3676   memypix:
0417A9 00          3677   	db 0
0417AA             3678   
0417AA             3679   ; width of a pixel in the sprite
0417AA             3680   pixel_width:
0417AA 00          3681   	db 0
0417AB             3682   
0417AB             3683   ; sprite size, in resized pixels
0417AB             3684   spr_size:
0417AB 00          3685   	db 0
0417AC             3686   
0417AC             3687   ; pen color (0-63)
0417AC             3688   current_pen:
0417AC 00          3689   	db 0
0417AD             3690   
0417AD             3691   ; texts for 1st menu
0417AD             3692   title:
0417AD 53 50 52 2D 3693   	db "SPR-EDIT",0
       45 44 49 54 
       00          
0417B6             3694   
0417B6             3695   menu1:
0417B6 46 31 2E 20 3696   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
0417C5             3697   menu2:
0417C5 46 32 2E 20 3698   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
0417D4             3699   menu3:
0417D4 46 33 2E 20 3700   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
0417E5             3701   menu4:
0417E5 46 34 2E 20 3702   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
0417F6             3703   
0417F6             3704   ; descriptions of sprites
0417F6             3705   spr_descr:
0417F6 46 72 61 6D 3706   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041800             3707   spr_descr1:
041800 34 78 34 20 3708   	db "4x4  ",0
       20 00       
041806             3709   spr_descr2:
041806 38 78 38 20 3710   	db "8x8  ",0
       20 00       
04180C             3711   spr_descr3:
04180C 31 36 78 31 3712   	db "16x16",0
       36 00       
041812             3713   spr_descr4:
041812 33 32 78 33 3714   	db "32x32",0
       32 00       
041818             3715   
041818             3716   ; label before filename
041818             3717   filename_label:
041818 46 69 6C 65 3718   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041822             3719   
041822             3720   ; filename without extension
041822             3721   filename:
041822 00 00 00 00 3722   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
04182F             3723   
04182F             3724   sprite_path:
04182F 73 70 72 69 3725   	db "sprites",0
       74 65 73 00 
041837             3726   
041837             3727   palette_path:
041837 70 61 6C 65 3728   	db "palettes",0
       74 74 65 73 
       00          
041840             3729   
041840             3730   back_path:
041840 2E 2E 00    3731   	db "..",0
041843             3732   
041843             3733   ; single space char to print
041843             3734   spacechar:
041843 20 00       3735   	db " ",0
041845             3736   
041845             3737   ; spaces to remove filename label
041845             3738   void_filename:
041845 20 20 20 20 3739   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
04185C             3740   
04185C             3741   ; file error message
04185C             3742   file_error:
04185C 46 69 6C 65 3743   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
041873             3744   
041873             3745   ; folder error message
041873             3746   folder_error:
041873 46 6F 6C 64 3747   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
04188A             3748   
04188A             3749   ; header error message
04188A             3750   header_error:
04188A 48 65 61 64 3751   	db "Header error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0418A1             3752   
0418A1             3753   ; data error message
0418A1             3754   data_error:
0418A1 44 61 74 61 3755   	db "Data error !        ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       00          
0418B6             3756   
0418B6             3757   ; number of colors
0418B6             3758   colors_count:
0418B6 00          3759   	db 0
0418B7             3760   
0418B7             3761   ; real number of colors
0418B7             3762   new_colors_count:
0418B7 00          3763   	db 0
0418B8             3764   
0418B8             3765   red_tint:
0418B8 00          3766   	db 0
0418B9             3767   
0418B9             3768   green_tint:
0418B9 00          3769   	db 0
0418BA             3770   
0418BA             3771   blue_tint:
0418BA 00          3772   	db 0
0418BB             3773   
0418BB             3774   ; current frame
0418BB             3775   current_frame:
0418BB 00          3776   	db 0
0418BC             3777   
0418BC             3778   ; frames count
0418BC             3779   frames_count:
0418BC 00          3780   	db 0
0418BD             3781   
0418BD             3782   current_frame_ascii:
0418BD 30 00       3783   	db '0',0
0418BF             3784   
0418BF             3785   frames_count_ascii:
0418BF 30 00       3786   	db '0',0
0418C1             3787   
0418C1             3788   ; keycode, keydown & keymods are stored here
0418C1             3789   keydata:
0418C1 00 00 00    3790   	db 0,0,0
0418C4             3791   
0418C4             3792   ; buffer for the current sprite
0418C4             3793   sprite_buffer:
0418C4             3794   	ds BUFFER_SIZE
0438C4             3795   
0438C4             3796   header_buffer:
0438C4             3797   	ds HEADER_BUFFER_SIZE
0438D4             3798   
0438D4             3799   color_buffer:
0438D4 00 00 00    3800   	db 0,0,0
0438D7             3801   
0438D7             3802   palette_buffer:
0438D7             3803   	ds MAX_PAL_DATA + 1
043C1C             3804   
043C1C             3805   temp_chars_buffer:
043C1C 00 00 00 00 3806   	db 0,0,0,0
043C20             3807   
043C20             3808   header:
043C20 4A 41 53 43 3809   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043C2A 30 31 30 30 3810   	db "0100",13,10
       0D 0A       
043C30             3811   
043C30             3812   ; buffer to perform some operations
043C30             3813   swap_sprite_buffer:
043C30             3814   	ds ONE_FRAME_BUFFER_SIZE
044030             3815   
044030             3816   asm_line:
044030 44 42 20    3817   	DB "DB "
044033             3818   
044033             3819   asm_line_length:
044033 03          3820   	DB 3
044034             3821   
044034             3822   rgb_palette:
044034 00 00 00    3823   	db $00,$00,$00
044037 AA 00 00    3824   	db $AA,$00,$00
04403A 00 AA 00    3825   	db $00,$AA,$00
04403D AA AA 00    3826   	db $AA,$AA,$00
044040 00 00 AA    3827   	db $00,$00,$AA
044043 AA 00 AA    3828   	db $AA,$00,$AA
044046 00 AA AA    3829   	db $00,$AA,$AA
044049 AA AA AA    3830   	db $AA,$AA,$AA
04404C             3831   
04404C 55 55 55    3832   	db $55,$55,$55
04404F FF 00 00    3833   	db $FF,$00,$00
044052 00 FF 00    3834   	db $00,$FF,$00
044055 FF FF 00    3835   	db $FF,$FF,$00
044058 00 00 FF    3836   	db $00,$00,$FF
04405B FF 00 FF    3837   	db $FF,$00,$FF
04405E 00 FF FF    3838   	db $00,$FF,$FF
044061 FF FF FF    3839   	db $FF,$FF,$FF
044064             3840   
044064 00 00 55    3841   	db $00,$00,$55
044067 00 55 00    3842   	db $00,$55,$00
04406A 00 55 55    3843   	db $00,$55,$55
04406D 00 55 AA    3844   	db $00,$55,$AA
044070 00 55 FF    3845   	db $00,$55,$FF
044073 00 AA 55    3846   	db $00,$AA,$55
044076 00 AA FF    3847   	db $00,$AA,$FF
044079 00 FF 55    3848   	db $00,$FF,$55
04407C             3849   
04407C 00 FF AA    3850   	db $00,$FF,$AA
04407F 55 00 00    3851   	db $55,$00,$00
044082 55 00 55    3852   	db $55,$00,$55
044085 55 00 AA    3853   	db $55,$00,$AA
044088 55 00 FF    3854   	db $55,$00,$FF
04408B 55 55 00    3855   	db $55,$55,$00
04408E 55 55 AA    3856   	db $55,$55,$AA
044091 55 55 FF    3857   	db $55,$55,$FF
044094             3858   
044094 55 AA 00    3859   	db $55,$AA,$00
044097 55 AA 55    3860   	db $55,$AA,$55
04409A 55 AA AA    3861   	db $55,$AA,$AA
04409D 55 AA FF    3862   	db $55,$AA,$FF
0440A0 55 FF 00    3863   	db $55,$FF,$00
0440A3 55 FF 55    3864   	db $55,$FF,$55
0440A6 55 FF AA    3865   	db $55,$FF,$AA
0440A9 55 FF FF    3866   	db $55,$FF,$FF
0440AC             3867   
0440AC AA 00 55    3868   	db $AA,$00,$55
0440AF AA 00 FF    3869   	db $AA,$00,$FF
0440B2 AA 55 00    3870   	db $AA,$55,$00
0440B5 AA 55 55    3871   	db $AA,$55,$55
0440B8 AA 55 AA    3872   	db $AA,$55,$AA
0440BB AA 55 FF    3873   	db $AA,$55,$FF
0440BE AA AA 55    3874   	db $AA,$AA,$55
0440C1 AA AA FF    3875   	db $AA,$AA,$FF
0440C4             3876   
0440C4 AA FF 00    3877   	db $AA,$FF,$00
0440C7 AA FF 55    3878   	db $AA,$FF,$55
0440CA AA FF AA    3879   	db $AA,$FF,$AA
0440CD AA FF FF    3880   	db $AA,$FF,$FF
0440D0 FF 00 55    3881   	db $FF,$00,$55
0440D3 FF 00 AA    3882   	db $FF,$00,$AA
0440D6 FF 55 00    3883   	db $FF,$55,$00
0440D9 FF 55 55    3884   	db $FF,$55,$55
0440DC             3885   
0440DC FF 55 AA    3886   	db $FF,$55,$AA
0440DF FF 55 FF    3887   	db $FF,$55,$FF
0440E2 FF AA 00    3888   	db $FF,$AA,$00
0440E5 FF AA 55    3889   	db $FF,$AA,$55
0440E8 FF AA AA    3890   	db $FF,$AA,$AA
0440EB FF AA FF    3891   	db $FF,$AA,$FF
0440EE FF FF 55    3892   	db $FF,$FF,$55
0440F1 FF FF AA    3893   	db $FF,$FF,$AA
0440F4             3894   
0440F4             3895   ; sprite structure:
0440F4             3896   ; =================
0440F4             3897   ; colors_count  :   byte
0440F4             3898   ; frames count	:	byte
0440F4             3899   ; spr size		:	byte
0440F4             3900   ; data			:   width x height bytes of colors
0440F4             3901   
0440F4             3902   ; ===============================================
0440F4             3903   ; A = byte to debug
0440F4             3904   debug_byte:
0440F4 F5          3905   	PUSH AF
0440F5 C5          3906   	PUSH BC
0440F6 D5          3907   	PUSH DE
0440F7 E5          3908   	PUSH HL
0440F8 21 00 00 00 3909   	LD HL,$000000
0440FC 6F          3910   	LD L,A
0440FD 11 39 41 04 3911   	LD DE,debug_text
044101 D5          3912   	PUSH DE
044102 CD 3F 41 04 3913   	CALL num2dec
044106 E1          3914   	POP HL
044107 23          3915   	INC HL
044108 23          3916   	INC HL
044109 01 03 00 00 3917   	LD BC,3
04410D 3E 00       3918   	LD A,0
04410F 49 DF       3919   	RST.LIS $18
044111 E1          3920   	POP HL
044112 D1          3921   	POP DE
044113 C1          3922   	POP BC
044114 F1          3923   	POP AF
044115 C9          3924   	RET
044116             3925   
044116             3926   ; HL = word to debug
044116             3927   debug_word:
044116 F5          3928   	PUSH AF
044117 C5          3929   	PUSH BC
044118 D5          3930   	PUSH DE
044119 E5          3931   	PUSH HL
04411A 11 00 00 00 3932   	LD DE,$000000 ; remove HLU
04411E 5D          3933   	LD E,L
04411F 54          3934   	LD D,H
044120 D5          3935   	PUSH DE
044121 E1          3936   	POP HL
044122 11 39 41 04 3937   	LD DE,debug_text
044126 D5          3938   	PUSH DE
044127 CD 3F 41 04 3939   	CALL num2dec
04412B E1          3940   	POP HL
04412C 01 05 00 00 3941   	LD BC,5
044130 3E 00       3942   	LD A,0
044132 49 DF       3943   	RST.LIS $18
044134 E1          3944   	POP HL
044135 D1          3945   	POP DE
044136 C1          3946   	POP BC
044137 F1          3947   	POP AF
044138 C9          3948   	RET
044139             3949   
044139             3950   debug_text:
044139             3951   	DS 6
04413F             3952   
04413F             3953   ; 16 bits number to string
04413F             3954   num2dec:
04413F 01 F0 D8 FF 3955   	LD BC,-10000
044143 CD 60 41 04 3956   	CALL num1
044147 01 18 FC FF 3957   	LD BC,-1000
04414B CD 60 41 04 3958   	CALL num1
04414F 01 9C FF FF 3959   	LD BC,-100
044153 CD 60 41 04 3960   	CALL num1
044157 01 F6 FF FF 3961   	LD BC,-10
04415B CD 60 41 04 3962   	CALL num1
04415F 48          3963   	LD C,B
044160             3964   
044160 3E 2F       3965   num1: LD A,'0'-1
044162 3C          3966   num2: INC A
044163 09          3967   	ADD HL,BC
044164 38 FC       3968   	JR C,num2
044166 ED 42       3969   	SBC HL,BC
044168             3970   
044168 12          3971   	LD (DE),A
044169 13          3972   	INC DE
04416A C9          3973   	RET
