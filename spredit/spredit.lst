PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   
040045             0022   MAX_FRAMES:			equ 8
040045             0023   
040045             0024   COLOR_WHITE:		equ 15
040045             0025   COLOR_GREY:			equ 7
040045             0026   COLOR_BLACK:		equ 0
040045             0027   
040045             0028   TITLE_X: 	equ 17
040045             0029   TITLE_Y: 	equ 2
040045             0030   MENU_X: 	equ 13
040045             0031   MENU1_Y: 	equ 8
040045             0032   MENU2_Y: 	equ 12
040045             0033   MENU3_Y: 	equ 16
040045             0034   MENU4_Y: 	equ 20
040045             0035   MENU5_Y: 	equ 24
040045             0036   FILENAME_X: equ 7
040045             0037   FILENAME_Y: equ 24
040045             0038   
040045             0039   SPR44: 		equ 4
040045             0040   SPR88: 		equ 8
040045             0041   SPR1616: 	equ 16
040045             0042   SPR3232: 	equ 32
040045             0043   
040045             0044   SPR44_width: 	equ 32
040045             0045   SPR88_width: 	equ 16
040045             0046   SPR1616_width: 	equ 8
040045             0047   SPR3232_width: 	equ 4
040045             0048   
040045             0049   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0050   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0051   
040045             0052   HEADER_BUFFER_SIZE:		equ 16
040045             0053   
040045             0054   SLOWDOWN_DELAY:	equ 20
040045             0055   
040045             0056   KEY_SPACE: equ -99 ; draw with color
040045             0057   KEY_UP: equ -58 ; move
040045             0058   KEY_DOWN: equ -42
040045             0059   KEY_LEFT: equ -26
040045             0060   KEY_RIGHT: equ -122
040045             0061   KEY_DELETE: equ -90 ; remove color with black
040045             0062   KEY_N: equ -86 ; add a new void frame
040045             0063   KEY_C: equ -83 ; copy current frame to a new frame
040045             0064   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0065   KEY_PGUP: equ -64 ; select frame
040045             0066   KEY_PGDOWN: equ -79
040045             0067   KEY_L: equ -87 ; load sprite
040045             0068   KEY_S: equ -82 ; save sprite
040045             0069   KEY_E: equ -35 ; export sprite as assembler data
040045             0070   KEY_R: equ -52 ; rotate frame clockwise
040045             0071   KEY_F: equ -68 ; flip frame horizontally
040045             0072   KEY_M: equ -102 ; mirror frame vertically
040045             0073   KEY_ESCAPE: equ -113
040045             0074   KEY_F1: equ -114 ; select 4x4 sprite
040045             0075   KEY_F2: equ -115 ; select 8x8 sprite
040045             0076   KEY_F3: equ -116 ; select 16x16 sprite
040045             0077   KEY_F4: equ -21 ; select 32x32 sprite
040045             0078   KEY_RETURN: equ -74 ; floodfill
040045             0079   
040045             0080   ; play mode:
040045             0081   KEY_P:	equ -56 ; switch to play mode
040045             0082   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0083   
040045             0084   ; palette mode:
040045             0085   KEY_TAB: equ -97 ; switch to palette mode
040045             0086   KEY_1:	equ -49 ; red+
040045             0087   KEY_2:	equ -50 ; green+
040045             0088   KEY_3:	equ -18 ; blue+
040045             0089   KEY_4:	equ -19 ; red-
040045             0090   KEY_5:	equ -20 ; green-
040045             0091   KEY_6:	equ -53; blue-
040045             0092   KEY_7:	equ -37 ; reset color to black
040045             0093   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0094   ; KEY_S: save palette file
040045             0095   
040045             0096   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0097   MAX_PAL_DATA_HI: equ 03h
040045             0098   MAX_PAL_DATA_LO: equ 44h
040045             0099   
040045             0100   BITLOOKUP:
040045 01 02 04 08 0101   	DB 01h,02h,04h,08h
040049 10 20 40 80 0102   	DB 10h,20h,40h,80h
04004D             0103   
04004D             0104   ;======================================================================
04004D             0105   start:
04004D F5          0106   	push af
04004E C5          0107   	push bc
04004F D5          0108   	push de
040050 DD E5       0109   	push ix
040052 FD E5       0110   	push iy
040054             0111   
040054             0112   	; set mode 8 (320x240x64)
040054             0113   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0114   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0115   
04005C             0116   	; disable logical scale coordinates system
04005C             0117   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0118   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0119   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0120   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0121   
04006C             0122   	; set text colors
04006C             0123   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0124   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0125   
040074             0126   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0127   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0128   
04007C             0129   	; set graphics pen
04007C             0130   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0131   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0132   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0133   
040088             0134   	; hide cursor
040088             0135   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0136   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0137   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0138   
040094             0139   	; store coordinates
040094 DD 21 DB 17 0140   	ld ix,x1
       04          
040099 21 00 00 00 0141   	ld hl,0
04009D DD 75 00    0142   	ld (ix+0),l
0400A0 DD 74 01    0143   	ld (ix+1),h
0400A3             0144   
0400A3 DD 21 DD 17 0145   	ld ix,y1
       04          
0400A8 21 00 00 00 0146   	ld hl,0
0400AC DD 75 00    0147   	ld (ix+0),l
0400AF DD 74 01    0148   	ld (ix+1),h
0400B2             0149   
0400B2 DD 21 DF 17 0150   	ld ix,x2
       04          
0400B7 21 3F 01 00 0151   	ld hl,319
0400BB DD 75 00    0152   	ld (ix+0),l
0400BE DD 74 01    0153   	ld (ix+1),h
0400C1             0154   
0400C1 DD 21 E1 17 0155   	ld ix,y2
       04          
0400C6 21 EF 00 00 0156   	ld hl,239
0400CA DD 75 00    0157   	ld (ix+0),l
0400CD DD 74 01    0158   	ld (ix+1),h
0400D0             0159   
0400D0             0160   	; draw the border rectangle
0400D0 CD 85 0A 04 0161   	call fn_rect
0400D4             0162   
0400D4             0163   	; locate x,y
0400D4             0164   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0165   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0166   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0167   
0400E0             0168   	; print text
0400E0 21 F2 17 04 0169   	ld hl,title
0400E4 01 00 00 00 0170   	ld bc,0
0400E8 AF          0171   	xor a
0400E9 49 DF       0172   	rst.lis $18
0400EB             0173   
0400EB             0174   	; locate x,y
0400EB             0175   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0176   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0177   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0178   
0400F7             0179   	; print text
0400F7 21 FB 17 04 0180   	ld hl,menu1
0400FB 01 00 00 00 0181   	ld bc,0
0400FF AF          0182   	xor a
040100 49 DF       0183   	rst.lis $18
040102             0184   
040102             0185   	; locate x,y
040102             0186   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0187   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0188   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0189   
04010E             0190   	; print text
04010E 21 0A 18 04 0191   	ld hl,menu2
040112 01 00 00 00 0192   	ld bc,0
040116 AF          0193   	xor a
040117 49 DF       0194   	rst.lis $18
040119             0195   
040119             0196   	; locate x,y
040119             0197   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0198   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0199   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0200   
040125             0201   	; print text
040125 21 19 18 04 0202   	ld hl,menu3
040129 01 00 00 00 0203   	ld bc,0
04012D AF          0204   	xor a
04012E 49 DF       0205   	rst.lis $18
040130             0206   
040130             0207   	; locate x,y
040130             0208   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0209   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0210   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0211   
04013C             0212   	; print text
04013C 21 2A 18 04 0213   	ld hl,menu4
040140 01 00 00 00 0214   	ld bc,0
040144 AF          0215   	xor a
040145 49 DF       0216   	rst.lis $18
040147             0217   
040147             0218   ; menu loop
040147             0219   menu_loop:
040147 21 8F FF FF 0220   	ld hl,KEY_ESCAPE
04014B CD 18 17 04 0221   	call fn_inkey
04014F FE 01       0222   	CP 1
040151 CA 61 0A 04 0223   	jp z,exit_program
040155             0224   
040155 21 8E FF FF 0225   	ld hl,KEY_F1
040159 CD 18 17 04 0226   	call fn_inkey
04015D FE 01       0227   	CP 1
04015F CA 91 01 04 0228   	jp z,ml_menu1
040163             0229   
040163 21 8D FF FF 0230   	ld hl,KEY_F2
040167 CD 18 17 04 0231   	call fn_inkey
04016B FE 01       0232   	CP 1
04016D CA 97 01 04 0233   	jp z,ml_menu2
040171             0234   
040171 21 8C FF FF 0235   	ld hl,KEY_F3
040175 CD 18 17 04 0236   	call fn_inkey
040179 FE 01       0237   	CP 1
04017B CA 9D 01 04 0238   	jp z,ml_menu3
04017F             0239   
04017F 21 EB FF FF 0240   	ld hl,KEY_F4
040183 CD 18 17 04 0241   	call fn_inkey
040187 FE 01       0242   	CP 1
040189 CA A3 01 04 0243   	jp z,ml_menu4
04018D             0244   
04018D C3 47 01 04 0245   	jp menu_loop
040191             0246   
040191             0247   ml_menu1:
040191 3E 04       0248   	ld a,SPR44
040193 16 20       0249   	ld d,SPR44_width
040195 18 10       0250   	jr exit_menu_loop
040197             0251   
040197             0252   ml_menu2:
040197 3E 08       0253   	ld a,SPR88
040199 16 10       0254   	ld d,SPR88_width
04019B 18 0A       0255   	jr exit_menu_loop
04019D             0256   
04019D             0257   ml_menu3:
04019D 3E 10       0258   	ld a,SPR1616
04019F 16 08       0259   	ld d,SPR1616_width
0401A1 18 04       0260   	jr exit_menu_loop
0401A3             0261   
0401A3             0262   ml_menu4:
0401A3 3E 20       0263   	ld a,SPR3232
0401A5 16 04       0264   	ld d,SPR3232_width
0401A7             0265   
0401A7             0266   exit_menu_loop:
0401A7             0267   	; store edited sprite size
0401A7 21 F0 17 04 0268   	ld hl,spr_size
0401AB 77          0269   	ld (hl),a
0401AC 21 EF 17 04 0270   	ld hl,pixel_width
0401B0 72          0271   	ld (hl),d
0401B1             0272   
0401B1             0273   	; clear the text screen
0401B1             0274   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0275   
0401B5             0276   	; set colors count to max colors
0401B5 21 FB 18 04 0277   	ld hl,colors_count
0401B9 3E 40       0278   	ld a,MAX_COLORS
0401BB 77          0279   	ld (hl),a
0401BC             0280   
0401BC CD 52 17 04 0281   	call fn_draw_the_palette
0401C0             0282   
0401C0             0283   	; store coordinates
0401C0 DD 21 DB 17 0284   	ld ix,x1
       04          
0401C5 21 00 00 00 0285   	ld hl,0
0401C9 DD 75 00    0286   	ld (ix+0),l
0401CC DD 74 01    0287   	ld (ix+1),h
0401CF             0288   
0401CF DD 21 DD 17 0289   	ld ix,y1
       04          
0401D4 21 0B 00 00 0290   	ld hl,11
0401D8 DD 75 00    0291   	ld (ix+0),l
0401DB DD 74 01    0292   	ld (ix+1),h
0401DE             0293   
0401DE DD 21 DF 17 0294   	ld ix,x2
       04          
0401E3 21 3F 01 00 0295   	ld hl,319
0401E7 DD 75 00    0296   	ld (ix+0),l
0401EA DD 74 01    0297   	ld (ix+1),h
0401ED             0298   
0401ED DD 21 E1 17 0299   	ld ix,y2
       04          
0401F2 21 EF 00 00 0300   	ld hl,239
0401F6 DD 75 00    0301   	ld (ix+0),l
0401F9 DD 74 01    0302   	ld (ix+1),h
0401FC             0303   
0401FC             0304   	; draw the border rectangle
0401FC CD 85 0A 04 0305   	call fn_rect
040200             0306   
040200             0307   	; store edited sprite coordinates
040200 DD 21 E3 17 0308   	ld ix,xs1
       04          
040205 FD 21 DB 17 0309   	ld iy,x1
       04          
04020A DD 6E 00    0310   	ld l,(ix+0)
04020D DD 66 01    0311   	ld h,(ix+1)
040210 FD 75 00    0312   	ld (iy+0),l
040213 FD 74 01    0313   	ld (iy+1),h
040216             0314   
040216 DD 21 E5 17 0315   	ld ix,ys1
       04          
04021B FD 21 DD 17 0316   	ld iy,y1
       04          
040220 DD 6E 00    0317   	ld l,(ix+0)
040223 DD 66 01    0318   	ld h,(ix+1)
040226 FD 75 00    0319   	ld (iy+0),l
040229 FD 74 01    0320   	ld (iy+1),h
04022C             0321   
04022C DD 21 E7 17 0322   	ld ix,xs2
       04          
040231 FD 21 DF 17 0323   	ld iy,x2
       04          
040236 DD 6E 00    0324   	ld l,(ix+0)
040239 DD 66 01    0325   	ld h,(ix+1)
04023C FD 75 00    0326   	ld (iy+0),l
04023F FD 74 01    0327   	ld (iy+1),h
040242             0328   
040242 DD 21 E9 17 0329   	ld ix,ys2
       04          
040247 FD 21 E1 17 0330   	ld iy,y2
       04          
04024C DD 6E 00    0331   	ld l,(ix+0)
04024F DD 66 01    0332   	ld h,(ix+1)
040252 FD 75 00    0333   	ld (iy+0),l
040255 FD 74 01    0334   	ld (iy+1),h
040258             0335   
040258             0336   	; draw the sprite's border rectangle
040258 CD 85 0A 04 0337   	call fn_rect
04025C             0338   
04025C             0339   	; update sprite size descriptions
04025C CD B4 16 04 0340   	call fn_show_spr_descr
040260             0341   
040260             0342   ; initialize sprite vars
040260             0343   init_sprite_vars:
040260             0344   	; initialize coordinates before drawing the sprite
040260 DD 21 EB 17 0345   	ld ix,xpix
       04          
040265 AF          0346   	xor a
040266 DD 77 00    0347   	ld (ix+0),a ; xpix = 0
040269 DD 77 01    0348   	ld (ix+1),a	; ypix = 0
04026C DD 21 F1 17 0349   	ld ix,current_pen
       04          
040271 3E 0F       0350   	ld a,COLOR_WHITE
040273 DD 77 00    0351   	ld (ix+0),a ; current pen -> white
040276             0352   
040276             0353   	; set vars
040276 21 00 19 04 0354   	ld hl,current_frame
04027A AF          0355   	xor a
04027B 77          0356   	ld (hl),a
04027C 3C          0357   	inc a
04027D 21 01 19 04 0358   	ld hl,frames_count
040281 77          0359   	ld (hl),a
040282             0360   
040282             0361   	; fill buffers with zeros
040282 01 00 20 00 0362   	ld bc,BUFFER_SIZE
040286 21 09 19 04 0363   	ld hl,sprite_buffer
04028A             0364   
04028A             0365   isv_fill_loop:
04028A AF          0366   	xor a
04028B 77          0367   	ld (hl),a
04028C 0B          0368   	dec bc
04028D 23          0369   	inc hl
04028E 78          0370   	ld a,b
04028F B1          0371   	or c
040290 FE 00       0372   	cp 0
040292 20 F6       0373   	jr nz,isv_fill_loop
040294             0374   
040294             0375   ; draw the pixel with a border
040294 CD 12 0C 04 0376   	call fn_draw_pixel_with_border
040298             0377   
040298             0378   ; draw sprite loop
040298             0379   draw_sprite_loop:
040298 21 9D FF FF 0380   	ld hl,KEY_SPACE
04029C CD 18 17 04 0381   	call fn_inkey
0402A0 FE 01       0382   	cp 1
0402A2 CC B4 03 04 0383   	call z,dsl_set_pen
0402A6             0384   
0402A6 21 C6 FF FF 0385   	ld hl,KEY_UP
0402AA CD 18 17 04 0386   	call fn_inkey
0402AE FE 01       0387   	cp 1
0402B0 CC D9 03 04 0388   	call z,dsl_up
0402B4             0389   
0402B4 21 D6 FF FF 0390   	ld hl,KEY_DOWN
0402B8 CD 18 17 04 0391   	call fn_inkey
0402BC FE 01       0392   	cp 1
0402BE CC 00 04 04 0393   	call z,dsl_down
0402C2             0394   
0402C2 21 E6 FF FF 0395   	ld hl,KEY_LEFT
0402C6 CD 18 17 04 0396   	call fn_inkey
0402CA FE 01       0397   	cp 1
0402CC CC 2C 04 04 0398   	call z,dsl_left
0402D0             0399   
0402D0 21 86 FF FF 0400   	ld hl,KEY_RIGHT
0402D4 CD 18 17 04 0401   	call fn_inkey
0402D8 FE 01       0402   	cp 1
0402DA CC 53 04 04 0403   	call z,dsl_right
0402DE             0404   
0402DE 21 A6 FF FF 0405   	ld hl,KEY_DELETE
0402E2 CD 18 17 04 0406   	call fn_inkey
0402E6 FE 01       0407   	cp 1
0402E8 CC C8 03 04 0408   	call z,dsl_reset_pen
0402EC             0409   
0402EC 21 9F FF FF 0410   	ld hl,KEY_TAB
0402F0 CD 18 17 04 0411   	call fn_inkey
0402F4 FE 01       0412   	cp 1
0402F6 CA 2B 09 04 0413   	jp z,dsl_palette_tool
0402FA             0414   
0402FA 21 AA FF FF 0415   	ld hl,KEY_N
0402FE CD 18 17 04 0416   	call fn_inkey
040302 FE 01       0417   	cp 1
040304 CC D2 04 04 0418   	call z,dsl_add_frame
040308             0419   
040308 21 AD FF FF 0420   	ld hl,KEY_C
04030C CD 18 17 04 0421   	call fn_inkey
040310 FE 01       0422   	cp 1
040312 CC 69 05 04 0423   	call z,dsl_add_and_copy_frame
040316             0424   
040316 21 D0 FF FF 0425   	ld hl,KEY_BACKSPACE
04031A CD 18 17 04 0426   	call fn_inkey
04031E FE 01       0427   	cp 1
040320 CC D0 05 04 0428   	call z,dsl_delete_frame
040324             0429   
040324 21 C0 FF FF 0430   	ld hl,KEY_PGUP
040328 CD 18 17 04 0431   	call fn_inkey
04032C FE 01       0432   	cp 1
04032E CC C9 06 04 0433   	call z,dsl_next_frame
040332             0434   
040332 21 B1 FF FF 0435   	ld hl,KEY_PGDOWN
040336 CD 18 17 04 0436   	call fn_inkey
04033A FE 01       0437   	cp 1
04033C CC AA 06 04 0438   	call z,dsl_previous_frame
040340             0439   
040340 21 A9 FF FF 0440   	ld hl,KEY_L
040344 CD 18 17 04 0441   	call fn_inkey
040348 FE 01       0442   	cp 1
04034A CC 7F 04 04 0443   	call z,dsl_load_sprite
04034E             0444   
04034E 21 AE FF FF 0445   	ld hl,KEY_S
040352 CD 18 17 04 0446   	call fn_inkey
040356 FE 01       0447   	cp 1
040358 CC A0 04 04 0448   	call z,dsl_save_sprite
04035C             0449   
04035C 21 DD FF FF 0450   	ld hl,KEY_E
040360 CD 18 17 04 0451   	call fn_inkey
040364 FE 01       0452   	cp 1
040366 CC B9 04 04 0453   	call z,dsl_export_sprite
04036A             0454   
04036A 21 CC FF FF 0455   	ld hl,KEY_R
04036E CD 18 17 04 0456   	call fn_inkey
040372 FE 01       0457   	cp 1
040374 CC EF 06 04 0458   	call z,dsl_rotate_frame
040378             0459   
040378 21 BC FF FF 0460   	ld hl,KEY_F
04037C CD 18 17 04 0461   	call fn_inkey
040380 FE 01       0462   	cp 1
040382 CC A4 07 04 0463   	call z,dsl_flip_frame
040386             0464   
040386 21 9A FF FF 0465   	ld hl,KEY_M
04038A CD 18 17 04 0466   	call fn_inkey
04038E FE 01       0467   	cp 1
040390 CC 0B 08 04 0468   	call z,dsl_mirror_frame
040394             0469   
040394 21 B6 FF FF 0470   	ld hl,KEY_RETURN
040398 CD 18 17 04 0471   	call fn_inkey
04039C FE 01       0472   	cp 1
04039E CC 8B 08 04 0473   	call z,dsl_flood_fill
0403A2             0474   
0403A2 21 8F FF FF 0475   	ld hl,KEY_ESCAPE
0403A6 CD 18 17 04 0476   	call fn_inkey
0403AA FE 01       0477   	cp 1
0403AC CA 61 0A 04 0478   	jp z,exit_program
0403B0             0479   
0403B0 C3 98 02 04 0480   	jp draw_sprite_loop
0403B4             0481   
0403B4             0482   ; set the pen of the current pixel
0403B4             0483   dsl_set_pen:
0403B4 CD 3C 0C 04 0484   	call fn_get_pixel_color
0403B8 21 F1 17 04 0485   	ld hl,current_pen
0403BC BE          0486   	cp (hl)
0403BD C8          0487   	ret z
0403BE 7E          0488   	ld a,(hl)
0403BF CD 7E 0C 04 0489   	call fn_set_pixel_color
0403C3 CD 12 0C 04 0490   	call fn_draw_pixel_with_border
0403C7 C9          0491   	ret
0403C8             0492   
0403C8             0493   ; reset the pen of the current pixel
0403C8             0494   dsl_reset_pen:
0403C8 CD 3C 0C 04 0495   	call fn_get_pixel_color
0403CC FE 00       0496   	cp 0
0403CE C8          0497   	ret z
0403CF AF          0498   	xor a
0403D0 CD 7E 0C 04 0499   	call fn_set_pixel_color
0403D4 CD 12 0C 04 0500   	call fn_draw_pixel_with_border
0403D8 C9          0501   	ret
0403D9             0502   
0403D9             0503   ; move pixel up
0403D9             0504   dsl_up:
0403D9 21 EC 17 04 0505   	ld hl,ypix
0403DD 7E          0506   	ld a,(hl)
0403DE FE 00       0507   	cp 0
0403E0 C8          0508   	ret z
0403E1             0509   
0403E1 21 9D FF FF 0510   	ld hl,KEY_SPACE
0403E5 CD 18 17 04 0511   	call fn_inkey
0403E9 FE 01       0512   	cp 1
0403EB CC B4 03 04 0513   	call z,dsl_set_pen
0403EF             0514   
0403EF CD 26 0C 04 0515   	call fn_draw_pixel_without_border
0403F3 CD C2 0C 04 0516   	call fn_move_up
0403F7 CD 12 0C 04 0517   	call fn_draw_pixel_with_border
0403FB CD 93 16 04 0518   	call fn_slowdown
0403FF C9          0519   	ret
040400             0520   
040400             0521   ; move pixel down
040400             0522   dsl_down:
040400 21 F0 17 04 0523   	ld hl,spr_size
040404 56          0524   	ld d,(hl)
040405 15          0525   	dec d
040406             0526   
040406 21 EC 17 04 0527   	ld hl,ypix
04040A 7E          0528   	ld a,(hl)
04040B BA          0529   	cp d
04040C C8          0530   	ret z
04040D             0531   
04040D 21 9D FF FF 0532   	ld hl,KEY_SPACE
040411 CD 18 17 04 0533   	call fn_inkey
040415 FE 01       0534   	cp 1
040417 CC B4 03 04 0535   	call z,dsl_set_pen
04041B             0536   
04041B CD 26 0C 04 0537   	call fn_draw_pixel_without_border
04041F CD C8 0C 04 0538   	call fn_move_down
040423 CD 12 0C 04 0539   	call fn_draw_pixel_with_border
040427 CD 93 16 04 0540   	call fn_slowdown
04042B C9          0541   	ret
04042C             0542   
04042C             0543   ; move pixel left
04042C             0544   dsl_left:
04042C 21 EB 17 04 0545   	ld hl,xpix
040430 7E          0546   	ld a,(hl)
040431 FE 00       0547   	cp 0
040433 C8          0548   	ret z
040434             0549   
040434 21 9D FF FF 0550   	ld hl,KEY_SPACE
040438 CD 18 17 04 0551   	call fn_inkey
04043C FE 01       0552   	cp 1
04043E CC B4 03 04 0553   	call z,dsl_set_pen
040442             0554   
040442 CD 26 0C 04 0555   	call fn_draw_pixel_without_border
040446 CD CE 0C 04 0556   	call fn_move_left
04044A CD 12 0C 04 0557   	call fn_draw_pixel_with_border
04044E CD 93 16 04 0558   	call fn_slowdown
040452 C9          0559   	ret
040453             0560   
040453             0561   ; move pixel right
040453             0562   dsl_right:
040453 21 F0 17 04 0563   	ld hl,spr_size
040457 56          0564   	ld d,(hl)
040458 15          0565   	dec d
040459             0566   
040459 21 EB 17 04 0567   	ld hl,xpix
04045D 7E          0568   	ld a,(hl)
04045E BA          0569   	cp d
04045F C8          0570   	ret z
040460             0571   
040460 21 9D FF FF 0572   	ld hl,KEY_SPACE
040464 CD 18 17 04 0573   	call fn_inkey
040468 FE 01       0574   	cp 1
04046A CC B4 03 04 0575   	call z,dsl_set_pen
04046E             0576   
04046E CD 26 0C 04 0577   	call fn_draw_pixel_without_border
040472 CD D4 0C 04 0578   	call fn_move_right
040476 CD 12 0C 04 0579   	call fn_draw_pixel_with_border
04047A CD 93 16 04 0580   	call fn_slowdown
04047E C9          0581   	ret
04047F             0582   
04047F             0583   ; load a sprite
04047F             0584   dsl_load_sprite:
04047F 21 A9 FF FF 0585   	ld hl,KEY_L
040483 CD 18 17 04 0586   	call fn_inkey
040487 FE 00       0587   	cp 0
040489 20 F4       0588   	jr nz,dsl_load_sprite
04048B             0589   
04048B CD 26 0C 04 0590   	call fn_draw_pixel_without_border
04048F CD BF 11 04 0591   	call fn_load_sprite
040493 CD 0A 16 04 0592   	call fn_refresh_sprite
040497 CD 12 0C 04 0593   	call fn_draw_pixel_with_border
04049B CD 4A 16 04 0594   	call fn_change_frame
04049F C9          0595   	ret
0404A0             0596   
0404A0             0597   ; save a sprite
0404A0             0598   dsl_save_sprite:
0404A0 21 AE FF FF 0599   	ld hl,KEY_S
0404A4 CD 18 17 04 0600   	call fn_inkey
0404A8 FE 00       0601   	cp 0
0404AA 20 F4       0602   	jr nz,dsl_save_sprite
0404AC             0603   
0404AC CD 26 0C 04 0604   	call fn_draw_pixel_without_border
0404B0 CD E8 12 04 0605   	call fn_save_sprite
0404B4 CD 0A 16 04 0606   	call fn_refresh_sprite
0404B8 C9          0607   	ret
0404B9             0608   
0404B9             0609   dsl_export_sprite:
0404B9 21 DD FF FF 0610   	ld hl,KEY_E
0404BD CD 18 17 04 0611   	call fn_inkey
0404C1 FE 00       0612   	cp 0
0404C3 20 F4       0613   	jr nz,dsl_export_sprite
0404C5             0614   
0404C5 CD 26 0C 04 0615   	call fn_draw_pixel_without_border
0404C9 CD E7 13 04 0616   	call fn_export_sprite
0404CD CD 0A 16 04 0617   	call fn_refresh_sprite
0404D1 C9          0618   	ret
0404D2             0619   
0404D2             0620   
0404D2             0621   ; add a frame to the animation
0404D2             0622   dsl_add_frame:
0404D2 21 AA FF FF 0623   	ld hl,KEY_N
0404D6 CD 18 17 04 0624   	call fn_inkey
0404DA FE 00       0625   	cp 0
0404DC 20 F4       0626   	jr nz,dsl_add_frame
0404DE             0627   
0404DE             0628   	; frames limit reached ? exit
0404DE 21 01 19 04 0629   	ld hl,frames_count
0404E2 7E          0630   	ld a,(hl)
0404E3 FE 08       0631   	cp MAX_FRAMES
0404E5 C8          0632   	ret z
0404E6             0633   
0404E6             0634   	; get the number of frames to copy
0404E6 21 01 19 04 0635   	ld hl,frames_count
0404EA 7E          0636   	ld a,(hl)
0404EB 21 00 19 04 0637   	ld hl,current_frame
0404EF 46          0638   	ld b,(hl)
0404F0 90          0639   	sub b
0404F1 3D          0640   	dec a
0404F2             0641   
0404F2             0642   	; get sprsize² (length of a sprite, in bytes)
0404F2 21 F0 17 04 0643   	ld hl,spr_size
0404F6 11 00 00 00 0644   	ld de,$000000
0404FA 5E          0645   	ld e,(hl)
0404FB 56          0646   	ld d,(hl)
0404FC ED 5C       0647   	mlt de ; DE = sprsize²
0404FE             0648   
0404FE             0649   	; prepare for the case we goto af_zap...
0404FE 21 09 19 04 0650   	ld hl,sprite_buffer
040502             0651   
040502 F5          0652   	push af
040503 E5          0653   	push hl
040504 21 00 19 04 0654   	ld hl,current_frame
040508 7E          0655   	ld a,(hl)
040509 3C          0656   	inc a
04050A 47          0657   	ld b,a
04050B E1          0658   	pop hl
04050C F1          0659   	pop af
04050D             0660   
04050D             0661   af_loop0:
04050D 19          0662   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050E 10 FD       0663   	djnz af_loop0
040510             0664   
040510 E5          0665   	push hl ; store HL = sprite buffer + sprsize²
040511 FE 00       0666   	cp 0
040513 CA 3B 05 04 0667   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040517 E1          0668   	pop hl ; HL unused in this case
040518             0669   
040518 21 00 00 00 0670   	ld hl,$000000 ; HL is 0 to store the result
04051C 47          0671   	ld b,a ; B = frames to copy
04051D             0672   
04051D             0673   ; multiply number of frames to copy by sprsize²
04051D             0674   af_loop1:
04051D 19          0675   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051E 10 FD       0676   	djnz af_loop1
040520             0677   
040520 E5          0678   	push hl
040521 C1          0679   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
040522             0680   
040522 21 00 19 04 0681   	ld hl,current_frame
040526 7E          0682   	ld a,(hl)
040527 3C          0683   	inc a
040528 21 09 19 04 0684   	ld hl,sprite_buffer
04052C             0685   
04052C C5          0686   	push bc
04052D 47          0687   	ld b,a
04052E             0688   
04052E             0689   af_loop2:
04052E 19          0690   	add hl,de ; HL = sprite buffer + length to copy
04052F 10 FD       0691   	djnz af_loop2
040531             0692   
040531 C1          0693   	pop bc
040532             0694   
040532 E5          0695   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
040533             0696   
040533 09          0697   	add hl,bc
040534 2B          0698   	dec hl ; HL = end address to copy to end target address
040535             0699   
040535 E5          0700   	push hl
040536 19          0701   	add hl,de
040537 EB          0702   	ex de,hl ; DE = end target address
040538 E1          0703   	pop hl
040539             0704   
040539 ED B8       0705   	lddr
04053B             0706   
04053B             0707   af_zap:
04053B             0708   	; multiply number of frames to copy by sprsize²
04053B 21 F0 17 04 0709   	ld hl,spr_size
04053F 01 00 00 00 0710   	ld bc,$000000
040543 4E          0711   	ld c,(hl)
040544 46          0712   	ld b,(hl)
040545 ED 4C       0713   	mlt bc ; BC = sprsize²
040547             0714   
040547 E1          0715   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040548             0716   
040548             0717   ; fill frame with 0 color
040548             0718   af_loop3:
040548 AF          0719   	xor a
040549 77          0720   	ld (hl),a
04054A 23          0721   	inc hl
04054B 0B          0722   	dec bc
04054C 78          0723   	ld a,b
04054D B1          0724   	or c
04054E FE 00       0725   	cp 0
040550 20 F6       0726   	jr nz,af_loop3
040552             0727   
040552             0728   	; increment the frames count and the current frame values
040552 21 01 19 04 0729   	ld hl,frames_count
040556 34          0730   	inc (hl)
040557 21 00 19 04 0731   	ld hl,current_frame
04055B 34          0732   	inc (hl)
04055C             0733   
04055C CD 4A 16 04 0734   	call fn_change_frame
040560 CD 6F 16 04 0735   	call fn_change_frames_count
040564 CD 0A 16 04 0736   	call fn_refresh_sprite
040568 C9          0737   	ret
040569             0738   
040569             0739   ; add a copy of the current frame to the animation
040569             0740   dsl_add_and_copy_frame: ; TODO! debug me!
040569 21 AD FF FF 0741   	ld hl,KEY_C
04056D CD 18 17 04 0742   	call fn_inkey
040571 FE 00       0743   	cp 0
040573 20 F4       0744   	jr nz,dsl_add_and_copy_frame
040575             0745   
040575             0746   	; frames limit reached ? exit
040575 21 01 19 04 0747   	ld hl,frames_count
040579 7E          0748   	ld a,(hl)
04057A FE 08       0749   	cp MAX_FRAMES
04057C C8          0750   	ret z
04057D             0751   
04057D             0752   	; get the number of frames to copy
04057D 21 01 19 04 0753   	ld hl,frames_count
040581 7E          0754   	ld a,(hl)
040582 21 00 19 04 0755   	ld hl,current_frame
040586 46          0756   	ld b,(hl)
040587 90          0757   	sub b
040588             0758   
040588             0759   	; get sprsize² (length of a sprite, in bytes)
040588 21 F0 17 04 0760   	ld hl,spr_size
04058C 11 00 00 00 0761   	ld de,$000000
040590 5E          0762   	ld e,(hl)
040591 56          0763   	ld d,(hl)
040592 ED 5C       0764   	mlt de ; DE = sprsize²
040594             0765   
040594 21 00 00 00 0766   	ld hl,$000000 ; HL is 0 to store the result
040598 47          0767   	ld b,a ; B = frames to copy
040599             0768   
040599             0769   ; multiply number of frames to copy by sprsize²
040599             0770   aacf_loop1:
040599 19          0771   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04059A 10 FD       0772   	djnz aacf_loop1
04059C             0773   
04059C E5          0774   	push hl
04059D C1          0775   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059E             0776   
04059E 21 00 19 04 0777   	ld hl,current_frame
0405A2 7E          0778   	ld a,(hl)
0405A3 21 09 19 04 0779   	ld hl,sprite_buffer
0405A7 FE 00       0780   	cp 0
0405A9 28 06       0781   	jr z,aacf_loop_end2
0405AB             0782   
0405AB C5          0783   	push bc
0405AC 47          0784   	ld b,a
0405AD             0785   
0405AD             0786   aacf_loop2:
0405AD 19          0787   	add hl,de ; HL = sprite buffer + length to copy
0405AE 10 FD       0788   	djnz aacf_loop2
0405B0             0789   
0405B0 C1          0790   	pop bc
0405B1             0791   
0405B1             0792   aacf_loop_end2:
0405B1 09          0793   	add hl,bc
0405B2 2B          0794   	dec hl ; HL = end address to copy to end target address
0405B3             0795   
0405B3 E5          0796   	push hl
0405B4 19          0797   	add hl,de
0405B5 EB          0798   	ex de,hl ; DE = end target address
0405B6 E1          0799   	pop hl
0405B7             0800   
0405B7 ED B8       0801   	lddr
0405B9             0802   
0405B9             0803   	; increment the frames count and the current frame values
0405B9 21 01 19 04 0804   	ld hl,frames_count
0405BD 34          0805   	inc (hl)
0405BE 21 00 19 04 0806   	ld hl,current_frame
0405C2 34          0807   	inc (hl)
0405C3             0808   
0405C3 CD 4A 16 04 0809   	call fn_change_frame
0405C7 CD 6F 16 04 0810   	call fn_change_frames_count
0405CB CD 0A 16 04 0811   	call fn_refresh_sprite
0405CF C9          0812   	ret
0405D0             0813   
0405D0             0814   ; delete last frame from animation
0405D0             0815   dsl_delete_frame:
0405D0 21 D0 FF FF 0816   	ld hl,KEY_BACKSPACE
0405D4 CD 18 17 04 0817   	call fn_inkey
0405D8 FE 00       0818   	cp 0
0405DA 20 F4       0819   	jr nz,dsl_delete_frame
0405DC             0820   
0405DC             0821   	; delete current selected frame
0405DC 21 F0 17 04 0822   	ld hl,spr_size
0405E0 01 00 00 00 0823   	ld bc,$000000
0405E4 4E          0824   	ld c,(hl)
0405E5 46          0825   	ld b,(hl)
0405E6 ED 4C       0826   	mlt bc ; BC = sprsize²
0405E8 21 00 19 04 0827   	ld hl,current_frame
0405EC 7E          0828   	ld a,(hl) ; A = current frame
0405ED 21 09 19 04 0829   	ld hl,sprite_buffer ; HL = sprite buffer
0405F1 C5          0830   	push bc
0405F2 FE 00       0831   	cp 0
0405F4 28 06       0832   	jr z,df_loop2
0405F6             0833   
0405F6             0834   df_loop1:
0405F6 09          0835   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F7 3D          0836   	dec a
0405F8 FE 00       0837   	cp 0
0405FA 20 FA       0838   	jr nz,df_loop1
0405FC             0839   
0405FC             0840   ; clear the current frame
0405FC             0841   df_loop2:
0405FC AF          0842   	xor a
0405FD 77          0843   	ld (hl),a
0405FE 23          0844   	inc hl
0405FF 0B          0845   	dec bc
040600 78          0846   	ld a,b
040601 B1          0847   	or c
040602 FE 00       0848   	cp 0
040604 20 F6       0849   	jr nz,df_loop2
040606             0850   
040606             0851   	; current frame + 1 = frames count ?
040606 E5          0852   	push hl
040607 21 00 19 04 0853   	ld hl,current_frame
04060B 5E          0854   	ld e,(hl)
04060C 1C          0855   	inc e
04060D 21 01 19 04 0856   	ld hl,frames_count
040611 7E          0857   	ld a,(hl)
040612 BB          0858   	cp e
040613 E1          0859   	pop hl
040614 C1          0860   	pop bc
040615 CA 8E 06 04 0861   	jp z,df_exit
040619             0862   
040619 11 01 19 04 0863   	ld de,frames_count
04061D 1A          0864   	ld a,(de) ; A = frames count
04061E E5          0865   	push hl
04061F 21 00 19 04 0866   	ld hl,current_frame
040623 5E          0867   	ld e,(hl) ; E = current frame
040624 E1          0868   	pop hl
040625 93          0869   	sub e
040626 3D          0870   	dec a ; A = number of frames to copy back
040627             0871   
040627 EB          0872   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040628 21 00 00 00 0873   	ld hl,$000000
04062C FE 00       0874   	cp 0 ; 0 frames to copy ?
04062E 28 06       0875   	jr z,df_exit_loop3
040630             0876   
040630             0877   df_loop3:
040630 09          0878   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
040631 3D          0879   	dec a
040632 FE 00       0880   	cp 0
040634 20 FA       0881   	jr nz,df_loop3
040636             0882   
040636             0883   df_exit_loop3:
040636 E5          0884   	push hl
040637 C1          0885   	pop bc ; BC = total length of area to copy
040638 D5          0886   	push de
040639 E1          0887   	pop hl ; HL = DE = start of area to copy
04063A             0888   
04063A C5          0889   	push bc
04063B D5          0890   	push de
04063C E5          0891   	push hl
04063D 21 F0 17 04 0892   	ld hl,spr_size
040641 11 00 00 00 0893   	ld de,$000000
040645 5E          0894   	ld e,(hl)
040646 56          0895   	ld d,(hl)
040647 ED 5C       0896   	mlt de ; DE = one sprite frame length
040649 E1          0897   	pop hl
04064A B7          0898   	or a
04064B ED 52       0899   	sbc hl,de ; HL = target area to copy
04064D D1          0900   	pop de
04064E EB          0901   	ex de,hl ; DE = target, HL = start
04064F C1          0902   	pop bc
040650 ED B0       0903   	ldir
040652             0904   
040652 21 F0 17 04 0905   	ld hl,spr_size
040656 01 00 00 00 0906   	ld bc,$000000
04065A 4E          0907   	ld c,(hl)
04065B 46          0908   	ld b,(hl)
04065C ED 4C       0909   	mlt bc ; DE = one sprite frame length
04065E             0910   
04065E             0911   	; delete last frame data
04065E 21 01 19 04 0912   	ld hl,frames_count
040662 7E          0913   	ld a,(hl) ; A =frames count
040663 3D          0914   	dec a ; A = last frame
040664 21 09 19 04 0915   	ld hl,sprite_buffer ; HL = sprite buffer
040668 FE 00       0916   	cp 0
04066A 28 06       0917   	jr z,df_loop5
04066C             0918   
04066C             0919   df_loop4:
04066C 09          0920   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
04066D 3D          0921   	dec a
04066E FE 00       0922   	cp 0
040670 20 FA       0923   	jr nz,df_loop4
040672             0924   
040672             0925   ; clear the current frame
040672             0926   df_loop5:
040672 AF          0927   	xor a
040673 77          0928   	ld (hl),a
040674 23          0929   	inc hl
040675 0B          0930   	dec bc
040676 78          0931   	ld a,b
040677 B1          0932   	or c
040678 FE 00       0933   	cp 0
04067A 20 F6       0934   	jr nz,df_loop5
04067C             0935   
04067C             0936   	; decrement frames count
04067C 21 01 19 04 0937   	ld hl,frames_count
040680 35          0938   	dec (hl)
040681             0939   
040681 CD 4A 16 04 0940   	call fn_change_frame
040685 CD 6F 16 04 0941   	call fn_change_frames_count
040689 CD 0A 16 04 0942   	call fn_refresh_sprite
04068D C9          0943   	ret
04068E             0944   
04068E             0945   df_exit:
04068E 21 01 19 04 0946   	ld hl,frames_count
040692 7E          0947   	ld a,(hl)
040693 FE 01       0948   	cp 1
040695 28 06       0949   	jr z,df_exit_end
040697 35          0950   	dec (hl)
040698 21 00 19 04 0951   	ld hl,current_frame
04069C 35          0952   	dec (hl)
04069D             0953   
04069D             0954   df_exit_end:
04069D CD 4A 16 04 0955   	call fn_change_frame
0406A1 CD 6F 16 04 0956   	call fn_change_frames_count
0406A5 CD 0A 16 04 0957   	call fn_refresh_sprite
0406A9 C9          0958   	ret
0406AA             0959   
0406AA             0960   ; goto previous frame
0406AA             0961   dsl_previous_frame:
0406AA 21 B1 FF FF 0962   	ld hl,KEY_PGDOWN
0406AE CD 18 17 04 0963   	call fn_inkey
0406B2 FE 00       0964   	cp 0
0406B4 20 F4       0965   	jr nz,dsl_previous_frame
0406B6             0966   
0406B6 21 00 19 04 0967   	ld hl,current_frame
0406BA 7E          0968   	ld a,(hl)
0406BB FE 00       0969   	cp 0
0406BD C8          0970   	ret z
0406BE             0971   
0406BE 3D          0972   	dec a
0406BF 77          0973   	ld (hl),a
0406C0 CD 4A 16 04 0974   	call fn_change_frame
0406C4 CD 0A 16 04 0975   	call fn_refresh_sprite
0406C8 C9          0976   	ret
0406C9             0977   
0406C9             0978   ; goto next frame
0406C9             0979   dsl_next_frame:
0406C9 21 C0 FF FF 0980   	ld hl,KEY_PGUP
0406CD CD 18 17 04 0981   	call fn_inkey
0406D1 FE 00       0982   	cp 0
0406D3 20 F4       0983   	jr nz,dsl_next_frame
0406D5             0984   
0406D5 21 00 19 04 0985   	ld hl,current_frame
0406D9 7E          0986   	ld a,(hl)
0406DA 3C          0987   	inc a
0406DB 21 01 19 04 0988   	ld hl,frames_count
0406DF BE          0989   	cp (hl)
0406E0 C8          0990   	ret z
0406E1             0991   
0406E1 21 00 19 04 0992   	ld hl,current_frame
0406E5 77          0993   	ld (hl),a
0406E6 CD 4A 16 04 0994   	call fn_change_frame
0406EA CD 0A 16 04 0995   	call fn_refresh_sprite
0406EE C9          0996   	ret
0406EF             0997   
0406EF             0998   ; rotate a frame 90° clockwise
0406EF             0999   dsl_rotate_frame:
0406EF 21 CC FF FF 1000   	ld hl,KEY_R
0406F3 CD 18 17 04 1001   	call fn_inkey
0406F7 FE 00       1002   	cp 0
0406F9 20 F4       1003   	jr nz,dsl_rotate_frame
0406FB             1004   
0406FB             1005   	; find HL as start of the first frame (buffer)
0406FB 21 F0 17 04 1006   	ld hl,spr_size
0406FF 01 00 00 00 1007   	ld bc,$000000
040703 11 00 00 00 1008   	ld de,$000000
040707 5E          1009   	ld e,(hl)
040708 56          1010   	ld d,(hl)
040709 4B          1011   	ld c,e
04070A ED 5C       1012   	mlt de ; DE = sprite length in bytes
04070C 21 00 19 04 1013   	ld hl,current_frame
040710 7E          1014   	ld a,(hl) ; A = current frame
040711 21 09 19 04 1015   	ld hl,sprite_buffer
040715 FE 00       1016   	cp 0
040717 28 04       1017   	jr z,rf_noloop1
040719 47          1018   	ld b,a
04071A             1019   
04071A             1020   rf_loop1:
04071A 19          1021   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
04071B 10 FD       1022   	djnz rf_loop1
04071D             1023   
04071D             1024   rf_noloop1:
04071D C5          1025   	push bc
04071E E5          1026   	push hl
04071F             1027   
04071F             1028   	; copy current frame to swap sprite buffer
04071F 11 75 3C 04 1029   	ld de,swap_sprite_buffer
040723 41          1030   	ld b,c
040724 ED 4C       1031   	mlt bc
040726 ED B0       1032   	ldir
040728             1033   
040728 FD E1       1034   	pop iy ; IY: destination
04072A C1          1035   	pop bc
04072B             1036   
04072B 79          1037   	ld a,c
04072C 01 00 00 00 1038   	ld bc,$000000
040730 4F          1039   	ld c,a ; BC = sprite size
040731             1040   
040731             1041   	; turn and copy swap sprite buffer frame to sprite buffer
040731 DD 21 75 3C 1042   	ld ix,swap_sprite_buffer ; IX: source
       04          
040736 11 00 00 00 1043   	ld de,0 ; x
04073A 21 00 00 00 1044   	ld hl,0 ; y
04073E             1045   
04073E             1046   rf_loop2:
04073E DD E5       1047   	push ix
040740 FD E5       1048   	push iy
040742             1049   
040742 D5          1050   	push de
040743 E5          1051   	push hl
040744             1052   
040744             1053   	; add x
040744 DD 19       1054   	add ix,de
040746             1055   
040746             1056   	; add y * width
040746 7C          1057   	ld a,h
040747 B5          1058   	or l
040748 FE 00       1059   	cp 0
04074A 28 09       1060   	jr z,rf_done1
04074C             1061   rf_loop3:
04074C DD 09       1062   	add ix,bc
04074E 2B          1063   	dec hl
04074F 7C          1064   	ld a,h
040750 B5          1065   	or l
040751 FE 00       1066   	cp 0
040753 20 F7       1067   	jr nz,rf_loop3
040755             1068   
040755             1069   rf_done1:
040755             1070   	; found the pixel value
040755 DD 7E 00    1071   	ld a,(ix+0)
040758             1072   
040758 E1          1073   	pop hl
040759 D1          1074   	pop de
04075A D5          1075   	push de
04075B E5          1076   	push hl
04075C             1077   
04075C             1078   	; add y
04075C EB          1079   	ex de,hl
04075D FD 09       1080   	add iy,bc
04075F B7          1081   	or a
040760 E5          1082   	push hl
040761 FD E5       1083   	push iy
040763 E1          1084   	pop hl
040764 ED 52       1085   	sbc hl,de
040766 E5          1086   	push hl
040767 FD E1       1087   	pop iy
040769 FD 2B       1088   	dec iy
04076B E1          1089   	pop hl
04076C EB          1090   	ex de,hl
04076D             1091   
04076D             1092   	; add x * width
04076D F5          1093   	push af
04076E 7A          1094   	ld a,d
04076F B3          1095   	or e
040770 FE 00       1096   	cp 0
040772 28 09       1097   	jr z,rf_done2
040774             1098   rf_loop5:
040774 FD 09       1099   	add iy,bc
040776 1B          1100   	dec de
040777 7A          1101   	ld a,d
040778 B3          1102   	or e
040779 FE 00       1103   	cp 0
04077B 20 F7       1104   	jr nz,rf_loop5
04077D             1105   
04077D             1106   rf_done2:
04077D F1          1107   	pop af
04077E             1108   
04077E             1109   	; store the pixel value
04077E FD 77 00    1110   	ld (iy+0),a
040781             1111   
040781 E1          1112   	pop hl
040782 D1          1113   	pop de
040783             1114   
040783 FD E1       1115   	pop iy
040785 DD E1       1116   	pop ix
040787             1117   
040787 13          1118   	inc de
040788 EB          1119   	ex de,hl
040789 B7          1120   	or a
04078A ED 42       1121   	sbc hl,bc
04078C 09          1122   	add hl,bc
04078D EB          1123   	ex de,hl
04078E DA 3E 07 04 1124   	jp c,rf_loop2
040792             1125   
040792 11 00 00 00 1126   	ld de,0
040796 23          1127   	inc hl
040797 B7          1128   	or a
040798 ED 42       1129   	sbc hl,bc
04079A 09          1130   	add hl,bc
04079B DA 3E 07 04 1131   	jp c,rf_loop2
04079F             1132   
04079F CD 0A 16 04 1133   	call fn_refresh_sprite
0407A3 C9          1134   	ret
0407A4             1135   
0407A4             1136   ; flip frame horizontally
0407A4             1137   dsl_flip_frame:
0407A4 21 BC FF FF 1138   	ld hl,KEY_F
0407A8 CD 18 17 04 1139   	call fn_inkey
0407AC FE 00       1140   	cp 0
0407AE 20 F4       1141   	jr nz,dsl_flip_frame
0407B0             1142   
0407B0 21 F0 17 04 1143   	ld hl,spr_size
0407B4 11 00 00 00 1144   	ld de,$000000
0407B8 5E          1145   	ld e,(hl)
0407B9 56          1146   	ld d,(hl)
0407BA 4B          1147   	ld c,e
0407BB ED 5C       1148   	mlt de ; DE = sprite length in bytes
0407BD 21 00 19 04 1149   	ld hl,current_frame
0407C1 7E          1150   	ld a,(hl) ; A = current frame
0407C2 21 09 19 04 1151   	ld hl,sprite_buffer
0407C6 FE 00       1152   	cp 0
0407C8 28 04       1153   	jr z,ff_noloop1
0407CA 47          1154   	ld b,a
0407CB             1155   
0407CB             1156   ff_loop1:
0407CB 19          1157   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407CC 10 FD       1158   	djnz ff_loop1
0407CE             1159   
0407CE             1160   ff_noloop1:
0407CE 41          1161   	ld b,c ; B = sprite height
0407CF 11 00 00 00 1162   	ld de,$000000
0407D3 59          1163   	ld e,c ; DE = sprite width
0407D4 79          1164   	ld a,c ; A = sprite width
0407D5 CB 3F       1165   	srl a ; A = sprite height / 2
0407D7             1166   
0407D7 E5          1167   	push hl
0407D8 DD E1       1168   	pop ix ; IX = frame address
0407DA 19          1169   	add hl,de ; HL = frame address + sprite width - 1
0407DB 2B          1170   	dec hl
0407DC E5          1171   	push hl
0407DD FD E1       1172   	pop iy ; IY = IX + sprite width - 1
0407DF             1173   
0407DF             1174   ff_loop2:
0407DF F5          1175   	push af
0407E0 D5          1176   	push de
0407E1 DD E5       1177   	push ix
0407E3 FD E5       1178   	push iy
0407E5             1179   ff_loop3:
0407E5 DD 5E 00    1180   	ld e,(ix+0)
0407E8 FD 56 00    1181   	ld d,(iy+0)
0407EB DD 72 00    1182   	ld (ix+0),d
0407EE FD 73 00    1183   	ld (iy+0),e
0407F1 DD 23       1184   	inc ix
0407F3 FD 2B       1185   	dec iy
0407F5 3D          1186   	dec a
0407F6 FE 00       1187   	cp 0
0407F8 20 EB       1188   	jr nz,ff_loop3
0407FA FD E1       1189   	pop iy
0407FC DD E1       1190   	pop ix
0407FE D1          1191   	pop de
0407FF F1          1192   	pop af
040800 DD 19       1193   	add ix,de
040802 FD 19       1194   	add iy,de
040804 10 D9       1195   	djnz ff_loop2
040806             1196   
040806 CD 0A 16 04 1197   	call fn_refresh_sprite
04080A C9          1198   	ret
04080B             1199   
04080B             1200   ; mirror frame vertically
04080B             1201   dsl_mirror_frame:
04080B 21 9A FF FF 1202   	ld hl,KEY_M
04080F CD 18 17 04 1203   	call fn_inkey
040813 FE 00       1204   	cp 0
040815 20 F4       1205   	jr nz,dsl_mirror_frame
040817             1206   
040817 21 F0 17 04 1207   	ld hl,spr_size
04081B 01 00 00 00 1208   	ld bc,$000000
04081F 11 00 00 00 1209   	ld de,$000000
040823 5E          1210   	ld e,(hl)
040824 56          1211   	ld d,(hl)
040825 4B          1212   	ld c,e
040826 ED 5C       1213   	mlt de ; DE = sprite length in bytes
040828 21 00 19 04 1214   	ld hl,current_frame
04082C 7E          1215   	ld a,(hl) ; A = current frame
04082D 21 09 19 04 1216   	ld hl,sprite_buffer
040831 FE 00       1217   	cp 0
040833 28 04       1218   	jr z,mf_noloop1
040835 47          1219   	ld b,a
040836             1220   
040836             1221   mf_loop1:
040836 19          1222   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040837 10 FD       1223   	djnz mf_loop1
040839             1224   
040839             1225   mf_noloop1:
040839 11 00 00 00 1226   	ld de,$000000
04083D 59          1227   	ld e,c ; E = sprite height
04083E 79          1228   	ld a,c ; A = sprite width
04083F 41          1229   	ld b,c ; B = sprite height
040840 CB 38       1230   	srl b ; divide B by 2, so B = sprite height / 2
040842             1231   
040842 E5          1232   	push hl
040843 DD E1       1233   	pop ix ; IX = frame address
040845 51          1234   	ld d,c
040846 15          1235   	dec d
040847 ED 5C       1236   	mlt de ; DE = sprite length - sprite width
040849 19          1237   	add hl,de ; HL = frame address + sprite length - sprite width
04084A E5          1238   	push hl
04084B FD E1       1239   	pop iy ; IY = IX + sprite length - sprite width
04084D 21 00 00 00 1240   	ld hl,$000000
040851 69          1241   	ld l,c ; HL = sprite width
040852             1242   
040852             1243   mf_loop2:
040852 F5          1244   	push af
040853 D5          1245   	push de
040854 DD E5       1246   	push ix
040856 FD E5       1247   	push iy
040858             1248   mf_loop3:
040858 DD 5E 00    1249   	ld e,(ix+0)
04085B FD 56 00    1250   	ld d,(iy+0)
04085E DD 72 00    1251   	ld (ix+0),d
040861 FD 73 00    1252   	ld (iy+0),e
040864 DD 23       1253   	inc ix
040866 FD 23       1254   	inc iy
040868 3D          1255   	dec a
040869 FE 00       1256   	cp 0
04086B 20 EB       1257   	jr nz,mf_loop3
04086D FD E1       1258   	pop iy
04086F DD E1       1259   	pop ix
040871 D1          1260   	pop de
040872 F1          1261   	pop af
040873 EB          1262   	ex de,hl
040874 DD 19       1263   	add ix,de
040876 EB          1264   	ex de,hl
040877 E5          1265   	push hl
040878 FD E5       1266   	push iy
04087A E1          1267   	pop hl
04087B D1          1268   	pop de
04087C B7          1269   	or a
04087D ED 52       1270   	sbc hl,de
04087F E5          1271   	push hl
040880 D5          1272   	push de
040881 E1          1273   	pop hl
040882 FD E1       1274   	pop iy
040884 10 CC       1275   	djnz mf_loop2
040886             1276   
040886 CD 0A 16 04 1277   	call fn_refresh_sprite
04088A C9          1278   	ret
04088B             1279   
04088B             1280   dsl_flood_fill:
04088B 21 B6 FF FF 1281   	ld hl,KEY_RETURN
04088F CD 18 17 04 1282   	call fn_inkey
040893 FE 00       1283   	cp 0
040895 20 F4       1284   	jr nz,dsl_flood_fill
040897             1285   
040897             1286   	; hide the cursor
040897 CD 26 0C 04 1287   	call fn_draw_pixel_without_border
04089B             1288   
04089B             1289   	; memorize pixel coordinates
04089B 3A EB 17 04 1290   	ld a,(xpix)
04089F 32 ED 17 04 1291   	ld (memxpix),a
0408A3 3A EC 17 04 1292   	ld a,(ypix)
0408A7 32 EE 17 04 1293   	ld (memypix),a
0408AB             1294   
0408AB             1295   	; fill all recursively
0408AB 3A EB 17 04 1296   	ld a,(xpix)
0408AF 5F          1297   	ld e,a
0408B0 3A EC 17 04 1298   	ld a,(ypix)
0408B4 57          1299   	ld d,a
0408B5 CD D6 08 04 1300   	call dsl_flood_fill_loop
0408B9             1301   
0408B9             1302   	; refresh all the sprite
0408B9 CD 0A 16 04 1303   	call fn_refresh_sprite
0408BD             1304   
0408BD             1305   	; hide the cursor again
0408BD CD 26 0C 04 1306   	call fn_draw_pixel_without_border
0408C1             1307   
0408C1             1308   	; restore pixel coordinates
0408C1             1309   	; and cursor
0408C1 3A ED 17 04 1310   	ld a,(memxpix)
0408C5 32 EB 17 04 1311   	ld (xpix),a
0408C9 3A EE 17 04 1312   	ld a,(memypix)
0408CD 32 EC 17 04 1313   	ld (ypix),a
0408D1 CD 12 0C 04 1314   	call fn_draw_pixel_with_border
0408D5 C9          1315   	ret
0408D6             1316   
0408D6             1317   dsl_flood_fill_loop:
0408D6 D5          1318   	push de
0408D7             1319   
0408D7 DD 21 F0 17 1320   	ld ix,spr_size
       04          
0408DC             1321   
0408DC             1322   	; out  of the sprite area ?
0408DC 7B          1323   	ld a,e
0408DD DD BE 00    1324   	cp (ix+0)
0408E0 D2 29 09 04 1325   	jp nc,ffl_exit
0408E4             1326   
0408E4             1327   	; out  of the sprite area ?
0408E4 7A          1328   	ld a,d
0408E5 DD BE 00    1329   	cp (ix+0)
0408E8 D2 29 09 04 1330   	jp nc,ffl_exit
0408EC             1331   
0408EC             1332   	; replace current pixel, if it is
0408EC             1333   	; inside the sprite area,
0408EC             1334   	; and has not the select palette color
0408EC 7B          1335   	ld a,e
0408ED 32 EB 17 04 1336   	ld (xpix),a
0408F1 7A          1337   	ld a,d
0408F2 32 EC 17 04 1338   	ld (ypix),a
0408F6 CD 3C 0C 04 1339   	call fn_get_pixel_color
0408FA 21 F1 17 04 1340   	ld hl,current_pen
0408FE BE          1341   	cp (hl)
0408FF CA 29 09 04 1342   	jp z,ffl_exit
040903 7E          1343   	ld a,(hl)
040904 CD 7E 0C 04 1344   	call fn_set_pixel_color
040908             1345   
040908             1346   	; restore coordinates
040908 3A EB 17 04 1347   	ld a,(xpix)
04090C 5F          1348   	ld e,a
04090D 3A EC 17 04 1349   	ld a,(ypix)
040911 57          1350   	ld d,a
040912             1351   
040912             1352   	; draw pixel at right
040912 1C          1353   	inc e
040913 CD D6 08 04 1354   	call dsl_flood_fill_loop
040917 1D          1355   	dec e
040918             1356   	; draw pixel at left
040918 1D          1357   	dec e
040919 CD D6 08 04 1358   	call dsl_flood_fill_loop
04091D 1C          1359   	inc e
04091E             1360   	; draw pixel up
04091E 14          1361   	inc d
04091F CD D6 08 04 1362   	call dsl_flood_fill_loop
040923 15          1363   	dec d
040924             1364   	; draw pixel down
040924 15          1365   	dec d
040925 CD D6 08 04 1366   	call dsl_flood_fill_loop
040929             1367   
040929             1368   ffl_exit:
040929 D1          1369   	pop de
04092A C9          1370   	ret
04092B             1371   
04092B             1372   ; change current tool to palette tool
04092B             1373   dsl_palette_tool:
04092B 21 9F FF FF 1374   	ld hl,KEY_TAB
04092F CD 18 17 04 1375   	call fn_inkey
040933 FE 00       1376   	cp 0
040935 20 F4       1377   	jr nz,dsl_palette_tool
040937             1378   
040937             1379   	; hide sprite drawing cursor
040937 CD 26 0C 04 1380   	call fn_draw_pixel_without_border
04093B             1381   
04093B             1382   	; draw selected palette color
04093B 21 F1 17 04 1383   	ld hl,current_pen
04093F 4E          1384   	ld c,(hl)
040940 CD DA 0C 04 1385   	call fn_draw_palette_with_border
040944             1386   
040944             1387   ; select palette color
040944             1388   dsl_palette_tool_loop:
040944             1389   	; move to left color in the palette
040944 21 E6 FF FF 1390   	ld hl,KEY_LEFT
040948 CD 18 17 04 1391   	call fn_inkey
04094C FE 01       1392   	cp 1
04094E CC 11 0A 04 1393   	call z,dsl_dec_pen
040952             1394   
040952             1395   	; move to right color in the palette
040952 21 86 FF FF 1396   	ld hl,KEY_RIGHT
040956 CD 18 17 04 1397   	call fn_inkey
04095A FE 01       1398   	cp 1
04095C CC 38 0A 04 1399   	call z,dsl_inc_pen
040960             1400   
040960             1401   	; return to draw sprite tool
040960 21 9F FF FF 1402   	ld hl,KEY_TAB
040964 CD 18 17 04 1403   	call fn_inkey
040968 FE 01       1404   	cp 1
04096A CA F4 09 04 1405   	jp z,dsl_draw_sprite_tool
04096E             1406   
04096E             1407   	; load palette
04096E 21 A9 FF FF 1408   	ld hl,KEY_L
040972 CD 18 17 04 1409   	call fn_inkey
040976 FE 01       1410   	cp 1
040978 CC 9C 09 04 1411   	call z,dslp_load_palette
04097C             1412   
04097C             1413   	; save palette
04097C 21 AE FF FF 1414   	ld hl,KEY_S
040980 CD 18 17 04 1415   	call fn_inkey
040984 FE 01       1416   	cp 1
040986 CC CE 09 04 1417   	call z,dslp_save_palette
04098A             1418   
04098A             1419   	; exit program
04098A 21 8F FF FF 1420   	ld hl,KEY_ESCAPE
04098E CD 18 17 04 1421   	call fn_inkey
040992 FE 01       1422   	cp 1
040994 CA 61 0A 04 1423   	jp z,exit_program
040998             1424   
040998 C3 44 09 04 1425   	jp dsl_palette_tool_loop
04099C             1426   
04099C             1427   dslp_load_palette:
04099C 21 A9 FF FF 1428   	ld hl,KEY_L
0409A0 CD 18 17 04 1429   	call fn_inkey
0409A4 FE 00       1430   	cp 0
0409A6 20 F4       1431   	jr nz,dslp_load_palette
0409A8             1432   
0409A8 21 F1 17 04 1433   	ld hl,current_pen
0409AC 4E          1434   	ld c,(hl)
0409AD CD 3F 0D 04 1435   	call fn_draw_palette_without_border
0409B1 CD AA 0E 04 1436   	call fn_load_palette
0409B5 CD 52 17 04 1437   	call fn_draw_the_palette
0409B9 CD 0A 16 04 1438   	call fn_refresh_sprite
0409BD 21 F1 17 04 1439   	ld hl,current_pen
0409C1 4E          1440   	ld c,(hl)
0409C2 CD DA 0C 04 1441   	call fn_draw_palette_with_border
0409C6 CD 4A 16 04 1442   	call fn_change_frame
0409CA C3 44 09 04 1443   	jp dsl_palette_tool_loop
0409CE             1444   
0409CE             1445   dslp_save_palette:
0409CE 21 AE FF FF 1446   	ld hl,KEY_S
0409D2 CD 18 17 04 1447   	call fn_inkey
0409D6 FE 00       1448   	cp 0
0409D8 20 F4       1449   	jr nz,dslp_save_palette
0409DA             1450   
0409DA 21 F1 17 04 1451   	ld hl,current_pen
0409DE 4E          1452   	ld c,(hl)
0409DF CD 3F 0D 04 1453   	call fn_draw_palette_without_border
0409E3 CD BE 11 04 1454   	call fn_save_palette
0409E7 21 F1 17 04 1455   	ld hl,current_pen
0409EB 4E          1456   	ld c,(hl)
0409EC CD DA 0C 04 1457   	call fn_draw_palette_with_border
0409F0 C3 44 09 04 1458   	jp dsl_palette_tool_loop
0409F4             1459   
0409F4             1460   dsl_draw_sprite_tool:
0409F4 21 9F FF FF 1461   	ld hl,KEY_TAB
0409F8 CD 18 17 04 1462   	call fn_inkey
0409FC FE 00       1463   	cp 0
0409FE 20 F4       1464   	jr nz,dsl_draw_sprite_tool
040A00             1465   
040A00             1466   	; unselect palette color
040A00 21 F1 17 04 1467   	ld hl,current_pen
040A04 4E          1468   	ld c,(hl)
040A05 CD 3F 0D 04 1469   	call fn_draw_palette_without_border
040A09             1470   
040A09             1471   	; draw the pixel with a border
040A09 CD 12 0C 04 1472   	call fn_draw_pixel_with_border
040A0D             1473   
040A0D C3 98 02 04 1474   	jp draw_sprite_loop
040A11             1475   
040A11             1476   dsl_dec_pen:
040A11 21 F1 17 04 1477   	ld hl,current_pen
040A15 7E          1478   	ld a,(hl)
040A16 FE 00       1479   	cp 0
040A18 C8          1480   	ret z
040A19 FE 40       1481   	cp MAX_COLORS
040A1B D0          1482   	ret nc
040A1C             1483   
040A1C 4F          1484   	ld c,a ; c is the old pen
040A1D 3D          1485   	dec a ; a is the new pen
040A1E             1486   
040A1E F5          1487   	push af
040A1F C5          1488   	push bc
040A20             1489   
040A20             1490   	; unselect palette color
040A20 CD 3F 0D 04 1491   	call fn_draw_palette_without_border
040A24             1492   
040A24 C1          1493   	pop bc
040A25 F1          1494   	pop af
040A26             1495   
040A26             1496   	; replace current pen value
040A26 21 F1 17 04 1497   	ld hl,current_pen
040A2A 77          1498   	ld (hl),a
040A2B             1499   
040A2B             1500   	; select palette color
040A2B 4F          1501   	ld c,a
040A2C CD DA 0C 04 1502   	call fn_draw_palette_with_border
040A30 CD 93 16 04 1503   	call fn_slowdown
040A34 C3 44 09 04 1504   	jp dsl_palette_tool_loop
040A38             1505   
040A38             1506   dsl_inc_pen:
040A38 21 F1 17 04 1507   	ld hl,current_pen
040A3C 7E          1508   	ld a,(hl)
040A3D 21 FB 18 04 1509   	ld hl,colors_count
040A41 4E          1510   	ld c,(hl)
040A42 0D          1511   	dec c
040A43 B9          1512   	cp c
040A44 D0          1513   	ret nc
040A45             1514   
040A45 4F          1515   	ld c,a ; c is the old pen
040A46 3C          1516   	inc a ; a is the new pen
040A47             1517   
040A47 F5          1518   	push af
040A48 C5          1519   	push bc
040A49             1520   
040A49             1521   	; unselect palette color
040A49 CD 3F 0D 04 1522   	call fn_draw_palette_without_border
040A4D             1523   
040A4D C1          1524   	pop bc
040A4E F1          1525   	pop af
040A4F             1526   
040A4F             1527   	; replace current pen value
040A4F 21 F1 17 04 1528   	ld hl,current_pen
040A53 77          1529   	ld (hl),a
040A54             1530   
040A54             1531   	; select palette color
040A54 4F          1532   	ld c,a
040A55 CD DA 0C 04 1533   	call fn_draw_palette_with_border
040A59 CD 93 16 04 1534   	call fn_slowdown
040A5D C3 44 09 04 1535   	jp dsl_palette_tool_loop
040A61             1536   
040A61             1537   ; exit program
040A61             1538   exit_program:
040A61             1539   	; reset to mode 1
040A61             1540   	vdu 22
040A61 3E 16       0001M  		LD	A, function
040A63 49 D7       0002M  		RST.LIS	10h
040A65             1541   	vdu 1
040A65 3E 01       0001M  		LD	A, function
040A67 49 D7       0002M  		RST.LIS	10h
040A69             1542   
040A69             1543   	; position the texte cursor at home
040A69             1544   	vdu 30
040A69 3E 1E       0001M  		LD	A, function
040A6B 49 D7       0002M  		RST.LIS	10h
040A6D             1545   
040A6D             1546   	; show cursor
040A6D             1547   	vdu 23
040A6D 3E 17       0001M  		LD	A, function
040A6F 49 D7       0002M  		RST.LIS	10h
040A71             1548   	vdu 1
040A71 3E 01       0001M  		LD	A, function
040A73 49 D7       0002M  		RST.LIS	10h
040A75             1549   	vdu 1
040A75 3E 01       0001M  		LD	A, function
040A77 49 D7       0002M  		RST.LIS	10h
040A79             1550   
040A79 FD E1       1551   	pop iy
040A7B DD E1       1552   	pop ix
040A7D D1          1553   	pop de
040A7E C1          1554   	pop bc
040A7F F1          1555   	pop af
040A80 21 00 00 00 1556   	ld hl,0
040A84             1557   
040A84 C9          1558   	ret
040A85             1559   ;======================================================================
040A85             1560   
040A85             1561   ; draw a rectangle
040A85             1562   fn_rect:
040A85             1563   	vdu 25
040A85 3E 19       0001M  		LD	A, function
040A87 49 D7       0002M  		RST.LIS	10h
040A89             1564   	vdu 4
040A89 3E 04       0001M  		LD	A, function
040A8B 49 D7       0002M  		RST.LIS	10h
040A8D DD 21 DB 17 1565   	ld ix,x1
       04          
040A92 DD 7E 00    1566   	ld a,(ix + 0)
040A95             1567   	vdu_a
040A95 49 D7       0001M  		RST.LIS	10h
040A97 DD 7E 01    1568   	ld a,(ix + 1)
040A9A             1569   	vdu_a
040A9A 49 D7       0001M  		RST.LIS	10h
040A9C FD 21 DD 17 1570   	ld iy,y1
       04          
040AA1 FD 7E 00    1571   	ld a,(iy + 0)
040AA4             1572   	vdu_a
040AA4 49 D7       0001M  		RST.LIS	10h
040AA6 FD 7E 01    1573   	ld a,(iy + 1)
040AA9             1574   	vdu_a
040AA9 49 D7       0001M  		RST.LIS	10h
040AAB             1575   
040AAB             1576   	vdu 25
040AAB 3E 19       0001M  		LD	A, function
040AAD 49 D7       0002M  		RST.LIS	10h
040AAF             1577   	vdu 5
040AAF 3E 05       0001M  		LD	A, function
040AB1 49 D7       0002M  		RST.LIS	10h
040AB3 DD 21 DF 17 1578   	ld ix,x2
       04          
040AB8 DD 7E 00    1579   	ld a,(ix + 0)
040ABB             1580   	vdu_a
040ABB 49 D7       0001M  		RST.LIS	10h
040ABD DD 7E 01    1581   	ld a,(ix + 1)
040AC0             1582   	vdu_a
040AC0 49 D7       0001M  		RST.LIS	10h
040AC2 FD 21 DD 17 1583   	ld iy,y1
       04          
040AC7 FD 7E 00    1584   	ld a,(iy + 0)
040ACA             1585   	vdu_a
040ACA 49 D7       0001M  		RST.LIS	10h
040ACC FD 7E 01    1586   	ld a,(iy + 1)
040ACF             1587   	vdu_a
040ACF 49 D7       0001M  		RST.LIS	10h
040AD1             1588   
040AD1             1589   	vdu 25
040AD1 3E 19       0001M  		LD	A, function
040AD3 49 D7       0002M  		RST.LIS	10h
040AD5             1590   	vdu 5
040AD5 3E 05       0001M  		LD	A, function
040AD7 49 D7       0002M  		RST.LIS	10h
040AD9 DD 21 DF 17 1591   	ld ix,x2
       04          
040ADE DD 7E 00    1592   	ld a,(ix + 0)
040AE1             1593   	vdu_a
040AE1 49 D7       0001M  		RST.LIS	10h
040AE3 DD 7E 01    1594   	ld a,(ix + 1)
040AE6             1595   	vdu_a
040AE6 49 D7       0001M  		RST.LIS	10h
040AE8 FD 21 E1 17 1596   	ld iy,y2
       04          
040AED FD 7E 00    1597   	ld a,(iy + 0)
040AF0             1598   	vdu_a
040AF0 49 D7       0001M  		RST.LIS	10h
040AF2 FD 7E 01    1599   	ld a,(iy + 1)
040AF5             1600   	vdu_a
040AF5 49 D7       0001M  		RST.LIS	10h
040AF7             1601   
040AF7             1602   	vdu 25
040AF7 3E 19       0001M  		LD	A, function
040AF9 49 D7       0002M  		RST.LIS	10h
040AFB             1603   	vdu 5
040AFB 3E 05       0001M  		LD	A, function
040AFD 49 D7       0002M  		RST.LIS	10h
040AFF DD 21 DB 17 1604   	ld ix,x1
       04          
040B04 DD 7E 00    1605   	ld a,(ix + 0)
040B07             1606   	vdu_a
040B07 49 D7       0001M  		RST.LIS	10h
040B09 DD 7E 01    1607   	ld a,(ix + 1)
040B0C             1608   	vdu_a
040B0C 49 D7       0001M  		RST.LIS	10h
040B0E FD 21 E1 17 1609   	ld iy,y2
       04          
040B13 FD 7E 00    1610   	ld a,(iy + 0)
040B16             1611   	vdu_a
040B16 49 D7       0001M  		RST.LIS	10h
040B18 FD 7E 01    1612   	ld a,(iy + 1)
040B1B             1613   	vdu_a
040B1B 49 D7       0001M  		RST.LIS	10h
040B1D             1614   
040B1D             1615   	vdu 25
040B1D 3E 19       0001M  		LD	A, function
040B1F 49 D7       0002M  		RST.LIS	10h
040B21             1616   	vdu 5
040B21 3E 05       0001M  		LD	A, function
040B23 49 D7       0002M  		RST.LIS	10h
040B25 DD 21 DB 17 1617   	ld ix,x1
       04          
040B2A DD 7E 00    1618   	ld a,(ix + 0)
040B2D             1619   	vdu_a
040B2D 49 D7       0001M  		RST.LIS	10h
040B2F DD 7E 01    1620   	ld a,(ix + 1)
040B32             1621   	vdu_a
040B32 49 D7       0001M  		RST.LIS	10h
040B34 FD 21 DD 17 1622   	ld iy,y1
       04          
040B39 FD 7E 00    1623   	ld a,(iy + 0)
040B3C             1624   	vdu_a
040B3C 49 D7       0001M  		RST.LIS	10h
040B3E FD 7E 01    1625   	ld a,(iy + 1)
040B41             1626   	vdu_a
040B41 49 D7       0001M  		RST.LIS	10h
040B43             1627   
040B43 C9          1628   	ret
040B44             1629   
040B44             1630   ; draw a filled rectangle
040B44             1631   fn_rectf:
040B44 DD 21 DB 17 1632   	ld ix,x1
       04          
040B49 FD 21 DD 17 1633   	ld iy,y1
       04          
040B4E             1634   
040B4E             1635   	vdu 25
040B4E 3E 19       0001M  		LD	A, function
040B50 49 D7       0002M  		RST.LIS	10h
040B52             1636   	vdu 4
040B52 3E 04       0001M  		LD	A, function
040B54 49 D7       0002M  		RST.LIS	10h
040B56 DD 7E 00    1637   	ld a,(ix+0)
040B59             1638   	vdu_a
040B59 49 D7       0001M  		RST.LIS	10h
040B5B DD 7E 01    1639   	ld a,(ix+1)
040B5E             1640   	vdu_a
040B5E 49 D7       0001M  		RST.LIS	10h
040B60 FD 7E 00    1641   	ld a,(iy+0)
040B63             1642   	vdu_a
040B63 49 D7       0001M  		RST.LIS	10h
040B65 FD 7E 01    1643   	ld a,(iy+1)
040B68             1644   	vdu_a
040B68 49 D7       0001M  		RST.LIS	10h
040B6A             1645   
040B6A DD 21 DF 17 1646   	ld ix,x2
       04          
040B6F FD 21 E1 17 1647   	ld iy,y2
       04          
040B74             1648   
040B74             1649   	vdu 25
040B74 3E 19       0001M  		LD	A, function
040B76 49 D7       0002M  		RST.LIS	10h
040B78             1650   	vdu 101
040B78 3E 65       0001M  		LD	A, function
040B7A 49 D7       0002M  		RST.LIS	10h
040B7C DD 7E 00    1651   	ld a,(ix+0)
040B7F             1652   	vdu_a
040B7F 49 D7       0001M  		RST.LIS	10h
040B81 DD 7E 01    1653   	ld a,(ix+1)
040B84             1654   	vdu_a
040B84 49 D7       0001M  		RST.LIS	10h
040B86 FD 7E 00    1655   	ld a,(iy+0)
040B89             1656   	vdu_a
040B89 49 D7       0001M  		RST.LIS	10h
040B8B FD 7E 01    1657   	ld a,(iy+1)
040B8E             1658   	vdu_a
040B8E 49 D7       0001M  		RST.LIS	10h
040B90             1659   
040B90 C9          1660   	ret
040B91             1661   
040B91             1662   fn_calc_pixel_coords:
040B91 11 00 00 00 1663   	ld de,$000000 ; reset deu
040B95             1664   
040B95             1665   	; calculate coordinates x of the resized pixel
040B95 21 EB 17 04 1666   	ld hl,xpix
040B99 5E          1667   	ld e,(hl) ; E = xpix
040B9A 21 EF 17 04 1668   	ld hl,pixel_width
040B9E 56          1669   	ld d,(hl) ; D = pixel_width
040B9F D5          1670   	push de
040BA0 E1          1671   	pop hl ; HL = DE
040BA1 ED 6C       1672   	mlt hl ; HL = xpix * pixel_width
040BA3 DD 21 E3 17 1673   	ld ix,xs1
       04          
040BA8 DD 5E 00    1674   	ld e,(ix+0)
040BAB DD 56 01    1675   	ld d,(ix+1)
040BAE 13          1676   	inc de ; DE = xs1 + 1
040BAF 19          1677   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040BB0 FD 21 DB 17 1678   	ld iy,x1
       04          
040BB5 FD 75 00    1679   	ld (iy+0),l
040BB8 FD 74 01    1680   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040BBB E5          1681   	push hl
040BBC 21 EF 17 04 1682   	ld hl,pixel_width
040BC0 16 00       1683   	ld d,0
040BC2 5E          1684   	ld e,(hl)
040BC3 E1          1685   	pop hl
040BC4 19          1686   	add hl,de
040BC5 2B          1687   	dec hl
040BC6 FD 21 DF 17 1688   	ld iy,x2
       04          
040BCB FD 75 00    1689   	ld (iy+0),l
040BCE FD 74 01    1690   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040BD1             1691   
040BD1 11 00 00 00 1692   	ld de,$000000 ; reset deu
040BD5             1693   
040BD5             1694   	; calculate coordinates y of the resized pixel
040BD5 21 EC 17 04 1695   	ld hl,ypix
040BD9 5E          1696   	ld e,(hl) ; E = ypix
040BDA 21 EF 17 04 1697   	ld hl,pixel_width
040BDE 56          1698   	ld d,(hl) ; D = pixel_width
040BDF D5          1699   	push de
040BE0 E1          1700   	pop hl ; HL = DE
040BE1 ED 6C       1701   	mlt hl ; HL = ypix * pixel_width
040BE3 DD 21 E5 17 1702   	ld ix,ys1
       04          
040BE8 DD 5E 00    1703   	ld e,(ix+0)
040BEB DD 56 01    1704   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040BEE 13          1705   	inc de ; DE = ys1 + 1
040BEF 19          1706   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040BF0 FD 21 DD 17 1707   	ld iy,y1
       04          
040BF5 FD 75 00    1708   	ld (iy+0),l
040BF8 FD 74 01    1709   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040BFB E5          1710   	push hl
040BFC 21 EF 17 04 1711   	ld hl,pixel_width
040C00 16 00       1712   	ld d,0
040C02 5E          1713   	ld e,(hl)
040C03 E1          1714   	pop hl
040C04 19          1715   	add hl,de
040C05 2B          1716   	dec hl
040C06 FD 21 E1 17 1717   	ld iy,y2
       04          
040C0B FD 75 00    1718   	ld (iy+0),l
040C0E FD 74 01    1719   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C11             1720   
040C11 C9          1721   	ret
040C12             1722   
040C12             1723   ; draw the resized pixel border, with its color
040C12             1724   fn_draw_pixel_with_border:
040C12 CD 26 0C 04 1725   	call fn_draw_pixel_without_border
040C16             1726   
040C16             1727   	; set graphics pen
040C16             1728   	vdu 18
040C16 3E 12       0001M  		LD	A, function
040C18 49 D7       0002M  		RST.LIS	10h
040C1A             1729   	vdu 0
040C1A 3E 00       0001M  		LD	A, function
040C1C 49 D7       0002M  		RST.LIS	10h
040C1E             1730   	vdu COLOR_GREY ; grey pen
040C1E 3E 07       0001M  		LD	A, function
040C20 49 D7       0002M  		RST.LIS	10h
040C22             1731   
040C22             1732   	; draw the sprite's border rectangle
040C22 C3 85 0A 04 1733   	jp fn_rect
040C26             1734   
040C26             1735   ; draw the resized pixel color
040C26             1736   fn_draw_pixel_without_border:
040C26 CD 91 0B 04 1737   	call fn_calc_pixel_coords
040C2A             1738   
040C2A             1739   	; set graphics pen
040C2A             1740   	vdu 18
040C2A 3E 12       0001M  		LD	A, function
040C2C 49 D7       0002M  		RST.LIS	10h
040C2E             1741   	vdu 0
040C2E 3E 00       0001M  		LD	A, function
040C30 49 D7       0002M  		RST.LIS	10h
040C32 CD 3C 0C 04 1742   	call fn_get_pixel_color
040C36             1743   	vdu_a
040C36 49 D7       0001M  		RST.LIS	10h
040C38             1744   
040C38             1745   	; draw the sprite's color rectangle
040C38 C3 44 0B 04 1746   	jp fn_rectf
040C3C             1747   
040C3C             1748   ; get pixel color value in the sprite buffer
040C3C             1749   ; returns A: pixel color (0-63)
040C3C             1750   fn_get_pixel_color:
040C3C 11 00 00 00 1751   	ld de,$000000 ; reset deu
040C40             1752   
040C40             1753   	; calculate the offset to add to the address
040C40 21 EC 17 04 1754   	ld hl,ypix
040C44 5E          1755   	ld e,(hl) ; E = ypix
040C45 21 F0 17 04 1756   	ld hl,spr_size
040C49 56          1757   	ld d,(hl) ; D = sprsize
040C4A D5          1758   	push de
040C4B E1          1759   	pop hl
040C4C ED 6C       1760   	mlt hl ; HL = ypix * sprsize
040C4E E5          1761   	push hl
040C4F 21 EB 17 04 1762   	ld hl,xpix
040C53 5E          1763   	ld e,(hl)
040C54 16 00       1764   	ld d,0
040C56 E1          1765   	pop hl
040C57 19          1766   	add hl,de ; HL = (ypix * sprsize) + xpix
040C58             1767   
040C58 11 00 19 04 1768   	ld de,current_frame
040C5C 1A          1769   	ld a,(de)
040C5D FE 00       1770   	cp 0
040C5F 28 16       1771   	jr z,gpc_end_loop
040C61             1772   
040C61 47          1773   	ld b,a
040C62 E5          1774   	push hl
040C63 11 00 00 00 1775   	ld de,$000000
040C67 21 F0 17 04 1776   	ld hl,spr_size
040C6B 5E          1777   	ld e,(hl)
040C6C 56          1778   	ld d,(hl)
040C6D D5          1779   	push de
040C6E E1          1780   	pop hl
040C6F ED 6C       1781   	mlt hl
040C71 E5          1782   	push hl
040C72 D1          1783   	pop de ; DE = sprsize²
040C73 E1          1784   	pop hl
040C74             1785   
040C74             1786   gpc_loop:
040C74 19          1787   	add hl,de
040C75 10 FD       1788   	djnz gpc_loop
040C77             1789   
040C77             1790   gpc_end_loop:
040C77             1791   	; add the offset to the address
040C77 11 09 19 04 1792   	ld de,sprite_buffer
040C7B 19          1793   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040C7C             1794   
040C7C             1795   	; get pixel color value
040C7C 7E          1796   	ld a,(hl)
040C7D             1797   
040C7D C9          1798   	ret
040C7E             1799   
040C7E             1800   ; get pixel color value in the sprite buffer
040C7E             1801   ; A: pixel color (0-63)
040C7E             1802   fn_set_pixel_color:
040C7E 11 00 00 00 1803   	ld de,$000000 ; reset deu
040C82             1804   
040C82             1805   	; calculate the offset to add to the address
040C82 21 EC 17 04 1806   	ld hl,ypix
040C86 5E          1807   	ld e,(hl) ; E = ypix
040C87 21 F0 17 04 1808   	ld hl,spr_size
040C8B 56          1809   	ld d,(hl) ; D = sprsize
040C8C D5          1810   	push de
040C8D E1          1811   	pop hl
040C8E ED 6C       1812   	mlt hl ; HL = ypix * sprsize
040C90 E5          1813   	push hl
040C91 21 EB 17 04 1814   	ld hl,xpix
040C95 5E          1815   	ld e,(hl)
040C96 16 00       1816   	ld d,0
040C98 E1          1817   	pop hl
040C99 19          1818   	add hl,de ; HL = (ypix * sprsize) + xpix
040C9A F5          1819   	push af
040C9B             1820   
040C9B 11 00 19 04 1821   	ld de,current_frame
040C9F 1A          1822   	ld a,(de)
040CA0 FE 00       1823   	cp 0
040CA2 28 16       1824   	jr z,spc_end_loop
040CA4             1825   
040CA4 47          1826   	ld b,a
040CA5 E5          1827   	push hl
040CA6 11 00 00 00 1828   	ld de,$000000
040CAA 21 F0 17 04 1829   	ld hl,spr_size
040CAE 5E          1830   	ld e,(hl)
040CAF 56          1831   	ld d,(hl)
040CB0 D5          1832   	push de
040CB1 E1          1833   	pop hl
040CB2 ED 6C       1834   	mlt hl
040CB4 E5          1835   	push hl
040CB5 D1          1836   	pop de ; DE = sprsize²
040CB6 E1          1837   	pop hl
040CB7             1838   
040CB7             1839   spc_loop:
040CB7 19          1840   	add hl,de
040CB8 10 FD       1841   	djnz spc_loop
040CBA             1842   
040CBA             1843   spc_end_loop:
040CBA             1844   
040CBA             1845   	; add the offset to the address
040CBA 11 09 19 04 1846   	ld de,sprite_buffer
040CBE 19          1847   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CBF             1848   
040CBF             1849   	; set pixel color value
040CBF F1          1850   	pop af
040CC0 77          1851   	ld (hl),a
040CC1             1852   
040CC1 C9          1853   	ret
040CC2             1854   
040CC2             1855   fn_move_up:
040CC2 21 EC 17 04 1856   	ld hl,ypix
040CC6 35          1857   	dec (hl)
040CC7 C9          1858   	ret
040CC8             1859   
040CC8             1860   fn_move_down:
040CC8 21 EC 17 04 1861   	ld hl,ypix
040CCC 34          1862   	inc (hl)
040CCD C9          1863   	ret
040CCE             1864   
040CCE             1865   fn_move_left:
040CCE 21 EB 17 04 1866   	ld hl,xpix
040CD2 35          1867   	dec (hl)
040CD3 C9          1868   	ret
040CD4             1869   
040CD4             1870   fn_move_right:
040CD4 21 EB 17 04 1871   	ld hl,xpix
040CD8 34          1872   	inc (hl)
040CD9 C9          1873   	ret
040CDA             1874   
040CDA             1875   ; draw palette color whit border and selection
040CDA             1876   ; C = color number (0-63)
040CDA             1877   fn_draw_palette_with_border:
040CDA C5          1878   	push bc
040CDB             1879   
040CDB             1880   	; choose palette color
040CDB             1881   	vdu 18
040CDB 3E 12       0001M  		LD	A, function
040CDD 49 D7       0002M  		RST.LIS	10h
040CDF             1882   	vdu 0
040CDF 3E 00       0001M  		LD	A, function
040CE1 49 D7       0002M  		RST.LIS	10h
040CE3 C1          1883   	pop bc
040CE4 C5          1884   	push bc
040CE5 79          1885   	ld a,c
040CE6             1886   	vdu_a
040CE6 49 D7       0001M  		RST.LIS	10h
040CE8             1887   
040CE8             1888   	; store coordinates for a palette square
040CE8 DD 21 DB 17 1889   	ld ix,x1
       04          
040CED E1          1890   	pop hl
040CEE E5          1891   	push hl
040CEF 26 05       1892   	ld h,5
040CF1 ED 6C       1893   	mlt hl
040CF3 E5          1894   	push hl
040CF4 DD 75 00    1895   	ld (ix+0),l
040CF7 DD 74 01    1896   	ld (ix+1),h
040CFA             1897   
040CFA DD 21 DD 17 1898   	ld ix,y1
       04          
040CFF 21 00 00 00 1899   	ld hl,0
040D03 DD 75 00    1900   	ld (ix+0),l
040D06 DD 74 01    1901   	ld (ix+1),h
040D09             1902   
040D09 DD 21 DF 17 1903   	ld ix,x2
       04          
040D0E E1          1904   	pop hl
040D0F 11 04 00 00 1905   	ld de,4
040D13 19          1906   	add hl,de
040D14 DD 75 00    1907   	ld (ix+0),l
040D17 DD 74 01    1908   	ld (ix+1),h
040D1A             1909   
040D1A DD 21 E1 17 1910   	ld ix,y2
       04          
040D1F 21 0A 00 00 1911   	ld hl,10
040D23 DD 75 00    1912   	ld (ix+0),l
040D26 DD 74 01    1913   	ld (ix+1),h
040D29             1914   
040D29             1915   	; draw the palette filled square
040D29 CD 44 0B 04 1916   	call fn_rectf
040D2D             1917   
040D2D             1918   	; choose grey color
040D2D             1919   	vdu 18
040D2D 3E 12       0001M  		LD	A, function
040D2F 49 D7       0002M  		RST.LIS	10h
040D31             1920   	vdu 0
040D31 3E 00       0001M  		LD	A, function
040D33 49 D7       0002M  		RST.LIS	10h
040D35 3E 07       1921   	ld a,COLOR_GREY
040D37             1922   	vdu_a
040D37 49 D7       0001M  		RST.LIS	10h
040D39             1923   
040D39             1924   	; draw the palette square border
040D39 CD 85 0A 04 1925   	call fn_rect
040D3D             1926   
040D3D             1927   	; next color ?
040D3D C1          1928   	pop bc
040D3E             1929   
040D3E C9          1930   	ret
040D3F             1931   
040D3F             1932   ; draw palette color whitout border and selection
040D3F             1933   ; C = color number (0-63)
040D3F             1934   fn_draw_palette_without_border:
040D3F C5          1935   	push bc
040D40             1936   
040D40             1937   	; choose palette color
040D40             1938   	vdu 18
040D40 3E 12       0001M  		LD	A, function
040D42 49 D7       0002M  		RST.LIS	10h
040D44             1939   	vdu 0
040D44 3E 00       0001M  		LD	A, function
040D46 49 D7       0002M  		RST.LIS	10h
040D48 C1          1940   	pop bc
040D49 C5          1941   	push bc
040D4A 79          1942   	ld a,c
040D4B             1943   	vdu_a
040D4B 49 D7       0001M  		RST.LIS	10h
040D4D             1944   
040D4D             1945   	; store coordinates for a palette square
040D4D DD 21 DB 17 1946   	ld ix,x1
       04          
040D52 E1          1947   	pop hl
040D53 E5          1948   	push hl
040D54 26 05       1949   	ld h,5
040D56 ED 6C       1950   	mlt hl
040D58 E5          1951   	push hl
040D59 DD 75 00    1952   	ld (ix+0),l
040D5C DD 74 01    1953   	ld (ix+1),h
040D5F             1954   
040D5F DD 21 DD 17 1955   	ld ix,y1
       04          
040D64 21 00 00 00 1956   	ld hl,0
040D68 DD 75 00    1957   	ld (ix+0),l
040D6B DD 74 01    1958   	ld (ix+1),h
040D6E             1959   
040D6E DD 21 DF 17 1960   	ld ix,x2
       04          
040D73 E1          1961   	pop hl
040D74 11 04 00 00 1962   	ld de,4
040D78 19          1963   	add hl,de
040D79 DD 75 00    1964   	ld (ix+0),l
040D7C DD 74 01    1965   	ld (ix+1),h
040D7F             1966   
040D7F DD 21 E1 17 1967   	ld ix,y2
       04          
040D84 21 0A 00 00 1968   	ld hl,10
040D88 DD 75 00    1969   	ld (ix+0),l
040D8B DD 74 01    1970   	ld (ix+1),h
040D8E             1971   
040D8E             1972   	; draw the palette filled square
040D8E CD 44 0B 04 1973   	call fn_rectf
040D92             1974   
040D92 C1          1975   	pop bc
040D93             1976   
040D93 C9          1977   	ret
040D94             1978   
040D94             1979   ; get an ascii key value
040D94             1980   fn_input_key:
040D94 C5          1981   	push bc
040D95             1982   	moscall mos_getkey
040D95 3E 00       0001M  		LD	A, function
040D97 49 CF       0002M  		RST.LIS	08h
040D99 C1          1983   	pop bc
040D9A C9          1984   	ret
040D9B             1985   
040D9B             1986   ; input a text of 8 chars
040D9B             1987   fn_input_text8:
040D9B             1988   	; locate x,y
040D9B             1989   	vdu 31
040D9B 3E 1F       0001M  		LD	A, function
040D9D 49 D7       0002M  		RST.LIS	10h
040D9F             1990   	vdu FILENAME_X
040D9F 3E 07       0001M  		LD	A, function
040DA1 49 D7       0002M  		RST.LIS	10h
040DA3             1991   	vdu FILENAME_Y
040DA3 3E 18       0001M  		LD	A, function
040DA5 49 D7       0002M  		RST.LIS	10h
040DA7             1992   
040DA7             1993   	; print text
040DA7 21 5D 18 04 1994   	ld hl,filename_label
040DAB 01 00 00 00 1995   	ld bc,0
040DAF AF          1996   	xor a
040DB0 49 DF       1997   	rst.lis $18
040DB2             1998   
040DB2             1999   	; show cursor
040DB2             2000   	vdu 23
040DB2 3E 17       0001M  		LD	A, function
040DB4 49 D7       0002M  		RST.LIS	10h
040DB6             2001   	vdu 1
040DB6 3E 01       0001M  		LD	A, function
040DB8 49 D7       0002M  		RST.LIS	10h
040DBA             2002   	vdu 1
040DBA 3E 01       0001M  		LD	A, function
040DBC 49 D7       0002M  		RST.LIS	10h
040DBE             2003   
040DBE 0E 00       2004   	ld c,0
040DC0             2005   
040DC0             2006   it8_loop:
040DC0             2007   	; get ascii key
040DC0 CD 94 0D 04 2008   	call fn_input_key
040DC4 B7          2009   	or a
040DC5 CA C0 0D 04 2010   	jp z,it8_loop
040DC9             2011   
040DC9 FE 2E       2012   	cp '.'
040DCB CA 15 0E 04 2013   	jp z,it8l_add_char
040DCF             2014   
040DCF FE 2D       2015   	cp '-'
040DD1 CA 15 0E 04 2016   	jp z,it8l_add_char
040DD5             2017   
040DD5 FE 5F       2018   	cp '_'
040DD7 CA 15 0E 04 2019   	jp z,it8l_add_char
040DDB             2020   
040DDB FE 7F       2021   	cp 127
040DDD CA 49 0E 04 2022   	jp z,it8l_backspace
040DE1             2023   
040DE1 FE 0D       2024   	cp 13
040DE3 CA 78 0E 04 2025   	jp z,it8l_return
040DE7             2026   
040DE7 FE 30       2027   	cp '0'
040DE9 DA C0 0D 04 2028   	jp c,it8_loop
040DED             2029   
040DED 16 39       2030   	ld d,'9'
040DEF 14          2031   	inc d
040DF0 BA          2032   	cp d
040DF1 DA 15 0E 04 2033   	jp c,it8l_add_char
040DF5             2034   
040DF5 FE 41       2035   	cp 'A'
040DF7 DA C0 0D 04 2036   	jp c,it8_loop
040DFB             2037   
040DFB 16 5A       2038   	ld d,'Z'
040DFD 14          2039   	inc d
040DFE BA          2040   	cp d
040DFF DA 15 0E 04 2041   	jp c,it8l_add_char
040E03             2042   
040E03 FE 61       2043   	cp 'a'
040E05 DA C0 0D 04 2044   	jp c,it8_loop
040E09             2045   
040E09 16 7A       2046   	ld d,'z'
040E0B 14          2047   	inc d
040E0C BA          2048   	cp d
040E0D DA 15 0E 04 2049   	jp c,it8l_add_char
040E11             2050   
040E11 C3 C0 0D 04 2051   	jp it8_loop
040E15             2052   
040E15             2053   it8l_add_char:
040E15 F5          2054   	push af
040E16 79          2055   	ld a,c
040E17 FE 0C       2056   	cp 12
040E19 38 05       2057   	jr c,it8l_poke_char
040E1B F1          2058   	pop af
040E1C C3 C0 0D 04 2059   	jp it8_loop
040E20             2060   
040E20             2061   it8l_poke_char:
040E20 F1          2062   	pop af
040E21 21 67 18 04 2063   	ld hl,filename
040E25 06 00       2064   	ld b,0
040E27 09          2065   	add hl,bc
040E28 77          2066   	ld (hl),a
040E29 0C          2067   	inc c
040E2A F5          2068   	push af
040E2B C5          2069   	push bc
040E2C             2070   
040E2C             2071   	; locate x,y
040E2C             2072   	vdu 31
040E2C 3E 1F       0001M  		LD	A, function
040E2E 49 D7       0002M  		RST.LIS	10h
040E30             2073   	vdu FILENAME_X+10
040E30 3E 11       0001M  		LD	A, function
040E32 49 D7       0002M  		RST.LIS	10h
040E34             2074   	vdu FILENAME_Y
040E34 3E 18       0001M  		LD	A, function
040E36 49 D7       0002M  		RST.LIS	10h
040E38             2075   
040E38             2076   	; print text
040E38 21 67 18 04 2077   	ld hl,filename
040E3C 01 00 00 00 2078   	ld bc,0
040E40 AF          2079   	xor a
040E41 49 DF       2080   	rst.lis $18
040E43             2081   
040E43 C1          2082   	pop bc
040E44 F1          2083   	pop af
040E45             2084   
040E45 C3 C0 0D 04 2085   	jp it8_loop
040E49             2086   
040E49             2087   it8l_backspace:
040E49 79          2088   	ld a,c
040E4A FE 00       2089   	cp 0
040E4C CA C0 0D 04 2090   	jp z,it8_loop
040E50             2091   
040E50             2092   	; delete a character of the filename
040E50 21 67 18 04 2093   	ld hl,filename
040E54 06 00       2094   	ld b,0
040E56 09          2095   	add hl,bc
040E57 AF          2096   	xor a
040E58 77          2097   	ld (hl),a
040E59 0D          2098   	dec c
040E5A C5          2099   	push bc
040E5B             2100   
040E5B             2101   	; locate x,y
040E5B             2102   	vdu 31
040E5B 3E 1F       0001M  		LD	A, function
040E5D 49 D7       0002M  		RST.LIS	10h
040E5F 3E 11       2103   	ld a,FILENAME_X+10
040E61 81          2104   	add a,c
040E62             2105   	vdu_a
040E62 49 D7       0001M  		RST.LIS	10h
040E64             2106   	vdu FILENAME_Y
040E64 3E 18       0001M  		LD	A, function
040E66 49 D7       0002M  		RST.LIS	10h
040E68             2107   
040E68             2108   	; print text
040E68 21 88 18 04 2109   	ld hl,spacechar
040E6C 01 00 00 00 2110   	ld bc,0
040E70 AF          2111   	xor a
040E71 49 DF       2112   	rst.lis $18
040E73             2113   
040E73 C1          2114   	pop bc
040E74 C3 C0 0D 04 2115   	jp it8_loop
040E78             2116   
040E78             2117   it8l_return:
040E78             2118   	; locate x,y
040E78             2119   	vdu 31
040E78 3E 1F       0001M  		LD	A, function
040E7A 49 D7       0002M  		RST.LIS	10h
040E7C             2120   	vdu FILENAME_X
040E7C 3E 07       0001M  		LD	A, function
040E7E 49 D7       0002M  		RST.LIS	10h
040E80             2121   	vdu FILENAME_Y
040E80 3E 18       0001M  		LD	A, function
040E82 49 D7       0002M  		RST.LIS	10h
040E84             2122   
040E84             2123   	; print text
040E84 21 8A 18 04 2124   	ld hl,void_filename
040E88 01 00 00 00 2125   	ld bc,0
040E8C AF          2126   	xor a
040E8D 49 DF       2127   	rst.lis $18
040E8F             2128   
040E8F             2129   	; hide cursor
040E8F             2130   	vdu 23
040E8F 3E 17       0001M  		LD	A, function
040E91 49 D7       0002M  		RST.LIS	10h
040E93             2131   	vdu 1
040E93 3E 01       0001M  		LD	A, function
040E95 49 D7       0002M  		RST.LIS	10h
040E97             2132   	vdu 0
040E97 3E 00       0001M  		LD	A, function
040E99 49 D7       0002M  		RST.LIS	10h
040E9B             2133   
040E9B             2134   it8l_endloop:
040E9B 21 B6 FF FF 2135   	ld hl,KEY_RETURN
040E9F CD 18 17 04 2136   	call fn_inkey
040EA3 FE 01       2137   	CP 1
040EA5 CA 9B 0E 04 2138   	jp z,it8l_endloop
040EA9             2139   
040EA9 C9          2140   	ret
040EAA             2141   
040EAA             2142   ; load a palette
040EAA             2143   fn_load_palette:
040EAA             2144   	; clear the filename on the screen
040EAA 21 67 18 04 2145   	ld hl,filename
040EAE 06 0C       2146   	ld b,12
040EB0 AF          2147   	xor a
040EB1             2148   
040EB1             2149   lp_clear_filename:
040EB1 77          2150   	ld (hl),a
040EB2 23          2151   	inc hl
040EB3 10 FC       2152   	djnz lp_clear_filename
040EB5             2153   
040EB5             2154   	; get filename
040EB5 CD 9B 0D 04 2155   	call fn_input_text8
040EB9             2156   
040EB9             2157   	; set path to 'palettes/'
040EB9 21 7C 18 04 2158   	ld hl,palette_path
040EBD             2159   	moscall mos_cd
040EBD 3E 03       0001M  		LD	A, function
040EBF 49 CF       0002M  		RST.LIS	08h
040EC1             2160   
040EC1             2161   	; exit on folder error
040EC1 FE 00       2162   	cp 0
040EC3 C2 85 0F 04 2163   	jp nz,lp_folder_error
040EC7             2164   
040EC7             2165   	; open the file for read
040EC7 21 67 18 04 2166   	ld hl,filename
040ECB 0E 01       2167   	ld c,fa_open_existing|fa_read
040ECD             2168   	moscall mos_fopen
040ECD 3E 0A       0001M  		LD	A, function
040ECF 49 CF       0002M  		RST.LIS	08h
040ED1             2169   
040ED1             2170   	; exit on file error
040ED1 FE 00       2171   	cp 0
040ED3 CA F3 10 04 2172   	jp z,lp_file_error
040ED7             2173   
040ED7             2174   	; filehandle -> C
040ED7 4F          2175   	ld c,a
040ED8             2176   
040ED8             2177   	; get palette header
040ED8 21 09 39 04 2178   	ld hl,header_buffer
040EDC 11 10 00 00 2179   	ld de,16
040EE0 C5          2180   	push bc ; store filehandle
040EE1             2181   	moscall mos_fread
040EE1 3E 1A       0001M  		LD	A, function
040EE3 49 CF       0002M  		RST.LIS	08h
040EE5 C1          2182   	pop bc ; restore filehandle
040EE6 3E 10       2183   	ld a,16
040EE8 BB          2184   	cp e
040EE9 C2 69 0F 04 2185   	jp nz,lp_close_error
040EED             2186   
040EED             2187   	; compare loaded header with needed header
040EED 11 65 3C 04 2188   	ld de,header
040EF1 21 09 39 04 2189   	ld hl,header_buffer
040EF5 47          2190   	ld b,a
040EF6             2191   
040EF6             2192   lp_compare:
040EF6 1A          2193   	ld a,(de)
040EF7 BE          2194   	cp (hl)
040EF8 C2 8D 0F 04 2195   	jp nz,lp_header_error
040EFC             2196   
040EFC 13          2197   	inc de
040EFD 23          2198   	inc hl
040EFE 05          2199   	dec b
040EFF             2200   
040EFF 78          2201   	ld a,b
040F00 FE 00       2202   	cp 0
040F02 C2 F6 0E 04 2203   	jp nz,lp_compare
040F06             2204   
040F06             2205   	; prepare to read the number of colors
040F06 21 19 39 04 2206   	ld hl,color_buffer
040F0A             2207   
040F0A             2208   lp_getcount:
040F0A             2209   	; read a string for colors count
040F0A C5          2210   	push bc
040F0B E5          2211   	push hl
040F0C             2212   
040F0C             2213   	; read colors data
040F0C             2214   	moscall mos_fgetc
040F0C 3E 0C       0001M  		LD	A, function
040F0E 49 CF       0002M  		RST.LIS	08h
040F10             2215   
040F10 E1          2216   	pop hl
040F11 C1          2217   	pop bc
040F12             2218   
040F12             2219   	; exit if eof
040F12 DA 69 0F 04 2220   	jp c,lp_close_error
040F16             2221   
040F16 FE 30       2222   	cp 48 ; < 0
040F18 38 0A       2223   	jr c,lpgc_next
040F1A FE 3A       2224   	cp 58 ; > 9
040F1C D2 EE 10 04 2225   	jp nc,lp_data_error
040F20             2226   
040F20 77          2227   	ld (hl),a
040F21 23          2228   	inc hl
040F22 18 E6       2229   	jr lp_getcount
040F24             2230   
040F24             2231   lpgc_next:
040F24 F5          2232   	push af
040F25 3E 0D       2233   	ld a,13
040F27 77          2234   	ld (hl),a ; store CR
040F28 F1          2235   	pop af
040F29             2236   
040F29             2237   	; test CR
040F29 FE 0D       2238   	cp 13
040F2B C2 69 0F 04 2239   	jp nz,lp_close_error
040F2F             2240   
040F2F C5          2241   	push bc
040F30             2242   
040F30             2243   	; read LF
040F30             2244   	moscall mos_fgetc
040F30 3E 0C       0001M  		LD	A, function
040F32 49 CF       0002M  		RST.LIS	08h
040F34             2245   
040F34 C1          2246   	pop bc
040F35             2247   
040F35             2248   	; test LF
040F35 FE 0A       2249   	cp 10
040F37 C2 69 0F 04 2250   	jp nz,lp_close_error
040F3B             2251   
040F3B             2252   	; prepare to read color strings
040F3B 11 00 00 00 2253   	ld de,#000000
040F3F 21 1C 39 04 2254   	ld hl,palette_buffer
040F43             2255   
040F43             2256   lp_load_pal_loop:
040F43 C5          2257   	push bc
040F44 D5          2258   	push de
040F45 E5          2259   	push hl
040F46             2260   
040F46             2261   	; read colors data
040F46             2262   	moscall mos_fgetc
040F46 3E 0C       0001M  		LD	A, function
040F48 49 CF       0002M  		RST.LIS	08h
040F4A             2263   
040F4A             2264   	; exit if eof
040F4A DA 62 0F 04 2265   	jp c,lp_loaded
040F4E             2266   
040F4E E1          2267   	pop hl
040F4F D1          2268   	pop de
040F50 C1          2269   	pop bc
040F51             2270   
040F51 77          2271   	ld (hl),a ; store loaded char in palette buffer
040F52 23          2272   	inc hl
040F53 13          2273   	inc de ; count chars
040F54 7A          2274   	ld a,d
040F55 FE 03       2275   	cp MAX_PAL_DATA_HI
040F57 DA 43 0F 04 2276   	jp c,lp_load_pal_loop
040F5B 7B          2277   	ld a,e
040F5C FE 44       2278   	cp MAX_PAL_DATA_LO
040F5E DA 43 0F 04 2279   	jp c,lp_load_pal_loop
040F62             2280   
040F62             2281   ; end of file
040F62             2282   lp_loaded:
040F62 E1          2283   	pop hl
040F63 D1          2284   	pop de
040F64 C1          2285   	pop bc
040F65             2286   
040F65 C3 95 0F 04 2287   	jp lp_close
040F69             2288   
040F69             2289   lp_close_error:
040F69 C5          2290   	push bc
040F6A             2291   
040F6A             2292   	; read error
040F6A CD 2E 15 04 2293   	call fn_print_file_error
040F6E             2294   
040F6E C1          2295   	pop bc
040F6F             2296   
040F6F             2297   	; close the file
040F6F             2298   	moscall mos_fclose
040F6F 3E 0B       0001M  		LD	A, function
040F71 49 CF       0002M  		RST.LIS	08h
040F73             2299   
040F73             2300   	; set path to home
040F73 21 85 18 04 2301   	ld hl,back_path
040F77             2302   	moscall mos_cd
040F77 3E 03       0001M  		LD	A, function
040F79 49 CF       0002M  		RST.LIS	08h
040F7B             2303   
040F7B             2304   	; exit on error
040F7B FE 00       2305   	cp 0
040F7D C2 85 0F 04 2306   	jp nz,lp_folder_error
040F81             2307   
040F81 C3 E4 10 04 2308   	jp lp_exit
040F85             2309   
040F85             2310   lp_folder_error:
040F85             2311   	; write error
040F85 CD 65 15 04 2312   	call fn_print_folder_error
040F89 C3 E4 10 04 2313   	jp lp_exit
040F8D             2314   
040F8D             2315   lp_header_error:
040F8D             2316   	; write error
040F8D CD 9C 15 04 2317   	call fn_print_header_error
040F91 C3 E4 10 04 2318   	jp lp_exit
040F95             2319   
040F95             2320   lp_close:
040F95 C5          2321   	push bc
040F96             2322   
040F96             2323   	; close the file
040F96             2324   	moscall mos_fclose
040F96 3E 0B       0001M  		LD	A, function
040F98 49 CF       0002M  		RST.LIS	08h
040F9A             2325   
040F9A C1          2326   	pop bc
040F9B             2327   
040F9B             2328   	; set path to home
040F9B 21 85 18 04 2329   	ld hl,back_path
040F9F             2330   	moscall mos_cd
040F9F 3E 03       0001M  		LD	A, function
040FA1 49 CF       0002M  		RST.LIS	08h
040FA3             2331   
040FA3             2332   	; exit on error
040FA3 FE 00       2333   	cp 0
040FA5 C2 85 0F 04 2334   	jp nz,lp_folder_error
040FA9             2335   
040FA9             2336   	; read the number of colors we have in the palette
040FA9 21 19 39 04 2337   	ld hl,color_buffer
040FAD 7E          2338   	ld a,(hl)
040FAE 47          2339   	ld b,a
040FAF 23          2340   	inc hl
040FB0 7E          2341   	ld a,(hl)
040FB1 4F          2342   	ld c,a ; bc = 1st char, 2nd char or CR
040FB2             2343   
040FB2             2344   	; first is a char number ?
040FB2 78          2345   	ld a,b
040FB3 FE 30       2346   	cp 48
040FB5 DA EE 10 04 2347   	jp c,lp_data_error
040FB9 FE 3A       2348   	cp 58
040FBB D2 EE 10 04 2349   	jp nc,lp_data_error
040FBF             2350   
040FBF 79          2351   	ld a,c
040FC0 FE 0D       2352   	cp 13
040FC2 C2 E4 0F 04 2353   	jp nz,lp_two_numbers
040FC6             2354   
040FC6             2355   ; only one number
040FC6 78          2356   	ld a,b
040FC7 D6 30       2357   	sub 48
040FC9             2358   
040FC9 21 FC 18 04 2359   	ld hl,new_colors_count
040FCD 77          2360   	ld (hl),a
040FCE             2361   
040FCE FE 00       2362   	cp 0
040FD0 CA EE 10 04 2363   	jp z,lp_data_error
040FD4 FE 03       2364   	cp 3
040FD6 DA 19 10 04 2365   	jp c,lp_two_colors
040FDA FE 05       2366   	cp 5
040FDC DA 3A 10 04 2367   	jp c,lp_four_colors
040FE0             2368   
040FE0 C3 5B 10 04 2369   	jp lp_sixteen_colors
040FE4             2370   
040FE4             2371   ; two numbers
040FE4             2372   lp_two_numbers:
040FE4 79          2373   	ld a,c
040FE5 FE 30       2374   	cp 48
040FE7 DA EE 10 04 2375   	jp c,lp_data_error
040FEB FE 3A       2376   	cp 58
040FED D2 EE 10 04 2377   	jp nc,lp_data_error
040FF1             2378   
040FF1 78          2379   	ld a,b
040FF2 D6 30       2380   	sub 48
040FF4 01 00 00 00 2381   	ld bc,#000000
040FF8 47          2382   	ld b,a
040FF9 0E 0A       2383   	ld c,10
040FFB ED 4C       2384   	mlt bc
040FFD 81          2385   	add a,c
040FFE             2386   
040FFE 21 FC 18 04 2387   	ld hl,new_colors_count
041002 77          2388   	ld (hl),a
041003             2389   
041003 FE 0A       2390   	cp 10
041005 DA EE 10 04 2391   	jp c,lp_data_error
041009 FE 11       2392   	cp 17
04100B DA 5B 10 04 2393   	jp c,lp_sixteen_colors
04100F FE 41       2394   	cp 65
041011 DA 7C 10 04 2395   	jp c,lp_sixty_four_colors
041015             2396   
041015 C3 EE 10 04 2397   	jp lp_data_error
041019             2398   
041019             2399   lp_two_colors:
041019 21 FB 18 04 2400   	ld hl,colors_count
04101D 3E 02       2401   	ld a,2
04101F 77          2402   	ld (hl),a
041020             2403   
041020 47          2404   	ld b,a
041021 21 F1 17 04 2405   	ld hl,current_pen
041025 7E          2406   	ld a,(hl)
041026 B8          2407   	cp b
041027 38 02       2408   	jr c,lptc_done
041029 05          2409   	dec b
04102A 70          2410   	ld (hl),b
04102B             2411   
04102B             2412   lptc_done:
04102B 21 FC 18 04 2413   	ld hl,new_colors_count
04102F 7E          2414   	ld a,(hl) ; real number of coulours
041030 06 00       2415   	ld b,0 ; start wit color 0
041032 21 1C 39 04 2416   	ld hl,palette_buffer ; palette will be got here
041036 C3 9D 10 04 2417   	jp lp_read_colors
04103A             2418   
04103A             2419   lp_four_colors:
04103A 21 FB 18 04 2420   	ld hl,colors_count
04103E 3E 04       2421   	ld a,4
041040 77          2422   	ld (hl),a
041041             2423   
041041 47          2424   	ld b,a
041042 21 F1 17 04 2425   	ld hl,current_pen
041046 7E          2426   	ld a,(hl)
041047 B8          2427   	cp b
041048 38 02       2428   	jr c,lpfc_done
04104A 05          2429   	dec b
04104B 70          2430   	ld (hl),b
04104C             2431   
04104C             2432   lpfc_done:
04104C 21 FC 18 04 2433   	ld hl,new_colors_count
041050 7E          2434   	ld a,(hl) ; real number of coulours
041051 06 00       2435   	ld b,0 ; start wit color 0
041053 21 1C 39 04 2436   	ld hl,palette_buffer ; palette will be got here
041057 C3 9D 10 04 2437   	jp lp_read_colors
04105B             2438   
04105B             2439   lp_sixteen_colors:
04105B 21 FB 18 04 2440   	ld hl,colors_count
04105F 3E 10       2441   	ld a,16
041061 77          2442   	ld (hl),a
041062             2443   
041062 47          2444   	ld b,a
041063 21 F1 17 04 2445   	ld hl,current_pen
041067 7E          2446   	ld a,(hl)
041068 B8          2447   	cp b
041069 38 02       2448   	jr c,lpsc_done
04106B 05          2449   	dec b
04106C 70          2450   	ld (hl),b
04106D             2451   
04106D             2452   lpsc_done:
04106D 21 FC 18 04 2453   	ld hl,new_colors_count
041071 7E          2454   	ld a,(hl) ; real number of coulours
041072 06 00       2455   	ld b,0 ; start wit color 0
041074 21 1C 39 04 2456   	ld hl,palette_buffer ; palette will be got here
041078 C3 9D 10 04 2457   	jp lp_read_colors
04107C             2458   
04107C             2459   lp_sixty_four_colors:
04107C 21 FB 18 04 2460   	ld hl,colors_count
041080 3E 40       2461   	ld a,64
041082 77          2462   	ld (hl),a
041083             2463   
041083 47          2464   	ld b,a
041084 21 F1 17 04 2465   	ld hl,current_pen
041088 7E          2466   	ld a,(hl)
041089 B8          2467   	cp b
04108A 38 02       2468   	jr c,lpsfc_done
04108C 05          2469   	dec b
04108D 70          2470   	ld (hl),b
04108E             2471   
04108E             2472   lpsfc_done:
04108E 21 FC 18 04 2473   	ld hl,new_colors_count
041092 7E          2474   	ld a,(hl) ; real number of coulours
041093 06 00       2475   	ld b,0 ; start wit color 0
041095 21 1C 39 04 2476   	ld hl,palette_buffer ; palette will be got here
041099 C3 9D 10 04 2477   	jp lp_read_colors
04109D             2478   
04109D             2479   lp_read_colors:
04109D F5          2480   	push af
04109E E5          2481   	push hl
04109F C5          2482   	push bc
0410A0             2483   
0410A0 CD 06 11 04 2484   	call lp_read_tint ; read red tint
0410A4 FE FF       2485   	cp 255
0410A6 CA E7 10 04 2486   	jp z,lp_wrong_exit1
0410AA             2487   
0410AA E5          2488   	push hl
0410AB 21 FD 18 04 2489   	ld hl,red_tint
0410AF 77          2490   	ld (hl),a
0410B0 E1          2491   	pop hl
0410B1             2492   
0410B1 CD 06 11 04 2493   	call lp_read_tint ; read green tint
0410B5 FE FF       2494   	cp 255
0410B7 CA E6 10 04 2495   	jp z,lp_wrong_exit2
0410BB             2496   
0410BB E5          2497   	push hl
0410BC 21 FE 18 04 2498   	ld hl,green_tint
0410C0 77          2499   	ld (hl),a
0410C1 E1          2500   	pop hl
0410C2             2501   
0410C2 CD 06 11 04 2502   	call lp_read_tint ; read blue tint
0410C6 FE FF       2503   	cp 255
0410C8 CA E5 10 04 2504   	jp z,lp_wrong_exit3
0410CC             2505   
0410CC E5          2506   	push hl
0410CD 21 FF 18 04 2507   	ld hl,blue_tint
0410D1 77          2508   	ld (hl),a
0410D2 E1          2509   	pop hl
0410D3             2510   
0410D3 C1          2511   	pop bc
0410D4 C5          2512   	push bc
0410D5             2513   
0410D5 CD 93 11 04 2514   	call lp_set_tint
0410D9             2515   
0410D9 C1          2516   	pop bc
0410DA E1          2517   	pop hl
0410DB F1          2518   	pop af
0410DC             2519   
0410DC 04          2520   	inc b ; increment number of colors
0410DD 3D          2521   	dec a ; decrement real number of colors
0410DE FE 00       2522   	cp 0
0410E0 C2 9D 10 04 2523   	jp nz,lp_read_colors
0410E4             2524   
0410E4             2525   lp_exit:
0410E4 C9          2526   	ret
0410E5             2527   
0410E5             2528   lp_wrong_exit3:
0410E5 D1          2529   	pop de
0410E6             2530   
0410E6             2531   lp_wrong_exit2:
0410E6 C1          2532   	pop bc
0410E7             2533   
0410E7             2534   lp_wrong_exit1:
0410E7 E1          2535   	pop hl
0410E8 C1          2536   	pop bc
0410E9 F1          2537   	pop af
0410EA C3 EE 10 04 2538   	jp lp_data_error
0410EE             2539   
0410EE             2540   lp_data_error:
0410EE CD D3 15 04 2541   	call fn_print_data_error
0410F2             2542   
0410F2 C9          2543   	ret
0410F3             2544   
0410F3             2545   lp_file_error:
0410F3 CD 2E 15 04 2546   	call fn_print_file_error
0410F7             2547   
0410F7             2548   	; set path to home
0410F7 21 85 18 04 2549   	ld hl,back_path
0410FB             2550   	moscall mos_cd
0410FB 3E 03       0001M  		LD	A, function
0410FD 49 CF       0002M  		RST.LIS	08h
0410FF             2551   
0410FF             2552   	; exit on error
0410FF FE 00       2553   	cp 0
041101 C2 85 0F 04 2554   	jp nz,lp_folder_error
041105             2555   
041105 C9          2556   	ret
041106             2557   
041106             2558   lp_read_tint:
041106 0E 00       2559   	ld c,0 ; number of chars readen for a single string number
041108 11 61 3C 04 2560   	ld de,temp_chars_buffer ; temp buffer for a string number
04110C             2561   
04110C             2562   	; read next string number
04110C CD 77 11 04 2563   	call lprt_read_chars
041110             2564   
041110 79          2565   	ld a,c
041111 FE 00       2566   	cp 0 ; no numbers
041113 CA 2D 11 04 2567   	jp z,lprt_exit
041117 FE 04       2568   	cp 4 ; too many numbers
041119 D2 2D 11 04 2569   	jp nc,lprt_exit
04111D             2570   
04111D FE 03       2571   	cp 3
04111F 28 2A       2572   	jr z,lprt_three_int
041121             2573   
041121 FE 02       2574   	cp 2
041123 28 0B       2575   	jr z,lprt_two_int
041125             2576   
041125             2577   	; one int only
041125 11 61 3C 04 2578   	ld de,temp_chars_buffer
041129 1A          2579   	ld a,(de)
04112A D6 30       2580   	sub 48
04112C C9          2581   	ret
04112D             2582   
04112D             2583   lprt_exit:
04112D 3E FF       2584   	ld a,255
04112F C9          2585   	ret
041130             2586   
041130             2587   ; two int
041130             2588   lprt_two_int:
041130 C5          2589   	push bc
041131 11 61 3C 04 2590   	ld de,temp_chars_buffer
041135 1A          2591   	ld a,(de)
041136 D6 30       2592   	sub 48
041138 D5          2593   	push de
041139 11 00 00 00 2594   	ld de,#000000
04113D 5F          2595   	ld e,a
04113E 16 0A       2596   	ld d,10
041140 ED 5C       2597   	mlt de
041142 43          2598   	ld b,e
041143 D1          2599   	pop de
041144 13          2600   	inc de
041145 1A          2601   	ld a,(de)
041146 D6 30       2602   	sub 48
041148 80          2603   	add a,b ; full int value is here
041149 C1          2604   	pop bc
04114A C9          2605   	ret
04114B             2606   
04114B             2607   ; three int
04114B             2608   lprt_three_int:
04114B C5          2609   	push bc
04114C 11 61 3C 04 2610   	ld de,temp_chars_buffer
041150 1A          2611   	ld a,(de)
041151 D6 30       2612   	sub 48
041153 D5          2613   	push de
041154 11 00 00 00 2614   	ld de,#000000
041158 5F          2615   	ld e,a
041159 16 64       2616   	ld d,100
04115B ED 5C       2617   	mlt de
04115D 43          2618   	ld b,e
04115E D1          2619   	pop de
04115F 13          2620   	inc de
041160 1A          2621   	ld a,(de)
041161 D6 30       2622   	sub 48
041163 D5          2623   	push de
041164 11 00 00 00 2624   	ld de,#000000
041168 5F          2625   	ld e,a
041169 16 0A       2626   	ld d,10
04116B ED 5C       2627   	mlt de
04116D 4B          2628   	ld c,e
04116E D1          2629   	pop de
04116F 13          2630   	inc de
041170 1A          2631   	ld a,(de)
041171 D6 30       2632   	sub 48
041173 81          2633   	add a,c
041174 80          2634   	add a,b ; full int value is here
041175 C1          2635   	pop bc
041176 C9          2636   	ret
041177             2637   
041177             2638   lprt_read_chars:
041177 3E 0D       2639   	ld a,13
041179 12          2640   	ld (de),a ; store eol as default temp char
04117A             2641   
04117A 7E          2642   	ld a,(hl) ; get a new char in the palette buffer
04117B 23          2643   	inc hl
04117C             2644   
04117C FE 20       2645   	cp 32
04117E C8          2646   	ret z ; ret if space
04117F FE 0D       2647   	cp 13
041181 28 F4       2648   	jr z,lprt_read_chars ; loop if CR
041183 FE 0A       2649   	cp 10
041185 C8          2650   	ret z ; ret if LF
041186 FE 30       2651   	cp 48
041188 D8          2652   	ret c ; ret if not number
041189 FE 3A       2653   	cp 58
04118B D0          2654   	ret nc ; ret if not number
04118C             2655   
04118C             2656   ; found a number, store it
04118C 12          2657   	ld (de),a
04118D 13          2658   	inc de
04118E 0C          2659   	inc c
04118F             2660   
04118F C3 77 11 04 2661   	jp lprt_read_chars
041193             2662   
041193             2663   ; set tint (RGB = c,e,l)
041193             2664   lp_set_tint:
041193 F5          2665   	push af
041194 C5          2666   	push bc
041195 D5          2667   	push de
041196 E5          2668   	push hl
041197             2669   
041197 C5          2670   	push bc
041198             2671   	vdu 19
041198 3E 13       0001M  		LD	A, function
04119A 49 D7       0002M  		RST.LIS	10h
04119C C1          2672   	pop bc
04119D 78          2673   	ld a,b
04119E             2674   	vdu_a
04119E 49 D7       0001M  		RST.LIS	10h
0411A0             2675   	vdu 255
0411A0 3E FF       0001M  		LD	A, function
0411A2 49 D7       0002M  		RST.LIS	10h
0411A4             2676   
0411A4 21 FD 18 04 2677   	ld hl,red_tint
0411A8 7E          2678   	ld a,(hl)
0411A9             2679   	vdu_a
0411A9 49 D7       0001M  		RST.LIS	10h
0411AB             2680   
0411AB 21 FE 18 04 2681   	ld hl,green_tint
0411AF 7E          2682   	ld a,(hl)
0411B0             2683   	vdu_a
0411B0 49 D7       0001M  		RST.LIS	10h
0411B2             2684   
0411B2 21 FF 18 04 2685   	ld hl,blue_tint
0411B6 7E          2686   	ld a,(hl)
0411B7             2687   	vdu_a
0411B7 49 D7       0001M  		RST.LIS	10h
0411B9             2688   
0411B9 E1          2689   	pop hl
0411BA D1          2690   	pop de
0411BB C1          2691   	pop bc
0411BC F1          2692   	pop af
0411BD C9          2693   	ret
0411BE             2694   
0411BE             2695   ; save the palette
0411BE             2696   fn_save_palette:
0411BE C9          2697   	ret
0411BF             2698   
0411BF             2699   ; load a sprite, giving its full name, with extension
0411BF             2700   fn_load_sprite:
0411BF             2701   	; clear the filename on the screen
0411BF 21 67 18 04 2702   	ld hl,filename
0411C3 06 0C       2703   	ld b,12
0411C5 AF          2704   	xor a
0411C6             2705   
0411C6             2706   ls_clear_filename:
0411C6 77          2707   	ld (hl),a
0411C7 23          2708   	inc hl
0411C8 10 FC       2709   	djnz ls_clear_filename
0411CA             2710   
0411CA             2711   	; get filename
0411CA CD 9B 0D 04 2712   	call fn_input_text8
0411CE             2713   
0411CE             2714   	; set path to 'sprites/'
0411CE 21 74 18 04 2715   	ld hl,sprite_path
0411D2             2716   	moscall mos_cd
0411D2 3E 03       0001M  		LD	A, function
0411D4 49 CF       0002M  		RST.LIS	08h
0411D6             2717   
0411D6             2718   	; exit on folder error
0411D6 FE 00       2719   	cp 0
0411D8 C2 A7 12 04 2720   	jp nz,ls_folder_error
0411DC             2721   
0411DC             2722   	; open the file for read
0411DC 21 67 18 04 2723   	ld hl,filename
0411E0 0E 01       2724   	ld c,fa_open_existing|fa_read
0411E2             2725   	moscall mos_fopen
0411E2 3E 0A       0001M  		LD	A, function
0411E4 49 CF       0002M  		RST.LIS	08h
0411E6             2726   
0411E6             2727   	; exit on file error
0411E6 FE 00       2728   	cp 0
0411E8 CA D5 12 04 2729   	jp z,ls_file_error
0411EC             2730   
0411EC             2731   	; filehandle -> C
0411EC 4F          2732   	ld c,a
0411ED             2733   
0411ED             2734   	; get colors count
0411ED             2735   	moscall mos_fgetc
0411ED 3E 0C       0001M  		LD	A, function
0411EF 49 CF       0002M  		RST.LIS	08h
0411F1 DA 82 12 04 2736   	jp c,ls_close_error
0411F5             2737   
0411F5 FE 41       2738   	cp MAX_COLORS + 1
0411F7 D2 82 12 04 2739   	jp nc,ls_close_error
0411FB             2740   
0411FB             2741   	; store colors count
0411FB 21 FB 18 04 2742   	ld hl,colors_count
0411FF 77          2743   	ld (hl),a
041200             2744   
041200             2745   	; get frames count
041200             2746   	moscall mos_fgetc
041200 3E 0C       0001M  		LD	A, function
041202 49 CF       0002M  		RST.LIS	08h
041204 DA 82 12 04 2747   	jp c,ls_close_error
041208             2748   
041208             2749   	; store frames count
041208 21 01 19 04 2750   	ld hl,frames_count
04120C 77          2751   	ld (hl),a
04120D             2752   
04120D             2753   	; set last frame as current frame
04120D 21 00 19 04 2754   	ld hl,current_frame
041211 3D          2755   	dec a
041212 77          2756   	ld (hl),a
041213             2757   
041213             2758   	; get sprite size
041213             2759   	moscall mos_fgetc
041213 3E 0C       0001M  		LD	A, function
041215 49 CF       0002M  		RST.LIS	08h
041217 DA 82 12 04 2760   	jp c,ls_close_error
04121B             2761   
04121B             2762   	; store sprite size
04121B 21 F0 17 04 2763   	ld hl,spr_size
04121F 77          2764   	ld (hl),a
041220             2765   
041220             2766   	; set 4x4 pixel width
041220 FE 04       2767   	cp SPR44
041222 20 09       2768   	jr nz,ls_next1
041224             2769   
041224 21 EF 17 04 2770   	ld hl,pixel_width
041228 06 20       2771   	ld b,SPR44_width
04122A 70          2772   	ld (hl),b
04122B 18 21       2773   	jr ls_next4
04122D             2774   
04122D             2775   ls_next1:
04122D             2776   	; set 8x8 pixel width
04122D FE 08       2777   	cp SPR88
04122F 20 09       2778   	jr nz,ls_next2
041231             2779   
041231 21 EF 17 04 2780   	ld hl,pixel_width
041235 06 10       2781   	ld b,SPR88_width
041237 70          2782   	ld (hl),b
041238 18 14       2783   	jr ls_next4
04123A             2784   
04123A             2785   ls_next2:
04123A             2786   
04123A             2787   	; set 16x16 pixel width
04123A FE 10       2788   	cp SPR1616
04123C 20 09       2789   	jr nz,ls_next3
04123E             2790   
04123E 21 EF 17 04 2791   	ld hl,pixel_width
041242 06 08       2792   	ld b,SPR1616_width
041244 70          2793   	ld (hl),b
041245 18 07       2794   	jr ls_next4
041247             2795   
041247             2796   ls_next3:
041247             2797   
041247 21 EF 17 04 2798   	ld hl,pixel_width
04124B 06 04       2799   	ld b,SPR3232_width
04124D 70          2800   	ld (hl),b
04124E             2801   
04124E             2802   ls_next4:
04124E 21 00 00 00 2803   	ld hl,#000000
041252 6F          2804   	ld l,a
041253 67          2805   	ld h,a
041254 ED 6C       2806   	mlt hl ; HL = sprite length
041256 E5          2807   	push hl
041257             2808   
041257             2809   	; get frames count
041257 21 00 19 04 2810   	ld hl,current_frame
04125B 46          2811   	ld b,(hl)
04125C             2812   
04125C E1          2813   	pop hl
04125D             2814   
04125D 78          2815   	ld a,b
04125E FE 00       2816   	cp 0
041260 28 07       2817   	jr z,ls_read_data
041262             2818   
041262             2819   	; de = size²
041262 11 00 04 00 2820   	ld de,ONE_FRAME_BUFFER_SIZE
041266             2821   ls_add_length:
041266 19          2822   	add hl,de
041267 10 FD       2823   	djnz ls_add_length
041269             2824   
041269             2825   ls_read_data:
041269 E5          2826   	push hl
04126A E5          2827   	push hl
04126B D1          2828   	pop de
04126C 7B          2829   	ld a,e
04126D 21 09 19 04 2830   	ld hl,sprite_buffer
041271             2831   	moscall mos_fread
041271 3E 1A       0001M  		LD	A, function
041273 49 CF       0002M  		RST.LIS	08h
041275 E1          2832   	pop hl
041276 7C          2833   	ld a,h
041277 BA          2834   	cp d
041278 20 08       2835   	jr nz,ls_close_error
04127A 7D          2836   	ld a,l
04127B BB          2837   	cp e
04127C 20 04       2838   	jr nz,ls_close_error
04127E C3 AF 12 04 2839   	jp ls_close
041282             2840   
041282             2841   ls_close_error:
041282 C5          2842   	push bc
041283             2843   
041283             2844   	; read error
041283 CD 2E 15 04 2845   	call fn_print_file_error
041287             2846   
041287 C1          2847   	pop bc
041288             2848   
041288             2849   	; close the file
041288             2850   	moscall mos_fclose
041288 3E 0B       0001M  		LD	A, function
04128A 49 CF       0002M  		RST.LIS	08h
04128C             2851   
04128C             2852   	; set path to home
04128C 21 85 18 04 2853   	ld hl,back_path
041290             2854   	moscall mos_cd
041290 3E 03       0001M  		LD	A, function
041292 49 CF       0002M  		RST.LIS	08h
041294             2855   
041294             2856   	; exit on error
041294 FE 00       2857   	cp 0
041296 C2 A7 12 04 2858   	jp nz,ls_folder_error
04129A             2859   
04129A             2860   
04129A             2861   	; reset current frame and coordinates of the drawing pixel
04129A 21 EB 17 04 2862   	ld hl,xpix
04129E AF          2863   	xor a
04129F 77          2864   	ld (hl),a
0412A0 21 EC 17 04 2865   	ld hl,ypix
0412A4 77          2866   	ld (hl),a
0412A5 18 25       2867   	jr ls_exit
0412A7             2868   
0412A7             2869   ls_folder_error:
0412A7             2870   	; write error
0412A7 CD 65 15 04 2871   	call fn_print_folder_error
0412AB C3 CC 12 04 2872   	jp ls_exit
0412AF             2873   
0412AF             2874   ls_close:
0412AF             2875   	; close the file
0412AF             2876   	moscall mos_fclose
0412AF 3E 0B       0001M  		LD	A, function
0412B1 49 CF       0002M  		RST.LIS	08h
0412B3             2877   
0412B3             2878   	; set path to home
0412B3 21 85 18 04 2879   	ld hl,back_path
0412B7             2880   	moscall mos_cd
0412B7 3E 03       0001M  		LD	A, function
0412B9 49 CF       0002M  		RST.LIS	08h
0412BB             2881   
0412BB             2882   	; exit on error
0412BB FE 00       2883   	cp 0
0412BD C2 A7 12 04 2884   	jp nz,ls_folder_error
0412C1             2885   
0412C1             2886   	; reset current frame and coordinates of the drawing pixel
0412C1 21 EB 17 04 2887   	ld hl,xpix
0412C5 AF          2888   	xor a
0412C6 77          2889   	ld (hl),a
0412C7 21 EC 17 04 2890   	ld hl,ypix
0412CB 77          2891   	ld (hl),a
0412CC             2892   
0412CC             2893   ls_exit:
0412CC CD B4 16 04 2894   	call fn_show_spr_descr
0412D0 CD 6F 16 04 2895   	call fn_change_frames_count
0412D4 C9          2896   	ret
0412D5             2897   
0412D5             2898   ls_file_error:
0412D5 CD 2E 15 04 2899   	call fn_print_file_error
0412D9             2900   
0412D9             2901   	; set path to home
0412D9 21 85 18 04 2902   	ld hl,back_path
0412DD             2903   	moscall mos_cd
0412DD 3E 03       0001M  		LD	A, function
0412DF 49 CF       0002M  		RST.LIS	08h
0412E1             2904   
0412E1             2905   	; exit on error
0412E1 FE 00       2906   	cp 0
0412E3 C2 A7 12 04 2907   	jp nz,ls_folder_error
0412E7             2908   
0412E7 C9          2909   	ret
0412E8             2910   
0412E8             2911   ; save a sprite, giving its name
0412E8             2912   fn_save_sprite:
0412E8             2913   	; clear filename on the screen
0412E8 21 67 18 04 2914   	ld hl,filename
0412EC 06 0C       2915   	ld b,12
0412EE AF          2916   	xor a
0412EF             2917   
0412EF             2918   ss_clear_filename:
0412EF 77          2919   	ld (hl),a
0412F0 23          2920   	inc hl
0412F1 10 FC       2921   	djnz ss_clear_filename
0412F3             2922   
0412F3             2923   	; get filename
0412F3 CD 9B 0D 04 2924   	call fn_input_text8
0412F7             2925   
0412F7             2926   	; set path to sprite path
0412F7 21 74 18 04 2927   	ld hl,sprite_path
0412FB             2928   	moscall mos_cd
0412FB 3E 03       0001M  		LD	A, function
0412FD 49 CF       0002M  		RST.LIS	08h
0412FF             2929   
0412FF             2930   	; create it on error
0412FF FE 00       2931   	cp 0
041301 F5          2932   	push af
041302 C4 49 17 04 2933   	call nz,fn_create_sprite_folder
041306 F1          2934   	pop af
041307 28 08       2935   	jr z,ss_next
041309             2936   
041309             2937   	; set path to sprite path
041309 21 74 18 04 2938   	ld hl,sprite_path
04130D             2939   	moscall mos_cd
04130D 3E 03       0001M  		LD	A, function
04130F 49 CF       0002M  		RST.LIS	08h
041311             2940   
041311             2941   ss_next:
041311             2942   
041311             2943   	; exit on error
041311 FE 00       2944   	cp 0
041313 C2 A3 13 04 2945   	jp nz,ss_folder_error
041317             2946   
041317             2947   	; open the file for write
041317 21 67 18 04 2948   	ld hl,filename
04131B 0E 0A       2949   	ld c,fa_create_always|fa_write
04131D             2950   	moscall mos_fopen
04131D 3E 0A       0001M  		LD	A, function
04131F 49 CF       0002M  		RST.LIS	08h
041321             2951   
041321             2952   	; exit on error
041321 FE 00       2953   	cp 0
041323 CA D4 13 04 2954   	jp z,ss_file_error
041327             2955   
041327             2956   	; filehandle -> C
041327 4F          2957   	ld c,a
041328             2958   
041328             2959   	; store colors count in the file
041328 06 40       2960   	ld b,MAX_COLORS
04132A             2961   	moscall mos_fputc
04132A 3E 0D       0001M  		LD	A, function
04132C 49 CF       0002M  		RST.LIS	08h
04132E             2962   
04132E             2963   	; store frames count in the file
04132E 21 01 19 04 2964   	ld hl,frames_count
041332 46          2965   	ld b,(hl)
041333             2966   	moscall mos_fputc
041333 3E 0D       0001M  		LD	A, function
041335 49 CF       0002M  		RST.LIS	08h
041337             2967   
041337             2968   	; store sprite size in the file
041337 21 F0 17 04 2969   	ld hl,spr_size
04133B 46          2970   	ld b,(hl)
04133C             2971   	moscall mos_fputc
04133C 3E 0D       0001M  		LD	A, function
04133E 49 CF       0002M  		RST.LIS	08h
041340             2972   
041340             2973   	; de = size²
041340 21 00 00 00 2974   	ld hl,#000000
041344 68          2975   	ld l,b
041345 60          2976   	ld h,b
041346 ED 6C       2977   	mlt hl ; HL = sprite length
041348 E5          2978   	push hl
041349             2979   
041349             2980   	; get frames count
041349 21 00 19 04 2981   	ld hl,current_frame
04134D 46          2982   	ld b,(hl)
04134E             2983   
04134E E1          2984   	pop hl
04134F             2985   
04134F 78          2986   	ld a,b
041350 FE 00       2987   	cp 0
041352 28 07       2988   	jr z,ss_write_data
041354             2989   
041354 11 00 04 00 2990   	ld de,ONE_FRAME_BUFFER_SIZE
041358             2991   ss_add_length:
041358 19          2992   	add hl,de
041359 10 FD       2993   	djnz ss_add_length
04135B             2994   
04135B             2995   ss_write_data:
04135B E5          2996   	push hl
04135C E5          2997   	push hl
04135D D1          2998   	pop de
04135E 21 09 19 04 2999   	ld hl,sprite_buffer
041362             3000   	moscall mos_fwrite
041362 3E 1B       0001M  		LD	A, function
041364 49 CF       0002M  		RST.LIS	08h
041366 E1          3001   	pop hl
041367 7C          3002   	ld a,h
041368 BA          3003   	cp d
041369 20 08       3004   	jr nz,ss_close_error
04136B 7D          3005   	ld a,l
04136C BB          3006   	cp e
04136D 20 04       3007   	jr nz,ss_close_error
04136F C3 AB 13 04 3008   	jp ss_close
041373             3009   
041373             3010   ss_close_error:
041373 C5          3011   	push bc
041374             3012   
041374             3013   	; write error
041374 CD 2E 15 04 3014   	call fn_print_file_error
041378             3015   
041378 C1          3016   	pop bc
041379             3017   
041379             3018   	; close the file
041379             3019   	moscall mos_fclose
041379 3E 0B       0001M  		LD	A, function
04137B 49 CF       0002M  		RST.LIS	08h
04137D             3020   
04137D             3021   	; set path to home
04137D 21 85 18 04 3022   	ld hl,back_path
041381             3023   	moscall mos_cd
041381 3E 03       0001M  		LD	A, function
041383 49 CF       0002M  		RST.LIS	08h
041385             3024   
041385             3025   	; exit on error
041385 FE 00       3026   	cp 0
041387 C2 A3 13 04 3027   	jp nz,ss_folder_error
04138B             3028   
04138B             3029   	; reset current frame and coordinates of the drawing pixel
04138B 21 01 19 04 3030   	ld hl,frames_count
04138F 7E          3031   	ld a,(hl)
041390 3D          3032   	dec a
041391 21 00 19 04 3033   	ld hl,current_frame
041395 77          3034   	ld (hl),a
041396 21 EB 17 04 3035   	ld hl,xpix
04139A AF          3036   	xor a
04139B 77          3037   	ld (hl),a
04139C 21 EC 17 04 3038   	ld hl,ypix
0413A0 77          3039   	ld (hl),a
0413A1 18 30       3040   	jr ss_exit
0413A3             3041   
0413A3             3042   ss_folder_error:
0413A3             3043   	; write error
0413A3 CD 65 15 04 3044   	call fn_print_folder_error
0413A7 C3 D3 13 04 3045   	jp ss_exit
0413AB             3046   
0413AB             3047   ss_close:
0413AB             3048   	; close the file
0413AB             3049   	moscall mos_fclose
0413AB 3E 0B       0001M  		LD	A, function
0413AD 49 CF       0002M  		RST.LIS	08h
0413AF             3050   
0413AF             3051   	; set path to home
0413AF 21 85 18 04 3052   	ld hl,back_path
0413B3             3053   	moscall mos_cd
0413B3 3E 03       0001M  		LD	A, function
0413B5 49 CF       0002M  		RST.LIS	08h
0413B7             3054   
0413B7             3055   	; exit on error
0413B7 FE 00       3056   	cp 0
0413B9 C2 A3 13 04 3057   	jp nz,ss_folder_error
0413BD             3058   
0413BD             3059   	; reset current frame and coordinates of the drawing pixel
0413BD 21 01 19 04 3060   	ld hl,frames_count
0413C1 7E          3061   	ld a,(hl)
0413C2 3D          3062   	dec a
0413C3 21 00 19 04 3063   	ld hl,current_frame
0413C7 77          3064   	ld (hl),a
0413C8 21 EB 17 04 3065   	ld hl,xpix
0413CC AF          3066   	xor a
0413CD 77          3067   	ld (hl),a
0413CE 21 EC 17 04 3068   	ld hl,ypix
0413D2 77          3069   	ld (hl),a
0413D3             3070   
0413D3             3071   ss_exit:
0413D3 C9          3072   	ret
0413D4             3073   
0413D4             3074   ss_file_error:
0413D4 CD 2E 15 04 3075   	call fn_print_file_error
0413D8             3076   
0413D8             3077   	; set path to home
0413D8 21 85 18 04 3078   	ld hl,back_path
0413DC             3079   	moscall mos_cd
0413DC 3E 03       0001M  		LD	A, function
0413DE 49 CF       0002M  		RST.LIS	08h
0413E0             3080   
0413E0             3081   	; exit on error
0413E0 FE 00       3082   	cp 0
0413E2 C2 A3 13 04 3083   	jp nz,ss_folder_error
0413E6 C9          3084   	ret
0413E7             3085   
0413E7             3086   ; export sprite data in assembly language, giving its name
0413E7             3087   fn_export_sprite:
0413E7             3088   	; clear filename
0413E7 21 67 18 04 3089   	ld hl,filename
0413EB 06 0C       3090   	ld b,12
0413ED AF          3091   	xor a
0413EE             3092   
0413EE             3093   es_clear_filename:
0413EE 77          3094   	ld (hl),a
0413EF 23          3095   	inc hl
0413F0 10 FC       3096   	djnz es_clear_filename
0413F2             3097   
0413F2             3098   	; get filename
0413F2 CD 9B 0D 04 3099   	call fn_input_text8
0413F6             3100   
0413F6             3101   	; set path to sprite path
0413F6 21 74 18 04 3102   	ld hl,sprite_path
0413FA             3103   	moscall mos_cd
0413FA 3E 03       0001M  		LD	A, function
0413FC 49 CF       0002M  		RST.LIS	08h
0413FE             3104   
0413FE             3105   	; create it on error
0413FE FE 00       3106   	cp 0
041400 F5          3107   	push af
041401 C4 49 17 04 3108   	call nz,fn_create_sprite_folder
041405 F1          3109   	pop af
041406 28 0E       3110   	jr z,es_next
041408             3111   
041408             3112   	; set path to sprite path
041408 21 74 18 04 3113   	ld hl,sprite_path
04140C             3114   	moscall mos_cd
04140C 3E 03       0001M  		LD	A, function
04140E 49 CF       0002M  		RST.LIS	08h
041410             3115   
041410             3116   	; exit on error
041410 FE 00       3117   	cp 0
041412 C2 12 15 04 3118   	jp nz,es_folder_error
041416             3119   
041416             3120   es_next:
041416             3121   	; open the file for write
041416 21 67 18 04 3122   	ld hl,filename
04141A 0E 0A       3123   	ld c,fa_create_always|fa_write
04141C             3124   	moscall mos_fopen
04141C 3E 0A       0001M  		LD	A, function
04141E 49 CF       0002M  		RST.LIS	08h
041420             3125   
041420             3126   	; exit on error
041420 FE 00       3127   	cp 0
041422 CA 1B 15 04 3128   	jp z,es_file_error
041426             3129   
041426             3130   	; filehandle -> C
041426 4F          3131   	ld c,a
041427             3132   
041427             3133   
041427             3134   	; L = first frame
041427 3E 00       3135   	ld a,0
041429 21 09 19 04 3136   	ld hl,sprite_buffer
04142D 11 00 00 00 3137   	ld de,$000000
041431             3138   
041431             3139   es_frames_repeat:
041431 F5          3140   	push af
041432 E5          3141   	push hl
041433             3142   
041433 F5          3143   	push af
041434             3144   
041434             3145   	; start to write...
041434 1E 00       3146   	ld e,0 ; rows
041436             3147   
041436 06 3B       3148   	ld b,';'
041438             3149   	moscall mos_fputc
041438 3E 0D       0001M  		LD	A, function
04143A 49 CF       0002M  		RST.LIS	08h
04143C             3150   
04143C 06 20       3151   	ld b,' '
04143E             3152   	moscall mos_fputc
04143E 3E 0D       0001M  		LD	A, function
041440 49 CF       0002M  		RST.LIS	08h
041442             3153   
041442 06 46       3154   	ld b,'F'
041444             3155   	moscall mos_fputc
041444 3E 0D       0001M  		LD	A, function
041446 49 CF       0002M  		RST.LIS	08h
041448             3156   
041448 06 72       3157   	ld b,'r'
04144A             3158   	moscall mos_fputc
04144A 3E 0D       0001M  		LD	A, function
04144C 49 CF       0002M  		RST.LIS	08h
04144E             3159   
04144E 06 6D       3160   	ld b,'m'
041450             3161   	moscall mos_fputc
041450 3E 0D       0001M  		LD	A, function
041452 49 CF       0002M  		RST.LIS	08h
041454             3162   
041454 06 20       3163   	ld b,' '
041456             3164   	moscall mos_fputc
041456 3E 0D       0001M  		LD	A, function
041458 49 CF       0002M  		RST.LIS	08h
04145A             3165   
04145A F1          3166   	pop af
04145B C6 30       3167   	add a,'0'
04145D 47          3168   	ld b,a
04145E             3169   	moscall mos_fputc
04145E 3E 0D       0001M  		LD	A, function
041460 49 CF       0002M  		RST.LIS	08h
041462             3170   
041462 06 0D       3171   	ld b,13
041464             3172   	moscall mos_fputc
041464 3E 0D       0001M  		LD	A, function
041466 49 CF       0002M  		RST.LIS	08h
041468             3173   
041468 06 0A       3174   	ld b,10
04146A             3175   	moscall mos_fputc
04146A 3E 0D       0001M  		LD	A, function
04146C 49 CF       0002M  		RST.LIS	08h
04146E             3176   
04146E             3177   es_repeat:
04146E             3178   
04146E 06 44       3179   	ld b,'D'
041470             3180   	moscall mos_fputc
041470 3E 0D       0001M  		LD	A, function
041472 49 CF       0002M  		RST.LIS	08h
041474             3181   
041474 06 42       3182   	ld b,'B'
041476             3183   	moscall mos_fputc
041476 3E 0D       0001M  		LD	A, function
041478 49 CF       0002M  		RST.LIS	08h
04147A             3184   
04147A 06 20       3185   	ld b,' '
04147C             3186   	moscall mos_fputc
04147C 3E 0D       0001M  		LD	A, function
04147E 49 CF       0002M  		RST.LIS	08h
041480             3187   
041480 16 00       3188   	ld d,0 ; columns
041482             3189   
041482             3190   es_repeat_line:
041482 D5          3191   	push de
041483             3192   
041483 7E          3193   	ld a,(hl)
041484 23          3194   	inc hl
041485             3195   
041485             3196   	; convert A to BCD
041485 CD CE 17 04 3197   	call fn_hex2bcd
041489             3198   
041489             3199   	; write two numbers (chars)
041489 5F          3200   	ld e,a
04148A E6 F0       3201   	and $f0
04148C 0F          3202   	rrca
04148D 0F          3203   	rrca
04148E 0F          3204   	rrca
04148F 0F          3205   	rrca
041490 C6 30       3206   	add '0'
041492             3207   
041492 47          3208   	ld b,a
041493             3209   	moscall mos_fputc
041493 3E 0D       0001M  		LD	A, function
041495 49 CF       0002M  		RST.LIS	08h
041497             3210   
041497 7B          3211   	ld a,e
041498 E6 0F       3212   	and $0f
04149A C6 30       3213   	add '0'
04149C             3214   
04149C 47          3215   	ld b,a
04149D             3216   	moscall mos_fputc
04149D 3E 0D       0001M  		LD	A, function
04149F 49 CF       0002M  		RST.LIS	08h
0414A1             3217   
0414A1 D1          3218   	pop de
0414A2 14          3219   	inc d
0414A3 3A F0 17 04 3220   	ld a,(spr_size)
0414A7 BA          3221   	cp d
0414A8 F5          3222   	push af
0414A9 C4 C7 17 04 3223   	call nz,fn_comma
0414AD F1          3224   	pop af
0414AE C2 82 14 04 3225   	jp nz,es_repeat_line
0414B2             3226   
0414B2 06 0D       3227   	ld b,13 ; CR
0414B4             3228   	moscall mos_fputc
0414B4 3E 0D       0001M  		LD	A, function
0414B6 49 CF       0002M  		RST.LIS	08h
0414B8             3229   
0414B8 06 0A       3230   	ld b,10 ; LF
0414BA             3231   	moscall mos_fputc
0414BA 3E 0D       0001M  		LD	A, function
0414BC 49 CF       0002M  		RST.LIS	08h
0414BE             3232   
0414BE 1C          3233   	inc e
0414BF 3A F0 17 04 3234   	ld a,(spr_size)
0414C3 BB          3235   	cp e
0414C4 C2 6E 14 04 3236   	jp nz,es_repeat
0414C8             3237   
0414C8 06 0D       3238   	ld b,13 ; CR
0414CA             3239   	moscall mos_fputc
0414CA 3E 0D       0001M  		LD	A, function
0414CC 49 CF       0002M  		RST.LIS	08h
0414CE             3240   
0414CE 06 0A       3241   	ld b,10 ; LF
0414D0             3242   	moscall mos_fputc
0414D0 3E 0D       0001M  		LD	A, function
0414D2 49 CF       0002M  		RST.LIS	08h
0414D4             3243   
0414D4 E1          3244   	pop hl
0414D5 D5          3245   	push de
0414D6 ED 5C       3246   	mlt de
0414D8 19          3247   	add hl,de
0414D9 D1          3248   	pop de
0414DA F1          3249   	pop af
0414DB 3C          3250   	inc a
0414DC DD 21 01 19 3251   	ld ix,frames_count
       04          
0414E1 DD BE 00    3252   	cp (ix+0)
0414E4 C2 31 14 04 3253   	jp nz,es_frames_repeat
0414E8             3254   
0414E8             3255   	; close the file
0414E8             3256   	moscall mos_fclose
0414E8 3E 0B       0001M  		LD	A, function
0414EA 49 CF       0002M  		RST.LIS	08h
0414EC             3257   
0414EC             3258   	; set path to home
0414EC 21 85 18 04 3259   	ld hl,back_path
0414F0             3260   	moscall mos_cd
0414F0 3E 03       0001M  		LD	A, function
0414F2 49 CF       0002M  		RST.LIS	08h
0414F4             3261   
0414F4             3262   	; exit on error
0414F4 FE 00       3263   	cp 0
0414F6 C2 12 15 04 3264   	jp nz,es_folder_error
0414FA             3265   
0414FA             3266   	; reset current frame and coordinates of the drawing pixel
0414FA 21 01 19 04 3267   	ld hl,frames_count
0414FE 7E          3268   	ld a,(hl)
0414FF 3D          3269   	dec a
041500 21 00 19 04 3270   	ld hl,current_frame
041504 77          3271   	ld (hl),a
041505 21 EB 17 04 3272   	ld hl,xpix
041509 AF          3273   	xor a
04150A 77          3274   	ld (hl),a
04150B 21 EC 17 04 3275   	ld hl,ypix
04150F 77          3276   	ld (hl),a
041510 18 08       3277   	jr es_exit
041512             3278   
041512             3279   es_folder_error:
041512             3280   	; write error
041512 CD 65 15 04 3281   	call fn_print_folder_error
041516 C3 1A 15 04 3282   	jp es_exit
04151A             3283   
04151A             3284   es_exit:
04151A C9          3285   	ret
04151B             3286   
04151B             3287   es_file_error:
04151B CD 2E 15 04 3288   	call fn_print_file_error
04151F             3289   
04151F             3290   	; set path to home
04151F 21 85 18 04 3291   	ld hl,back_path
041523             3292   	moscall mos_cd
041523 3E 03       0001M  		LD	A, function
041525 49 CF       0002M  		RST.LIS	08h
041527             3293   
041527             3294   	; exit on error
041527 FE 00       3295   	cp 0
041529 C2 12 15 04 3296   	jp nz,es_folder_error
04152D C9          3297   	ret
04152E             3298   
04152E             3299   ; print 'file error'
04152E             3300   fn_print_file_error:
04152E             3301   	vdu 7
04152E 3E 07       0001M  		LD	A, function
041530 49 D7       0002M  		RST.LIS	10h
041532             3302   
041532             3303   	; locate x,y
041532             3304   	vdu 31
041532 3E 1F       0001M  		LD	A, function
041534 49 D7       0002M  		RST.LIS	10h
041536             3305   	vdu FILENAME_X
041536 3E 07       0001M  		LD	A, function
041538 49 D7       0002M  		RST.LIS	10h
04153A             3306   	vdu FILENAME_Y
04153A 3E 18       0001M  		LD	A, function
04153C 49 D7       0002M  		RST.LIS	10h
04153E             3307   
04153E             3308   	; print text
04153E 21 A1 18 04 3309   	ld hl,file_error
041542 01 00 00 00 3310   	ld bc,0
041546 AF          3311   	xor a
041547 49 DF       3312   	rst.lis $18
041549             3313   
041549 CD 94 0D 04 3314   	call fn_input_key
04154D             3315   
04154D             3316   	; locate x,y
04154D             3317   	vdu 31
04154D 3E 1F       0001M  		LD	A, function
04154F 49 D7       0002M  		RST.LIS	10h
041551             3318   	vdu FILENAME_X
041551 3E 07       0001M  		LD	A, function
041553 49 D7       0002M  		RST.LIS	10h
041555             3319   	vdu FILENAME_Y
041555 3E 18       0001M  		LD	A, function
041557 49 D7       0002M  		RST.LIS	10h
041559             3320   
041559             3321   	; print text
041559 21 8A 18 04 3322   	ld hl,void_filename
04155D 01 00 00 00 3323   	ld bc,0
041561 AF          3324   	xor a
041562 49 DF       3325   	rst.lis $18
041564             3326   
041564 C9          3327   	ret
041565             3328   
041565             3329   ; print 'folder error'
041565             3330   fn_print_folder_error:
041565             3331   	vdu 7
041565 3E 07       0001M  		LD	A, function
041567 49 D7       0002M  		RST.LIS	10h
041569             3332   
041569             3333   	; locate x,y
041569             3334   	vdu 31
041569 3E 1F       0001M  		LD	A, function
04156B 49 D7       0002M  		RST.LIS	10h
04156D             3335   	vdu FILENAME_X
04156D 3E 07       0001M  		LD	A, function
04156F 49 D7       0002M  		RST.LIS	10h
041571             3336   	vdu FILENAME_Y
041571 3E 18       0001M  		LD	A, function
041573 49 D7       0002M  		RST.LIS	10h
041575             3337   
041575             3338   	; print text
041575 21 B8 18 04 3339   	ld hl,folder_error
041579 01 00 00 00 3340   	ld bc,0
04157D AF          3341   	xor a
04157E 49 DF       3342   	rst.lis $18
041580             3343   
041580 CD 94 0D 04 3344   	call fn_input_key
041584             3345   
041584             3346   	; locate x,y
041584             3347   	vdu 31
041584 3E 1F       0001M  		LD	A, function
041586 49 D7       0002M  		RST.LIS	10h
041588             3348   	vdu FILENAME_X
041588 3E 07       0001M  		LD	A, function
04158A 49 D7       0002M  		RST.LIS	10h
04158C             3349   	vdu FILENAME_Y
04158C 3E 18       0001M  		LD	A, function
04158E 49 D7       0002M  		RST.LIS	10h
041590             3350   
041590             3351   	; print text
041590 21 8A 18 04 3352   	ld hl,void_filename
041594 01 00 00 00 3353   	ld bc,0
041598 AF          3354   	xor a
041599 49 DF       3355   	rst.lis $18
04159B             3356   
04159B C9          3357   	ret
04159C             3358   
04159C             3359   ; print 'header error'
04159C             3360   fn_print_header_error:
04159C             3361   	vdu 7
04159C 3E 07       0001M  		LD	A, function
04159E 49 D7       0002M  		RST.LIS	10h
0415A0             3362   
0415A0             3363   	; locate x,y
0415A0             3364   	vdu 31
0415A0 3E 1F       0001M  		LD	A, function
0415A2 49 D7       0002M  		RST.LIS	10h
0415A4             3365   	vdu FILENAME_X
0415A4 3E 07       0001M  		LD	A, function
0415A6 49 D7       0002M  		RST.LIS	10h
0415A8             3366   	vdu FILENAME_Y
0415A8 3E 18       0001M  		LD	A, function
0415AA 49 D7       0002M  		RST.LIS	10h
0415AC             3367   
0415AC             3368   	; print text
0415AC 21 CF 18 04 3369   	ld hl,header_error
0415B0 01 00 00 00 3370   	ld bc,0
0415B4 AF          3371   	xor a
0415B5 49 DF       3372   	rst.lis $18
0415B7             3373   
0415B7 CD 94 0D 04 3374   	call fn_input_key
0415BB             3375   
0415BB             3376   	; locate x,y
0415BB             3377   	vdu 31
0415BB 3E 1F       0001M  		LD	A, function
0415BD 49 D7       0002M  		RST.LIS	10h
0415BF             3378   	vdu FILENAME_X
0415BF 3E 07       0001M  		LD	A, function
0415C1 49 D7       0002M  		RST.LIS	10h
0415C3             3379   	vdu FILENAME_Y
0415C3 3E 18       0001M  		LD	A, function
0415C5 49 D7       0002M  		RST.LIS	10h
0415C7             3380   
0415C7             3381   	; print text
0415C7 21 8A 18 04 3382   	ld hl,void_filename
0415CB 01 00 00 00 3383   	ld bc,0
0415CF AF          3384   	xor a
0415D0 49 DF       3385   	rst.lis $18
0415D2             3386   
0415D2 C9          3387   	ret
0415D3             3388   
0415D3             3389   ; print 'data error'
0415D3             3390   fn_print_data_error:
0415D3             3391   	vdu 7
0415D3 3E 07       0001M  		LD	A, function
0415D5 49 D7       0002M  		RST.LIS	10h
0415D7             3392   
0415D7             3393   	; locate x,y
0415D7             3394   	vdu 31
0415D7 3E 1F       0001M  		LD	A, function
0415D9 49 D7       0002M  		RST.LIS	10h
0415DB             3395   	vdu FILENAME_X
0415DB 3E 07       0001M  		LD	A, function
0415DD 49 D7       0002M  		RST.LIS	10h
0415DF             3396   	vdu FILENAME_Y
0415DF 3E 18       0001M  		LD	A, function
0415E1 49 D7       0002M  		RST.LIS	10h
0415E3             3397   
0415E3             3398   	; print text
0415E3 21 E6 18 04 3399   	ld hl,data_error
0415E7 01 00 00 00 3400   	ld bc,0
0415EB AF          3401   	xor a
0415EC 49 DF       3402   	rst.lis $18
0415EE             3403   
0415EE CD 94 0D 04 3404   	call fn_input_key
0415F2             3405   
0415F2             3406   	; locate x,y
0415F2             3407   	vdu 31
0415F2 3E 1F       0001M  		LD	A, function
0415F4 49 D7       0002M  		RST.LIS	10h
0415F6             3408   	vdu FILENAME_X
0415F6 3E 07       0001M  		LD	A, function
0415F8 49 D7       0002M  		RST.LIS	10h
0415FA             3409   	vdu FILENAME_Y
0415FA 3E 18       0001M  		LD	A, function
0415FC 49 D7       0002M  		RST.LIS	10h
0415FE             3410   
0415FE             3411   	; print text
0415FE 21 8A 18 04 3412   	ld hl,void_filename
041602 01 00 00 00 3413   	ld bc,0
041606 AF          3414   	xor a
041607 49 DF       3415   	rst.lis $18
041609             3416   
041609 C9          3417   	ret
04160A             3418   
04160A             3419   ; refresh all the current sprite frame
04160A             3420   fn_refresh_sprite:
04160A 06 00       3421   	ld b,0 ; B -> x cordinate
04160C 0E 00       3422   	ld c,0 ; C -> y cordinate
04160E             3423   
04160E             3424   rs_loop:
04160E C5          3425   	push bc
04160F             3426   
04160F 21 EB 17 04 3427   	ld hl,xpix
041613 70          3428   	ld (hl),b
041614 21 EC 17 04 3429   	ld hl,ypix
041618 71          3430   	ld (hl),c
041619 CD 26 0C 04 3431   	call fn_draw_pixel_without_border
04161D             3432   
04161D C1          3433   	pop bc
04161E             3434   
04161E 04          3435   	inc b
04161F 21 F0 17 04 3436   	ld hl,spr_size
041623 7E          3437   	ld a,(hl)
041624 B8          3438   	cp b
041625 28 04       3439   	jr z,rs_next_line
041627 C3 0E 16 04 3440   	jp rs_loop
04162B             3441   
04162B             3442   rs_next_line:
04162B 06 00       3443   	ld b,0
04162D 0C          3444   	inc c
04162E 21 F0 17 04 3445   	ld hl,spr_size
041632 7E          3446   	ld a,(hl)
041633 B9          3447   	cp c
041634 28 04       3448   	jr z,rs_end
041636 C3 0E 16 04 3449   	jp rs_loop
04163A             3450   
04163A             3451   rs_end:
04163A AF          3452   	xor a
04163B 21 EB 17 04 3453   	ld hl,xpix
04163F 77          3454   	ld (hl),a
041640 21 EC 17 04 3455   	ld hl,ypix
041644 77          3456   	ld (hl),a
041645 CD 12 0C 04 3457   	call fn_draw_pixel_with_border
041649             3458   
041649 C9          3459   	ret
04164A             3460   
04164A             3461   fn_change_frame:
04164A 21 00 19 04 3462   	ld hl,current_frame
04164E 7E          3463   	ld a,(hl)
04164F 3C          3464   	inc a
041650 C6 30       3465   	add a,48
041652 21 02 19 04 3466   	ld hl,current_frame_ascii
041656 77          3467   	ld (hl),a
041657             3468   
041657             3469   	; locate 21,3
041657             3470   	vdu 31
041657 3E 1F       0001M  		LD	A, function
041659 49 D7       0002M  		RST.LIS	10h
04165B             3471   	vdu 21
04165B 3E 15       0001M  		LD	A, function
04165D 49 D7       0002M  		RST.LIS	10h
04165F             3472   	vdu 3
04165F 3E 03       0001M  		LD	A, function
041661 49 D7       0002M  		RST.LIS	10h
041663             3473   
041663             3474   	; print text
041663 21 02 19 04 3475   	ld hl,current_frame_ascii
041667 01 00 00 00 3476   	ld bc,0
04166B AF          3477   	xor a
04166C 49 DF       3478   	rst.lis $18
04166E             3479   
04166E C9          3480   	ret
04166F             3481   
04166F             3482   fn_change_frames_count:
04166F 21 01 19 04 3483   	ld hl,frames_count
041673 7E          3484   	ld a,(hl)
041674 C6 30       3485   	add a,48
041676 21 04 19 04 3486   	ld hl,frames_count_ascii
04167A 77          3487   	ld (hl),a
04167B             3488   
04167B             3489   	; locate 23,3
04167B             3490   	vdu 31
04167B 3E 1F       0001M  		LD	A, function
04167D 49 D7       0002M  		RST.LIS	10h
04167F             3491   	vdu 23
04167F 3E 17       0001M  		LD	A, function
041681 49 D7       0002M  		RST.LIS	10h
041683             3492   	vdu 3
041683 3E 03       0001M  		LD	A, function
041685 49 D7       0002M  		RST.LIS	10h
041687             3493   
041687             3494   	; print text
041687 21 04 19 04 3495   	ld hl,frames_count_ascii
04168B 01 00 00 00 3496   	ld bc,0
04168F AF          3497   	xor a
041690 49 DF       3498   	rst.lis $18
041692             3499   
041692 C9          3500   	ret
041693             3501   
041693             3502   ; slowdown (wait delay)
041693             3503   fn_slowdown:
041693 DD 21 06 19 3504   	ld ix,keydata
       04          
041698 DD 7E 02    3505   	ld a,(ix+2)
04169B E6 02       3506   	and 2
04169D FE 02       3507   	cp 2 ; shift key to disable delay
04169F C8          3508   	ret z
0416A0             3509   
0416A0             3510   	moscall mos_sysvars
0416A0 3E 08       0001M  		LD	A, function
0416A2 49 CF       0002M  		RST.LIS	08h
0416A4 DD 4E 00    3511   	ld c,(ix+sysvar_time)
0416A7             3512   
0416A7             3513   sd_loop:
0416A7             3514   	moscall mos_sysvars
0416A7 3E 08       0001M  		LD	A, function
0416A9 49 CF       0002M  		RST.LIS	08h
0416AB DD 7E 00    3515   	ld a,(ix+sysvar_time)
0416AE 91          3516   	sub c
0416AF FE 14       3517   	cp SLOWDOWN_DELAY
0416B1 20 F4       3518   	jr nz,sd_loop
0416B3 C9          3519   	ret
0416B4             3520   
0416B4             3521   fn_show_spr_descr:
0416B4             3522   	; locate 15,3
0416B4             3523   	vdu 31
0416B4 3E 1F       0001M  		LD	A, function
0416B6 49 D7       0002M  		RST.LIS	10h
0416B8             3524   	vdu 15
0416B8 3E 0F       0001M  		LD	A, function
0416BA 49 D7       0002M  		RST.LIS	10h
0416BC             3525   	vdu 3
0416BC 3E 03       0001M  		LD	A, function
0416BE 49 D7       0002M  		RST.LIS	10h
0416C0             3526   
0416C0             3527   	; print text
0416C0 21 3B 18 04 3528   	ld hl,spr_descr
0416C4 01 00 00 00 3529   	ld bc,0
0416C8 AF          3530   	xor a
0416C9 49 DF       3531   	rst.lis $18
0416CB             3532   
0416CB             3533   	; locate 15,5
0416CB             3534   	vdu 31
0416CB 3E 1F       0001M  		LD	A, function
0416CD 49 D7       0002M  		RST.LIS	10h
0416CF             3535   	vdu 15
0416CF 3E 0F       0001M  		LD	A, function
0416D1 49 D7       0002M  		RST.LIS	10h
0416D3             3536   	vdu 5
0416D3 3E 05       0001M  		LD	A, function
0416D5 49 D7       0002M  		RST.LIS	10h
0416D7             3537   
0416D7             3538   	; check for sprite size...
0416D7 21 F0 17 04 3539   	ld hl,spr_size
0416DB 7E          3540   	ld a,(hl)
0416DC             3541   
0416DC FE 04       3542   	cp 4
0416DE 20 0C       3543   	jr nz,ssd_8x8
0416E0             3544   
0416E0             3545   	; print text 4x4
0416E0 21 45 18 04 3546   	ld hl,spr_descr1
0416E4 01 00 00 00 3547   	ld bc,0
0416E8 AF          3548   	xor a
0416E9 49 DF       3549   	rst.lis $18
0416EB C9          3550   	ret
0416EC             3551   
0416EC             3552   ssd_8x8:
0416EC FE 08       3553   	cp 8
0416EE 20 0C       3554   	jr nz,ssd_16x16
0416F0             3555   
0416F0             3556   	; print text 8x8
0416F0 21 4B 18 04 3557   	ld hl,spr_descr2
0416F4 01 00 00 00 3558   	ld bc,0
0416F8 AF          3559   	xor a
0416F9 49 DF       3560   	rst.lis $18
0416FB C9          3561   	ret
0416FC             3562   
0416FC             3563   ssd_16x16:
0416FC FE 10       3564   	cp 16
0416FE 20 0C       3565   	jr nz,ssd_32x32
041700             3566   
041700             3567   	; print text 16x16
041700 21 51 18 04 3568   	ld hl,spr_descr3
041704 01 00 00 00 3569   	ld bc,0
041708 AF          3570   	xor a
041709 49 DF       3571   	rst.lis $18
04170B C9          3572   	ret
04170C             3573   
04170C             3574   ssd_32x32:
04170C             3575   	; print text 32x32
04170C 21 57 18 04 3576   	ld hl,spr_descr4
041710 01 00 00 00 3577   	ld bc,0
041714 AF          3578   	xor a
041715 49 DF       3579   	rst.lis $18
041717             3580   
041717 C9          3581   	ret
041718             3582   
041718             3583   ; input: HL = negative key to check
041718             3584   fn_inkey:
041718             3585   	moscall mos_getkbmap
041718 3E 1E       0001M  		LD	A, function
04171A 49 CF       0002M  		RST.LIS	08h
04171C 23          3586   	INC	HL
04171D 7D          3587   	LD	A, L
04171E ED 44       3588   	NEG
041720 4F          3589   	LD	C, A
041721 3E 01       3590   	LD	A, 1
041723 FA 47 17 04 3591   	JP	M,i_false ; < -128 ?
041727             3592   
041727 21 45 00 04 3593   	LD	HL,BITLOOKUP
04172B 11 00 00 00 3594   	LD	DE,0
04172F 79          3595   	LD	A,C
041730 E6 07       3596   	AND	00000111b
041732 5F          3597   	LD	E,A
041733 19          3598   	ADD	HL,DE
041734 46          3599   	LD	B,(HL)
041735             3600   
041735 79          3601   	LD	A,C
041736 E6 78       3602   	AND	01111000b
041738 0F          3603   	RRCA
041739 0F          3604   	RRCA
04173A 0F          3605   	RRCA
04173B 5F          3606   	LD	E, A
04173C DD 19       3607   	ADD	IX,DE
04173E DD 7E 00    3608   	LD	A,(IX+0)
041741 A0          3609   	AND	B
041742 28 03       3610   	JR Z,i_false
041744 3E 01       3611   	LD A,1
041746 C9          3612   	RET
041747             3613   i_false:
041747 AF          3614   	XOR A
041748 C9          3615   	RET
041749             3616   
041749             3617   fn_create_sprite_folder:
041749 21 74 18 04 3618   	ld hl,sprite_path
04174D             3619   	moscall mos_mkdir
04174D 3E 07       0001M  		LD	A, function
04174F 49 CF       0002M  		RST.LIS	08h
041751 C9          3620   	ret
041752             3621   
041752             3622   ; draw the palette
041752             3623   fn_draw_the_palette:
041752 0E 00       3624   	ld c,0
041754             3625   
041754             3626   fndtp_palette_loop:
041754 C5          3627   	push bc
041755             3628   
041755             3629   	; choose palette color
041755             3630   	vdu 18
041755 3E 12       0001M  		LD	A, function
041757 49 D7       0002M  		RST.LIS	10h
041759             3631   	vdu 0
041759 3E 00       0001M  		LD	A, function
04175B 49 D7       0002M  		RST.LIS	10h
04175D C1          3632   	pop bc
04175E C5          3633   	push bc
04175F 79          3634   	ld a,c
041760 F5          3635   	push af
041761             3636   	vdu_a
041761 49 D7       0001M  		RST.LIS	10h
041763 F1          3637   	pop af
041764 E5          3638   	push hl
041765 21 FB 18 04 3639   	ld hl,colors_count
041769 BE          3640   	cp (hl)
04176A E1          3641   	pop hl
04176B 38 0B       3642   	jr c,fndtppl_zap
04176D             3643   
04176D             3644   	; set 0 if color is out of palette
04176D             3645   	vdu 18
04176D 3E 12       0001M  		LD	A, function
04176F 49 D7       0002M  		RST.LIS	10h
041771             3646   	vdu 0
041771 3E 00       0001M  		LD	A, function
041773 49 D7       0002M  		RST.LIS	10h
041775 AF          3647   	xor a
041776             3648   	vdu_a
041776 49 D7       0001M  		RST.LIS	10h
041778             3649   
041778             3650   fndtppl_zap:
041778             3651   	; store coordinates for a palette square
041778 DD 21 DB 17 3652   	ld ix,x1
       04          
04177D E1          3653   	pop hl
04177E E5          3654   	push hl
04177F 26 05       3655   	ld h,5
041781 ED 6C       3656   	mlt hl
041783 E5          3657   	push hl
041784 DD 75 00    3658   	ld (ix+0),l
041787 DD 74 01    3659   	ld (ix+1),h
04178A             3660   
04178A DD 21 DD 17 3661   	ld ix,y1
       04          
04178F 21 00 00 00 3662   	ld hl,0
041793 DD 75 00    3663   	ld (ix+0),l
041796 DD 74 01    3664   	ld (ix+1),h
041799             3665   
041799 DD 21 DF 17 3666   	ld ix,x2
       04          
04179E E1          3667   	pop hl
04179F 11 04 00 00 3668   	ld de,4
0417A3 19          3669   	add hl,de
0417A4 DD 75 00    3670   	ld (ix+0),l
0417A7 DD 74 01    3671   	ld (ix+1),h
0417AA             3672   
0417AA DD 21 E1 17 3673   	ld ix,y2
       04          
0417AF 21 0A 00 00 3674   	ld hl,10
0417B3 DD 75 00    3675   	ld (ix+0),l
0417B6 DD 74 01    3676   	ld (ix+1),h
0417B9             3677   
0417B9             3678   	; draw the palette filled square
0417B9 CD 44 0B 04 3679   	call fn_rectf
0417BD             3680   
0417BD             3681   	; next color ?
0417BD C1          3682   	pop bc
0417BE 0C          3683   	inc c
0417BF 79          3684   	ld a,c
0417C0 FE 40       3685   	cp MAX_COLORS
0417C2 C2 54 17 04 3686   	jp nz,fndtp_palette_loop
0417C6             3687   
0417C6 C9          3688   	ret
0417C7             3689   
0417C7             3690   fn_comma:
0417C7 06 2C       3691   	ld b,','
0417C9             3692   	moscall mos_fputc
0417C9 3E 0D       0001M  		LD	A, function
0417CB 49 CF       0002M  		RST.LIS	08h
0417CD C9          3693   	ret
0417CE             3694   
0417CE             3695   ; Hex to BCD
0417CE             3696   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
0417CE             3697   ; Input: a = hex number
0417CE             3698   ; Output: a = BCD number
0417CE             3699   ; Clobbers: b,c
0417CE             3700   fn_hex2bcd:
0417CE C5          3701   		push bc
0417CF 4F          3702   		ld c,a  ; Original (hex) number
0417D0 06 08       3703   		ld b,8  ; How many bits
0417D2 AF          3704   		xor a   ; Output (BCD) number, starts at 0
0417D3 CB 21       3705   htb:	sla c   ; shift c into carry
0417D5 8F          3706   		adc a,a
0417D6 27          3707   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
0417D7 10 FA       3708   		djnz htb  ; Repeat for 8 bits
0417D9 C1          3709   		pop bc
0417DA C9          3710   		ret
0417DB             3711   
0417DB             3712   ;======================================================================
0417DB             3713   
0417DB             3714   ; coordinates for rectangles
0417DB             3715   x1:
0417DB 00 00       3716   	dw $0000
0417DD             3717   y1:
0417DD 00 00       3718   	dw $0000
0417DF             3719   x2:
0417DF 00 00       3720   	dw $0000
0417E1             3721   y2:
0417E1 00 00       3722   	dw $0000
0417E3             3723   
0417E3             3724   ; coordinates of the edited sprite
0417E3             3725   xs1:
0417E3 5F 00       3726   	dw 95
0417E5             3727   ys1:
0417E5 37 00       3728   	dw 55
0417E7             3729   xs2:
0417E7 E0 00       3730   	dw 224
0417E9             3731   ys2:
0417E9 B8 00       3732   	dw 184
0417EB             3733   
0417EB             3734   ; coordinates of active pixels to draw
0417EB             3735   xpix:
0417EB 00          3736   	db 0
0417EC             3737   ypix:
0417EC 00          3738   	db 0
0417ED             3739   
0417ED             3740   ; memorized coordinates of active pixels to draw
0417ED             3741   memxpix:
0417ED 00          3742   	db 0
0417EE             3743   memypix:
0417EE 00          3744   	db 0
0417EF             3745   
0417EF             3746   ; width of a pixel in the sprite
0417EF             3747   pixel_width:
0417EF 00          3748   	db 0
0417F0             3749   
0417F0             3750   ; sprite size, in resized pixels
0417F0             3751   spr_size:
0417F0 00          3752   	db 0
0417F1             3753   
0417F1             3754   ; pen color (0-63)
0417F1             3755   current_pen:
0417F1 00          3756   	db 0
0417F2             3757   
0417F2             3758   ; texts for 1st menu
0417F2             3759   title:
0417F2 53 50 52 2D 3760   	db "SPR-EDIT",0
       45 44 49 54 
       00          
0417FB             3761   
0417FB             3762   menu1:
0417FB 46 31 2E 20 3763   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
04180A             3764   menu2:
04180A 46 32 2E 20 3765   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
041819             3766   menu3:
041819 46 33 2E 20 3767   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
04182A             3768   menu4:
04182A 46 34 2E 20 3769   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
04183B             3770   
04183B             3771   ; descriptions of sprites
04183B             3772   spr_descr:
04183B 46 72 61 6D 3773   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041845             3774   spr_descr1:
041845 34 78 34 20 3775   	db "4x4  ",0
       20 00       
04184B             3776   spr_descr2:
04184B 38 78 38 20 3777   	db "8x8  ",0
       20 00       
041851             3778   spr_descr3:
041851 31 36 78 31 3779   	db "16x16",0
       36 00       
041857             3780   spr_descr4:
041857 33 32 78 33 3781   	db "32x32",0
       32 00       
04185D             3782   
04185D             3783   ; label before filename
04185D             3784   filename_label:
04185D 46 69 6C 65 3785   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041867             3786   
041867             3787   ; filename without extension
041867             3788   filename:
041867 00 00 00 00 3789   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
041874             3790   
041874             3791   sprite_path:
041874 73 70 72 69 3792   	db "sprites",0
       74 65 73 00 
04187C             3793   
04187C             3794   palette_path:
04187C 70 61 6C 65 3795   	db "palettes",0
       74 74 65 73 
       00          
041885             3796   
041885             3797   back_path:
041885 2E 2E 00    3798   	db "..",0
041888             3799   
041888             3800   ; single space char to print
041888             3801   spacechar:
041888 20 00       3802   	db " ",0
04188A             3803   
04188A             3804   ; spaces to remove filename label
04188A             3805   void_filename:
04188A 20 20 20 20 3806   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0418A1             3807   
0418A1             3808   ; file error message
0418A1             3809   file_error:
0418A1 46 69 6C 65 3810   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
0418B8             3811   
0418B8             3812   ; folder error message
0418B8             3813   folder_error:
0418B8 46 6F 6C 64 3814   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0418CF             3815   
0418CF             3816   ; header error message
0418CF             3817   header_error:
0418CF 48 65 61 64 3818   	db "Header error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0418E6             3819   
0418E6             3820   ; data error message
0418E6             3821   data_error:
0418E6 44 61 74 61 3822   	db "Data error !        ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       00          
0418FB             3823   
0418FB             3824   ; number of colors
0418FB             3825   colors_count:
0418FB 00          3826   	db 0
0418FC             3827   
0418FC             3828   ; real number of colors
0418FC             3829   new_colors_count:
0418FC 00          3830   	db 0
0418FD             3831   
0418FD             3832   red_tint:
0418FD 00          3833   	db 0
0418FE             3834   
0418FE             3835   green_tint:
0418FE 00          3836   	db 0
0418FF             3837   
0418FF             3838   blue_tint:
0418FF 00          3839   	db 0
041900             3840   
041900             3841   ; current frame
041900             3842   current_frame:
041900 00          3843   	db 0
041901             3844   
041901             3845   ; frames count
041901             3846   frames_count:
041901 00          3847   	db 0
041902             3848   
041902             3849   current_frame_ascii:
041902 30 00       3850   	db '0',0
041904             3851   
041904             3852   frames_count_ascii:
041904 30 00       3853   	db '0',0
041906             3854   
041906             3855   ; keycode, keydown & keymods are stored here
041906             3856   keydata:
041906 00 00 00    3857   	db 0,0,0
041909             3858   
041909             3859   ; buffer for the current sprite
041909             3860   sprite_buffer:
041909             3861   	ds BUFFER_SIZE
043909             3862   
043909             3863   header_buffer:
043909             3864   	ds HEADER_BUFFER_SIZE
043919             3865   
043919             3866   color_buffer:
043919 00 00 00    3867   	db 0,0,0
04391C             3868   
04391C             3869   palette_buffer:
04391C             3870   	ds MAX_PAL_DATA + 1
043C61             3871   
043C61             3872   temp_chars_buffer:
043C61 00 00 00 00 3873   	db 0,0,0,0
043C65             3874   
043C65             3875   header:
043C65 4A 41 53 43 3876   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043C6F 30 31 30 30 3877   	db "0100",13,10
       0D 0A       
043C75             3878   
043C75             3879   ; buffer to perform some operations
043C75             3880   swap_sprite_buffer:
043C75             3881   	ds ONE_FRAME_BUFFER_SIZE
044075             3882   
044075             3883   asm_line:
044075 44 42 20    3884   	DB "DB "
044078             3885   
044078             3886   asm_line_length:
044078 03          3887   	DB 3
044079             3888   
044079             3889   rgb_palette:
044079 00 00 00    3890   	db $00,$00,$00
04407C AA 00 00    3891   	db $AA,$00,$00
04407F 00 AA 00    3892   	db $00,$AA,$00
044082 AA AA 00    3893   	db $AA,$AA,$00
044085 00 00 AA    3894   	db $00,$00,$AA
044088 AA 00 AA    3895   	db $AA,$00,$AA
04408B 00 AA AA    3896   	db $00,$AA,$AA
04408E AA AA AA    3897   	db $AA,$AA,$AA
044091             3898   
044091 55 55 55    3899   	db $55,$55,$55
044094 FF 00 00    3900   	db $FF,$00,$00
044097 00 FF 00    3901   	db $00,$FF,$00
04409A FF FF 00    3902   	db $FF,$FF,$00
04409D 00 00 FF    3903   	db $00,$00,$FF
0440A0 FF 00 FF    3904   	db $FF,$00,$FF
0440A3 00 FF FF    3905   	db $00,$FF,$FF
0440A6 FF FF FF    3906   	db $FF,$FF,$FF
0440A9             3907   
0440A9 00 00 55    3908   	db $00,$00,$55
0440AC 00 55 00    3909   	db $00,$55,$00
0440AF 00 55 55    3910   	db $00,$55,$55
0440B2 00 55 AA    3911   	db $00,$55,$AA
0440B5 00 55 FF    3912   	db $00,$55,$FF
0440B8 00 AA 55    3913   	db $00,$AA,$55
0440BB 00 AA FF    3914   	db $00,$AA,$FF
0440BE 00 FF 55    3915   	db $00,$FF,$55
0440C1             3916   
0440C1 00 FF AA    3917   	db $00,$FF,$AA
0440C4 55 00 00    3918   	db $55,$00,$00
0440C7 55 00 55    3919   	db $55,$00,$55
0440CA 55 00 AA    3920   	db $55,$00,$AA
0440CD 55 00 FF    3921   	db $55,$00,$FF
0440D0 55 55 00    3922   	db $55,$55,$00
0440D3 55 55 AA    3923   	db $55,$55,$AA
0440D6 55 55 FF    3924   	db $55,$55,$FF
0440D9             3925   
0440D9 55 AA 00    3926   	db $55,$AA,$00
0440DC 55 AA 55    3927   	db $55,$AA,$55
0440DF 55 AA AA    3928   	db $55,$AA,$AA
0440E2 55 AA FF    3929   	db $55,$AA,$FF
0440E5 55 FF 00    3930   	db $55,$FF,$00
0440E8 55 FF 55    3931   	db $55,$FF,$55
0440EB 55 FF AA    3932   	db $55,$FF,$AA
0440EE 55 FF FF    3933   	db $55,$FF,$FF
0440F1             3934   
0440F1 AA 00 55    3935   	db $AA,$00,$55
0440F4 AA 00 FF    3936   	db $AA,$00,$FF
0440F7 AA 55 00    3937   	db $AA,$55,$00
0440FA AA 55 55    3938   	db $AA,$55,$55
0440FD AA 55 AA    3939   	db $AA,$55,$AA
044100 AA 55 FF    3940   	db $AA,$55,$FF
044103 AA AA 55    3941   	db $AA,$AA,$55
044106 AA AA FF    3942   	db $AA,$AA,$FF
044109             3943   
044109 AA FF 00    3944   	db $AA,$FF,$00
04410C AA FF 55    3945   	db $AA,$FF,$55
04410F AA FF AA    3946   	db $AA,$FF,$AA
044112 AA FF FF    3947   	db $AA,$FF,$FF
044115 FF 00 55    3948   	db $FF,$00,$55
044118 FF 00 AA    3949   	db $FF,$00,$AA
04411B FF 55 00    3950   	db $FF,$55,$00
04411E FF 55 55    3951   	db $FF,$55,$55
044121             3952   
044121 FF 55 AA    3953   	db $FF,$55,$AA
044124 FF 55 FF    3954   	db $FF,$55,$FF
044127 FF AA 00    3955   	db $FF,$AA,$00
04412A FF AA 55    3956   	db $FF,$AA,$55
04412D FF AA AA    3957   	db $FF,$AA,$AA
044130 FF AA FF    3958   	db $FF,$AA,$FF
044133 FF FF 55    3959   	db $FF,$FF,$55
044136 FF FF AA    3960   	db $FF,$FF,$AA
044139             3961   
044139             3962   ; sprite structure:
044139             3963   ; =================
044139             3964   ; colors_count  :   byte
044139             3965   ; frames count	:	byte
044139             3966   ; spr size		:	byte
044139             3967   ; data			:   width x height bytes of colors
044139             3968   
044139             3969   ; ===============================================
044139             3970   ; A = byte to debug
044139             3971   debug_byte:
044139 F5          3972   	PUSH AF
04413A C5          3973   	PUSH BC
04413B D5          3974   	PUSH DE
04413C E5          3975   	PUSH HL
04413D 21 00 00 00 3976   	LD HL,$000000
044141 6F          3977   	LD L,A
044142 11 7E 41 04 3978   	LD DE,debug_text
044146 D5          3979   	PUSH DE
044147 CD 84 41 04 3980   	CALL num2dec
04414B E1          3981   	POP HL
04414C 23          3982   	INC HL
04414D 23          3983   	INC HL
04414E 01 03 00 00 3984   	LD BC,3
044152 3E 00       3985   	LD A,0
044154 49 DF       3986   	RST.LIS $18
044156 E1          3987   	POP HL
044157 D1          3988   	POP DE
044158 C1          3989   	POP BC
044159 F1          3990   	POP AF
04415A C9          3991   	RET
04415B             3992   
04415B             3993   ; HL = word to debug
04415B             3994   debug_word:
04415B F5          3995   	PUSH AF
04415C C5          3996   	PUSH BC
04415D D5          3997   	PUSH DE
04415E E5          3998   	PUSH HL
04415F 11 00 00 00 3999   	LD DE,$000000 ; remove HLU
044163 5D          4000   	LD E,L
044164 54          4001   	LD D,H
044165 D5          4002   	PUSH DE
044166 E1          4003   	POP HL
044167 11 7E 41 04 4004   	LD DE,debug_text
04416B D5          4005   	PUSH DE
04416C CD 84 41 04 4006   	CALL num2dec
044170 E1          4007   	POP HL
044171 01 05 00 00 4008   	LD BC,5
044175 3E 00       4009   	LD A,0
044177 49 DF       4010   	RST.LIS $18
044179 E1          4011   	POP HL
04417A D1          4012   	POP DE
04417B C1          4013   	POP BC
04417C F1          4014   	POP AF
04417D C9          4015   	RET
04417E             4016   
04417E             4017   debug_text:
04417E             4018   	DS 6
044184             4019   
044184             4020   ; 16 bits number to string
044184             4021   num2dec:
044184 01 F0 D8 FF 4022   	LD BC,-10000
044188 CD A5 41 04 4023   	CALL num1
04418C 01 18 FC FF 4024   	LD BC,-1000
044190 CD A5 41 04 4025   	CALL num1
044194 01 9C FF FF 4026   	LD BC,-100
044198 CD A5 41 04 4027   	CALL num1
04419C 01 F6 FF FF 4028   	LD BC,-10
0441A0 CD A5 41 04 4029   	CALL num1
0441A4 48          4030   	LD C,B
0441A5             4031   
0441A5 3E 2F       4032   num1: LD A,'0'-1
0441A7 3C          4033   num2: INC A
0441A8 09          4034   	ADD HL,BC
0441A9 38 FC       4035   	JR C,num2
0441AB ED 42       4036   	SBC HL,BC
0441AD             4037   
0441AD 12          4038   	LD (DE),A
0441AE 13          4039   	INC DE
0441AF C9          4040   	RET
