PC     Output      Line
040000             0001   ; spredit.asm
040000             0002   ;
040000             0003   ; by B.Vignoli
040000             0004   ; MIT 2023
040000             0005   ;
040000             0006   
040000             0007   .assume adl=1
040000             0008   .org $040000
040000             0009   
040000 C3 4D 00 04 0010   	jp start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .align 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .db "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	include "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0019   
040045             0020   MAX_COLORS:		 	equ 64
040045             0021   COLOR_MIN:	 		equ 0
040045             0022   COLOR_MAX:	 		equ 63
040045             0023   
040045             0024   MAX_FRAMES:			equ 8
040045             0025   
040045             0026   COLOR_WHITE:		equ 15
040045             0027   COLOR_GREY:			equ 7
040045             0028   COLOR_BLACK:		equ 0
040045             0029   
040045             0030   TITLE_X: 	equ 17
040045             0031   TITLE_Y: 	equ 2
040045             0032   MENU_X: 	equ 13
040045             0033   MENU1_Y: 	equ 8
040045             0034   MENU2_Y: 	equ 12
040045             0035   MENU3_Y: 	equ 16
040045             0036   MENU4_Y: 	equ 20
040045             0037   MENU5_Y: 	equ 24
040045             0038   FILENAME_X: equ 7
040045             0039   FILENAME_Y: equ 24
040045             0040   
040045             0041   SPR44: 		equ 4
040045             0042   SPR88: 		equ 8
040045             0043   SPR1616: 	equ 16
040045             0044   SPR3232: 	equ 32
040045             0045   
040045             0046   SPR44_width: 	equ 32
040045             0047   SPR88_width: 	equ 16
040045             0048   SPR1616_width: 	equ 8
040045             0049   SPR3232_width: 	equ 4
040045             0050   
040045             0051   BUFFER_SIZE:			equ 8192 ; 8 frames
040045             0052   ONE_FRAME_BUFFER_SIZE:	equ 1024
040045             0053   
040045             0054   HEADER_BUFFER_SIZE:		equ 16
040045             0055   
040045             0056   SLOWDOWN_DELAY:	equ 20
040045             0057   
040045             0058   KEY_SPACE: equ -99 ; draw with color
040045             0059   KEY_UP: equ -58 ; move
040045             0060   KEY_DOWN: equ -42
040045             0061   KEY_LEFT: equ -26
040045             0062   KEY_RIGHT: equ -122
040045             0063   KEY_DELETE: equ -90 ; remove color with black
040045             0064   KEY_N: equ -86 ; add a new void frame
040045             0065   KEY_C: equ -83 ; copy current frame to a new frame
040045             0066   KEY_BACKSPACE: equ -48 ; delete current selected frame
040045             0067   KEY_PGUP: equ -64 ; select frame
040045             0068   KEY_PGDOWN: equ -79
040045             0069   KEY_L: equ -87 ; load sprite
040045             0070   KEY_S: equ -82 ; save sprite
040045             0071   KEY_E: equ -35 ; export sprite as assembler data
040045             0072   KEY_R: equ -52 ; rotate frame clockwise
040045             0073   KEY_F: equ -68 ; flip frame horizontally
040045             0074   KEY_M: equ -102 ; mirror frame vertically
040045             0075   KEY_ESCAPE: equ -113
040045             0076   KEY_F1: equ -114 ; select 4x4 sprite
040045             0077   KEY_F2: equ -115 ; select 8x8 sprite
040045             0078   KEY_F3: equ -116 ; select 16x16 sprite
040045             0079   KEY_F4: equ -21 ; select 32x32 sprite
040045             0080   KEY_RETURN: equ -74 ; floodfill
040045             0081   
040045             0082   ; play mode:
040045             0083   KEY_P:	equ -56 ; switch to play mode
040045             0084   KEY_D:	equ -51 ; change delay (speeds: normal (100ms), slow (250ms), fast (25ms))
040045             0085   
040045             0086   ; palette mode:
040045             0087   KEY_TAB: equ -97 ; switch to palette mode
040045             0088   KEY_1:	equ -49 ; red+
040045             0089   KEY_2:	equ -50 ; green+
040045             0090   KEY_3:	equ -18 ; blue+
040045             0091   KEY_4:	equ -19 ; red-
040045             0092   KEY_5:	equ -20 ; green-
040045             0093   KEY_6:	equ -53; blue-
040045             0094   KEY_7:	equ -37 ; reset color to black
040045             0095   ; KEY_L: load palette file (must be 2, 4, 16 or 64 colors)
040045             0096   ; KEY_S: save palette file
040045             0097   
040045             0098   MAX_PAL_DATA: equ 836 ; max palette chars
040045             0099   MAX_PAL_DATA_HI: equ 03h
040045             0100   MAX_PAL_DATA_LO: equ 44h
040045             0101   
040045             0102   BITLOOKUP:
040045 01 02 04 08 0103   	DB 01h,02h,04h,08h
040049 10 20 40 80 0104   	DB 10h,20h,40h,80h
04004D             0105   
04004D             0106   ;======================================================================
04004D             0107   start:
04004D F5          0108   	push af
04004E C5          0109   	push bc
04004F D5          0110   	push de
040050 DD E5       0111   	push ix
040052 FD E5       0112   	push iy
040054             0113   
040054             0114   	; set mode 8 (320x240x64)
040054             0115   	vdu 22
040054 3E 16       0001M  		LD	A, function
040056 49 D7       0002M  		RST.LIS	10h
040058             0116   	vdu 8
040058 3E 08       0001M  		LD	A, function
04005A 49 D7       0002M  		RST.LIS	10h
04005C             0117   
04005C             0118   	; disable logical scale coordinates system
04005C             0119   	vdu 23
04005C 3E 17       0001M  		LD	A, function
04005E 49 D7       0002M  		RST.LIS	10h
040060             0120   	vdu 0
040060 3E 00       0001M  		LD	A, function
040062 49 D7       0002M  		RST.LIS	10h
040064             0121   	vdu $c0
040064 3E C0       0001M  		LD	A, function
040066 49 D7       0002M  		RST.LIS	10h
040068             0122   	vdu 0
040068 3E 00       0001M  		LD	A, function
04006A 49 D7       0002M  		RST.LIS	10h
04006C             0123   
04006C             0124   	; set text colors
04006C             0125   	vdu 17
04006C 3E 11       0001M  		LD	A, function
04006E 49 D7       0002M  		RST.LIS	10h
040070             0126   	vdu 128 ; black background
040070 3E 80       0001M  		LD	A, function
040072 49 D7       0002M  		RST.LIS	10h
040074             0127   
040074             0128   	vdu 17
040074 3E 11       0001M  		LD	A, function
040076 49 D7       0002M  		RST.LIS	10h
040078             0129   	vdu COLOR_WHITE ; white pen
040078 3E 0F       0001M  		LD	A, function
04007A 49 D7       0002M  		RST.LIS	10h
04007C             0130   
04007C             0131   	; set graphics pen
04007C             0132   	vdu 18
04007C 3E 12       0001M  		LD	A, function
04007E 49 D7       0002M  		RST.LIS	10h
040080             0133   	vdu 0
040080 3E 00       0001M  		LD	A, function
040082 49 D7       0002M  		RST.LIS	10h
040084             0134   	vdu COLOR_WHITE ; white pen
040084 3E 0F       0001M  		LD	A, function
040086 49 D7       0002M  		RST.LIS	10h
040088             0135   
040088             0136   	; hide cursor
040088             0137   	vdu 23
040088 3E 17       0001M  		LD	A, function
04008A 49 D7       0002M  		RST.LIS	10h
04008C             0138   	vdu 1
04008C 3E 01       0001M  		LD	A, function
04008E 49 D7       0002M  		RST.LIS	10h
040090             0139   	vdu 0
040090 3E 00       0001M  		LD	A, function
040092 49 D7       0002M  		RST.LIS	10h
040094             0140   
040094             0141   	; store coordinates
040094 DD 21 9B 17 0142   	ld ix,x1
       04          
040099 21 00 00 00 0143   	ld hl,0
04009D DD 75 00    0144   	ld (ix+0),l
0400A0 DD 74 01    0145   	ld (ix+1),h
0400A3             0146   
0400A3 DD 21 9D 17 0147   	ld ix,y1
       04          
0400A8 21 00 00 00 0148   	ld hl,0
0400AC DD 75 00    0149   	ld (ix+0),l
0400AF DD 74 01    0150   	ld (ix+1),h
0400B2             0151   
0400B2 DD 21 9F 17 0152   	ld ix,x2
       04          
0400B7 21 3F 01 00 0153   	ld hl,319
0400BB DD 75 00    0154   	ld (ix+0),l
0400BE DD 74 01    0155   	ld (ix+1),h
0400C1             0156   
0400C1 DD 21 A1 17 0157   	ld ix,y2
       04          
0400C6 21 EF 00 00 0158   	ld hl,239
0400CA DD 75 00    0159   	ld (ix+0),l
0400CD DD 74 01    0160   	ld (ix+1),h
0400D0             0161   
0400D0             0162   	; draw the border rectangle
0400D0 CD 8B 0A 04 0163   	call fn_rect
0400D4             0164   
0400D4             0165   	; locate x,y
0400D4             0166   	vdu 31
0400D4 3E 1F       0001M  		LD	A, function
0400D6 49 D7       0002M  		RST.LIS	10h
0400D8             0167   	vdu TITLE_X
0400D8 3E 11       0001M  		LD	A, function
0400DA 49 D7       0002M  		RST.LIS	10h
0400DC             0168   	vdu TITLE_Y
0400DC 3E 02       0001M  		LD	A, function
0400DE 49 D7       0002M  		RST.LIS	10h
0400E0             0169   
0400E0             0170   	; print text
0400E0 21 B2 17 04 0171   	ld hl,title
0400E4 01 00 00 00 0172   	ld bc,0
0400E8 AF          0173   	xor a
0400E9 49 DF       0174   	rst.lis $18
0400EB             0175   
0400EB             0176   	; locate x,y
0400EB             0177   	vdu 31
0400EB 3E 1F       0001M  		LD	A, function
0400ED 49 D7       0002M  		RST.LIS	10h
0400EF             0178   	vdu MENU_X
0400EF 3E 0D       0001M  		LD	A, function
0400F1 49 D7       0002M  		RST.LIS	10h
0400F3             0179   	vdu MENU1_Y
0400F3 3E 08       0001M  		LD	A, function
0400F5 49 D7       0002M  		RST.LIS	10h
0400F7             0180   
0400F7             0181   	; print text
0400F7 21 BB 17 04 0182   	ld hl,menu1
0400FB 01 00 00 00 0183   	ld bc,0
0400FF AF          0184   	xor a
040100 49 DF       0185   	rst.lis $18
040102             0186   
040102             0187   	; locate x,y
040102             0188   	vdu 31
040102 3E 1F       0001M  		LD	A, function
040104 49 D7       0002M  		RST.LIS	10h
040106             0189   	vdu MENU_X
040106 3E 0D       0001M  		LD	A, function
040108 49 D7       0002M  		RST.LIS	10h
04010A             0190   	vdu MENU2_Y
04010A 3E 0C       0001M  		LD	A, function
04010C 49 D7       0002M  		RST.LIS	10h
04010E             0191   
04010E             0192   	; print text
04010E 21 CA 17 04 0193   	ld hl,menu2
040112 01 00 00 00 0194   	ld bc,0
040116 AF          0195   	xor a
040117 49 DF       0196   	rst.lis $18
040119             0197   
040119             0198   	; locate x,y
040119             0199   	vdu 31
040119 3E 1F       0001M  		LD	A, function
04011B 49 D7       0002M  		RST.LIS	10h
04011D             0200   	vdu MENU_X
04011D 3E 0D       0001M  		LD	A, function
04011F 49 D7       0002M  		RST.LIS	10h
040121             0201   	vdu MENU3_Y
040121 3E 10       0001M  		LD	A, function
040123 49 D7       0002M  		RST.LIS	10h
040125             0202   
040125             0203   	; print text
040125 21 D9 17 04 0204   	ld hl,menu3
040129 01 00 00 00 0205   	ld bc,0
04012D AF          0206   	xor a
04012E 49 DF       0207   	rst.lis $18
040130             0208   
040130             0209   	; locate x,y
040130             0210   	vdu 31
040130 3E 1F       0001M  		LD	A, function
040132 49 D7       0002M  		RST.LIS	10h
040134             0211   	vdu MENU_X
040134 3E 0D       0001M  		LD	A, function
040136 49 D7       0002M  		RST.LIS	10h
040138             0212   	vdu MENU4_Y
040138 3E 14       0001M  		LD	A, function
04013A 49 D7       0002M  		RST.LIS	10h
04013C             0213   
04013C             0214   	; print text
04013C 21 EA 17 04 0215   	ld hl,menu4
040140 01 00 00 00 0216   	ld bc,0
040144 AF          0217   	xor a
040145 49 DF       0218   	rst.lis $18
040147             0219   
040147             0220   ; menu loop
040147             0221   menu_loop:
040147 21 8F FF FF 0222   	ld hl,KEY_ESCAPE
04014B CD EE 16 04 0223   	call fn_inkey
04014F FE 01       0224   	CP 1
040151 CA 67 0A 04 0225   	jp z,exit_program
040155             0226   
040155 21 8E FF FF 0227   	ld hl,KEY_F1
040159 CD EE 16 04 0228   	call fn_inkey
04015D FE 01       0229   	CP 1
04015F CA 91 01 04 0230   	jp z,ml_menu1
040163             0231   
040163 21 8D FF FF 0232   	ld hl,KEY_F2
040167 CD EE 16 04 0233   	call fn_inkey
04016B FE 01       0234   	CP 1
04016D CA 97 01 04 0235   	jp z,ml_menu2
040171             0236   
040171 21 8C FF FF 0237   	ld hl,KEY_F3
040175 CD EE 16 04 0238   	call fn_inkey
040179 FE 01       0239   	CP 1
04017B CA 9D 01 04 0240   	jp z,ml_menu3
04017F             0241   
04017F 21 EB FF FF 0242   	ld hl,KEY_F4
040183 CD EE 16 04 0243   	call fn_inkey
040187 FE 01       0244   	CP 1
040189 CA A3 01 04 0245   	jp z,ml_menu4
04018D             0246   
04018D C3 47 01 04 0247   	jp menu_loop
040191             0248   
040191             0249   ml_menu1:
040191 3E 04       0250   	ld a,SPR44
040193 16 20       0251   	ld d,SPR44_width
040195 18 10       0252   	jr exit_menu_loop
040197             0253   
040197             0254   ml_menu2:
040197 3E 08       0255   	ld a,SPR88
040199 16 10       0256   	ld d,SPR88_width
04019B 18 0A       0257   	jr exit_menu_loop
04019D             0258   
04019D             0259   ml_menu3:
04019D 3E 10       0260   	ld a,SPR1616
04019F 16 08       0261   	ld d,SPR1616_width
0401A1 18 04       0262   	jr exit_menu_loop
0401A3             0263   
0401A3             0264   ml_menu4:
0401A3 3E 20       0265   	ld a,SPR3232
0401A5 16 04       0266   	ld d,SPR3232_width
0401A7             0267   
0401A7             0268   exit_menu_loop:
0401A7             0269   	; store edited sprite size
0401A7 21 B0 17 04 0270   	ld hl,spr_size
0401AB 77          0271   	ld (hl),a
0401AC 21 AF 17 04 0272   	ld hl,pixel_width
0401B0 72          0273   	ld (hl),d
0401B1             0274   
0401B1             0275   	; clear the text screen
0401B1             0276   	vdu 12
0401B1 3E 0C       0001M  		LD	A, function
0401B3 49 D7       0002M  		RST.LIS	10h
0401B5             0277   
0401B5 CD 28 17 04 0278   	call fn_draw_the_palette
0401B9             0279   
0401B9             0280   	; store coordinates
0401B9 DD 21 9B 17 0281   	ld ix,x1
       04          
0401BE 21 00 00 00 0282   	ld hl,0
0401C2 DD 75 00    0283   	ld (ix+0),l
0401C5 DD 74 01    0284   	ld (ix+1),h
0401C8             0285   
0401C8 DD 21 9D 17 0286   	ld ix,y1
       04          
0401CD 21 0B 00 00 0287   	ld hl,11
0401D1 DD 75 00    0288   	ld (ix+0),l
0401D4 DD 74 01    0289   	ld (ix+1),h
0401D7             0290   
0401D7 DD 21 9F 17 0291   	ld ix,x2
       04          
0401DC 21 3F 01 00 0292   	ld hl,319
0401E0 DD 75 00    0293   	ld (ix+0),l
0401E3 DD 74 01    0294   	ld (ix+1),h
0401E6             0295   
0401E6 DD 21 A1 17 0296   	ld ix,y2
       04          
0401EB 21 EF 00 00 0297   	ld hl,239
0401EF DD 75 00    0298   	ld (ix+0),l
0401F2 DD 74 01    0299   	ld (ix+1),h
0401F5             0300   
0401F5             0301   	; draw the border rectangle
0401F5 CD 8B 0A 04 0302   	call fn_rect
0401F9             0303   
0401F9             0304   	; store edited sprite coordinates
0401F9 DD 21 A3 17 0305   	ld ix,xs1
       04          
0401FE FD 21 9B 17 0306   	ld iy,x1
       04          
040203 DD 6E 00    0307   	ld l,(ix+0)
040206 DD 66 01    0308   	ld h,(ix+1)
040209 FD 75 00    0309   	ld (iy+0),l
04020C FD 74 01    0310   	ld (iy+1),h
04020F             0311   
04020F DD 21 A5 17 0312   	ld ix,ys1
       04          
040214 FD 21 9D 17 0313   	ld iy,y1
       04          
040219 DD 6E 00    0314   	ld l,(ix+0)
04021C DD 66 01    0315   	ld h,(ix+1)
04021F FD 75 00    0316   	ld (iy+0),l
040222 FD 74 01    0317   	ld (iy+1),h
040225             0318   
040225 DD 21 A7 17 0319   	ld ix,xs2
       04          
04022A FD 21 9F 17 0320   	ld iy,x2
       04          
04022F DD 6E 00    0321   	ld l,(ix+0)
040232 DD 66 01    0322   	ld h,(ix+1)
040235 FD 75 00    0323   	ld (iy+0),l
040238 FD 74 01    0324   	ld (iy+1),h
04023B             0325   
04023B DD 21 A9 17 0326   	ld ix,ys2
       04          
040240 FD 21 A1 17 0327   	ld iy,y2
       04          
040245 DD 6E 00    0328   	ld l,(ix+0)
040248 DD 66 01    0329   	ld h,(ix+1)
04024B FD 75 00    0330   	ld (iy+0),l
04024E FD 74 01    0331   	ld (iy+1),h
040251             0332   
040251             0333   	; draw the sprite's border rectangle
040251 CD 8B 0A 04 0334   	call fn_rect
040255             0335   
040255             0336   	; update sprite size descriptions
040255 CD 8A 16 04 0337   	call fn_show_spr_descr
040259             0338   
040259             0339   ; initialize sprite vars
040259             0340   init_sprite_vars:
040259             0341   	; initialize coordinates before drawing the sprite
040259 DD 21 AB 17 0342   	ld ix,xpix
       04          
04025E AF          0343   	xor a
04025F DD 77 00    0344   	ld (ix+0),a ; xpix = 0
040262 DD 77 01    0345   	ld (ix+1),a	; ypix = 0
040265 DD 21 B1 17 0346   	ld ix,current_pen
       04          
04026A 3E 0F       0347   	ld a,COLOR_WHITE
04026C DD 77 00    0348   	ld (ix+0),a ; current pen -> white
04026F             0349   
04026F             0350   	; set vars
04026F 21 BB 18 04 0351   	ld hl,colors_count
040273 3E 40       0352   	ld a,MAX_COLORS
040275 77          0353   	ld (hl),a
040276 21 C0 18 04 0354   	ld hl,current_frame
04027A AF          0355   	xor a
04027B 77          0356   	ld (hl),a
04027C 3C          0357   	inc a
04027D 21 C1 18 04 0358   	ld hl,frames_count
040281 77          0359   	ld (hl),a
040282             0360   
040282             0361   	; fill buffers with zeros
040282 01 00 20 00 0362   	ld bc,BUFFER_SIZE
040286 21 C9 18 04 0363   	ld hl,sprite_buffer
04028A             0364   
04028A             0365   isv_fill_loop:
04028A AF          0366   	xor a
04028B 77          0367   	ld (hl),a
04028C 0B          0368   	dec bc
04028D 23          0369   	inc hl
04028E 78          0370   	ld a,b
04028F B1          0371   	or c
040290 FE 00       0372   	cp 0
040292 20 F6       0373   	jr nz,isv_fill_loop
040294             0374   
040294             0375   ; draw the pixel with a border
040294 CD 18 0C 04 0376   	call fn_draw_pixel_with_border
040298             0377   
040298             0378   ; draw sprite loop
040298             0379   draw_sprite_loop:
040298 21 9D FF FF 0380   	ld hl,KEY_SPACE
04029C CD EE 16 04 0381   	call fn_inkey
0402A0 FE 01       0382   	cp 1
0402A2 CC B4 03 04 0383   	call z,dsl_set_pen
0402A6             0384   
0402A6 21 C6 FF FF 0385   	ld hl,KEY_UP
0402AA CD EE 16 04 0386   	call fn_inkey
0402AE FE 01       0387   	cp 1
0402B0 CC D9 03 04 0388   	call z,dsl_up
0402B4             0389   
0402B4 21 D6 FF FF 0390   	ld hl,KEY_DOWN
0402B8 CD EE 16 04 0391   	call fn_inkey
0402BC FE 01       0392   	cp 1
0402BE CC 00 04 04 0393   	call z,dsl_down
0402C2             0394   
0402C2 21 E6 FF FF 0395   	ld hl,KEY_LEFT
0402C6 CD EE 16 04 0396   	call fn_inkey
0402CA FE 01       0397   	cp 1
0402CC CC 2C 04 04 0398   	call z,dsl_left
0402D0             0399   
0402D0 21 86 FF FF 0400   	ld hl,KEY_RIGHT
0402D4 CD EE 16 04 0401   	call fn_inkey
0402D8 FE 01       0402   	cp 1
0402DA CC 53 04 04 0403   	call z,dsl_right
0402DE             0404   
0402DE 21 A6 FF FF 0405   	ld hl,KEY_DELETE
0402E2 CD EE 16 04 0406   	call fn_inkey
0402E6 FE 01       0407   	cp 1
0402E8 CC C8 03 04 0408   	call z,dsl_reset_pen
0402EC             0409   
0402EC 21 9F FF FF 0410   	ld hl,KEY_TAB
0402F0 CD EE 16 04 0411   	call fn_inkey
0402F4 FE 01       0412   	cp 1
0402F6 CA 2B 09 04 0413   	jp z,dsl_palette_tool
0402FA             0414   
0402FA 21 AA FF FF 0415   	ld hl,KEY_N
0402FE CD EE 16 04 0416   	call fn_inkey
040302 FE 01       0417   	cp 1
040304 CC D2 04 04 0418   	call z,dsl_add_frame
040308             0419   
040308 21 AD FF FF 0420   	ld hl,KEY_C
04030C CD EE 16 04 0421   	call fn_inkey
040310 FE 01       0422   	cp 1
040312 CC 69 05 04 0423   	call z,dsl_add_and_copy_frame
040316             0424   
040316 21 D0 FF FF 0425   	ld hl,KEY_BACKSPACE
04031A CD EE 16 04 0426   	call fn_inkey
04031E FE 01       0427   	cp 1
040320 CC D0 05 04 0428   	call z,dsl_delete_frame
040324             0429   
040324 21 C0 FF FF 0430   	ld hl,KEY_PGUP
040328 CD EE 16 04 0431   	call fn_inkey
04032C FE 01       0432   	cp 1
04032E CC C9 06 04 0433   	call z,dsl_next_frame
040332             0434   
040332 21 B1 FF FF 0435   	ld hl,KEY_PGDOWN
040336 CD EE 16 04 0436   	call fn_inkey
04033A FE 01       0437   	cp 1
04033C CC AA 06 04 0438   	call z,dsl_previous_frame
040340             0439   
040340 21 A9 FF FF 0440   	ld hl,KEY_L
040344 CD EE 16 04 0441   	call fn_inkey
040348 FE 01       0442   	cp 1
04034A CC 7F 04 04 0443   	call z,dsl_load_sprite
04034E             0444   
04034E 21 AE FF FF 0445   	ld hl,KEY_S
040352 CD EE 16 04 0446   	call fn_inkey
040356 FE 01       0447   	cp 1
040358 CC A0 04 04 0448   	call z,dsl_save_sprite
04035C             0449   
04035C 21 DD FF FF 0450   	ld hl,KEY_E
040360 CD EE 16 04 0451   	call fn_inkey
040364 FE 01       0452   	cp 1
040366 CC B9 04 04 0453   	call z,dsl_export_sprite
04036A             0454   
04036A 21 CC FF FF 0455   	ld hl,KEY_R
04036E CD EE 16 04 0456   	call fn_inkey
040372 FE 01       0457   	cp 1
040374 CC EF 06 04 0458   	call z,dsl_rotate_frame
040378             0459   
040378 21 BC FF FF 0460   	ld hl,KEY_F
04037C CD EE 16 04 0461   	call fn_inkey
040380 FE 01       0462   	cp 1
040382 CC A4 07 04 0463   	call z,dsl_flip_frame
040386             0464   
040386 21 9A FF FF 0465   	ld hl,KEY_M
04038A CD EE 16 04 0466   	call fn_inkey
04038E FE 01       0467   	cp 1
040390 CC 0B 08 04 0468   	call z,dsl_mirror_frame
040394             0469   
040394 21 B6 FF FF 0470   	ld hl,KEY_RETURN
040398 CD EE 16 04 0471   	call fn_inkey
04039C FE 01       0472   	cp 1
04039E CC 8B 08 04 0473   	call z,dsl_flood_fill
0403A2             0474   
0403A2 21 8F FF FF 0475   	ld hl,KEY_ESCAPE
0403A6 CD EE 16 04 0476   	call fn_inkey
0403AA FE 01       0477   	cp 1
0403AC CA 67 0A 04 0478   	jp z,exit_program
0403B0             0479   
0403B0 C3 98 02 04 0480   	jp draw_sprite_loop
0403B4             0481   
0403B4             0482   ; set the pen of the current pixel
0403B4             0483   dsl_set_pen:
0403B4 CD 42 0C 04 0484   	call fn_get_pixel_color
0403B8 21 B1 17 04 0485   	ld hl,current_pen
0403BC BE          0486   	cp (hl)
0403BD C8          0487   	ret z
0403BE 7E          0488   	ld a,(hl)
0403BF CD 84 0C 04 0489   	call fn_set_pixel_color
0403C3 CD 18 0C 04 0490   	call fn_draw_pixel_with_border
0403C7 C9          0491   	ret
0403C8             0492   
0403C8             0493   ; reset the pen of the current pixel
0403C8             0494   dsl_reset_pen:
0403C8 CD 42 0C 04 0495   	call fn_get_pixel_color
0403CC FE 00       0496   	cp 0
0403CE C8          0497   	ret z
0403CF AF          0498   	xor a
0403D0 CD 84 0C 04 0499   	call fn_set_pixel_color
0403D4 CD 18 0C 04 0500   	call fn_draw_pixel_with_border
0403D8 C9          0501   	ret
0403D9             0502   
0403D9             0503   ; move pixel up
0403D9             0504   dsl_up:
0403D9 21 AC 17 04 0505   	ld hl,ypix
0403DD 7E          0506   	ld a,(hl)
0403DE FE 00       0507   	cp 0
0403E0 C8          0508   	ret z
0403E1             0509   
0403E1 21 9D FF FF 0510   	ld hl,KEY_SPACE
0403E5 CD EE 16 04 0511   	call fn_inkey
0403E9 FE 01       0512   	cp 1
0403EB CC B4 03 04 0513   	call z,dsl_set_pen
0403EF             0514   
0403EF CD 2C 0C 04 0515   	call fn_draw_pixel_without_border
0403F3 CD C8 0C 04 0516   	call fn_move_up
0403F7 CD 18 0C 04 0517   	call fn_draw_pixel_with_border
0403FB CD 69 16 04 0518   	call fn_slowdown
0403FF C9          0519   	ret
040400             0520   
040400             0521   ; move pixel down
040400             0522   dsl_down:
040400 21 B0 17 04 0523   	ld hl,spr_size
040404 56          0524   	ld d,(hl)
040405 15          0525   	dec d
040406             0526   
040406 21 AC 17 04 0527   	ld hl,ypix
04040A 7E          0528   	ld a,(hl)
04040B BA          0529   	cp d
04040C C8          0530   	ret z
04040D             0531   
04040D 21 9D FF FF 0532   	ld hl,KEY_SPACE
040411 CD EE 16 04 0533   	call fn_inkey
040415 FE 01       0534   	cp 1
040417 CC B4 03 04 0535   	call z,dsl_set_pen
04041B             0536   
04041B CD 2C 0C 04 0537   	call fn_draw_pixel_without_border
04041F CD CE 0C 04 0538   	call fn_move_down
040423 CD 18 0C 04 0539   	call fn_draw_pixel_with_border
040427 CD 69 16 04 0540   	call fn_slowdown
04042B C9          0541   	ret
04042C             0542   
04042C             0543   ; move pixel left
04042C             0544   dsl_left:
04042C 21 AB 17 04 0545   	ld hl,xpix
040430 7E          0546   	ld a,(hl)
040431 FE 00       0547   	cp 0
040433 C8          0548   	ret z
040434             0549   
040434 21 9D FF FF 0550   	ld hl,KEY_SPACE
040438 CD EE 16 04 0551   	call fn_inkey
04043C FE 01       0552   	cp 1
04043E CC B4 03 04 0553   	call z,dsl_set_pen
040442             0554   
040442 CD 2C 0C 04 0555   	call fn_draw_pixel_without_border
040446 CD D4 0C 04 0556   	call fn_move_left
04044A CD 18 0C 04 0557   	call fn_draw_pixel_with_border
04044E CD 69 16 04 0558   	call fn_slowdown
040452 C9          0559   	ret
040453             0560   
040453             0561   ; move pixel right
040453             0562   dsl_right:
040453 21 B0 17 04 0563   	ld hl,spr_size
040457 56          0564   	ld d,(hl)
040458 15          0565   	dec d
040459             0566   
040459 21 AB 17 04 0567   	ld hl,xpix
04045D 7E          0568   	ld a,(hl)
04045E BA          0569   	cp d
04045F C8          0570   	ret z
040460             0571   
040460 21 9D FF FF 0572   	ld hl,KEY_SPACE
040464 CD EE 16 04 0573   	call fn_inkey
040468 FE 01       0574   	cp 1
04046A CC B4 03 04 0575   	call z,dsl_set_pen
04046E             0576   
04046E CD 2C 0C 04 0577   	call fn_draw_pixel_without_border
040472 CD DA 0C 04 0578   	call fn_move_right
040476 CD 18 0C 04 0579   	call fn_draw_pixel_with_border
04047A CD 69 16 04 0580   	call fn_slowdown
04047E C9          0581   	ret
04047F             0582   
04047F             0583   ; load a sprite
04047F             0584   dsl_load_sprite:
04047F 21 A9 FF FF 0585   	ld hl,KEY_L
040483 CD EE 16 04 0586   	call fn_inkey
040487 FE 00       0587   	cp 0
040489 20 F4       0588   	jr nz,dsl_load_sprite
04048B             0589   
04048B CD 2C 0C 04 0590   	call fn_draw_pixel_without_border
04048F CD 95 11 04 0591   	call fn_load_sprite
040493 CD E0 15 04 0592   	call fn_refresh_sprite
040497 CD 18 0C 04 0593   	call fn_draw_pixel_with_border
04049B CD 20 16 04 0594   	call fn_change_frame
04049F C9          0595   	ret
0404A0             0596   
0404A0             0597   ; save a sprite
0404A0             0598   dsl_save_sprite:
0404A0 21 AE FF FF 0599   	ld hl,KEY_S
0404A4 CD EE 16 04 0600   	call fn_inkey
0404A8 FE 00       0601   	cp 0
0404AA 20 F4       0602   	jr nz,dsl_save_sprite
0404AC             0603   
0404AC CD 2C 0C 04 0604   	call fn_draw_pixel_without_border
0404B0 CD BE 12 04 0605   	call fn_save_sprite
0404B4 CD E0 15 04 0606   	call fn_refresh_sprite
0404B8 C9          0607   	ret
0404B9             0608   
0404B9             0609   dsl_export_sprite:
0404B9 21 DD FF FF 0610   	ld hl,KEY_E
0404BD CD EE 16 04 0611   	call fn_inkey
0404C1 FE 00       0612   	cp 0
0404C3 20 F4       0613   	jr nz,dsl_export_sprite
0404C5             0614   
0404C5 CD 2C 0C 04 0615   	call fn_draw_pixel_without_border
0404C9 CD BD 13 04 0616   	call fn_export_sprite
0404CD CD E0 15 04 0617   	call fn_refresh_sprite
0404D1 C9          0618   	ret
0404D2             0619   
0404D2             0620   
0404D2             0621   ; add a frame to the animation
0404D2             0622   dsl_add_frame:
0404D2 21 AA FF FF 0623   	ld hl,KEY_N
0404D6 CD EE 16 04 0624   	call fn_inkey
0404DA FE 00       0625   	cp 0
0404DC 20 F4       0626   	jr nz,dsl_add_frame
0404DE             0627   
0404DE             0628   	; frames limit reached ? exit
0404DE 21 C1 18 04 0629   	ld hl,frames_count
0404E2 7E          0630   	ld a,(hl)
0404E3 FE 08       0631   	cp MAX_FRAMES
0404E5 C8          0632   	ret z
0404E6             0633   
0404E6             0634   	; get the number of frames to copy
0404E6 21 C1 18 04 0635   	ld hl,frames_count
0404EA 7E          0636   	ld a,(hl)
0404EB 21 C0 18 04 0637   	ld hl,current_frame
0404EF 46          0638   	ld b,(hl)
0404F0 90          0639   	sub b
0404F1 3D          0640   	dec a
0404F2             0641   
0404F2             0642   	; get sprsize² (length of a sprite, in bytes)
0404F2 21 B0 17 04 0643   	ld hl,spr_size
0404F6 11 00 00 00 0644   	ld de,$000000
0404FA 5E          0645   	ld e,(hl)
0404FB 56          0646   	ld d,(hl)
0404FC ED 5C       0647   	mlt de ; DE = sprsize²
0404FE             0648   
0404FE             0649   	; prepare for the case we goto af_zap...
0404FE 21 C9 18 04 0650   	ld hl,sprite_buffer
040502             0651   
040502 F5          0652   	push af
040503 E5          0653   	push hl
040504 21 C0 18 04 0654   	ld hl,current_frame
040508 7E          0655   	ld a,(hl)
040509 3C          0656   	inc a
04050A 47          0657   	ld b,a
04050B E1          0658   	pop hl
04050C F1          0659   	pop af
04050D             0660   
04050D             0661   af_loop0:
04050D 19          0662   	add hl,de ; for if current frame = 0 (prepare to zap!)
04050E 10 FD       0663   	djnz af_loop0
040510             0664   
040510 E5          0665   	push hl ; store HL = sprite buffer + sprsize²
040511 FE 00       0666   	cp 0
040513 CA 3B 05 04 0667   	jp z,af_zap ; zap the copy, if the 'current frame' is at the last frame
040517 E1          0668   	pop hl ; HL unused in this case
040518             0669   
040518 21 00 00 00 0670   	ld hl,$000000 ; HL is 0 to store the result
04051C 47          0671   	ld b,a ; B = frames to copy
04051D             0672   
04051D             0673   ; multiply number of frames to copy by sprsize²
04051D             0674   af_loop1:
04051D 19          0675   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04051E 10 FD       0676   	djnz af_loop1
040520             0677   
040520 E5          0678   	push hl
040521 C1          0679   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
040522             0680   
040522 21 C0 18 04 0681   	ld hl,current_frame
040526 7E          0682   	ld a,(hl)
040527 3C          0683   	inc a
040528 21 C9 18 04 0684   	ld hl,sprite_buffer
04052C             0685   
04052C C5          0686   	push bc
04052D 47          0687   	ld b,a
04052E             0688   
04052E             0689   af_loop2:
04052E 19          0690   	add hl,de ; HL = sprite buffer + length to copy
04052F 10 FD       0691   	djnz af_loop2
040531             0692   
040531 C1          0693   	pop bc
040532             0694   
040532 E5          0695   	push hl ; HL = sprite_buffer + (current frame * sprsize²)
040533             0696   
040533 09          0697   	add hl,bc
040534 2B          0698   	dec hl ; HL = end address to copy to end target address
040535             0699   
040535 E5          0700   	push hl
040536 19          0701   	add hl,de
040537 EB          0702   	ex de,hl ; DE = end target address
040538 E1          0703   	pop hl
040539             0704   
040539 ED B8       0705   	lddr
04053B             0706   
04053B             0707   af_zap:
04053B             0708   	; multiply number of frames to copy by sprsize²
04053B 21 B0 17 04 0709   	ld hl,spr_size
04053F 01 00 00 00 0710   	ld bc,$000000
040543 4E          0711   	ld c,(hl)
040544 46          0712   	ld b,(hl)
040545 ED 4C       0713   	mlt bc ; BC = sprsize²
040547             0714   
040547 E1          0715   	pop hl ; HL = sprite_buffer + (current frame * sprsize²)
040548             0716   
040548             0717   ; fill frame with 0 color
040548             0718   af_loop3:
040548 AF          0719   	xor a
040549 77          0720   	ld (hl),a
04054A 23          0721   	inc hl
04054B 0B          0722   	dec bc
04054C 78          0723   	ld a,b
04054D B1          0724   	or c
04054E FE 00       0725   	cp 0
040550 20 F6       0726   	jr nz,af_loop3
040552             0727   
040552             0728   	; increment the frames count and the current frame values
040552 21 C1 18 04 0729   	ld hl,frames_count
040556 34          0730   	inc (hl)
040557 21 C0 18 04 0731   	ld hl,current_frame
04055B 34          0732   	inc (hl)
04055C             0733   
04055C CD 20 16 04 0734   	call fn_change_frame
040560 CD 45 16 04 0735   	call fn_change_frames_count
040564 CD E0 15 04 0736   	call fn_refresh_sprite
040568 C9          0737   	ret
040569             0738   
040569             0739   ; add a copy of the current frame to the animation
040569             0740   dsl_add_and_copy_frame: ; TODO! debug me!
040569 21 AD FF FF 0741   	ld hl,KEY_C
04056D CD EE 16 04 0742   	call fn_inkey
040571 FE 00       0743   	cp 0
040573 20 F4       0744   	jr nz,dsl_add_and_copy_frame
040575             0745   
040575             0746   	; frames limit reached ? exit
040575 21 C1 18 04 0747   	ld hl,frames_count
040579 7E          0748   	ld a,(hl)
04057A FE 08       0749   	cp MAX_FRAMES
04057C C8          0750   	ret z
04057D             0751   
04057D             0752   	; get the number of frames to copy
04057D 21 C1 18 04 0753   	ld hl,frames_count
040581 7E          0754   	ld a,(hl)
040582 21 C0 18 04 0755   	ld hl,current_frame
040586 46          0756   	ld b,(hl)
040587 90          0757   	sub b
040588             0758   
040588             0759   	; get sprsize² (length of a sprite, in bytes)
040588 21 B0 17 04 0760   	ld hl,spr_size
04058C 11 00 00 00 0761   	ld de,$000000
040590 5E          0762   	ld e,(hl)
040591 56          0763   	ld d,(hl)
040592 ED 5C       0764   	mlt de ; DE = sprsize²
040594             0765   
040594 21 00 00 00 0766   	ld hl,$000000 ; HL is 0 to store the result
040598 47          0767   	ld b,a ; B = frames to copy
040599             0768   
040599             0769   ; multiply number of frames to copy by sprsize²
040599             0770   aacf_loop1:
040599 19          0771   	add hl,de ; HL = length (in bytes) to copy (a few frames)
04059A 10 FD       0772   	djnz aacf_loop1
04059C             0773   
04059C E5          0774   	push hl
04059D C1          0775   	pop bc ; BC = HL = length (in bytes) to copy (a few frames)
04059E             0776   
04059E 21 C0 18 04 0777   	ld hl,current_frame
0405A2 7E          0778   	ld a,(hl)
0405A3 21 C9 18 04 0779   	ld hl,sprite_buffer
0405A7 FE 00       0780   	cp 0
0405A9 28 06       0781   	jr z,aacf_loop_end2
0405AB             0782   
0405AB C5          0783   	push bc
0405AC 47          0784   	ld b,a
0405AD             0785   
0405AD             0786   aacf_loop2:
0405AD 19          0787   	add hl,de ; HL = sprite buffer + length to copy
0405AE 10 FD       0788   	djnz aacf_loop2
0405B0             0789   
0405B0 C1          0790   	pop bc
0405B1             0791   
0405B1             0792   aacf_loop_end2:
0405B1 09          0793   	add hl,bc
0405B2 2B          0794   	dec hl ; HL = end address to copy to end target address
0405B3             0795   
0405B3 E5          0796   	push hl
0405B4 19          0797   	add hl,de
0405B5 EB          0798   	ex de,hl ; DE = end target address
0405B6 E1          0799   	pop hl
0405B7             0800   
0405B7 ED B8       0801   	lddr
0405B9             0802   
0405B9             0803   	; increment the frames count and the current frame values
0405B9 21 C1 18 04 0804   	ld hl,frames_count
0405BD 34          0805   	inc (hl)
0405BE 21 C0 18 04 0806   	ld hl,current_frame
0405C2 34          0807   	inc (hl)
0405C3             0808   
0405C3 CD 20 16 04 0809   	call fn_change_frame
0405C7 CD 45 16 04 0810   	call fn_change_frames_count
0405CB CD E0 15 04 0811   	call fn_refresh_sprite
0405CF C9          0812   	ret
0405D0             0813   
0405D0             0814   ; delete last frame from animation
0405D0             0815   dsl_delete_frame:
0405D0 21 D0 FF FF 0816   	ld hl,KEY_BACKSPACE
0405D4 CD EE 16 04 0817   	call fn_inkey
0405D8 FE 00       0818   	cp 0
0405DA 20 F4       0819   	jr nz,dsl_delete_frame
0405DC             0820   
0405DC             0821   	; delete current selected frame
0405DC 21 B0 17 04 0822   	ld hl,spr_size
0405E0 01 00 00 00 0823   	ld bc,$000000
0405E4 4E          0824   	ld c,(hl)
0405E5 46          0825   	ld b,(hl)
0405E6 ED 4C       0826   	mlt bc ; BC = sprsize²
0405E8 21 C0 18 04 0827   	ld hl,current_frame
0405EC 7E          0828   	ld a,(hl) ; A = current frame
0405ED 21 C9 18 04 0829   	ld hl,sprite_buffer ; HL = sprite buffer
0405F1 C5          0830   	push bc
0405F2 FE 00       0831   	cp 0
0405F4 28 06       0832   	jr z,df_loop2
0405F6             0833   
0405F6             0834   df_loop1:
0405F6 09          0835   	add hl,bc ; HL = sprite buffer + (current frame * sprsize²)
0405F7 3D          0836   	dec a
0405F8 FE 00       0837   	cp 0
0405FA 20 FA       0838   	jr nz,df_loop1
0405FC             0839   
0405FC             0840   ; clear the current frame
0405FC             0841   df_loop2:
0405FC AF          0842   	xor a
0405FD 77          0843   	ld (hl),a
0405FE 23          0844   	inc hl
0405FF 0B          0845   	dec bc
040600 78          0846   	ld a,b
040601 B1          0847   	or c
040602 FE 00       0848   	cp 0
040604 20 F6       0849   	jr nz,df_loop2
040606             0850   
040606             0851   	; current frame + 1 = frames count ?
040606 E5          0852   	push hl
040607 21 C0 18 04 0853   	ld hl,current_frame
04060B 5E          0854   	ld e,(hl)
04060C 1C          0855   	inc e
04060D 21 C1 18 04 0856   	ld hl,frames_count
040611 7E          0857   	ld a,(hl)
040612 BB          0858   	cp e
040613 E1          0859   	pop hl
040614 C1          0860   	pop bc
040615 CA 8E 06 04 0861   	jp z,df_exit
040619             0862   
040619 11 C1 18 04 0863   	ld de,frames_count
04061D 1A          0864   	ld a,(de) ; A = frames count
04061E E5          0865   	push hl
04061F 21 C0 18 04 0866   	ld hl,current_frame
040623 5E          0867   	ld e,(hl) ; E = current frame
040624 E1          0868   	pop hl
040625 93          0869   	sub e
040626 3D          0870   	dec a ; A = number of frames to copy back
040627             0871   
040627 EB          0872   	ex de,hl ; DE = sprite buffer + ((current frame + 1) * sprsize²)
040628 21 00 00 00 0873   	ld hl,$000000
04062C FE 00       0874   	cp 0 ; 0 frames to copy ?
04062E 28 06       0875   	jr z,df_exit_loop3
040630             0876   
040630             0877   df_loop3:
040630 09          0878   	add hl,bc ; HL = length of a frame (sprsize²) * frames count
040631 3D          0879   	dec a
040632 FE 00       0880   	cp 0
040634 20 FA       0881   	jr nz,df_loop3
040636             0882   
040636             0883   df_exit_loop3:
040636 E5          0884   	push hl
040637 C1          0885   	pop bc ; BC = total length of area to copy
040638 D5          0886   	push de
040639 E1          0887   	pop hl ; HL = DE = start of area to copy
04063A             0888   
04063A C5          0889   	push bc
04063B D5          0890   	push de
04063C E5          0891   	push hl
04063D 21 B0 17 04 0892   	ld hl,spr_size
040641 11 00 00 00 0893   	ld de,$000000
040645 5E          0894   	ld e,(hl)
040646 56          0895   	ld d,(hl)
040647 ED 5C       0896   	mlt de ; DE = one sprite frame length
040649 E1          0897   	pop hl
04064A B7          0898   	or a
04064B ED 52       0899   	sbc hl,de ; HL = target area to copy
04064D D1          0900   	pop de
04064E EB          0901   	ex de,hl ; DE = target, HL = start
04064F C1          0902   	pop bc
040650 ED B0       0903   	ldir
040652             0904   
040652 21 B0 17 04 0905   	ld hl,spr_size
040656 01 00 00 00 0906   	ld bc,$000000
04065A 4E          0907   	ld c,(hl)
04065B 46          0908   	ld b,(hl)
04065C ED 4C       0909   	mlt bc ; DE = one sprite frame length
04065E             0910   
04065E             0911   	; delete last frame data
04065E 21 C1 18 04 0912   	ld hl,frames_count
040662 7E          0913   	ld a,(hl) ; A =frames count
040663 3D          0914   	dec a ; A = last frame
040664 21 C9 18 04 0915   	ld hl,sprite_buffer ; HL = sprite buffer
040668 FE 00       0916   	cp 0
04066A 28 06       0917   	jr z,df_loop5
04066C             0918   
04066C             0919   df_loop4:
04066C 09          0920   	add hl,bc ; HL = sprite buffer + (last frame * sprsize²)
04066D 3D          0921   	dec a
04066E FE 00       0922   	cp 0
040670 20 FA       0923   	jr nz,df_loop4
040672             0924   
040672             0925   ; clear the current frame
040672             0926   df_loop5:
040672 AF          0927   	xor a
040673 77          0928   	ld (hl),a
040674 23          0929   	inc hl
040675 0B          0930   	dec bc
040676 78          0931   	ld a,b
040677 B1          0932   	or c
040678 FE 00       0933   	cp 0
04067A 20 F6       0934   	jr nz,df_loop5
04067C             0935   
04067C             0936   	; decrement frames count
04067C 21 C1 18 04 0937   	ld hl,frames_count
040680 35          0938   	dec (hl)
040681             0939   
040681 CD 20 16 04 0940   	call fn_change_frame
040685 CD 45 16 04 0941   	call fn_change_frames_count
040689 CD E0 15 04 0942   	call fn_refresh_sprite
04068D C9          0943   	ret
04068E             0944   
04068E             0945   df_exit:
04068E 21 C1 18 04 0946   	ld hl,frames_count
040692 7E          0947   	ld a,(hl)
040693 FE 01       0948   	cp 1
040695 28 06       0949   	jr z,df_exit_end
040697 35          0950   	dec (hl)
040698 21 C0 18 04 0951   	ld hl,current_frame
04069C 35          0952   	dec (hl)
04069D             0953   
04069D             0954   df_exit_end:
04069D CD 20 16 04 0955   	call fn_change_frame
0406A1 CD 45 16 04 0956   	call fn_change_frames_count
0406A5 CD E0 15 04 0957   	call fn_refresh_sprite
0406A9 C9          0958   	ret
0406AA             0959   
0406AA             0960   ; goto previous frame
0406AA             0961   dsl_previous_frame:
0406AA 21 B1 FF FF 0962   	ld hl,KEY_PGDOWN
0406AE CD EE 16 04 0963   	call fn_inkey
0406B2 FE 00       0964   	cp 0
0406B4 20 F4       0965   	jr nz,dsl_previous_frame
0406B6             0966   
0406B6 21 C0 18 04 0967   	ld hl,current_frame
0406BA 7E          0968   	ld a,(hl)
0406BB FE 00       0969   	cp 0
0406BD C8          0970   	ret z
0406BE             0971   
0406BE 3D          0972   	dec a
0406BF 77          0973   	ld (hl),a
0406C0 CD 20 16 04 0974   	call fn_change_frame
0406C4 CD E0 15 04 0975   	call fn_refresh_sprite
0406C8 C9          0976   	ret
0406C9             0977   
0406C9             0978   ; goto next frame
0406C9             0979   dsl_next_frame:
0406C9 21 C0 FF FF 0980   	ld hl,KEY_PGUP
0406CD CD EE 16 04 0981   	call fn_inkey
0406D1 FE 00       0982   	cp 0
0406D3 20 F4       0983   	jr nz,dsl_next_frame
0406D5             0984   
0406D5 21 C0 18 04 0985   	ld hl,current_frame
0406D9 7E          0986   	ld a,(hl)
0406DA 3C          0987   	inc a
0406DB 21 C1 18 04 0988   	ld hl,frames_count
0406DF BE          0989   	cp (hl)
0406E0 C8          0990   	ret z
0406E1             0991   
0406E1 21 C0 18 04 0992   	ld hl,current_frame
0406E5 77          0993   	ld (hl),a
0406E6 CD 20 16 04 0994   	call fn_change_frame
0406EA CD E0 15 04 0995   	call fn_refresh_sprite
0406EE C9          0996   	ret
0406EF             0997   
0406EF             0998   ; rotate a frame 90° clockwise
0406EF             0999   dsl_rotate_frame:
0406EF 21 CC FF FF 1000   	ld hl,KEY_R
0406F3 CD EE 16 04 1001   	call fn_inkey
0406F7 FE 00       1002   	cp 0
0406F9 20 F4       1003   	jr nz,dsl_rotate_frame
0406FB             1004   
0406FB             1005   	; find HL as start of the first frame (buffer)
0406FB 21 B0 17 04 1006   	ld hl,spr_size
0406FF 01 00 00 00 1007   	ld bc,$000000
040703 11 00 00 00 1008   	ld de,$000000
040707 5E          1009   	ld e,(hl)
040708 56          1010   	ld d,(hl)
040709 4B          1011   	ld c,e
04070A ED 5C       1012   	mlt de ; DE = sprite length in bytes
04070C 21 C0 18 04 1013   	ld hl,current_frame
040710 7E          1014   	ld a,(hl) ; A = current frame
040711 21 C9 18 04 1015   	ld hl,sprite_buffer
040715 FE 00       1016   	cp 0
040717 28 04       1017   	jr z,rf_noloop1
040719 47          1018   	ld b,a
04071A             1019   
04071A             1020   rf_loop1:
04071A 19          1021   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
04071B 10 FD       1022   	djnz rf_loop1
04071D             1023   
04071D             1024   rf_noloop1:
04071D C5          1025   	push bc
04071E E5          1026   	push hl
04071F             1027   
04071F             1028   	; copy current frame to swap sprite buffer
04071F 11 35 3C 04 1029   	ld de,swap_sprite_buffer
040723 41          1030   	ld b,c
040724 ED 4C       1031   	mlt bc
040726 ED B0       1032   	ldir
040728             1033   
040728 FD E1       1034   	pop iy ; IY: destination
04072A C1          1035   	pop bc
04072B             1036   
04072B 79          1037   	ld a,c
04072C 01 00 00 00 1038   	ld bc,$000000
040730 4F          1039   	ld c,a ; BC = sprite size
040731             1040   
040731             1041   	; turn and copy swap sprite buffer frame to sprite buffer
040731 DD 21 35 3C 1042   	ld ix,swap_sprite_buffer ; IX: source
       04          
040736 11 00 00 00 1043   	ld de,0 ; x
04073A 21 00 00 00 1044   	ld hl,0 ; y
04073E             1045   
04073E             1046   rf_loop2:
04073E DD E5       1047   	push ix
040740 FD E5       1048   	push iy
040742             1049   
040742 D5          1050   	push de
040743 E5          1051   	push hl
040744             1052   
040744             1053   	; add x
040744 DD 19       1054   	add ix,de
040746             1055   
040746             1056   	; add y * width
040746 7C          1057   	ld a,h
040747 B5          1058   	or l
040748 FE 00       1059   	cp 0
04074A 28 09       1060   	jr z,rf_done1
04074C             1061   rf_loop3:
04074C DD 09       1062   	add ix,bc
04074E 2B          1063   	dec hl
04074F 7C          1064   	ld a,h
040750 B5          1065   	or l
040751 FE 00       1066   	cp 0
040753 20 F7       1067   	jr nz,rf_loop3
040755             1068   
040755             1069   rf_done1:
040755             1070   	; found the pixel value
040755 DD 7E 00    1071   	ld a,(ix+0)
040758             1072   
040758 E1          1073   	pop hl
040759 D1          1074   	pop de
04075A D5          1075   	push de
04075B E5          1076   	push hl
04075C             1077   
04075C             1078   	; add y
04075C EB          1079   	ex de,hl
04075D FD 09       1080   	add iy,bc
04075F B7          1081   	or a
040760 E5          1082   	push hl
040761 FD E5       1083   	push iy
040763 E1          1084   	pop hl
040764 ED 52       1085   	sbc hl,de
040766 E5          1086   	push hl
040767 FD E1       1087   	pop iy
040769 FD 2B       1088   	dec iy
04076B E1          1089   	pop hl
04076C EB          1090   	ex de,hl
04076D             1091   
04076D             1092   	; add x * width
04076D F5          1093   	push af
04076E 7A          1094   	ld a,d
04076F B3          1095   	or e
040770 FE 00       1096   	cp 0
040772 28 09       1097   	jr z,rf_done2
040774             1098   rf_loop5:
040774 FD 09       1099   	add iy,bc
040776 1B          1100   	dec de
040777 7A          1101   	ld a,d
040778 B3          1102   	or e
040779 FE 00       1103   	cp 0
04077B 20 F7       1104   	jr nz,rf_loop5
04077D             1105   
04077D             1106   rf_done2:
04077D F1          1107   	pop af
04077E             1108   
04077E             1109   	; store the pixel value
04077E FD 77 00    1110   	ld (iy+0),a
040781             1111   
040781 E1          1112   	pop hl
040782 D1          1113   	pop de
040783             1114   
040783 FD E1       1115   	pop iy
040785 DD E1       1116   	pop ix
040787             1117   
040787 13          1118   	inc de
040788 EB          1119   	ex de,hl
040789 B7          1120   	or a
04078A ED 42       1121   	sbc hl,bc
04078C 09          1122   	add hl,bc
04078D EB          1123   	ex de,hl
04078E DA 3E 07 04 1124   	jp c,rf_loop2
040792             1125   
040792 11 00 00 00 1126   	ld de,0
040796 23          1127   	inc hl
040797 B7          1128   	or a
040798 ED 42       1129   	sbc hl,bc
04079A 09          1130   	add hl,bc
04079B DA 3E 07 04 1131   	jp c,rf_loop2
04079F             1132   
04079F CD E0 15 04 1133   	call fn_refresh_sprite
0407A3 C9          1134   	ret
0407A4             1135   
0407A4             1136   ; flip frame horizontally
0407A4             1137   dsl_flip_frame:
0407A4 21 BC FF FF 1138   	ld hl,KEY_F
0407A8 CD EE 16 04 1139   	call fn_inkey
0407AC FE 00       1140   	cp 0
0407AE 20 F4       1141   	jr nz,dsl_flip_frame
0407B0             1142   
0407B0 21 B0 17 04 1143   	ld hl,spr_size
0407B4 11 00 00 00 1144   	ld de,$000000
0407B8 5E          1145   	ld e,(hl)
0407B9 56          1146   	ld d,(hl)
0407BA 4B          1147   	ld c,e
0407BB ED 5C       1148   	mlt de ; DE = sprite length in bytes
0407BD 21 C0 18 04 1149   	ld hl,current_frame
0407C1 7E          1150   	ld a,(hl) ; A = current frame
0407C2 21 C9 18 04 1151   	ld hl,sprite_buffer
0407C6 FE 00       1152   	cp 0
0407C8 28 04       1153   	jr z,ff_noloop1
0407CA 47          1154   	ld b,a
0407CB             1155   
0407CB             1156   ff_loop1:
0407CB 19          1157   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
0407CC 10 FD       1158   	djnz ff_loop1
0407CE             1159   
0407CE             1160   ff_noloop1:
0407CE 41          1161   	ld b,c ; B = sprite height
0407CF 11 00 00 00 1162   	ld de,$000000
0407D3 59          1163   	ld e,c ; DE = sprite width
0407D4 79          1164   	ld a,c ; A = sprite width
0407D5 CB 3F       1165   	srl a ; A = sprite height / 2
0407D7             1166   
0407D7 E5          1167   	push hl
0407D8 DD E1       1168   	pop ix ; IX = frame address
0407DA 19          1169   	add hl,de ; HL = frame address + sprite width - 1
0407DB 2B          1170   	dec hl
0407DC E5          1171   	push hl
0407DD FD E1       1172   	pop iy ; IY = IX + sprite width - 1
0407DF             1173   
0407DF             1174   ff_loop2:
0407DF F5          1175   	push af
0407E0 D5          1176   	push de
0407E1 DD E5       1177   	push ix
0407E3 FD E5       1178   	push iy
0407E5             1179   ff_loop3:
0407E5 DD 5E 00    1180   	ld e,(ix+0)
0407E8 FD 56 00    1181   	ld d,(iy+0)
0407EB DD 72 00    1182   	ld (ix+0),d
0407EE FD 73 00    1183   	ld (iy+0),e
0407F1 DD 23       1184   	inc ix
0407F3 FD 2B       1185   	dec iy
0407F5 3D          1186   	dec a
0407F6 FE 00       1187   	cp 0
0407F8 20 EB       1188   	jr nz,ff_loop3
0407FA FD E1       1189   	pop iy
0407FC DD E1       1190   	pop ix
0407FE D1          1191   	pop de
0407FF F1          1192   	pop af
040800 DD 19       1193   	add ix,de
040802 FD 19       1194   	add iy,de
040804 10 D9       1195   	djnz ff_loop2
040806             1196   
040806 CD E0 15 04 1197   	call fn_refresh_sprite
04080A C9          1198   	ret
04080B             1199   
04080B             1200   ; mirror frame vertically
04080B             1201   dsl_mirror_frame:
04080B 21 9A FF FF 1202   	ld hl,KEY_M
04080F CD EE 16 04 1203   	call fn_inkey
040813 FE 00       1204   	cp 0
040815 20 F4       1205   	jr nz,dsl_mirror_frame
040817             1206   
040817 21 B0 17 04 1207   	ld hl,spr_size
04081B 01 00 00 00 1208   	ld bc,$000000
04081F 11 00 00 00 1209   	ld de,$000000
040823 5E          1210   	ld e,(hl)
040824 56          1211   	ld d,(hl)
040825 4B          1212   	ld c,e
040826 ED 5C       1213   	mlt de ; DE = sprite length in bytes
040828 21 C0 18 04 1214   	ld hl,current_frame
04082C 7E          1215   	ld a,(hl) ; A = current frame
04082D 21 C9 18 04 1216   	ld hl,sprite_buffer
040831 FE 00       1217   	cp 0
040833 28 04       1218   	jr z,mf_noloop1
040835 47          1219   	ld b,a
040836             1220   
040836             1221   mf_loop1:
040836 19          1222   	add hl,de ; HL = sprite_buffer + (current frame * sprsize²)
040837 10 FD       1223   	djnz mf_loop1
040839             1224   
040839             1225   mf_noloop1:
040839 11 00 00 00 1226   	ld de,$000000
04083D 59          1227   	ld e,c ; E = sprite height
04083E 79          1228   	ld a,c ; A = sprite width
04083F 41          1229   	ld b,c ; B = sprite height
040840 CB 38       1230   	srl b ; divide B by 2, so B = sprite height / 2
040842             1231   
040842 E5          1232   	push hl
040843 DD E1       1233   	pop ix ; IX = frame address
040845 51          1234   	ld d,c
040846 15          1235   	dec d
040847 ED 5C       1236   	mlt de ; DE = sprite length - sprite width
040849 19          1237   	add hl,de ; HL = frame address + sprite length - sprite width
04084A E5          1238   	push hl
04084B FD E1       1239   	pop iy ; IY = IX + sprite length - sprite width
04084D 21 00 00 00 1240   	ld hl,$000000
040851 69          1241   	ld l,c ; HL = sprite width
040852             1242   
040852             1243   mf_loop2:
040852 F5          1244   	push af
040853 D5          1245   	push de
040854 DD E5       1246   	push ix
040856 FD E5       1247   	push iy
040858             1248   mf_loop3:
040858 DD 5E 00    1249   	ld e,(ix+0)
04085B FD 56 00    1250   	ld d,(iy+0)
04085E DD 72 00    1251   	ld (ix+0),d
040861 FD 73 00    1252   	ld (iy+0),e
040864 DD 23       1253   	inc ix
040866 FD 23       1254   	inc iy
040868 3D          1255   	dec a
040869 FE 00       1256   	cp 0
04086B 20 EB       1257   	jr nz,mf_loop3
04086D FD E1       1258   	pop iy
04086F DD E1       1259   	pop ix
040871 D1          1260   	pop de
040872 F1          1261   	pop af
040873 EB          1262   	ex de,hl
040874 DD 19       1263   	add ix,de
040876 EB          1264   	ex de,hl
040877 E5          1265   	push hl
040878 FD E5       1266   	push iy
04087A E1          1267   	pop hl
04087B D1          1268   	pop de
04087C B7          1269   	or a
04087D ED 52       1270   	sbc hl,de
04087F E5          1271   	push hl
040880 D5          1272   	push de
040881 E1          1273   	pop hl
040882 FD E1       1274   	pop iy
040884 10 CC       1275   	djnz mf_loop2
040886             1276   
040886 CD E0 15 04 1277   	call fn_refresh_sprite
04088A C9          1278   	ret
04088B             1279   
04088B             1280   dsl_flood_fill:
04088B 21 B6 FF FF 1281   	ld hl,KEY_RETURN
04088F CD EE 16 04 1282   	call fn_inkey
040893 FE 00       1283   	cp 0
040895 20 F4       1284   	jr nz,dsl_flood_fill
040897             1285   
040897             1286   	; hide the cursor
040897 CD 2C 0C 04 1287   	call fn_draw_pixel_without_border
04089B             1288   
04089B             1289   	; memorize pixel coordinates
04089B 3A AB 17 04 1290   	ld a,(xpix)
04089F 32 AD 17 04 1291   	ld (memxpix),a
0408A3 3A AC 17 04 1292   	ld a,(ypix)
0408A7 32 AE 17 04 1293   	ld (memypix),a
0408AB             1294   
0408AB             1295   	; fill all recursively
0408AB 3A AB 17 04 1296   	ld a,(xpix)
0408AF 5F          1297   	ld e,a
0408B0 3A AC 17 04 1298   	ld a,(ypix)
0408B4 57          1299   	ld d,a
0408B5 CD D6 08 04 1300   	call dsl_flood_fill_loop
0408B9             1301   
0408B9             1302   	; refresh all the sprite
0408B9 CD E0 15 04 1303   	call fn_refresh_sprite
0408BD             1304   
0408BD             1305   	; hide the cursor again
0408BD CD 2C 0C 04 1306   	call fn_draw_pixel_without_border
0408C1             1307   
0408C1             1308   	; restore pixel coordinates
0408C1             1309   	; and cursor
0408C1 3A AD 17 04 1310   	ld a,(memxpix)
0408C5 32 AB 17 04 1311   	ld (xpix),a
0408C9 3A AE 17 04 1312   	ld a,(memypix)
0408CD 32 AC 17 04 1313   	ld (ypix),a
0408D1 CD 18 0C 04 1314   	call fn_draw_pixel_with_border
0408D5 C9          1315   	ret
0408D6             1316   
0408D6             1317   dsl_flood_fill_loop:
0408D6 D5          1318   	push de
0408D7             1319   
0408D7 DD 21 B0 17 1320   	ld ix,spr_size
       04          
0408DC             1321   
0408DC             1322   	; out  of the sprite area ?
0408DC 7B          1323   	ld a,e
0408DD DD BE 00    1324   	cp (ix+0)
0408E0 D2 29 09 04 1325   	jp nc,ffl_exit
0408E4             1326   
0408E4             1327   	; out  of the sprite area ?
0408E4 7A          1328   	ld a,d
0408E5 DD BE 00    1329   	cp (ix+0)
0408E8 D2 29 09 04 1330   	jp nc,ffl_exit
0408EC             1331   
0408EC             1332   	; replace current pixel, if it is
0408EC             1333   	; inside the sprite area,
0408EC             1334   	; and has not the select palette color
0408EC 7B          1335   	ld a,e
0408ED 32 AB 17 04 1336   	ld (xpix),a
0408F1 7A          1337   	ld a,d
0408F2 32 AC 17 04 1338   	ld (ypix),a
0408F6 CD 42 0C 04 1339   	call fn_get_pixel_color
0408FA 21 B1 17 04 1340   	ld hl,current_pen
0408FE BE          1341   	cp (hl)
0408FF CA 29 09 04 1342   	jp z,ffl_exit
040903 7E          1343   	ld a,(hl)
040904 CD 84 0C 04 1344   	call fn_set_pixel_color
040908             1345   
040908             1346   	; restore coordinates
040908 3A AB 17 04 1347   	ld a,(xpix)
04090C 5F          1348   	ld e,a
04090D 3A AC 17 04 1349   	ld a,(ypix)
040911 57          1350   	ld d,a
040912             1351   
040912             1352   	; draw pixel at right
040912 1C          1353   	inc e
040913 CD D6 08 04 1354   	call dsl_flood_fill_loop
040917 1D          1355   	dec e
040918             1356   	; draw pixel at left
040918 1D          1357   	dec e
040919 CD D6 08 04 1358   	call dsl_flood_fill_loop
04091D 1C          1359   	inc e
04091E             1360   	; draw pixel up
04091E 14          1361   	inc d
04091F CD D6 08 04 1362   	call dsl_flood_fill_loop
040923 15          1363   	dec d
040924             1364   	; draw pixel down
040924 15          1365   	dec d
040925 CD D6 08 04 1366   	call dsl_flood_fill_loop
040929             1367   
040929             1368   ffl_exit:
040929 D1          1369   	pop de
04092A C9          1370   	ret
04092B             1371   
04092B             1372   ; change current tool to palette tool
04092B             1373   dsl_palette_tool:
04092B 21 9F FF FF 1374   	ld hl,KEY_TAB
04092F CD EE 16 04 1375   	call fn_inkey
040933 FE 00       1376   	cp 0
040935 20 F4       1377   	jr nz,dsl_palette_tool
040937             1378   
040937             1379   	; hide sprite drawing cursor
040937 CD 2C 0C 04 1380   	call fn_draw_pixel_without_border
04093B             1381   
04093B             1382   	; draw selected palette color
04093B 21 B1 17 04 1383   	ld hl,current_pen
04093F 4E          1384   	ld c,(hl)
040940 CD E0 0C 04 1385   	call fn_draw_palette_with_border
040944             1386   
040944             1387   ; select palette color
040944             1388   dsl_palette_tool_loop:
040944             1389   	; move to left color in the palette
040944 21 E6 FF FF 1390   	ld hl,KEY_LEFT
040948 CD EE 16 04 1391   	call fn_inkey
04094C FE 01       1392   	cp 1
04094E CC 11 0A 04 1393   	call z,dsl_dec_pen
040952             1394   
040952             1395   	; move to right color in the palette
040952 21 86 FF FF 1396   	ld hl,KEY_RIGHT
040956 CD EE 16 04 1397   	call fn_inkey
04095A FE 01       1398   	cp 1
04095C CC 3C 0A 04 1399   	call z,dsl_inc_pen
040960             1400   
040960             1401   	; return to draw sprite tool
040960 21 9F FF FF 1402   	ld hl,KEY_TAB
040964 CD EE 16 04 1403   	call fn_inkey
040968 FE 01       1404   	cp 1
04096A CA F4 09 04 1405   	jp z,dsl_draw_sprite_tool
04096E             1406   
04096E             1407   	; load palette
04096E 21 A9 FF FF 1408   	ld hl,KEY_L
040972 CD EE 16 04 1409   	call fn_inkey
040976 FE 01       1410   	cp 1
040978 CC 9C 09 04 1411   	call z,dslp_load_palette
04097C             1412   
04097C             1413   	; save palette
04097C 21 AE FF FF 1414   	ld hl,KEY_S
040980 CD EE 16 04 1415   	call fn_inkey
040984 FE 01       1416   	cp 1
040986 CC CE 09 04 1417   	call z,dslp_save_palette
04098A             1418   
04098A             1419   	; exit program
04098A 21 8F FF FF 1420   	ld hl,KEY_ESCAPE
04098E CD EE 16 04 1421   	call fn_inkey
040992 FE 01       1422   	cp 1
040994 CA 67 0A 04 1423   	jp z,exit_program
040998             1424   
040998 C3 44 09 04 1425   	jp dsl_palette_tool_loop
04099C             1426   
04099C             1427   dslp_load_palette:
04099C 21 A9 FF FF 1428   	ld hl,KEY_L
0409A0 CD EE 16 04 1429   	call fn_inkey
0409A4 FE 00       1430   	cp 0
0409A6 20 F4       1431   	jr nz,dslp_load_palette
0409A8             1432   
0409A8 21 B1 17 04 1433   	ld hl,current_pen
0409AC 4E          1434   	ld c,(hl)
0409AD CD 45 0D 04 1435   	call fn_draw_palette_without_border
0409B1 CD B0 0E 04 1436   	call fn_load_palette
0409B5 CD 28 17 04 1437   	call fn_draw_the_palette
0409B9 CD E0 15 04 1438   	call fn_refresh_sprite
0409BD 21 B1 17 04 1439   	ld hl,current_pen
0409C1 4E          1440   	ld c,(hl)
0409C2 CD E0 0C 04 1441   	call fn_draw_palette_with_border
0409C6 CD 20 16 04 1442   	call fn_change_frame
0409CA C3 44 09 04 1443   	jp dsl_palette_tool_loop
0409CE             1444   
0409CE             1445   dslp_save_palette:
0409CE 21 AE FF FF 1446   	ld hl,KEY_S
0409D2 CD EE 16 04 1447   	call fn_inkey
0409D6 FE 00       1448   	cp 0
0409D8 20 F4       1449   	jr nz,dslp_save_palette
0409DA             1450   
0409DA 21 B1 17 04 1451   	ld hl,current_pen
0409DE 4E          1452   	ld c,(hl)
0409DF CD 45 0D 04 1453   	call fn_draw_palette_without_border
0409E3 CD 94 11 04 1454   	call fn_save_palette
0409E7 21 B1 17 04 1455   	ld hl,current_pen
0409EB 4E          1456   	ld c,(hl)
0409EC CD E0 0C 04 1457   	call fn_draw_palette_with_border
0409F0 C3 44 09 04 1458   	jp dsl_palette_tool_loop
0409F4             1459   
0409F4             1460   dsl_draw_sprite_tool:
0409F4 21 9F FF FF 1461   	ld hl,KEY_TAB
0409F8 CD EE 16 04 1462   	call fn_inkey
0409FC FE 00       1463   	cp 0
0409FE 20 F4       1464   	jr nz,dsl_draw_sprite_tool
040A00             1465   
040A00             1466   	; unselect palette color
040A00 21 B1 17 04 1467   	ld hl,current_pen
040A04 4E          1468   	ld c,(hl)
040A05 CD 45 0D 04 1469   	call fn_draw_palette_without_border
040A09             1470   
040A09             1471   	; draw the pixel with a border
040A09 CD 18 0C 04 1472   	call fn_draw_pixel_with_border
040A0D             1473   
040A0D C3 98 02 04 1474   	jp draw_sprite_loop
040A11             1475   
040A11             1476   dsl_dec_pen:
040A11 21 B1 17 04 1477   	ld hl,current_pen
040A15 7E          1478   	ld a,(hl)
040A16 FE 00       1479   	cp COLOR_MIN
040A18 CA 44 09 04 1480   	jp z,dsl_palette_tool_loop
040A1C             1481   
040A1C F5          1482   	push af
040A1D E5          1483   	push hl
040A1E             1484   
040A1E             1485   	; unselect palette color
040A1E 21 B1 17 04 1486   	ld hl,current_pen
040A22 4E          1487   	ld c,(hl)
040A23 CD 45 0D 04 1488   	call fn_draw_palette_without_border
040A27             1489   
040A27 E1          1490   	pop hl
040A28 F1          1491   	pop af
040A29             1492   
040A29             1493   	; dec the pen
040A29 3D          1494   	dec a
040A2A 77          1495   	ld (hl),a
040A2B             1496   
040A2B             1497   	; select palette color
040A2B 21 B1 17 04 1498   	ld hl,current_pen
040A2F 4E          1499   	ld c,(hl)
040A30 CD E0 0C 04 1500   	call fn_draw_palette_with_border
040A34 CD 69 16 04 1501   	call fn_slowdown
040A38 C3 44 09 04 1502   	jp dsl_palette_tool_loop
040A3C             1503   
040A3C             1504   dsl_inc_pen:
040A3C 21 B1 17 04 1505   	ld hl,current_pen
040A40 7E          1506   	ld a,(hl)
040A41 FE 3F       1507   	cp COLOR_MAX
040A43 CA 44 09 04 1508   	jp z,dsl_palette_tool_loop
040A47             1509   
040A47 F5          1510   	push af
040A48 E5          1511   	push hl
040A49             1512   
040A49             1513   	; unselect palette color
040A49 21 B1 17 04 1514   	ld hl,current_pen
040A4D 4E          1515   	ld c,(hl)
040A4E CD 45 0D 04 1516   	call fn_draw_palette_without_border
040A52             1517   
040A52 E1          1518   	pop hl
040A53 F1          1519   	pop af
040A54             1520   
040A54             1521   	; inc the pen
040A54 3C          1522   	inc a
040A55 77          1523   	ld (hl),a
040A56             1524   
040A56             1525   	; select palette color
040A56 21 B1 17 04 1526   	ld hl,current_pen
040A5A 4E          1527   	ld c,(hl)
040A5B CD E0 0C 04 1528   	call fn_draw_palette_with_border
040A5F CD 69 16 04 1529   	call fn_slowdown
040A63 C3 44 09 04 1530   	jp dsl_palette_tool_loop
040A67             1531   
040A67             1532   ; exit program
040A67             1533   exit_program:
040A67             1534   	; reset to mode 1
040A67             1535   	vdu 22
040A67 3E 16       0001M  		LD	A, function
040A69 49 D7       0002M  		RST.LIS	10h
040A6B             1536   	vdu 1
040A6B 3E 01       0001M  		LD	A, function
040A6D 49 D7       0002M  		RST.LIS	10h
040A6F             1537   
040A6F             1538   	; position the texte cursor at home
040A6F             1539   	vdu 30
040A6F 3E 1E       0001M  		LD	A, function
040A71 49 D7       0002M  		RST.LIS	10h
040A73             1540   
040A73             1541   	; show cursor
040A73             1542   	vdu 23
040A73 3E 17       0001M  		LD	A, function
040A75 49 D7       0002M  		RST.LIS	10h
040A77             1543   	vdu 1
040A77 3E 01       0001M  		LD	A, function
040A79 49 D7       0002M  		RST.LIS	10h
040A7B             1544   	vdu 1
040A7B 3E 01       0001M  		LD	A, function
040A7D 49 D7       0002M  		RST.LIS	10h
040A7F             1545   
040A7F FD E1       1546   	pop iy
040A81 DD E1       1547   	pop ix
040A83 D1          1548   	pop de
040A84 C1          1549   	pop bc
040A85 F1          1550   	pop af
040A86 21 00 00 00 1551   	ld hl,0
040A8A             1552   
040A8A C9          1553   	ret
040A8B             1554   ;======================================================================
040A8B             1555   
040A8B             1556   ; draw a rectangle
040A8B             1557   fn_rect:
040A8B             1558   	vdu 25
040A8B 3E 19       0001M  		LD	A, function
040A8D 49 D7       0002M  		RST.LIS	10h
040A8F             1559   	vdu 4
040A8F 3E 04       0001M  		LD	A, function
040A91 49 D7       0002M  		RST.LIS	10h
040A93 DD 21 9B 17 1560   	ld ix,x1
       04          
040A98 DD 7E 00    1561   	ld a,(ix + 0)
040A9B             1562   	vdu_a
040A9B 49 D7       0001M  		RST.LIS	10h
040A9D DD 7E 01    1563   	ld a,(ix + 1)
040AA0             1564   	vdu_a
040AA0 49 D7       0001M  		RST.LIS	10h
040AA2 FD 21 9D 17 1565   	ld iy,y1
       04          
040AA7 FD 7E 00    1566   	ld a,(iy + 0)
040AAA             1567   	vdu_a
040AAA 49 D7       0001M  		RST.LIS	10h
040AAC FD 7E 01    1568   	ld a,(iy + 1)
040AAF             1569   	vdu_a
040AAF 49 D7       0001M  		RST.LIS	10h
040AB1             1570   
040AB1             1571   	vdu 25
040AB1 3E 19       0001M  		LD	A, function
040AB3 49 D7       0002M  		RST.LIS	10h
040AB5             1572   	vdu 5
040AB5 3E 05       0001M  		LD	A, function
040AB7 49 D7       0002M  		RST.LIS	10h
040AB9 DD 21 9F 17 1573   	ld ix,x2
       04          
040ABE DD 7E 00    1574   	ld a,(ix + 0)
040AC1             1575   	vdu_a
040AC1 49 D7       0001M  		RST.LIS	10h
040AC3 DD 7E 01    1576   	ld a,(ix + 1)
040AC6             1577   	vdu_a
040AC6 49 D7       0001M  		RST.LIS	10h
040AC8 FD 21 9D 17 1578   	ld iy,y1
       04          
040ACD FD 7E 00    1579   	ld a,(iy + 0)
040AD0             1580   	vdu_a
040AD0 49 D7       0001M  		RST.LIS	10h
040AD2 FD 7E 01    1581   	ld a,(iy + 1)
040AD5             1582   	vdu_a
040AD5 49 D7       0001M  		RST.LIS	10h
040AD7             1583   
040AD7             1584   	vdu 25
040AD7 3E 19       0001M  		LD	A, function
040AD9 49 D7       0002M  		RST.LIS	10h
040ADB             1585   	vdu 5
040ADB 3E 05       0001M  		LD	A, function
040ADD 49 D7       0002M  		RST.LIS	10h
040ADF DD 21 9F 17 1586   	ld ix,x2
       04          
040AE4 DD 7E 00    1587   	ld a,(ix + 0)
040AE7             1588   	vdu_a
040AE7 49 D7       0001M  		RST.LIS	10h
040AE9 DD 7E 01    1589   	ld a,(ix + 1)
040AEC             1590   	vdu_a
040AEC 49 D7       0001M  		RST.LIS	10h
040AEE FD 21 A1 17 1591   	ld iy,y2
       04          
040AF3 FD 7E 00    1592   	ld a,(iy + 0)
040AF6             1593   	vdu_a
040AF6 49 D7       0001M  		RST.LIS	10h
040AF8 FD 7E 01    1594   	ld a,(iy + 1)
040AFB             1595   	vdu_a
040AFB 49 D7       0001M  		RST.LIS	10h
040AFD             1596   
040AFD             1597   	vdu 25
040AFD 3E 19       0001M  		LD	A, function
040AFF 49 D7       0002M  		RST.LIS	10h
040B01             1598   	vdu 5
040B01 3E 05       0001M  		LD	A, function
040B03 49 D7       0002M  		RST.LIS	10h
040B05 DD 21 9B 17 1599   	ld ix,x1
       04          
040B0A DD 7E 00    1600   	ld a,(ix + 0)
040B0D             1601   	vdu_a
040B0D 49 D7       0001M  		RST.LIS	10h
040B0F DD 7E 01    1602   	ld a,(ix + 1)
040B12             1603   	vdu_a
040B12 49 D7       0001M  		RST.LIS	10h
040B14 FD 21 A1 17 1604   	ld iy,y2
       04          
040B19 FD 7E 00    1605   	ld a,(iy + 0)
040B1C             1606   	vdu_a
040B1C 49 D7       0001M  		RST.LIS	10h
040B1E FD 7E 01    1607   	ld a,(iy + 1)
040B21             1608   	vdu_a
040B21 49 D7       0001M  		RST.LIS	10h
040B23             1609   
040B23             1610   	vdu 25
040B23 3E 19       0001M  		LD	A, function
040B25 49 D7       0002M  		RST.LIS	10h
040B27             1611   	vdu 5
040B27 3E 05       0001M  		LD	A, function
040B29 49 D7       0002M  		RST.LIS	10h
040B2B DD 21 9B 17 1612   	ld ix,x1
       04          
040B30 DD 7E 00    1613   	ld a,(ix + 0)
040B33             1614   	vdu_a
040B33 49 D7       0001M  		RST.LIS	10h
040B35 DD 7E 01    1615   	ld a,(ix + 1)
040B38             1616   	vdu_a
040B38 49 D7       0001M  		RST.LIS	10h
040B3A FD 21 9D 17 1617   	ld iy,y1
       04          
040B3F FD 7E 00    1618   	ld a,(iy + 0)
040B42             1619   	vdu_a
040B42 49 D7       0001M  		RST.LIS	10h
040B44 FD 7E 01    1620   	ld a,(iy + 1)
040B47             1621   	vdu_a
040B47 49 D7       0001M  		RST.LIS	10h
040B49             1622   
040B49 C9          1623   	ret
040B4A             1624   
040B4A             1625   ; draw a filled rectangle
040B4A             1626   fn_rectf:
040B4A DD 21 9B 17 1627   	ld ix,x1
       04          
040B4F FD 21 9D 17 1628   	ld iy,y1
       04          
040B54             1629   
040B54             1630   	vdu 25
040B54 3E 19       0001M  		LD	A, function
040B56 49 D7       0002M  		RST.LIS	10h
040B58             1631   	vdu 4
040B58 3E 04       0001M  		LD	A, function
040B5A 49 D7       0002M  		RST.LIS	10h
040B5C DD 7E 00    1632   	ld a,(ix+0)
040B5F             1633   	vdu_a
040B5F 49 D7       0001M  		RST.LIS	10h
040B61 DD 7E 01    1634   	ld a,(ix+1)
040B64             1635   	vdu_a
040B64 49 D7       0001M  		RST.LIS	10h
040B66 FD 7E 00    1636   	ld a,(iy+0)
040B69             1637   	vdu_a
040B69 49 D7       0001M  		RST.LIS	10h
040B6B FD 7E 01    1638   	ld a,(iy+1)
040B6E             1639   	vdu_a
040B6E 49 D7       0001M  		RST.LIS	10h
040B70             1640   
040B70 DD 21 9F 17 1641   	ld ix,x2
       04          
040B75 FD 21 A1 17 1642   	ld iy,y2
       04          
040B7A             1643   
040B7A             1644   	vdu 25
040B7A 3E 19       0001M  		LD	A, function
040B7C 49 D7       0002M  		RST.LIS	10h
040B7E             1645   	vdu 101
040B7E 3E 65       0001M  		LD	A, function
040B80 49 D7       0002M  		RST.LIS	10h
040B82 DD 7E 00    1646   	ld a,(ix+0)
040B85             1647   	vdu_a
040B85 49 D7       0001M  		RST.LIS	10h
040B87 DD 7E 01    1648   	ld a,(ix+1)
040B8A             1649   	vdu_a
040B8A 49 D7       0001M  		RST.LIS	10h
040B8C FD 7E 00    1650   	ld a,(iy+0)
040B8F             1651   	vdu_a
040B8F 49 D7       0001M  		RST.LIS	10h
040B91 FD 7E 01    1652   	ld a,(iy+1)
040B94             1653   	vdu_a
040B94 49 D7       0001M  		RST.LIS	10h
040B96             1654   
040B96 C9          1655   	ret
040B97             1656   
040B97             1657   fn_calc_pixel_coords:
040B97 11 00 00 00 1658   	ld de,$000000 ; reset deu
040B9B             1659   
040B9B             1660   	; calculate coordinates x of the resized pixel
040B9B 21 AB 17 04 1661   	ld hl,xpix
040B9F 5E          1662   	ld e,(hl) ; E = xpix
040BA0 21 AF 17 04 1663   	ld hl,pixel_width
040BA4 56          1664   	ld d,(hl) ; D = pixel_width
040BA5 D5          1665   	push de
040BA6 E1          1666   	pop hl ; HL = DE
040BA7 ED 6C       1667   	mlt hl ; HL = xpix * pixel_width
040BA9 DD 21 A3 17 1668   	ld ix,xs1
       04          
040BAE DD 5E 00    1669   	ld e,(ix+0)
040BB1 DD 56 01    1670   	ld d,(ix+1)
040BB4 13          1671   	inc de ; DE = xs1 + 1
040BB5 19          1672   	add hl,de ; HL = (xpix * pixel_width) + xs1 + 1
040BB6 FD 21 9B 17 1673   	ld iy,x1
       04          
040BBB FD 75 00    1674   	ld (iy+0),l
040BBE FD 74 01    1675   	ld (iy+1),h ; x1 = (xpix * pixel_width) + xs1 + 1
040BC1 E5          1676   	push hl
040BC2 21 AF 17 04 1677   	ld hl,pixel_width
040BC6 16 00       1678   	ld d,0
040BC8 5E          1679   	ld e,(hl)
040BC9 E1          1680   	pop hl
040BCA 19          1681   	add hl,de
040BCB 2B          1682   	dec hl
040BCC FD 21 9F 17 1683   	ld iy,x2
       04          
040BD1 FD 75 00    1684   	ld (iy+0),l
040BD4 FD 74 01    1685   	ld (iy+1),h ; x2 = x1 + pixel_width - 1
040BD7             1686   
040BD7 11 00 00 00 1687   	ld de,$000000 ; reset deu
040BDB             1688   
040BDB             1689   	; calculate coordinates y of the resized pixel
040BDB 21 AC 17 04 1690   	ld hl,ypix
040BDF 5E          1691   	ld e,(hl) ; E = ypix
040BE0 21 AF 17 04 1692   	ld hl,pixel_width
040BE4 56          1693   	ld d,(hl) ; D = pixel_width
040BE5 D5          1694   	push de
040BE6 E1          1695   	pop hl ; HL = DE
040BE7 ED 6C       1696   	mlt hl ; HL = ypix * pixel_width
040BE9 DD 21 A5 17 1697   	ld ix,ys1
       04          
040BEE DD 5E 00    1698   	ld e,(ix+0)
040BF1 DD 56 01    1699   	ld d,(ix+1) ; ys1 = ypix * pixel_width
040BF4 13          1700   	inc de ; DE = ys1 + 1
040BF5 19          1701   	add hl,de ; HL = (ypix * pixel_width) + ys1 + 1
040BF6 FD 21 9D 17 1702   	ld iy,y1
       04          
040BFB FD 75 00    1703   	ld (iy+0),l
040BFE FD 74 01    1704   	ld (iy+1),h ; y1 = (ypix * pixel_width) + ys1 + 1
040C01 E5          1705   	push hl
040C02 21 AF 17 04 1706   	ld hl,pixel_width
040C06 16 00       1707   	ld d,0
040C08 5E          1708   	ld e,(hl)
040C09 E1          1709   	pop hl
040C0A 19          1710   	add hl,de
040C0B 2B          1711   	dec hl
040C0C FD 21 A1 17 1712   	ld iy,y2
       04          
040C11 FD 75 00    1713   	ld (iy+0),l
040C14 FD 74 01    1714   	ld (iy+1),h ; y2 = y1 + pixel_width - 1
040C17             1715   
040C17 C9          1716   	ret
040C18             1717   
040C18             1718   ; draw the resized pixel border, with its color
040C18             1719   fn_draw_pixel_with_border:
040C18 CD 2C 0C 04 1720   	call fn_draw_pixel_without_border
040C1C             1721   
040C1C             1722   	; set graphics pen
040C1C             1723   	vdu 18
040C1C 3E 12       0001M  		LD	A, function
040C1E 49 D7       0002M  		RST.LIS	10h
040C20             1724   	vdu 0
040C20 3E 00       0001M  		LD	A, function
040C22 49 D7       0002M  		RST.LIS	10h
040C24             1725   	vdu COLOR_GREY ; grey pen
040C24 3E 07       0001M  		LD	A, function
040C26 49 D7       0002M  		RST.LIS	10h
040C28             1726   
040C28             1727   	; draw the sprite's border rectangle
040C28 C3 8B 0A 04 1728   	jp fn_rect
040C2C             1729   
040C2C             1730   ; draw the resized pixel color
040C2C             1731   fn_draw_pixel_without_border:
040C2C CD 97 0B 04 1732   	call fn_calc_pixel_coords
040C30             1733   
040C30             1734   	; set graphics pen
040C30             1735   	vdu 18
040C30 3E 12       0001M  		LD	A, function
040C32 49 D7       0002M  		RST.LIS	10h
040C34             1736   	vdu 0
040C34 3E 00       0001M  		LD	A, function
040C36 49 D7       0002M  		RST.LIS	10h
040C38 CD 42 0C 04 1737   	call fn_get_pixel_color
040C3C             1738   	vdu_a
040C3C 49 D7       0001M  		RST.LIS	10h
040C3E             1739   
040C3E             1740   	; draw the sprite's color rectangle
040C3E C3 4A 0B 04 1741   	jp fn_rectf
040C42             1742   
040C42             1743   ; get pixel color value in the sprite buffer
040C42             1744   ; returns A: pixel color (0-63)
040C42             1745   fn_get_pixel_color:
040C42 11 00 00 00 1746   	ld de,$000000 ; reset deu
040C46             1747   
040C46             1748   	; calculate the offset to add to the address
040C46 21 AC 17 04 1749   	ld hl,ypix
040C4A 5E          1750   	ld e,(hl) ; E = ypix
040C4B 21 B0 17 04 1751   	ld hl,spr_size
040C4F 56          1752   	ld d,(hl) ; D = sprsize
040C50 D5          1753   	push de
040C51 E1          1754   	pop hl
040C52 ED 6C       1755   	mlt hl ; HL = ypix * sprsize
040C54 E5          1756   	push hl
040C55 21 AB 17 04 1757   	ld hl,xpix
040C59 5E          1758   	ld e,(hl)
040C5A 16 00       1759   	ld d,0
040C5C E1          1760   	pop hl
040C5D 19          1761   	add hl,de ; HL = (ypix * sprsize) + xpix
040C5E             1762   
040C5E 11 C0 18 04 1763   	ld de,current_frame
040C62 1A          1764   	ld a,(de)
040C63 FE 00       1765   	cp 0
040C65 28 16       1766   	jr z,gpc_end_loop
040C67             1767   
040C67 47          1768   	ld b,a
040C68 E5          1769   	push hl
040C69 11 00 00 00 1770   	ld de,$000000
040C6D 21 B0 17 04 1771   	ld hl,spr_size
040C71 5E          1772   	ld e,(hl)
040C72 56          1773   	ld d,(hl)
040C73 D5          1774   	push de
040C74 E1          1775   	pop hl
040C75 ED 6C       1776   	mlt hl
040C77 E5          1777   	push hl
040C78 D1          1778   	pop de ; DE = sprsize²
040C79 E1          1779   	pop hl
040C7A             1780   
040C7A             1781   gpc_loop:
040C7A 19          1782   	add hl,de
040C7B 10 FD       1783   	djnz gpc_loop
040C7D             1784   
040C7D             1785   gpc_end_loop:
040C7D             1786   	; add the offset to the address
040C7D 11 C9 18 04 1787   	ld de,sprite_buffer
040C81 19          1788   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040C82             1789   
040C82             1790   	; get pixel color value
040C82 7E          1791   	ld a,(hl)
040C83             1792   
040C83 C9          1793   	ret
040C84             1794   
040C84             1795   ; get pixel color value in the sprite buffer
040C84             1796   ; A: pixel color (0-63)
040C84             1797   fn_set_pixel_color:
040C84 11 00 00 00 1798   	ld de,$000000 ; reset deu
040C88             1799   
040C88             1800   	; calculate the offset to add to the address
040C88 21 AC 17 04 1801   	ld hl,ypix
040C8C 5E          1802   	ld e,(hl) ; E = ypix
040C8D 21 B0 17 04 1803   	ld hl,spr_size
040C91 56          1804   	ld d,(hl) ; D = sprsize
040C92 D5          1805   	push de
040C93 E1          1806   	pop hl
040C94 ED 6C       1807   	mlt hl ; HL = ypix * sprsize
040C96 E5          1808   	push hl
040C97 21 AB 17 04 1809   	ld hl,xpix
040C9B 5E          1810   	ld e,(hl)
040C9C 16 00       1811   	ld d,0
040C9E E1          1812   	pop hl
040C9F 19          1813   	add hl,de ; HL = (ypix * sprsize) + xpix
040CA0 F5          1814   	push af
040CA1             1815   
040CA1 11 C0 18 04 1816   	ld de,current_frame
040CA5 1A          1817   	ld a,(de)
040CA6 FE 00       1818   	cp 0
040CA8 28 16       1819   	jr z,spc_end_loop
040CAA             1820   
040CAA 47          1821   	ld b,a
040CAB E5          1822   	push hl
040CAC 11 00 00 00 1823   	ld de,$000000
040CB0 21 B0 17 04 1824   	ld hl,spr_size
040CB4 5E          1825   	ld e,(hl)
040CB5 56          1826   	ld d,(hl)
040CB6 D5          1827   	push de
040CB7 E1          1828   	pop hl
040CB8 ED 6C       1829   	mlt hl
040CBA E5          1830   	push hl
040CBB D1          1831   	pop de ; DE = sprsize²
040CBC E1          1832   	pop hl
040CBD             1833   
040CBD             1834   spc_loop:
040CBD 19          1835   	add hl,de
040CBE 10 FD       1836   	djnz spc_loop
040CC0             1837   
040CC0             1838   spc_end_loop:
040CC0             1839   
040CC0             1840   	; add the offset to the address
040CC0 11 C9 18 04 1841   	ld de,sprite_buffer
040CC4 19          1842   	add hl,de ; HL = sprite_buffer + ((ypix * sprsize) + xpix)
040CC5             1843   
040CC5             1844   	; set pixel color value
040CC5 F1          1845   	pop af
040CC6 77          1846   	ld (hl),a
040CC7             1847   
040CC7 C9          1848   	ret
040CC8             1849   
040CC8             1850   fn_move_up:
040CC8 21 AC 17 04 1851   	ld hl,ypix
040CCC 35          1852   	dec (hl)
040CCD C9          1853   	ret
040CCE             1854   
040CCE             1855   fn_move_down:
040CCE 21 AC 17 04 1856   	ld hl,ypix
040CD2 34          1857   	inc (hl)
040CD3 C9          1858   	ret
040CD4             1859   
040CD4             1860   fn_move_left:
040CD4 21 AB 17 04 1861   	ld hl,xpix
040CD8 35          1862   	dec (hl)
040CD9 C9          1863   	ret
040CDA             1864   
040CDA             1865   fn_move_right:
040CDA 21 AB 17 04 1866   	ld hl,xpix
040CDE 34          1867   	inc (hl)
040CDF C9          1868   	ret
040CE0             1869   
040CE0             1870   ; draw palette color whit border and selection
040CE0             1871   ; C = color number (0-63)
040CE0             1872   fn_draw_palette_with_border:
040CE0 C5          1873   	push bc
040CE1             1874   
040CE1             1875   	; choose palette color
040CE1             1876   	vdu 18
040CE1 3E 12       0001M  		LD	A, function
040CE3 49 D7       0002M  		RST.LIS	10h
040CE5             1877   	vdu 0
040CE5 3E 00       0001M  		LD	A, function
040CE7 49 D7       0002M  		RST.LIS	10h
040CE9 C1          1878   	pop bc
040CEA C5          1879   	push bc
040CEB 79          1880   	ld a,c
040CEC             1881   	vdu_a
040CEC 49 D7       0001M  		RST.LIS	10h
040CEE             1882   
040CEE             1883   	; store coordinates for a palette square
040CEE DD 21 9B 17 1884   	ld ix,x1
       04          
040CF3 E1          1885   	pop hl
040CF4 E5          1886   	push hl
040CF5 26 05       1887   	ld h,5
040CF7 ED 6C       1888   	mlt hl
040CF9 E5          1889   	push hl
040CFA DD 75 00    1890   	ld (ix+0),l
040CFD DD 74 01    1891   	ld (ix+1),h
040D00             1892   
040D00 DD 21 9D 17 1893   	ld ix,y1
       04          
040D05 21 00 00 00 1894   	ld hl,0
040D09 DD 75 00    1895   	ld (ix+0),l
040D0C DD 74 01    1896   	ld (ix+1),h
040D0F             1897   
040D0F DD 21 9F 17 1898   	ld ix,x2
       04          
040D14 E1          1899   	pop hl
040D15 11 04 00 00 1900   	ld de,4
040D19 19          1901   	add hl,de
040D1A DD 75 00    1902   	ld (ix+0),l
040D1D DD 74 01    1903   	ld (ix+1),h
040D20             1904   
040D20 DD 21 A1 17 1905   	ld ix,y2
       04          
040D25 21 0A 00 00 1906   	ld hl,10
040D29 DD 75 00    1907   	ld (ix+0),l
040D2C DD 74 01    1908   	ld (ix+1),h
040D2F             1909   
040D2F             1910   	; draw the palette filled square
040D2F CD 4A 0B 04 1911   	call fn_rectf
040D33             1912   
040D33             1913   	; choose grey color
040D33             1914   	vdu 18
040D33 3E 12       0001M  		LD	A, function
040D35 49 D7       0002M  		RST.LIS	10h
040D37             1915   	vdu 0
040D37 3E 00       0001M  		LD	A, function
040D39 49 D7       0002M  		RST.LIS	10h
040D3B 3E 07       1916   	ld a,COLOR_GREY
040D3D             1917   	vdu_a
040D3D 49 D7       0001M  		RST.LIS	10h
040D3F             1918   
040D3F             1919   	; draw the palette square border
040D3F CD 8B 0A 04 1920   	call fn_rect
040D43             1921   
040D43             1922   	; next color ?
040D43 C1          1923   	pop bc
040D44             1924   
040D44 C9          1925   	ret
040D45             1926   
040D45             1927   ; draw palette color whitout border and selection
040D45             1928   ; C = color number (0-63)
040D45             1929   fn_draw_palette_without_border:
040D45 C5          1930   	push bc
040D46             1931   
040D46             1932   	; choose palette color
040D46             1933   	vdu 18
040D46 3E 12       0001M  		LD	A, function
040D48 49 D7       0002M  		RST.LIS	10h
040D4A             1934   	vdu 0
040D4A 3E 00       0001M  		LD	A, function
040D4C 49 D7       0002M  		RST.LIS	10h
040D4E C1          1935   	pop bc
040D4F C5          1936   	push bc
040D50 79          1937   	ld a,c
040D51             1938   	vdu_a
040D51 49 D7       0001M  		RST.LIS	10h
040D53             1939   
040D53             1940   	; store coordinates for a palette square
040D53 DD 21 9B 17 1941   	ld ix,x1
       04          
040D58 E1          1942   	pop hl
040D59 E5          1943   	push hl
040D5A 26 05       1944   	ld h,5
040D5C ED 6C       1945   	mlt hl
040D5E E5          1946   	push hl
040D5F DD 75 00    1947   	ld (ix+0),l
040D62 DD 74 01    1948   	ld (ix+1),h
040D65             1949   
040D65 DD 21 9D 17 1950   	ld ix,y1
       04          
040D6A 21 00 00 00 1951   	ld hl,0
040D6E DD 75 00    1952   	ld (ix+0),l
040D71 DD 74 01    1953   	ld (ix+1),h
040D74             1954   
040D74 DD 21 9F 17 1955   	ld ix,x2
       04          
040D79 E1          1956   	pop hl
040D7A 11 04 00 00 1957   	ld de,4
040D7E 19          1958   	add hl,de
040D7F DD 75 00    1959   	ld (ix+0),l
040D82 DD 74 01    1960   	ld (ix+1),h
040D85             1961   
040D85 DD 21 A1 17 1962   	ld ix,y2
       04          
040D8A 21 0A 00 00 1963   	ld hl,10
040D8E DD 75 00    1964   	ld (ix+0),l
040D91 DD 74 01    1965   	ld (ix+1),h
040D94             1966   
040D94             1967   	; draw the palette filled square
040D94 CD 4A 0B 04 1968   	call fn_rectf
040D98             1969   
040D98 C1          1970   	pop bc
040D99             1971   
040D99 C9          1972   	ret
040D9A             1973   
040D9A             1974   ; get an ascii key value
040D9A             1975   fn_input_key:
040D9A C5          1976   	push bc
040D9B             1977   	moscall mos_getkey
040D9B 3E 00       0001M  		LD	A, function
040D9D 49 CF       0002M  		RST.LIS	08h
040D9F C1          1978   	pop bc
040DA0 C9          1979   	ret
040DA1             1980   
040DA1             1981   ; input a text of 8 chars
040DA1             1982   fn_input_text8:
040DA1             1983   	; locate x,y
040DA1             1984   	vdu 31
040DA1 3E 1F       0001M  		LD	A, function
040DA3 49 D7       0002M  		RST.LIS	10h
040DA5             1985   	vdu FILENAME_X
040DA5 3E 07       0001M  		LD	A, function
040DA7 49 D7       0002M  		RST.LIS	10h
040DA9             1986   	vdu FILENAME_Y
040DA9 3E 18       0001M  		LD	A, function
040DAB 49 D7       0002M  		RST.LIS	10h
040DAD             1987   
040DAD             1988   	; print text
040DAD 21 1D 18 04 1989   	ld hl,filename_label
040DB1 01 00 00 00 1990   	ld bc,0
040DB5 AF          1991   	xor a
040DB6 49 DF       1992   	rst.lis $18
040DB8             1993   
040DB8             1994   	; show cursor
040DB8             1995   	vdu 23
040DB8 3E 17       0001M  		LD	A, function
040DBA 49 D7       0002M  		RST.LIS	10h
040DBC             1996   	vdu 1
040DBC 3E 01       0001M  		LD	A, function
040DBE 49 D7       0002M  		RST.LIS	10h
040DC0             1997   	vdu 1
040DC0 3E 01       0001M  		LD	A, function
040DC2 49 D7       0002M  		RST.LIS	10h
040DC4             1998   
040DC4 0E 00       1999   	ld c,0
040DC6             2000   
040DC6             2001   it8_loop:
040DC6             2002   	; get ascii key
040DC6 CD 9A 0D 04 2003   	call fn_input_key
040DCA B7          2004   	or a
040DCB CA C6 0D 04 2005   	jp z,it8_loop
040DCF             2006   
040DCF FE 2E       2007   	cp '.'
040DD1 CA 1B 0E 04 2008   	jp z,it8l_add_char
040DD5             2009   
040DD5 FE 2D       2010   	cp '-'
040DD7 CA 1B 0E 04 2011   	jp z,it8l_add_char
040DDB             2012   
040DDB FE 5F       2013   	cp '_'
040DDD CA 1B 0E 04 2014   	jp z,it8l_add_char
040DE1             2015   
040DE1 FE 7F       2016   	cp 127
040DE3 CA 4F 0E 04 2017   	jp z,it8l_backspace
040DE7             2018   
040DE7 FE 0D       2019   	cp 13
040DE9 CA 7E 0E 04 2020   	jp z,it8l_return
040DED             2021   
040DED FE 30       2022   	cp '0'
040DEF DA C6 0D 04 2023   	jp c,it8_loop
040DF3             2024   
040DF3 16 39       2025   	ld d,'9'
040DF5 14          2026   	inc d
040DF6 BA          2027   	cp d
040DF7 DA 1B 0E 04 2028   	jp c,it8l_add_char
040DFB             2029   
040DFB FE 41       2030   	cp 'A'
040DFD DA C6 0D 04 2031   	jp c,it8_loop
040E01             2032   
040E01 16 5A       2033   	ld d,'Z'
040E03 14          2034   	inc d
040E04 BA          2035   	cp d
040E05 DA 1B 0E 04 2036   	jp c,it8l_add_char
040E09             2037   
040E09 FE 61       2038   	cp 'a'
040E0B DA C6 0D 04 2039   	jp c,it8_loop
040E0F             2040   
040E0F 16 7A       2041   	ld d,'z'
040E11 14          2042   	inc d
040E12 BA          2043   	cp d
040E13 DA 1B 0E 04 2044   	jp c,it8l_add_char
040E17             2045   
040E17 C3 C6 0D 04 2046   	jp it8_loop
040E1B             2047   
040E1B             2048   it8l_add_char:
040E1B F5          2049   	push af
040E1C 79          2050   	ld a,c
040E1D FE 0C       2051   	cp 12
040E1F 38 05       2052   	jr c,it8l_poke_char
040E21 F1          2053   	pop af
040E22 C3 C6 0D 04 2054   	jp it8_loop
040E26             2055   
040E26             2056   it8l_poke_char:
040E26 F1          2057   	pop af
040E27 21 27 18 04 2058   	ld hl,filename
040E2B 06 00       2059   	ld b,0
040E2D 09          2060   	add hl,bc
040E2E 77          2061   	ld (hl),a
040E2F 0C          2062   	inc c
040E30 F5          2063   	push af
040E31 C5          2064   	push bc
040E32             2065   
040E32             2066   	; locate x,y
040E32             2067   	vdu 31
040E32 3E 1F       0001M  		LD	A, function
040E34 49 D7       0002M  		RST.LIS	10h
040E36             2068   	vdu FILENAME_X+10
040E36 3E 11       0001M  		LD	A, function
040E38 49 D7       0002M  		RST.LIS	10h
040E3A             2069   	vdu FILENAME_Y
040E3A 3E 18       0001M  		LD	A, function
040E3C 49 D7       0002M  		RST.LIS	10h
040E3E             2070   
040E3E             2071   	; print text
040E3E 21 27 18 04 2072   	ld hl,filename
040E42 01 00 00 00 2073   	ld bc,0
040E46 AF          2074   	xor a
040E47 49 DF       2075   	rst.lis $18
040E49             2076   
040E49 C1          2077   	pop bc
040E4A F1          2078   	pop af
040E4B             2079   
040E4B C3 C6 0D 04 2080   	jp it8_loop
040E4F             2081   
040E4F             2082   it8l_backspace:
040E4F 79          2083   	ld a,c
040E50 FE 00       2084   	cp 0
040E52 CA C6 0D 04 2085   	jp z,it8_loop
040E56             2086   
040E56             2087   	; delete a character of the filename
040E56 21 27 18 04 2088   	ld hl,filename
040E5A 06 00       2089   	ld b,0
040E5C 09          2090   	add hl,bc
040E5D AF          2091   	xor a
040E5E 77          2092   	ld (hl),a
040E5F 0D          2093   	dec c
040E60 C5          2094   	push bc
040E61             2095   
040E61             2096   	; locate x,y
040E61             2097   	vdu 31
040E61 3E 1F       0001M  		LD	A, function
040E63 49 D7       0002M  		RST.LIS	10h
040E65 3E 11       2098   	ld a,FILENAME_X+10
040E67 81          2099   	add a,c
040E68             2100   	vdu_a
040E68 49 D7       0001M  		RST.LIS	10h
040E6A             2101   	vdu FILENAME_Y
040E6A 3E 18       0001M  		LD	A, function
040E6C 49 D7       0002M  		RST.LIS	10h
040E6E             2102   
040E6E             2103   	; print text
040E6E 21 48 18 04 2104   	ld hl,spacechar
040E72 01 00 00 00 2105   	ld bc,0
040E76 AF          2106   	xor a
040E77 49 DF       2107   	rst.lis $18
040E79             2108   
040E79 C1          2109   	pop bc
040E7A C3 C6 0D 04 2110   	jp it8_loop
040E7E             2111   
040E7E             2112   it8l_return:
040E7E             2113   	; locate x,y
040E7E             2114   	vdu 31
040E7E 3E 1F       0001M  		LD	A, function
040E80 49 D7       0002M  		RST.LIS	10h
040E82             2115   	vdu FILENAME_X
040E82 3E 07       0001M  		LD	A, function
040E84 49 D7       0002M  		RST.LIS	10h
040E86             2116   	vdu FILENAME_Y
040E86 3E 18       0001M  		LD	A, function
040E88 49 D7       0002M  		RST.LIS	10h
040E8A             2117   
040E8A             2118   	; print text
040E8A 21 4A 18 04 2119   	ld hl,void_filename
040E8E 01 00 00 00 2120   	ld bc,0
040E92 AF          2121   	xor a
040E93 49 DF       2122   	rst.lis $18
040E95             2123   
040E95             2124   	; hide cursor
040E95             2125   	vdu 23
040E95 3E 17       0001M  		LD	A, function
040E97 49 D7       0002M  		RST.LIS	10h
040E99             2126   	vdu 1
040E99 3E 01       0001M  		LD	A, function
040E9B 49 D7       0002M  		RST.LIS	10h
040E9D             2127   	vdu 0
040E9D 3E 00       0001M  		LD	A, function
040E9F 49 D7       0002M  		RST.LIS	10h
040EA1             2128   
040EA1             2129   it8l_endloop:
040EA1 21 B6 FF FF 2130   	ld hl,KEY_RETURN
040EA5 CD EE 16 04 2131   	call fn_inkey
040EA9 FE 01       2132   	CP 1
040EAB CA A1 0E 04 2133   	jp z,it8l_endloop
040EAF             2134   
040EAF C9          2135   	ret
040EB0             2136   
040EB0             2137   ; load a palette
040EB0             2138   fn_load_palette:
040EB0             2139   	; clear the filename on the screen
040EB0 21 27 18 04 2140   	ld hl,filename
040EB4 06 0C       2141   	ld b,12
040EB6 AF          2142   	xor a
040EB7             2143   
040EB7             2144   lp_clear_filename:
040EB7 77          2145   	ld (hl),a
040EB8 23          2146   	inc hl
040EB9 10 FC       2147   	djnz lp_clear_filename
040EBB             2148   
040EBB             2149   	; get filename
040EBB CD A1 0D 04 2150   	call fn_input_text8
040EBF             2151   
040EBF             2152   	; set path to 'palettes/'
040EBF 21 3C 18 04 2153   	ld hl,palette_path
040EC3             2154   	moscall mos_cd
040EC3 3E 03       0001M  		LD	A, function
040EC5 49 CF       0002M  		RST.LIS	08h
040EC7             2155   
040EC7             2156   	; exit on folder error
040EC7 FE 00       2157   	cp 0
040EC9 C2 8B 0F 04 2158   	jp nz,lp_folder_error
040ECD             2159   
040ECD             2160   	; open the file for read
040ECD 21 27 18 04 2161   	ld hl,filename
040ED1 0E 01       2162   	ld c,fa_open_existing|fa_read
040ED3             2163   	moscall mos_fopen
040ED3 3E 0A       0001M  		LD	A, function
040ED5 49 CF       0002M  		RST.LIS	08h
040ED7             2164   
040ED7             2165   	; exit on file error
040ED7 FE 00       2166   	cp 0
040ED9 CA CD 10 04 2167   	jp z,lp_file_error
040EDD             2168   
040EDD             2169   	; filehandle -> C
040EDD 4F          2170   	ld c,a
040EDE             2171   
040EDE             2172   	; get palette header
040EDE 21 C9 38 04 2173   	ld hl,header_buffer
040EE2 11 10 00 00 2174   	ld de,16
040EE6 C5          2175   	push bc ; store filehandle
040EE7             2176   	moscall mos_fread
040EE7 3E 1A       0001M  		LD	A, function
040EE9 49 CF       0002M  		RST.LIS	08h
040EEB C1          2177   	pop bc ; restore filehandle
040EEC 3E 10       2178   	ld a,16
040EEE BB          2179   	cp e
040EEF C2 6F 0F 04 2180   	jp nz,lp_close_error
040EF3             2181   
040EF3             2182   	; compare loaded header with needed header
040EF3 11 25 3C 04 2183   	ld de,header
040EF7 21 C9 38 04 2184   	ld hl,header_buffer
040EFB 47          2185   	ld b,a
040EFC             2186   
040EFC             2187   lp_compare:
040EFC 1A          2188   	ld a,(de)
040EFD BE          2189   	cp (hl)
040EFE C2 93 0F 04 2190   	jp nz,lp_header_error
040F02             2191   
040F02 13          2192   	inc de
040F03 23          2193   	inc hl
040F04 05          2194   	dec b
040F05             2195   
040F05 78          2196   	ld a,b
040F06 FE 00       2197   	cp 0
040F08 C2 FC 0E 04 2198   	jp nz,lp_compare
040F0C             2199   
040F0C             2200   	; prepare to read the number of colors
040F0C 21 D9 38 04 2201   	ld hl,color_buffer
040F10             2202   
040F10             2203   lp_getcount:
040F10             2204   	; read a string for colors count
040F10 C5          2205   	push bc
040F11 E5          2206   	push hl
040F12             2207   
040F12             2208   	; read colors data
040F12             2209   	moscall mos_fgetc
040F12 3E 0C       0001M  		LD	A, function
040F14 49 CF       0002M  		RST.LIS	08h
040F16             2210   
040F16 E1          2211   	pop hl
040F17 C1          2212   	pop bc
040F18             2213   
040F18             2214   	; exit if eof
040F18 DA 6F 0F 04 2215   	jp c,lp_close_error
040F1C             2216   
040F1C FE 30       2217   	cp 48 ; < 0
040F1E 38 0A       2218   	jr c,lpgc_next
040F20 FE 3A       2219   	cp 58 ; > 9
040F22 D2 C8 10 04 2220   	jp nc,lp_data_error
040F26             2221   
040F26 77          2222   	ld (hl),a
040F27 23          2223   	inc hl
040F28 18 E6       2224   	jr lp_getcount
040F2A             2225   
040F2A             2226   lpgc_next:
040F2A F5          2227   	push af
040F2B 3E 0D       2228   	ld a,13
040F2D 77          2229   	ld (hl),a ; store cr
040F2E F1          2230   	pop af
040F2F             2231   
040F2F             2232   	; test CR
040F2F FE 0D       2233   	cp 13
040F31 C2 6F 0F 04 2234   	jp nz,lp_close_error
040F35             2235   
040F35 C5          2236   	push bc
040F36             2237   
040F36             2238   	; read LF
040F36             2239   	moscall mos_fgetc
040F36 3E 0C       0001M  		LD	A, function
040F38 49 CF       0002M  		RST.LIS	08h
040F3A             2240   
040F3A C1          2241   	pop bc
040F3B             2242   
040F3B             2243   	; test LF
040F3B FE 0A       2244   	cp 10
040F3D C2 6F 0F 04 2245   	jp nz,lp_close_error
040F41             2246   
040F41             2247   	; prepare to read color strings
040F41 11 00 00 00 2248   	ld de,#000000
040F45 21 DC 38 04 2249   	ld hl,palette_buffer
040F49             2250   
040F49             2251   lp_load_pal_loop:
040F49 C5          2252   	push bc
040F4A D5          2253   	push de
040F4B E5          2254   	push hl
040F4C             2255   
040F4C             2256   	; read colors data
040F4C             2257   	moscall mos_fgetc
040F4C 3E 0C       0001M  		LD	A, function
040F4E 49 CF       0002M  		RST.LIS	08h
040F50             2258   
040F50             2259   	; exit if eof
040F50 DA 68 0F 04 2260   	jp c,lp_loaded
040F54             2261   
040F54 E1          2262   	pop hl
040F55 D1          2263   	pop de
040F56 C1          2264   	pop bc
040F57             2265   
040F57 77          2266   	ld (hl),a ; store loaded char in palette buffer
040F58 23          2267   	inc hl
040F59 13          2268   	inc de ; count chars
040F5A 7A          2269   	ld a,d
040F5B FE 03       2270   	cp MAX_PAL_DATA_HI
040F5D DA 49 0F 04 2271   	jp c,lp_load_pal_loop
040F61 7B          2272   	ld a,e
040F62 FE 44       2273   	cp MAX_PAL_DATA_LO
040F64 DA 49 0F 04 2274   	jp c,lp_load_pal_loop
040F68             2275   
040F68             2276   ; end of file
040F68             2277   lp_loaded:
040F68 E1          2278   	pop hl
040F69 D1          2279   	pop de
040F6A C1          2280   	pop bc
040F6B             2281   
040F6B C3 9B 0F 04 2282   	jp lp_close
040F6F             2283   
040F6F             2284   lp_close_error:
040F6F C5          2285   	push bc
040F70             2286   
040F70             2287   	; read error
040F70 CD 04 15 04 2288   	call fn_print_file_error
040F74             2289   
040F74 C1          2290   	pop bc
040F75             2291   
040F75             2292   	; close the file
040F75             2293   	moscall mos_fclose
040F75 3E 0B       0001M  		LD	A, function
040F77 49 CF       0002M  		RST.LIS	08h
040F79             2294   
040F79             2295   	; set path to home
040F79 21 45 18 04 2296   	ld hl,back_path
040F7D             2297   	moscall mos_cd
040F7D 3E 03       0001M  		LD	A, function
040F7F 49 CF       0002M  		RST.LIS	08h
040F81             2298   
040F81             2299   	; exit on error
040F81 FE 00       2300   	cp 0
040F83 C2 8B 0F 04 2301   	jp nz,lp_folder_error
040F87             2302   
040F87 C3 BE 10 04 2303   	jp lp_exit
040F8B             2304   
040F8B             2305   lp_folder_error:
040F8B             2306   	; write error
040F8B CD 3B 15 04 2307   	call fn_print_folder_error
040F8F C3 BE 10 04 2308   	jp lp_exit
040F93             2309   
040F93             2310   lp_header_error:
040F93             2311   	; write error
040F93 CD 72 15 04 2312   	call fn_print_header_error
040F97 C3 BE 10 04 2313   	jp lp_exit
040F9B             2314   
040F9B             2315   lp_close:
040F9B C5          2316   	push bc
040F9C             2317   
040F9C             2318   	; close the file
040F9C             2319   	moscall mos_fclose
040F9C 3E 0B       0001M  		LD	A, function
040F9E 49 CF       0002M  		RST.LIS	08h
040FA0             2320   
040FA0 C1          2321   	pop bc
040FA1             2322   
040FA1             2323   	; set path to home
040FA1 21 45 18 04 2324   	ld hl,back_path
040FA5             2325   	moscall mos_cd
040FA5 3E 03       0001M  		LD	A, function
040FA7 49 CF       0002M  		RST.LIS	08h
040FA9             2326   
040FA9             2327   	; exit on error
040FA9 FE 00       2328   	cp 0
040FAB C2 8B 0F 04 2329   	jp nz,lp_folder_error
040FAF             2330   
040FAF             2331   	; read the number of colors we have in the palette
040FAF 21 D9 38 04 2332   	ld hl,color_buffer
040FB3 7E          2333   	ld a,(hl)
040FB4 47          2334   	ld b,a
040FB5 23          2335   	inc hl
040FB6 7E          2336   	ld a,(hl)
040FB7 4F          2337   	ld c,a ; bc = 1st char, 2nd char or CR
040FB8             2338   
040FB8             2339   	; first is a char number ?
040FB8 78          2340   	ld a,b
040FB9 FE 30       2341   	cp 48
040FBB DA C8 10 04 2342   	jp c,lp_data_error
040FBF FE 3A       2343   	cp 58
040FC1 D2 C8 10 04 2344   	jp nc,lp_data_error
040FC5             2345   
040FC5 79          2346   	ld a,c
040FC6 FE 0D       2347   	cp 13
040FC8 C2 EA 0F 04 2348   	jp nz,lp_two_numbers
040FCC             2349   
040FCC             2350   ; only one number
040FCC 78          2351   	ld a,b
040FCD D6 30       2352   	sub 48
040FCF             2353   
040FCF 21 BC 18 04 2354   	ld hl,new_colors_count
040FD3 77          2355   	ld (hl),a
040FD4             2356   
040FD4 FE 00       2357   	cp 0
040FD6 CA C8 10 04 2358   	jp z,lp_data_error
040FDA FE 03       2359   	cp 3
040FDC DA 1F 10 04 2360   	jp c,lp_two_colors
040FE0 FE 05       2361   	cp 5
040FE2 DA 35 10 04 2362   	jp c,lp_four_colors
040FE6             2363   
040FE6 C3 4B 10 04 2364   	jp lp_sixteen_colors
040FEA             2365   
040FEA             2366   ; two numbers
040FEA             2367   lp_two_numbers:
040FEA 79          2368   	ld a,c
040FEB FE 30       2369   	cp 48
040FED DA C8 10 04 2370   	jp c,lp_data_error
040FF1 FE 3A       2371   	cp 58
040FF3 D2 C8 10 04 2372   	jp nc,lp_data_error
040FF7             2373   
040FF7 78          2374   	ld a,b
040FF8 D6 30       2375   	sub 48
040FFA 01 00 00 00 2376   	ld bc,#000000
040FFE 47          2377   	ld b,a
040FFF 0E 0A       2378   	ld c,10
041001 ED 4C       2379   	mlt bc
041003 81          2380   	add a,c
041004             2381   
041004 21 BC 18 04 2382   	ld hl,new_colors_count
041008 77          2383   	ld (hl),a
041009             2384   
041009 FE 0A       2385   	cp 10
04100B DA C8 10 04 2386   	jp c,lp_data_error
04100F FE 11       2387   	cp 17
041011 DA 4B 10 04 2388   	jp c,lp_sixteen_colors
041015 FE 41       2389   	cp 65
041017 DA 61 10 04 2390   	jp c,lp_sixty_four_colors
04101B             2391   
04101B C3 C8 10 04 2392   	jp lp_data_error
04101F             2393   
04101F             2394   lp_two_colors:
04101F 21 BB 18 04 2395   	ld hl,colors_count
041023 3E 02       2396   	ld a,2
041025 77          2397   	ld (hl),a
041026 21 BC 18 04 2398   	ld hl,new_colors_count
04102A 7E          2399   	ld a,(hl) ; real number of coulours
04102B 06 00       2400   	ld b,0 ; start wit color 0
04102D 21 DC 38 04 2401   	ld hl,palette_buffer ; palette will be got here
041031 C3 77 10 04 2402   	jp lp_read_colors
041035             2403   
041035             2404   lp_four_colors:
041035 21 BB 18 04 2405   	ld hl,colors_count
041039 3E 04       2406   	ld a,4
04103B 77          2407   	ld (hl),a
04103C 21 BC 18 04 2408   	ld hl,new_colors_count
041040 7E          2409   	ld a,(hl) ; real number of coulours
041041 06 00       2410   	ld b,0 ; start wit color 0
041043 21 DC 38 04 2411   	ld hl,palette_buffer ; palette will be got here
041047 C3 77 10 04 2412   	jp lp_read_colors
04104B             2413   
04104B             2414   lp_sixteen_colors:
04104B 21 BB 18 04 2415   	ld hl,colors_count
04104F 3E 10       2416   	ld a,16
041051 77          2417   	ld (hl),a
041052 21 BC 18 04 2418   	ld hl,new_colors_count
041056 7E          2419   	ld a,(hl) ; real number of coulours
041057 06 00       2420   	ld b,0 ; start wit color 0
041059 21 DC 38 04 2421   	ld hl,palette_buffer ; palette will be got here
04105D C3 77 10 04 2422   	jp lp_read_colors
041061             2423   
041061             2424   lp_sixty_four_colors:
041061 21 BB 18 04 2425   	ld hl,colors_count
041065 3E 40       2426   	ld a,64
041067 77          2427   	ld (hl),a
041068 21 BC 18 04 2428   	ld hl,new_colors_count
04106C 7E          2429   	ld a,(hl) ; real number of coulours
04106D 06 00       2430   	ld b,0 ; start wit color 0
04106F 21 DC 38 04 2431   	ld hl,palette_buffer ; palette will be got here
041073 C3 77 10 04 2432   	jp lp_read_colors
041077             2433   
041077             2434   lp_read_colors:
041077 F5          2435   	push af
041078 E5          2436   	push hl
041079 C5          2437   	push bc
04107A             2438   
04107A CD E0 10 04 2439   	call lp_read_tint ; read red tint
04107E FE FF       2440   	cp 255
041080 CA C1 10 04 2441   	jp z,lp_wrong_exit1
041084             2442   
041084 E5          2443   	push hl
041085 21 BD 18 04 2444   	ld hl,red_tint
041089 77          2445   	ld (hl),a
04108A E1          2446   	pop hl
04108B             2447   
04108B CD E0 10 04 2448   	call lp_read_tint ; read green tint
04108F FE FF       2449   	cp 255
041091 CA C0 10 04 2450   	jp z,lp_wrong_exit2
041095             2451   
041095 E5          2452   	push hl
041096 21 BE 18 04 2453   	ld hl,green_tint
04109A 77          2454   	ld (hl),a
04109B E1          2455   	pop hl
04109C             2456   
04109C CD E0 10 04 2457   	call lp_read_tint ; read blue tint
0410A0 FE FF       2458   	cp 255
0410A2 CA BF 10 04 2459   	jp z,lp_wrong_exit3
0410A6             2460   
0410A6 E5          2461   	push hl
0410A7 21 BF 18 04 2462   	ld hl,blue_tint
0410AB 77          2463   	ld (hl),a
0410AC E1          2464   	pop hl
0410AD             2465   
0410AD C1          2466   	pop bc
0410AE C5          2467   	push bc
0410AF             2468   
0410AF CD 69 11 04 2469   	call lp_set_tint
0410B3             2470   
0410B3 C1          2471   	pop bc
0410B4 E1          2472   	pop hl
0410B5 F1          2473   	pop af
0410B6             2474   
0410B6 04          2475   	inc b ; increment number of colors
0410B7 3D          2476   	dec a ; decrement real number of colors
0410B8 FE 00       2477   	cp 0
0410BA C2 77 10 04 2478   	jp nz,lp_read_colors
0410BE             2479   
0410BE             2480   lp_exit:
0410BE C9          2481   	ret
0410BF             2482   
0410BF             2483   lp_wrong_exit3:
0410BF D1          2484   	pop de
0410C0             2485   
0410C0             2486   lp_wrong_exit2:
0410C0 C1          2487   	pop bc
0410C1             2488   
0410C1             2489   lp_wrong_exit1:
0410C1 E1          2490   	pop hl
0410C2 C1          2491   	pop bc
0410C3 F1          2492   	pop af
0410C4 C3 C8 10 04 2493   	jp lp_data_error
0410C8             2494   
0410C8             2495   lp_data_error:
0410C8 CD A9 15 04 2496   	call fn_print_data_error
0410CC             2497   
0410CC C9          2498   	ret
0410CD             2499   
0410CD             2500   lp_file_error:
0410CD CD 04 15 04 2501   	call fn_print_file_error
0410D1             2502   
0410D1             2503   	; set path to home
0410D1 21 45 18 04 2504   	ld hl,back_path
0410D5             2505   	moscall mos_cd
0410D5 3E 03       0001M  		LD	A, function
0410D7 49 CF       0002M  		RST.LIS	08h
0410D9             2506   
0410D9             2507   	; exit on error
0410D9 FE 00       2508   	cp 0
0410DB C2 8B 0F 04 2509   	jp nz,lp_folder_error
0410DF             2510   
0410DF C9          2511   	ret
0410E0             2512   
0410E0             2513   lp_read_tint:
0410E0 0E 00       2514   	ld c,0 ; number of chars readen for a single string number
0410E2 11 21 3C 04 2515   	ld de,temp_chars_buffer ; temp buffer for a string number
0410E6             2516   
0410E6             2517   	; read next string number
0410E6 CD 4D 11 04 2518   	call lprt_read_chars
0410EA             2519   
0410EA 79          2520   	ld a,c
0410EB FE 00       2521   	cp 0 ; no numbers
0410ED CA 07 11 04 2522   	jp z,lprt_exit
0410F1 FE 04       2523   	cp 4 ; too many numbers
0410F3 D2 07 11 04 2524   	jp nc,lprt_exit
0410F7             2525   
0410F7 FE 03       2526   	cp 3
0410F9 28 28       2527   	jr z,lprt_three_int
0410FB             2528   
0410FB FE 02       2529   	cp 2
0410FD 28 0B       2530   	jr z,lprt_two_int
0410FF             2531   
0410FF             2532   	; one int only
0410FF 11 21 3C 04 2533   	ld de,temp_chars_buffer
041103 1A          2534   	ld a,(de)
041104 D6 30       2535   	sub 48
041106 C9          2536   	ret
041107             2537   
041107             2538   lprt_exit:
041107 3E FF       2539   	ld a,255
041109 C9          2540   	ret
04110A             2541   
04110A             2542   ; two int
04110A             2543   lprt_two_int:
04110A 11 21 3C 04 2544   	ld de,temp_chars_buffer
04110E 1A          2545   	ld a,(de)
04110F D6 30       2546   	sub 48
041111 D5          2547   	push de
041112 11 00 00 00 2548   	ld de,#000000
041116 5F          2549   	ld e,a
041117 16 0A       2550   	ld d,10
041119 ED 5C       2551   	mlt de
04111B 43          2552   	ld b,e
04111C D1          2553   	pop de
04111D 13          2554   	inc de
04111E 1A          2555   	ld a,(de)
04111F D6 30       2556   	sub 48
041121 80          2557   	add a,b ; full int value is here
041122 C9          2558   	ret
041123             2559   
041123             2560   ; three int
041123             2561   lprt_three_int:
041123 11 21 3C 04 2562   	ld de,temp_chars_buffer
041127 1A          2563   	ld a,(de)
041128 D6 30       2564   	sub 48
04112A D5          2565   	push de
04112B 11 00 00 00 2566   	ld de,#000000
04112F 5F          2567   	ld e,a
041130 16 64       2568   	ld d,100
041132 ED 5C       2569   	mlt de
041134 43          2570   	ld b,e
041135 D1          2571   	pop de
041136 13          2572   	inc de
041137 1A          2573   	ld a,(de)
041138 D6 30       2574   	sub 48
04113A D5          2575   	push de
04113B 11 00 00 00 2576   	ld de,#000000
04113F 5F          2577   	ld e,a
041140 16 0A       2578   	ld d,10
041142 ED 5C       2579   	mlt de
041144 4B          2580   	ld c,e
041145 D1          2581   	pop de
041146 13          2582   	inc de
041147 1A          2583   	ld a,(de)
041148 D6 30       2584   	sub 48
04114A 81          2585   	add a,c
04114B 80          2586   	add a,b ; full int value is here
04114C C9          2587   	ret
04114D             2588   
04114D             2589   lprt_read_chars:
04114D 3E 0D       2590   	ld a,13
04114F 12          2591   	ld (de),a ; store eol as default char
041150             2592   
041150 7E          2593   	ld a,(hl) ; get a new char
041151 23          2594   	inc hl
041152             2595   
041152 FE 20       2596   	cp ' '
041154 C8          2597   	ret z ; ret if space
041155 FE 0D       2598   	cp 13
041157 28 F4       2599   	jr z,lprt_read_chars ; loop if cr
041159 FE 0A       2600   	cp 10
04115B C8          2601   	ret z ; ret if lf
04115C FE 30       2602   	cp 48
04115E D8          2603   	ret c ; ret if not number
04115F FE 3A       2604   	cp 58
041161 D0          2605   	ret nc ; ret if not number
041162             2606   
041162             2607   ; found a number, store it
041162 12          2608   	ld (de),a
041163 13          2609   	inc de
041164 0C          2610   	inc c
041165             2611   
041165 C3 4D 11 04 2612   	jp lprt_read_chars
041169             2613   
041169             2614   ; set tint (RGB = c,e,l)
041169             2615   lp_set_tint:
041169 F5          2616   	push af
04116A C5          2617   	push bc
04116B D5          2618   	push de
04116C E5          2619   	push hl
04116D             2620   
04116D C5          2621   	push bc
04116E             2622   	vdu 19
04116E 3E 13       0001M  		LD	A, function
041170 49 D7       0002M  		RST.LIS	10h
041172 C1          2623   	pop bc
041173 78          2624   	ld a,b
041174             2625   	vdu_a
041174 49 D7       0001M  		RST.LIS	10h
041176             2626   	vdu 255
041176 3E FF       0001M  		LD	A, function
041178 49 D7       0002M  		RST.LIS	10h
04117A             2627   
04117A 21 BD 18 04 2628   	ld hl,red_tint
04117E 7E          2629   	ld a,(hl)
04117F             2630   	vdu_a
04117F 49 D7       0001M  		RST.LIS	10h
041181             2631   
041181 21 BE 18 04 2632   	ld hl,green_tint
041185 7E          2633   	ld a,(hl)
041186             2634   	vdu_a
041186 49 D7       0001M  		RST.LIS	10h
041188             2635   
041188 21 BF 18 04 2636   	ld hl,blue_tint
04118C 7E          2637   	ld a,(hl)
04118D             2638   	vdu_a
04118D 49 D7       0001M  		RST.LIS	10h
04118F             2639   
04118F E1          2640   	pop hl
041190 D1          2641   	pop de
041191 C1          2642   	pop bc
041192 F1          2643   	pop af
041193 C9          2644   	ret
041194             2645   
041194             2646   ; save the palette
041194             2647   fn_save_palette:
041194 C9          2648   	ret
041195             2649   
041195             2650   ; load a sprite, giving its full name, with extension
041195             2651   fn_load_sprite:
041195             2652   	; clear the filename on the screen
041195 21 27 18 04 2653   	ld hl,filename
041199 06 0C       2654   	ld b,12
04119B AF          2655   	xor a
04119C             2656   
04119C             2657   ls_clear_filename:
04119C 77          2658   	ld (hl),a
04119D 23          2659   	inc hl
04119E 10 FC       2660   	djnz ls_clear_filename
0411A0             2661   
0411A0             2662   	; get filename
0411A0 CD A1 0D 04 2663   	call fn_input_text8
0411A4             2664   
0411A4             2665   	; set path to 'sprites/'
0411A4 21 34 18 04 2666   	ld hl,sprite_path
0411A8             2667   	moscall mos_cd
0411A8 3E 03       0001M  		LD	A, function
0411AA 49 CF       0002M  		RST.LIS	08h
0411AC             2668   
0411AC             2669   	; exit on folder error
0411AC FE 00       2670   	cp 0
0411AE C2 7D 12 04 2671   	jp nz,ls_folder_error
0411B2             2672   
0411B2             2673   	; open the file for read
0411B2 21 27 18 04 2674   	ld hl,filename
0411B6 0E 01       2675   	ld c,fa_open_existing|fa_read
0411B8             2676   	moscall mos_fopen
0411B8 3E 0A       0001M  		LD	A, function
0411BA 49 CF       0002M  		RST.LIS	08h
0411BC             2677   
0411BC             2678   	; exit on file error
0411BC FE 00       2679   	cp 0
0411BE CA AB 12 04 2680   	jp z,ls_file_error
0411C2             2681   
0411C2             2682   	; filehandle -> C
0411C2 4F          2683   	ld c,a
0411C3             2684   
0411C3             2685   	; get colors count
0411C3             2686   	moscall mos_fgetc
0411C3 3E 0C       0001M  		LD	A, function
0411C5 49 CF       0002M  		RST.LIS	08h
0411C7 DA 58 12 04 2687   	jp c,ls_close_error
0411CB             2688   
0411CB FE 41       2689   	cp MAX_COLORS + 1
0411CD D2 58 12 04 2690   	jp nc,ls_close_error
0411D1             2691   
0411D1             2692   	; store colors count
0411D1 21 BB 18 04 2693   	ld hl,colors_count
0411D5 77          2694   	ld (hl),a
0411D6             2695   
0411D6             2696   	; get frames count
0411D6             2697   	moscall mos_fgetc
0411D6 3E 0C       0001M  		LD	A, function
0411D8 49 CF       0002M  		RST.LIS	08h
0411DA DA 58 12 04 2698   	jp c,ls_close_error
0411DE             2699   
0411DE             2700   	; store frames count
0411DE 21 C1 18 04 2701   	ld hl,frames_count
0411E2 77          2702   	ld (hl),a
0411E3             2703   
0411E3             2704   	; set last frame as current frame
0411E3 21 C0 18 04 2705   	ld hl,current_frame
0411E7 3D          2706   	dec a
0411E8 77          2707   	ld (hl),a
0411E9             2708   
0411E9             2709   	; get sprite size
0411E9             2710   	moscall mos_fgetc
0411E9 3E 0C       0001M  		LD	A, function
0411EB 49 CF       0002M  		RST.LIS	08h
0411ED DA 58 12 04 2711   	jp c,ls_close_error
0411F1             2712   
0411F1             2713   	; store sprite size
0411F1 21 B0 17 04 2714   	ld hl,spr_size
0411F5 77          2715   	ld (hl),a
0411F6             2716   
0411F6             2717   	; set 4x4 pixel width
0411F6 FE 04       2718   	cp SPR44
0411F8 20 09       2719   	jr nz,ls_next1
0411FA             2720   
0411FA 21 AF 17 04 2721   	ld hl,pixel_width
0411FE 06 20       2722   	ld b,SPR44_width
041200 70          2723   	ld (hl),b
041201 18 21       2724   	jr ls_next4
041203             2725   
041203             2726   ls_next1:
041203             2727   	; set 8x8 pixel width
041203 FE 08       2728   	cp SPR88
041205 20 09       2729   	jr nz,ls_next2
041207             2730   
041207 21 AF 17 04 2731   	ld hl,pixel_width
04120B 06 10       2732   	ld b,SPR88_width
04120D 70          2733   	ld (hl),b
04120E 18 14       2734   	jr ls_next4
041210             2735   
041210             2736   ls_next2:
041210             2737   
041210             2738   	; set 16x16 pixel width
041210 FE 10       2739   	cp SPR1616
041212 20 09       2740   	jr nz,ls_next3
041214             2741   
041214 21 AF 17 04 2742   	ld hl,pixel_width
041218 06 08       2743   	ld b,SPR1616_width
04121A 70          2744   	ld (hl),b
04121B 18 07       2745   	jr ls_next4
04121D             2746   
04121D             2747   ls_next3:
04121D             2748   
04121D 21 AF 17 04 2749   	ld hl,pixel_width
041221 06 04       2750   	ld b,SPR3232_width
041223 70          2751   	ld (hl),b
041224             2752   
041224             2753   ls_next4:
041224 21 00 00 00 2754   	ld hl,#000000
041228 6F          2755   	ld l,a
041229 67          2756   	ld h,a
04122A ED 6C       2757   	mlt hl ; HL = sprite length
04122C E5          2758   	push hl
04122D             2759   
04122D             2760   	; get frames count
04122D 21 C0 18 04 2761   	ld hl,current_frame
041231 46          2762   	ld b,(hl)
041232             2763   
041232 E1          2764   	pop hl
041233             2765   
041233 78          2766   	ld a,b
041234 FE 00       2767   	cp 0
041236 28 07       2768   	jr z,ls_read_data
041238             2769   
041238             2770   	; de = size²
041238 11 00 04 00 2771   	ld de,ONE_FRAME_BUFFER_SIZE
04123C             2772   ls_add_length:
04123C 19          2773   	add hl,de
04123D 10 FD       2774   	djnz ls_add_length
04123F             2775   
04123F             2776   ls_read_data:
04123F E5          2777   	push hl
041240 E5          2778   	push hl
041241 D1          2779   	pop de
041242 7B          2780   	ld a,e
041243 21 C9 18 04 2781   	ld hl,sprite_buffer
041247             2782   	moscall mos_fread
041247 3E 1A       0001M  		LD	A, function
041249 49 CF       0002M  		RST.LIS	08h
04124B E1          2783   	pop hl
04124C 7C          2784   	ld a,h
04124D BA          2785   	cp d
04124E 20 08       2786   	jr nz,ls_close_error
041250 7D          2787   	ld a,l
041251 BB          2788   	cp e
041252 20 04       2789   	jr nz,ls_close_error
041254 C3 85 12 04 2790   	jp ls_close
041258             2791   
041258             2792   ls_close_error:
041258 C5          2793   	push bc
041259             2794   
041259             2795   	; read error
041259 CD 04 15 04 2796   	call fn_print_file_error
04125D             2797   
04125D C1          2798   	pop bc
04125E             2799   
04125E             2800   	; close the file
04125E             2801   	moscall mos_fclose
04125E 3E 0B       0001M  		LD	A, function
041260 49 CF       0002M  		RST.LIS	08h
041262             2802   
041262             2803   	; set path to home
041262 21 45 18 04 2804   	ld hl,back_path
041266             2805   	moscall mos_cd
041266 3E 03       0001M  		LD	A, function
041268 49 CF       0002M  		RST.LIS	08h
04126A             2806   
04126A             2807   	; exit on error
04126A FE 00       2808   	cp 0
04126C C2 7D 12 04 2809   	jp nz,ls_folder_error
041270             2810   
041270             2811   
041270             2812   	; reset current frame and coordinates of the drawing pixel
041270 21 AB 17 04 2813   	ld hl,xpix
041274 AF          2814   	xor a
041275 77          2815   	ld (hl),a
041276 21 AC 17 04 2816   	ld hl,ypix
04127A 77          2817   	ld (hl),a
04127B 18 25       2818   	jr ls_exit
04127D             2819   
04127D             2820   ls_folder_error:
04127D             2821   	; write error
04127D CD 3B 15 04 2822   	call fn_print_folder_error
041281 C3 A2 12 04 2823   	jp ls_exit
041285             2824   
041285             2825   ls_close:
041285             2826   	; close the file
041285             2827   	moscall mos_fclose
041285 3E 0B       0001M  		LD	A, function
041287 49 CF       0002M  		RST.LIS	08h
041289             2828   
041289             2829   	; set path to home
041289 21 45 18 04 2830   	ld hl,back_path
04128D             2831   	moscall mos_cd
04128D 3E 03       0001M  		LD	A, function
04128F 49 CF       0002M  		RST.LIS	08h
041291             2832   
041291             2833   	; exit on error
041291 FE 00       2834   	cp 0
041293 C2 7D 12 04 2835   	jp nz,ls_folder_error
041297             2836   
041297             2837   	; reset current frame and coordinates of the drawing pixel
041297 21 AB 17 04 2838   	ld hl,xpix
04129B AF          2839   	xor a
04129C 77          2840   	ld (hl),a
04129D 21 AC 17 04 2841   	ld hl,ypix
0412A1 77          2842   	ld (hl),a
0412A2             2843   
0412A2             2844   ls_exit:
0412A2 CD 8A 16 04 2845   	call fn_show_spr_descr
0412A6 CD 45 16 04 2846   	call fn_change_frames_count
0412AA C9          2847   	ret
0412AB             2848   
0412AB             2849   ls_file_error:
0412AB CD 04 15 04 2850   	call fn_print_file_error
0412AF             2851   
0412AF             2852   	; set path to home
0412AF 21 45 18 04 2853   	ld hl,back_path
0412B3             2854   	moscall mos_cd
0412B3 3E 03       0001M  		LD	A, function
0412B5 49 CF       0002M  		RST.LIS	08h
0412B7             2855   
0412B7             2856   	; exit on error
0412B7 FE 00       2857   	cp 0
0412B9 C2 7D 12 04 2858   	jp nz,ls_folder_error
0412BD             2859   
0412BD C9          2860   	ret
0412BE             2861   
0412BE             2862   ; save a sprite, giving its name
0412BE             2863   fn_save_sprite:
0412BE             2864   	; clear filename on the screen
0412BE 21 27 18 04 2865   	ld hl,filename
0412C2 06 0C       2866   	ld b,12
0412C4 AF          2867   	xor a
0412C5             2868   
0412C5             2869   ss_clear_filename:
0412C5 77          2870   	ld (hl),a
0412C6 23          2871   	inc hl
0412C7 10 FC       2872   	djnz ss_clear_filename
0412C9             2873   
0412C9             2874   	; get filename
0412C9 CD A1 0D 04 2875   	call fn_input_text8
0412CD             2876   
0412CD             2877   	; set path to sprite path
0412CD 21 34 18 04 2878   	ld hl,sprite_path
0412D1             2879   	moscall mos_cd
0412D1 3E 03       0001M  		LD	A, function
0412D3 49 CF       0002M  		RST.LIS	08h
0412D5             2880   
0412D5             2881   	; create it on error
0412D5 FE 00       2882   	cp 0
0412D7 F5          2883   	push af
0412D8 C4 1F 17 04 2884   	call nz,fn_create_sprite_folder
0412DC F1          2885   	pop af
0412DD 28 08       2886   	jr z,ss_next
0412DF             2887   
0412DF             2888   	; set path to sprite path
0412DF 21 34 18 04 2889   	ld hl,sprite_path
0412E3             2890   	moscall mos_cd
0412E3 3E 03       0001M  		LD	A, function
0412E5 49 CF       0002M  		RST.LIS	08h
0412E7             2891   
0412E7             2892   ss_next:
0412E7             2893   
0412E7             2894   	; exit on error
0412E7 FE 00       2895   	cp 0
0412E9 C2 79 13 04 2896   	jp nz,ss_folder_error
0412ED             2897   
0412ED             2898   	; open the file for write
0412ED 21 27 18 04 2899   	ld hl,filename
0412F1 0E 0A       2900   	ld c,fa_create_always|fa_write
0412F3             2901   	moscall mos_fopen
0412F3 3E 0A       0001M  		LD	A, function
0412F5 49 CF       0002M  		RST.LIS	08h
0412F7             2902   
0412F7             2903   	; exit on error
0412F7 FE 00       2904   	cp 0
0412F9 CA AA 13 04 2905   	jp z,ss_file_error
0412FD             2906   
0412FD             2907   	; filehandle -> C
0412FD 4F          2908   	ld c,a
0412FE             2909   
0412FE             2910   	; store colors count in the file
0412FE 06 40       2911   	ld b,MAX_COLORS
041300             2912   	moscall mos_fputc
041300 3E 0D       0001M  		LD	A, function
041302 49 CF       0002M  		RST.LIS	08h
041304             2913   
041304             2914   	; store frames count in the file
041304 21 C1 18 04 2915   	ld hl,frames_count
041308 46          2916   	ld b,(hl)
041309             2917   	moscall mos_fputc
041309 3E 0D       0001M  		LD	A, function
04130B 49 CF       0002M  		RST.LIS	08h
04130D             2918   
04130D             2919   	; store sprite size in the file
04130D 21 B0 17 04 2920   	ld hl,spr_size
041311 46          2921   	ld b,(hl)
041312             2922   	moscall mos_fputc
041312 3E 0D       0001M  		LD	A, function
041314 49 CF       0002M  		RST.LIS	08h
041316             2923   
041316             2924   	; de = size²
041316 21 00 00 00 2925   	ld hl,#000000
04131A 68          2926   	ld l,b
04131B 60          2927   	ld h,b
04131C ED 6C       2928   	mlt hl ; HL = sprite length
04131E E5          2929   	push hl
04131F             2930   
04131F             2931   	; get frames count
04131F 21 C0 18 04 2932   	ld hl,current_frame
041323 46          2933   	ld b,(hl)
041324             2934   
041324 E1          2935   	pop hl
041325             2936   
041325 78          2937   	ld a,b
041326 FE 00       2938   	cp 0
041328 28 07       2939   	jr z,ss_write_data
04132A             2940   
04132A 11 00 04 00 2941   	ld de,ONE_FRAME_BUFFER_SIZE
04132E             2942   ss_add_length:
04132E 19          2943   	add hl,de
04132F 10 FD       2944   	djnz ss_add_length
041331             2945   
041331             2946   ss_write_data:
041331 E5          2947   	push hl
041332 E5          2948   	push hl
041333 D1          2949   	pop de
041334 21 C9 18 04 2950   	ld hl,sprite_buffer
041338             2951   	moscall mos_fwrite
041338 3E 1B       0001M  		LD	A, function
04133A 49 CF       0002M  		RST.LIS	08h
04133C E1          2952   	pop hl
04133D 7C          2953   	ld a,h
04133E BA          2954   	cp d
04133F 20 08       2955   	jr nz,ss_close_error
041341 7D          2956   	ld a,l
041342 BB          2957   	cp e
041343 20 04       2958   	jr nz,ss_close_error
041345 C3 81 13 04 2959   	jp ss_close
041349             2960   
041349             2961   ss_close_error:
041349 C5          2962   	push bc
04134A             2963   
04134A             2964   	; write error
04134A CD 04 15 04 2965   	call fn_print_file_error
04134E             2966   
04134E C1          2967   	pop bc
04134F             2968   
04134F             2969   	; close the file
04134F             2970   	moscall mos_fclose
04134F 3E 0B       0001M  		LD	A, function
041351 49 CF       0002M  		RST.LIS	08h
041353             2971   
041353             2972   	; set path to home
041353 21 45 18 04 2973   	ld hl,back_path
041357             2974   	moscall mos_cd
041357 3E 03       0001M  		LD	A, function
041359 49 CF       0002M  		RST.LIS	08h
04135B             2975   
04135B             2976   	; exit on error
04135B FE 00       2977   	cp 0
04135D C2 79 13 04 2978   	jp nz,ss_folder_error
041361             2979   
041361             2980   	; reset current frame and coordinates of the drawing pixel
041361 21 C1 18 04 2981   	ld hl,frames_count
041365 7E          2982   	ld a,(hl)
041366 3D          2983   	dec a
041367 21 C0 18 04 2984   	ld hl,current_frame
04136B 77          2985   	ld (hl),a
04136C 21 AB 17 04 2986   	ld hl,xpix
041370 AF          2987   	xor a
041371 77          2988   	ld (hl),a
041372 21 AC 17 04 2989   	ld hl,ypix
041376 77          2990   	ld (hl),a
041377 18 30       2991   	jr ss_exit
041379             2992   
041379             2993   ss_folder_error:
041379             2994   	; write error
041379 CD 3B 15 04 2995   	call fn_print_folder_error
04137D C3 A9 13 04 2996   	jp ss_exit
041381             2997   
041381             2998   ss_close:
041381             2999   	; close the file
041381             3000   	moscall mos_fclose
041381 3E 0B       0001M  		LD	A, function
041383 49 CF       0002M  		RST.LIS	08h
041385             3001   
041385             3002   	; set path to home
041385 21 45 18 04 3003   	ld hl,back_path
041389             3004   	moscall mos_cd
041389 3E 03       0001M  		LD	A, function
04138B 49 CF       0002M  		RST.LIS	08h
04138D             3005   
04138D             3006   	; exit on error
04138D FE 00       3007   	cp 0
04138F C2 79 13 04 3008   	jp nz,ss_folder_error
041393             3009   
041393             3010   	; reset current frame and coordinates of the drawing pixel
041393 21 C1 18 04 3011   	ld hl,frames_count
041397 7E          3012   	ld a,(hl)
041398 3D          3013   	dec a
041399 21 C0 18 04 3014   	ld hl,current_frame
04139D 77          3015   	ld (hl),a
04139E 21 AB 17 04 3016   	ld hl,xpix
0413A2 AF          3017   	xor a
0413A3 77          3018   	ld (hl),a
0413A4 21 AC 17 04 3019   	ld hl,ypix
0413A8 77          3020   	ld (hl),a
0413A9             3021   
0413A9             3022   ss_exit:
0413A9 C9          3023   	ret
0413AA             3024   
0413AA             3025   ss_file_error:
0413AA CD 04 15 04 3026   	call fn_print_file_error
0413AE             3027   
0413AE             3028   	; set path to home
0413AE 21 45 18 04 3029   	ld hl,back_path
0413B2             3030   	moscall mos_cd
0413B2 3E 03       0001M  		LD	A, function
0413B4 49 CF       0002M  		RST.LIS	08h
0413B6             3031   
0413B6             3032   	; exit on error
0413B6 FE 00       3033   	cp 0
0413B8 C2 79 13 04 3034   	jp nz,ss_folder_error
0413BC C9          3035   	ret
0413BD             3036   
0413BD             3037   ; export sprite data in assembly language, giving its name
0413BD             3038   fn_export_sprite:
0413BD             3039   	; clear filename
0413BD 21 27 18 04 3040   	ld hl,filename
0413C1 06 0C       3041   	ld b,12
0413C3 AF          3042   	xor a
0413C4             3043   
0413C4             3044   es_clear_filename:
0413C4 77          3045   	ld (hl),a
0413C5 23          3046   	inc hl
0413C6 10 FC       3047   	djnz es_clear_filename
0413C8             3048   
0413C8             3049   	; get filename
0413C8 CD A1 0D 04 3050   	call fn_input_text8
0413CC             3051   
0413CC             3052   	; set path to sprite path
0413CC 21 34 18 04 3053   	ld hl,sprite_path
0413D0             3054   	moscall mos_cd
0413D0 3E 03       0001M  		LD	A, function
0413D2 49 CF       0002M  		RST.LIS	08h
0413D4             3055   
0413D4             3056   	; create it on error
0413D4 FE 00       3057   	cp 0
0413D6 F5          3058   	push af
0413D7 C4 1F 17 04 3059   	call nz,fn_create_sprite_folder
0413DB F1          3060   	pop af
0413DC 28 0E       3061   	jr z,es_next
0413DE             3062   
0413DE             3063   	; set path to sprite path
0413DE 21 34 18 04 3064   	ld hl,sprite_path
0413E2             3065   	moscall mos_cd
0413E2 3E 03       0001M  		LD	A, function
0413E4 49 CF       0002M  		RST.LIS	08h
0413E6             3066   
0413E6             3067   	; exit on error
0413E6 FE 00       3068   	cp 0
0413E8 C2 E8 14 04 3069   	jp nz,es_folder_error
0413EC             3070   
0413EC             3071   es_next:
0413EC             3072   	; open the file for write
0413EC 21 27 18 04 3073   	ld hl,filename
0413F0 0E 0A       3074   	ld c,fa_create_always|fa_write
0413F2             3075   	moscall mos_fopen
0413F2 3E 0A       0001M  		LD	A, function
0413F4 49 CF       0002M  		RST.LIS	08h
0413F6             3076   
0413F6             3077   	; exit on error
0413F6 FE 00       3078   	cp 0
0413F8 CA F1 14 04 3079   	jp z,es_file_error
0413FC             3080   
0413FC             3081   	; filehandle -> C
0413FC 4F          3082   	ld c,a
0413FD             3083   
0413FD             3084   
0413FD             3085   	; L = first frame
0413FD 3E 00       3086   	ld a,0
0413FF 21 C9 18 04 3087   	ld hl,sprite_buffer
041403 11 00 00 00 3088   	ld de,$000000
041407             3089   
041407             3090   es_frames_repeat:
041407 F5          3091   	push af
041408 E5          3092   	push hl
041409             3093   
041409 F5          3094   	push af
04140A             3095   
04140A             3096   	; start to write...
04140A 1E 00       3097   	ld e,0 ; rows
04140C             3098   
04140C 06 3B       3099   	ld b,';'
04140E             3100   	moscall mos_fputc
04140E 3E 0D       0001M  		LD	A, function
041410 49 CF       0002M  		RST.LIS	08h
041412             3101   
041412 06 20       3102   	ld b,' '
041414             3103   	moscall mos_fputc
041414 3E 0D       0001M  		LD	A, function
041416 49 CF       0002M  		RST.LIS	08h
041418             3104   
041418 06 46       3105   	ld b,'F'
04141A             3106   	moscall mos_fputc
04141A 3E 0D       0001M  		LD	A, function
04141C 49 CF       0002M  		RST.LIS	08h
04141E             3107   
04141E 06 72       3108   	ld b,'r'
041420             3109   	moscall mos_fputc
041420 3E 0D       0001M  		LD	A, function
041422 49 CF       0002M  		RST.LIS	08h
041424             3110   
041424 06 6D       3111   	ld b,'m'
041426             3112   	moscall mos_fputc
041426 3E 0D       0001M  		LD	A, function
041428 49 CF       0002M  		RST.LIS	08h
04142A             3113   
04142A 06 20       3114   	ld b,' '
04142C             3115   	moscall mos_fputc
04142C 3E 0D       0001M  		LD	A, function
04142E 49 CF       0002M  		RST.LIS	08h
041430             3116   
041430 F1          3117   	pop af
041431 C6 30       3118   	add a,'0'
041433 47          3119   	ld b,a
041434             3120   	moscall mos_fputc
041434 3E 0D       0001M  		LD	A, function
041436 49 CF       0002M  		RST.LIS	08h
041438             3121   
041438 06 0D       3122   	ld b,13
04143A             3123   	moscall mos_fputc
04143A 3E 0D       0001M  		LD	A, function
04143C 49 CF       0002M  		RST.LIS	08h
04143E             3124   
04143E 06 0A       3125   	ld b,10
041440             3126   	moscall mos_fputc
041440 3E 0D       0001M  		LD	A, function
041442 49 CF       0002M  		RST.LIS	08h
041444             3127   
041444             3128   es_repeat:
041444             3129   
041444 06 44       3130   	ld b,'D'
041446             3131   	moscall mos_fputc
041446 3E 0D       0001M  		LD	A, function
041448 49 CF       0002M  		RST.LIS	08h
04144A             3132   
04144A 06 42       3133   	ld b,'B'
04144C             3134   	moscall mos_fputc
04144C 3E 0D       0001M  		LD	A, function
04144E 49 CF       0002M  		RST.LIS	08h
041450             3135   
041450 06 20       3136   	ld b,' '
041452             3137   	moscall mos_fputc
041452 3E 0D       0001M  		LD	A, function
041454 49 CF       0002M  		RST.LIS	08h
041456             3138   
041456 16 00       3139   	ld d,0 ; columns
041458             3140   
041458             3141   es_repeat_line:
041458 D5          3142   	push de
041459             3143   
041459 7E          3144   	ld a,(hl)
04145A 23          3145   	inc hl
04145B             3146   
04145B             3147   	; convert A to BCD
04145B CD 8E 17 04 3148   	call fn_hex2bcd
04145F             3149   
04145F             3150   	; write two numbers (chars)
04145F 5F          3151   	ld e,a
041460 E6 F0       3152   	and $f0
041462 0F          3153   	rrca
041463 0F          3154   	rrca
041464 0F          3155   	rrca
041465 0F          3156   	rrca
041466 C6 30       3157   	add '0'
041468             3158   
041468 47          3159   	ld b,a
041469             3160   	moscall mos_fputc
041469 3E 0D       0001M  		LD	A, function
04146B 49 CF       0002M  		RST.LIS	08h
04146D             3161   
04146D 7B          3162   	ld a,e
04146E E6 0F       3163   	and $0f
041470 C6 30       3164   	add '0'
041472             3165   
041472 47          3166   	ld b,a
041473             3167   	moscall mos_fputc
041473 3E 0D       0001M  		LD	A, function
041475 49 CF       0002M  		RST.LIS	08h
041477             3168   
041477 D1          3169   	pop de
041478 14          3170   	inc d
041479 3A B0 17 04 3171   	ld a,(spr_size)
04147D BA          3172   	cp d
04147E F5          3173   	push af
04147F C4 87 17 04 3174   	call nz,fn_comma
041483 F1          3175   	pop af
041484 C2 58 14 04 3176   	jp nz,es_repeat_line
041488             3177   
041488 06 0D       3178   	ld b,13 ; CR
04148A             3179   	moscall mos_fputc
04148A 3E 0D       0001M  		LD	A, function
04148C 49 CF       0002M  		RST.LIS	08h
04148E             3180   
04148E 06 0A       3181   	ld b,10 ; LF
041490             3182   	moscall mos_fputc
041490 3E 0D       0001M  		LD	A, function
041492 49 CF       0002M  		RST.LIS	08h
041494             3183   
041494 1C          3184   	inc e
041495 3A B0 17 04 3185   	ld a,(spr_size)
041499 BB          3186   	cp e
04149A C2 44 14 04 3187   	jp nz,es_repeat
04149E             3188   
04149E 06 0D       3189   	ld b,13 ; CR
0414A0             3190   	moscall mos_fputc
0414A0 3E 0D       0001M  		LD	A, function
0414A2 49 CF       0002M  		RST.LIS	08h
0414A4             3191   
0414A4 06 0A       3192   	ld b,10 ; LF
0414A6             3193   	moscall mos_fputc
0414A6 3E 0D       0001M  		LD	A, function
0414A8 49 CF       0002M  		RST.LIS	08h
0414AA             3194   
0414AA E1          3195   	pop hl
0414AB D5          3196   	push de
0414AC ED 5C       3197   	mlt de
0414AE 19          3198   	add hl,de
0414AF D1          3199   	pop de
0414B0 F1          3200   	pop af
0414B1 3C          3201   	inc a
0414B2 DD 21 C1 18 3202   	ld ix,frames_count
       04          
0414B7 DD BE 00    3203   	cp (ix+0)
0414BA C2 07 14 04 3204   	jp nz,es_frames_repeat
0414BE             3205   
0414BE             3206   	; close the file
0414BE             3207   	moscall mos_fclose
0414BE 3E 0B       0001M  		LD	A, function
0414C0 49 CF       0002M  		RST.LIS	08h
0414C2             3208   
0414C2             3209   	; set path to home
0414C2 21 45 18 04 3210   	ld hl,back_path
0414C6             3211   	moscall mos_cd
0414C6 3E 03       0001M  		LD	A, function
0414C8 49 CF       0002M  		RST.LIS	08h
0414CA             3212   
0414CA             3213   	; exit on error
0414CA FE 00       3214   	cp 0
0414CC C2 E8 14 04 3215   	jp nz,es_folder_error
0414D0             3216   
0414D0             3217   	; reset current frame and coordinates of the drawing pixel
0414D0 21 C1 18 04 3218   	ld hl,frames_count
0414D4 7E          3219   	ld a,(hl)
0414D5 3D          3220   	dec a
0414D6 21 C0 18 04 3221   	ld hl,current_frame
0414DA 77          3222   	ld (hl),a
0414DB 21 AB 17 04 3223   	ld hl,xpix
0414DF AF          3224   	xor a
0414E0 77          3225   	ld (hl),a
0414E1 21 AC 17 04 3226   	ld hl,ypix
0414E5 77          3227   	ld (hl),a
0414E6 18 08       3228   	jr es_exit
0414E8             3229   
0414E8             3230   es_folder_error:
0414E8             3231   	; write error
0414E8 CD 3B 15 04 3232   	call fn_print_folder_error
0414EC C3 F0 14 04 3233   	jp es_exit
0414F0             3234   
0414F0             3235   es_exit:
0414F0 C9          3236   	ret
0414F1             3237   
0414F1             3238   es_file_error:
0414F1 CD 04 15 04 3239   	call fn_print_file_error
0414F5             3240   
0414F5             3241   	; set path to home
0414F5 21 45 18 04 3242   	ld hl,back_path
0414F9             3243   	moscall mos_cd
0414F9 3E 03       0001M  		LD	A, function
0414FB 49 CF       0002M  		RST.LIS	08h
0414FD             3244   
0414FD             3245   	; exit on error
0414FD FE 00       3246   	cp 0
0414FF C2 E8 14 04 3247   	jp nz,es_folder_error
041503 C9          3248   	ret
041504             3249   
041504             3250   ; print 'file error'
041504             3251   fn_print_file_error:
041504             3252   	vdu 7
041504 3E 07       0001M  		LD	A, function
041506 49 D7       0002M  		RST.LIS	10h
041508             3253   
041508             3254   	; locate x,y
041508             3255   	vdu 31
041508 3E 1F       0001M  		LD	A, function
04150A 49 D7       0002M  		RST.LIS	10h
04150C             3256   	vdu FILENAME_X
04150C 3E 07       0001M  		LD	A, function
04150E 49 D7       0002M  		RST.LIS	10h
041510             3257   	vdu FILENAME_Y
041510 3E 18       0001M  		LD	A, function
041512 49 D7       0002M  		RST.LIS	10h
041514             3258   
041514             3259   	; print text
041514 21 61 18 04 3260   	ld hl,file_error
041518 01 00 00 00 3261   	ld bc,0
04151C AF          3262   	xor a
04151D 49 DF       3263   	rst.lis $18
04151F             3264   
04151F CD 9A 0D 04 3265   	call fn_input_key
041523             3266   
041523             3267   	; locate x,y
041523             3268   	vdu 31
041523 3E 1F       0001M  		LD	A, function
041525 49 D7       0002M  		RST.LIS	10h
041527             3269   	vdu FILENAME_X
041527 3E 07       0001M  		LD	A, function
041529 49 D7       0002M  		RST.LIS	10h
04152B             3270   	vdu FILENAME_Y
04152B 3E 18       0001M  		LD	A, function
04152D 49 D7       0002M  		RST.LIS	10h
04152F             3271   
04152F             3272   	; print text
04152F 21 4A 18 04 3273   	ld hl,void_filename
041533 01 00 00 00 3274   	ld bc,0
041537 AF          3275   	xor a
041538 49 DF       3276   	rst.lis $18
04153A             3277   
04153A C9          3278   	ret
04153B             3279   
04153B             3280   ; print 'folder error'
04153B             3281   fn_print_folder_error:
04153B             3282   	vdu 7
04153B 3E 07       0001M  		LD	A, function
04153D 49 D7       0002M  		RST.LIS	10h
04153F             3283   
04153F             3284   	; locate x,y
04153F             3285   	vdu 31
04153F 3E 1F       0001M  		LD	A, function
041541 49 D7       0002M  		RST.LIS	10h
041543             3286   	vdu FILENAME_X
041543 3E 07       0001M  		LD	A, function
041545 49 D7       0002M  		RST.LIS	10h
041547             3287   	vdu FILENAME_Y
041547 3E 18       0001M  		LD	A, function
041549 49 D7       0002M  		RST.LIS	10h
04154B             3288   
04154B             3289   	; print text
04154B 21 78 18 04 3290   	ld hl,folder_error
04154F 01 00 00 00 3291   	ld bc,0
041553 AF          3292   	xor a
041554 49 DF       3293   	rst.lis $18
041556             3294   
041556 CD 9A 0D 04 3295   	call fn_input_key
04155A             3296   
04155A             3297   	; locate x,y
04155A             3298   	vdu 31
04155A 3E 1F       0001M  		LD	A, function
04155C 49 D7       0002M  		RST.LIS	10h
04155E             3299   	vdu FILENAME_X
04155E 3E 07       0001M  		LD	A, function
041560 49 D7       0002M  		RST.LIS	10h
041562             3300   	vdu FILENAME_Y
041562 3E 18       0001M  		LD	A, function
041564 49 D7       0002M  		RST.LIS	10h
041566             3301   
041566             3302   	; print text
041566 21 4A 18 04 3303   	ld hl,void_filename
04156A 01 00 00 00 3304   	ld bc,0
04156E AF          3305   	xor a
04156F 49 DF       3306   	rst.lis $18
041571             3307   
041571 C9          3308   	ret
041572             3309   
041572             3310   ; print 'header error'
041572             3311   fn_print_header_error:
041572             3312   	vdu 7
041572 3E 07       0001M  		LD	A, function
041574 49 D7       0002M  		RST.LIS	10h
041576             3313   
041576             3314   	; locate x,y
041576             3315   	vdu 31
041576 3E 1F       0001M  		LD	A, function
041578 49 D7       0002M  		RST.LIS	10h
04157A             3316   	vdu FILENAME_X
04157A 3E 07       0001M  		LD	A, function
04157C 49 D7       0002M  		RST.LIS	10h
04157E             3317   	vdu FILENAME_Y
04157E 3E 18       0001M  		LD	A, function
041580 49 D7       0002M  		RST.LIS	10h
041582             3318   
041582             3319   	; print text
041582 21 8F 18 04 3320   	ld hl,header_error
041586 01 00 00 00 3321   	ld bc,0
04158A AF          3322   	xor a
04158B 49 DF       3323   	rst.lis $18
04158D             3324   
04158D CD 9A 0D 04 3325   	call fn_input_key
041591             3326   
041591             3327   	; locate x,y
041591             3328   	vdu 31
041591 3E 1F       0001M  		LD	A, function
041593 49 D7       0002M  		RST.LIS	10h
041595             3329   	vdu FILENAME_X
041595 3E 07       0001M  		LD	A, function
041597 49 D7       0002M  		RST.LIS	10h
041599             3330   	vdu FILENAME_Y
041599 3E 18       0001M  		LD	A, function
04159B 49 D7       0002M  		RST.LIS	10h
04159D             3331   
04159D             3332   	; print text
04159D 21 4A 18 04 3333   	ld hl,void_filename
0415A1 01 00 00 00 3334   	ld bc,0
0415A5 AF          3335   	xor a
0415A6 49 DF       3336   	rst.lis $18
0415A8             3337   
0415A8 C9          3338   	ret
0415A9             3339   
0415A9             3340   ; print 'data error'
0415A9             3341   fn_print_data_error:
0415A9             3342   	vdu 7
0415A9 3E 07       0001M  		LD	A, function
0415AB 49 D7       0002M  		RST.LIS	10h
0415AD             3343   
0415AD             3344   	; locate x,y
0415AD             3345   	vdu 31
0415AD 3E 1F       0001M  		LD	A, function
0415AF 49 D7       0002M  		RST.LIS	10h
0415B1             3346   	vdu FILENAME_X
0415B1 3E 07       0001M  		LD	A, function
0415B3 49 D7       0002M  		RST.LIS	10h
0415B5             3347   	vdu FILENAME_Y
0415B5 3E 18       0001M  		LD	A, function
0415B7 49 D7       0002M  		RST.LIS	10h
0415B9             3348   
0415B9             3349   	; print text
0415B9 21 A6 18 04 3350   	ld hl,data_error
0415BD 01 00 00 00 3351   	ld bc,0
0415C1 AF          3352   	xor a
0415C2 49 DF       3353   	rst.lis $18
0415C4             3354   
0415C4 CD 9A 0D 04 3355   	call fn_input_key
0415C8             3356   
0415C8             3357   	; locate x,y
0415C8             3358   	vdu 31
0415C8 3E 1F       0001M  		LD	A, function
0415CA 49 D7       0002M  		RST.LIS	10h
0415CC             3359   	vdu FILENAME_X
0415CC 3E 07       0001M  		LD	A, function
0415CE 49 D7       0002M  		RST.LIS	10h
0415D0             3360   	vdu FILENAME_Y
0415D0 3E 18       0001M  		LD	A, function
0415D2 49 D7       0002M  		RST.LIS	10h
0415D4             3361   
0415D4             3362   	; print text
0415D4 21 4A 18 04 3363   	ld hl,void_filename
0415D8 01 00 00 00 3364   	ld bc,0
0415DC AF          3365   	xor a
0415DD 49 DF       3366   	rst.lis $18
0415DF             3367   
0415DF C9          3368   	ret
0415E0             3369   
0415E0             3370   ; refresh all the current sprite frame
0415E0             3371   fn_refresh_sprite:
0415E0 06 00       3372   	ld b,0 ; B -> x cordinate
0415E2 0E 00       3373   	ld c,0 ; C -> y cordinate
0415E4             3374   
0415E4             3375   rs_loop:
0415E4 C5          3376   	push bc
0415E5             3377   
0415E5 21 AB 17 04 3378   	ld hl,xpix
0415E9 70          3379   	ld (hl),b
0415EA 21 AC 17 04 3380   	ld hl,ypix
0415EE 71          3381   	ld (hl),c
0415EF CD 2C 0C 04 3382   	call fn_draw_pixel_without_border
0415F3             3383   
0415F3 C1          3384   	pop bc
0415F4             3385   
0415F4 04          3386   	inc b
0415F5 21 B0 17 04 3387   	ld hl,spr_size
0415F9 7E          3388   	ld a,(hl)
0415FA B8          3389   	cp b
0415FB 28 04       3390   	jr z,rs_next_line
0415FD C3 E4 15 04 3391   	jp rs_loop
041601             3392   
041601             3393   rs_next_line:
041601 06 00       3394   	ld b,0
041603 0C          3395   	inc c
041604 21 B0 17 04 3396   	ld hl,spr_size
041608 7E          3397   	ld a,(hl)
041609 B9          3398   	cp c
04160A 28 04       3399   	jr z,rs_end
04160C C3 E4 15 04 3400   	jp rs_loop
041610             3401   
041610             3402   rs_end:
041610 AF          3403   	xor a
041611 21 AB 17 04 3404   	ld hl,xpix
041615 77          3405   	ld (hl),a
041616 21 AC 17 04 3406   	ld hl,ypix
04161A 77          3407   	ld (hl),a
04161B CD 18 0C 04 3408   	call fn_draw_pixel_with_border
04161F             3409   
04161F C9          3410   	ret
041620             3411   
041620             3412   fn_change_frame:
041620 21 C0 18 04 3413   	ld hl,current_frame
041624 7E          3414   	ld a,(hl)
041625 3C          3415   	inc a
041626 C6 30       3416   	add a,48
041628 21 C2 18 04 3417   	ld hl,current_frame_ascii
04162C 77          3418   	ld (hl),a
04162D             3419   
04162D             3420   	; locate 21,3
04162D             3421   	vdu 31
04162D 3E 1F       0001M  		LD	A, function
04162F 49 D7       0002M  		RST.LIS	10h
041631             3422   	vdu 21
041631 3E 15       0001M  		LD	A, function
041633 49 D7       0002M  		RST.LIS	10h
041635             3423   	vdu 3
041635 3E 03       0001M  		LD	A, function
041637 49 D7       0002M  		RST.LIS	10h
041639             3424   
041639             3425   	; print text
041639 21 C2 18 04 3426   	ld hl,current_frame_ascii
04163D 01 00 00 00 3427   	ld bc,0
041641 AF          3428   	xor a
041642 49 DF       3429   	rst.lis $18
041644             3430   
041644 C9          3431   	ret
041645             3432   
041645             3433   fn_change_frames_count:
041645 21 C1 18 04 3434   	ld hl,frames_count
041649 7E          3435   	ld a,(hl)
04164A C6 30       3436   	add a,48
04164C 21 C4 18 04 3437   	ld hl,frames_count_ascii
041650 77          3438   	ld (hl),a
041651             3439   
041651             3440   	; locate 23,3
041651             3441   	vdu 31
041651 3E 1F       0001M  		LD	A, function
041653 49 D7       0002M  		RST.LIS	10h
041655             3442   	vdu 23
041655 3E 17       0001M  		LD	A, function
041657 49 D7       0002M  		RST.LIS	10h
041659             3443   	vdu 3
041659 3E 03       0001M  		LD	A, function
04165B 49 D7       0002M  		RST.LIS	10h
04165D             3444   
04165D             3445   	; print text
04165D 21 C4 18 04 3446   	ld hl,frames_count_ascii
041661 01 00 00 00 3447   	ld bc,0
041665 AF          3448   	xor a
041666 49 DF       3449   	rst.lis $18
041668             3450   
041668 C9          3451   	ret
041669             3452   
041669             3453   ; slowdown (wait delay)
041669             3454   fn_slowdown:
041669 DD 21 C6 18 3455   	ld ix,keydata
       04          
04166E DD 7E 02    3456   	ld a,(ix+2)
041671 E6 02       3457   	and 2
041673 FE 02       3458   	cp 2 ; shift key to disable delay
041675 C8          3459   	ret z
041676             3460   
041676             3461   	moscall mos_sysvars
041676 3E 08       0001M  		LD	A, function
041678 49 CF       0002M  		RST.LIS	08h
04167A DD 4E 00    3462   	ld c,(ix+sysvar_time)
04167D             3463   
04167D             3464   sd_loop:
04167D             3465   	moscall mos_sysvars
04167D 3E 08       0001M  		LD	A, function
04167F 49 CF       0002M  		RST.LIS	08h
041681 DD 7E 00    3466   	ld a,(ix+sysvar_time)
041684 91          3467   	sub c
041685 FE 14       3468   	cp SLOWDOWN_DELAY
041687 20 F4       3469   	jr nz,sd_loop
041689 C9          3470   	ret
04168A             3471   
04168A             3472   fn_show_spr_descr:
04168A             3473   	; locate 15,3
04168A             3474   	vdu 31
04168A 3E 1F       0001M  		LD	A, function
04168C 49 D7       0002M  		RST.LIS	10h
04168E             3475   	vdu 15
04168E 3E 0F       0001M  		LD	A, function
041690 49 D7       0002M  		RST.LIS	10h
041692             3476   	vdu 3
041692 3E 03       0001M  		LD	A, function
041694 49 D7       0002M  		RST.LIS	10h
041696             3477   
041696             3478   	; print text
041696 21 FB 17 04 3479   	ld hl,spr_descr
04169A 01 00 00 00 3480   	ld bc,0
04169E AF          3481   	xor a
04169F 49 DF       3482   	rst.lis $18
0416A1             3483   
0416A1             3484   	; locate 15,5
0416A1             3485   	vdu 31
0416A1 3E 1F       0001M  		LD	A, function
0416A3 49 D7       0002M  		RST.LIS	10h
0416A5             3486   	vdu 15
0416A5 3E 0F       0001M  		LD	A, function
0416A7 49 D7       0002M  		RST.LIS	10h
0416A9             3487   	vdu 5
0416A9 3E 05       0001M  		LD	A, function
0416AB 49 D7       0002M  		RST.LIS	10h
0416AD             3488   
0416AD             3489   	; check for sprite size...
0416AD 21 B0 17 04 3490   	ld hl,spr_size
0416B1 7E          3491   	ld a,(hl)
0416B2             3492   
0416B2 FE 04       3493   	cp 4
0416B4 20 0C       3494   	jr nz,ssd_8x8
0416B6             3495   
0416B6             3496   	; print text 4x4
0416B6 21 05 18 04 3497   	ld hl,spr_descr1
0416BA 01 00 00 00 3498   	ld bc,0
0416BE AF          3499   	xor a
0416BF 49 DF       3500   	rst.lis $18
0416C1 C9          3501   	ret
0416C2             3502   
0416C2             3503   ssd_8x8:
0416C2 FE 08       3504   	cp 8
0416C4 20 0C       3505   	jr nz,ssd_16x16
0416C6             3506   
0416C6             3507   	; print text 8x8
0416C6 21 0B 18 04 3508   	ld hl,spr_descr2
0416CA 01 00 00 00 3509   	ld bc,0
0416CE AF          3510   	xor a
0416CF 49 DF       3511   	rst.lis $18
0416D1 C9          3512   	ret
0416D2             3513   
0416D2             3514   ssd_16x16:
0416D2 FE 10       3515   	cp 16
0416D4 20 0C       3516   	jr nz,ssd_32x32
0416D6             3517   
0416D6             3518   	; print text 16x16
0416D6 21 11 18 04 3519   	ld hl,spr_descr3
0416DA 01 00 00 00 3520   	ld bc,0
0416DE AF          3521   	xor a
0416DF 49 DF       3522   	rst.lis $18
0416E1 C9          3523   	ret
0416E2             3524   
0416E2             3525   ssd_32x32:
0416E2             3526   	; print text 32x32
0416E2 21 17 18 04 3527   	ld hl,spr_descr4
0416E6 01 00 00 00 3528   	ld bc,0
0416EA AF          3529   	xor a
0416EB 49 DF       3530   	rst.lis $18
0416ED             3531   
0416ED C9          3532   	ret
0416EE             3533   
0416EE             3534   ; input: HL = negative key to check
0416EE             3535   fn_inkey:
0416EE             3536   	moscall mos_getkbmap
0416EE 3E 1E       0001M  		LD	A, function
0416F0 49 CF       0002M  		RST.LIS	08h
0416F2 23          3537   	INC	HL
0416F3 7D          3538   	LD	A, L
0416F4 ED 44       3539   	NEG
0416F6 4F          3540   	LD	C, A
0416F7 3E 01       3541   	LD	A, 1
0416F9 FA 1D 17 04 3542   	JP	M,i_false ; < -128 ?
0416FD             3543   
0416FD 21 45 00 04 3544   	LD	HL,BITLOOKUP
041701 11 00 00 00 3545   	LD	DE,0
041705 79          3546   	LD	A,C
041706 E6 07       3547   	AND	00000111b
041708 5F          3548   	LD	E,A
041709 19          3549   	ADD	HL,DE
04170A 46          3550   	LD	B,(HL)
04170B             3551   
04170B 79          3552   	LD	A,C
04170C E6 78       3553   	AND	01111000b
04170E 0F          3554   	RRCA
04170F 0F          3555   	RRCA
041710 0F          3556   	RRCA
041711 5F          3557   	LD	E, A
041712 DD 19       3558   	ADD	IX,DE
041714 DD 7E 00    3559   	LD	A,(IX+0)
041717 A0          3560   	AND	B
041718 28 03       3561   	JR Z,i_false
04171A 3E 01       3562   	LD A,1
04171C C9          3563   	RET
04171D             3564   i_false:
04171D AF          3565   	XOR A
04171E C9          3566   	RET
04171F             3567   
04171F             3568   fn_create_sprite_folder:
04171F 21 34 18 04 3569   	ld hl,sprite_path
041723             3570   	moscall mos_mkdir
041723 3E 07       0001M  		LD	A, function
041725 49 CF       0002M  		RST.LIS	08h
041727 C9          3571   	ret
041728             3572   
041728             3573   ; draw the palette
041728             3574   fn_draw_the_palette:
041728 0E 00       3575   	ld c,0
04172A             3576   
04172A             3577   fndtp_palette_loop:
04172A C5          3578   	push bc
04172B             3579   
04172B             3580   	; choose palette color
04172B             3581   	vdu 18
04172B 3E 12       0001M  		LD	A, function
04172D 49 D7       0002M  		RST.LIS	10h
04172F             3582   	vdu 0
04172F 3E 00       0001M  		LD	A, function
041731 49 D7       0002M  		RST.LIS	10h
041733 C1          3583   	pop bc
041734 C5          3584   	push bc
041735 79          3585   	ld a,c
041736             3586   	vdu_a
041736 49 D7       0001M  		RST.LIS	10h
041738             3587   
041738             3588   	; store coordinates for a palette square
041738 DD 21 9B 17 3589   	ld ix,x1
       04          
04173D E1          3590   	pop hl
04173E E5          3591   	push hl
04173F 26 05       3592   	ld h,5
041741 ED 6C       3593   	mlt hl
041743 E5          3594   	push hl
041744 DD 75 00    3595   	ld (ix+0),l
041747 DD 74 01    3596   	ld (ix+1),h
04174A             3597   
04174A DD 21 9D 17 3598   	ld ix,y1
       04          
04174F 21 00 00 00 3599   	ld hl,0
041753 DD 75 00    3600   	ld (ix+0),l
041756 DD 74 01    3601   	ld (ix+1),h
041759             3602   
041759 DD 21 9F 17 3603   	ld ix,x2
       04          
04175E E1          3604   	pop hl
04175F 11 04 00 00 3605   	ld de,4
041763 19          3606   	add hl,de
041764 DD 75 00    3607   	ld (ix+0),l
041767 DD 74 01    3608   	ld (ix+1),h
04176A             3609   
04176A DD 21 A1 17 3610   	ld ix,y2
       04          
04176F 21 0A 00 00 3611   	ld hl,10
041773 DD 75 00    3612   	ld (ix+0),l
041776 DD 74 01    3613   	ld (ix+1),h
041779             3614   
041779             3615   	; draw the palette filled square
041779 CD 4A 0B 04 3616   	call fn_rectf
04177D             3617   
04177D             3618   	; next color ?
04177D C1          3619   	pop bc
04177E 0C          3620   	inc c
04177F 79          3621   	ld a,c
041780 FE 40       3622   	cp MAX_COLORS
041782 C2 2A 17 04 3623   	jp nz,fndtp_palette_loop
041786             3624   
041786 C9          3625   	ret
041787             3626   
041787             3627   fn_comma:
041787 06 2C       3628   	ld b,','
041789             3629   	moscall mos_fputc
041789 3E 0D       0001M  		LD	A, function
04178B 49 CF       0002M  		RST.LIS	08h
04178D C9          3630   	ret
04178E             3631   
04178E             3632   ; Hex to BCD
04178E             3633   ; converts a hex number (eg. $10) to its BCD representation (eg. $16).
04178E             3634   ; Input: a = hex number
04178E             3635   ; Output: a = BCD number
04178E             3636   ; Clobbers: b,c
04178E             3637   fn_hex2bcd:
04178E C5          3638   		push bc
04178F 4F          3639   		ld c,a  ; Original (hex) number
041790 06 08       3640   		ld b,8  ; How many bits
041792 AF          3641   		xor a   ; Output (BCD) number, starts at 0
041793 CB 21       3642   htb:	sla c   ; shift c into carry
041795 8F          3643   		adc a,a
041796 27          3644   		daa     ; Decimal adjust a, so shift = BCD x2 plus carry
041797 10 FA       3645   		djnz htb  ; Repeat for 8 bits
041799 C1          3646   		pop bc
04179A C9          3647   		ret
04179B             3648   
04179B             3649   ;======================================================================
04179B             3650   
04179B             3651   ; coordinates for rectangles
04179B             3652   x1:
04179B 00 00       3653   	dw $0000
04179D             3654   y1:
04179D 00 00       3655   	dw $0000
04179F             3656   x2:
04179F 00 00       3657   	dw $0000
0417A1             3658   y2:
0417A1 00 00       3659   	dw $0000
0417A3             3660   
0417A3             3661   ; coordinates of the edited sprite
0417A3             3662   xs1:
0417A3 5F 00       3663   	dw 95
0417A5             3664   ys1:
0417A5 37 00       3665   	dw 55
0417A7             3666   xs2:
0417A7 E0 00       3667   	dw 224
0417A9             3668   ys2:
0417A9 B8 00       3669   	dw 184
0417AB             3670   
0417AB             3671   ; coordinates of active pixels to draw
0417AB             3672   xpix:
0417AB 00          3673   	db 0
0417AC             3674   ypix:
0417AC 00          3675   	db 0
0417AD             3676   
0417AD             3677   ; memorized coordinates of active pixels to draw
0417AD             3678   memxpix:
0417AD 00          3679   	db 0
0417AE             3680   memypix:
0417AE 00          3681   	db 0
0417AF             3682   
0417AF             3683   ; width of a pixel in the sprite
0417AF             3684   pixel_width:
0417AF 00          3685   	db 0
0417B0             3686   
0417B0             3687   ; sprite size, in resized pixels
0417B0             3688   spr_size:
0417B0 00          3689   	db 0
0417B1             3690   
0417B1             3691   ; pen color (0-63)
0417B1             3692   current_pen:
0417B1 00          3693   	db 0
0417B2             3694   
0417B2             3695   ; texts for 1st menu
0417B2             3696   title:
0417B2 53 50 52 2D 3697   	db "SPR-EDIT",0
       45 44 49 54 
       00          
0417BB             3698   
0417BB             3699   menu1:
0417BB 46 31 2E 20 3700   	db "F1. 4x4 Sprite",0
       34 78 34 20 
       53 70 72 69 
       74 65 00    
0417CA             3701   menu2:
0417CA 46 32 2E 20 3702   	db "F2. 8x8 Sprite",0
       38 78 38 20 
       53 70 72 69 
       74 65 00    
0417D9             3703   menu3:
0417D9 46 33 2E 20 3704   	db "F3. 16x16 Sprite",0
       31 36 78 31 
       36 20 53 70 
       72 69 74 65 
       00          
0417EA             3705   menu4:
0417EA 46 34 2E 20 3706   	db "F4. 32x32 Sprite",0
       33 32 78 33 
       32 20 53 70 
       72 69 74 65 
       00          
0417FB             3707   
0417FB             3708   ; descriptions of sprites
0417FB             3709   spr_descr:
0417FB 46 72 61 6D 3710   	db "Frame:1/1",0
       65 3A 31 2F 
       31 00       
041805             3711   spr_descr1:
041805 34 78 34 20 3712   	db "4x4  ",0
       20 00       
04180B             3713   spr_descr2:
04180B 38 78 38 20 3714   	db "8x8  ",0
       20 00       
041811             3715   spr_descr3:
041811 31 36 78 31 3716   	db "16x16",0
       36 00       
041817             3717   spr_descr4:
041817 33 32 78 33 3718   	db "32x32",0
       32 00       
04181D             3719   
04181D             3720   ; label before filename
04181D             3721   filename_label:
04181D 46 69 6C 65 3722   	db "Filename:",0
       6E 61 6D 65 
       3A 00       
041827             3723   
041827             3724   ; filename without extension
041827             3725   filename:
041827 00 00 00 00 3726   	db 0,0,0,0,0,0,0,0,0,0,0,0,0
       00 00 00 00 
       00 00 00 00 
       00          
041834             3727   
041834             3728   sprite_path:
041834 73 70 72 69 3729   	db "sprites",0
       74 65 73 00 
04183C             3730   
04183C             3731   palette_path:
04183C 70 61 6C 65 3732   	db "palettes",0
       74 74 65 73 
       00          
041845             3733   
041845             3734   back_path:
041845 2E 2E 00    3735   	db "..",0
041848             3736   
041848             3737   ; single space char to print
041848             3738   spacechar:
041848 20 00       3739   	db " ",0
04184A             3740   
04184A             3741   ; spaces to remove filename label
04184A             3742   void_filename:
04184A 20 20 20 20 3743   	db "                      ",0
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
041861             3744   
041861             3745   ; file error message
041861             3746   file_error:
041861 46 69 6C 65 3747   	db "File error !          ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 00    
041878             3748   
041878             3749   ; folder error message
041878             3750   folder_error:
041878 46 6F 6C 64 3751   	db "Folder error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
04188F             3752   
04188F             3753   ; header error message
04188F             3754   header_error:
04188F 48 65 61 64 3755   	db "Header error !        ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 00    
0418A6             3756   
0418A6             3757   ; data error message
0418A6             3758   data_error:
0418A6 44 61 74 61 3759   	db "Data error !        ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       00          
0418BB             3760   
0418BB             3761   ; number of colors
0418BB             3762   colors_count:
0418BB 00          3763   	db 0
0418BC             3764   
0418BC             3765   ; real number of colors
0418BC             3766   new_colors_count:
0418BC 00          3767   	db 0
0418BD             3768   
0418BD             3769   red_tint:
0418BD 00          3770   	db 0
0418BE             3771   
0418BE             3772   green_tint:
0418BE 00          3773   	db 0
0418BF             3774   
0418BF             3775   blue_tint:
0418BF 00          3776   	db 0
0418C0             3777   
0418C0             3778   ; current frame
0418C0             3779   current_frame:
0418C0 00          3780   	db 0
0418C1             3781   
0418C1             3782   ; frames count
0418C1             3783   frames_count:
0418C1 00          3784   	db 0
0418C2             3785   
0418C2             3786   current_frame_ascii:
0418C2 30 00       3787   	db '0',0
0418C4             3788   
0418C4             3789   frames_count_ascii:
0418C4 30 00       3790   	db '0',0
0418C6             3791   
0418C6             3792   ; keycode, keydown & keymods are stored here
0418C6             3793   keydata:
0418C6 00 00 00    3794   	db 0,0,0
0418C9             3795   
0418C9             3796   ; buffer for the current sprite
0418C9             3797   sprite_buffer:
0418C9             3798   	ds BUFFER_SIZE
0438C9             3799   
0438C9             3800   header_buffer:
0438C9             3801   	ds HEADER_BUFFER_SIZE
0438D9             3802   
0438D9             3803   color_buffer:
0438D9 00 00 00    3804   	db 0,0,0
0438DC             3805   
0438DC             3806   palette_buffer:
0438DC             3807   	ds MAX_PAL_DATA + 1
043C21             3808   
043C21             3809   temp_chars_buffer:
043C21 00 00 00 00 3810   	db 0,0,0,0
043C25             3811   
043C25             3812   header:
043C25 4A 41 53 43 3813   	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
043C2F 30 31 30 30 3814   	db "0100",13,10
       0D 0A       
043C35             3815   
043C35             3816   ; buffer to perform some operations
043C35             3817   swap_sprite_buffer:
043C35             3818   	ds ONE_FRAME_BUFFER_SIZE
044035             3819   
044035             3820   asm_line:
044035 44 42 20    3821   	DB "DB "
044038             3822   
044038             3823   asm_line_length:
044038 03          3824   	DB 3
044039             3825   
044039             3826   rgb_palette:
044039 00 00 00    3827   	db $00,$00,$00
04403C AA 00 00    3828   	db $AA,$00,$00
04403F 00 AA 00    3829   	db $00,$AA,$00
044042 AA AA 00    3830   	db $AA,$AA,$00
044045 00 00 AA    3831   	db $00,$00,$AA
044048 AA 00 AA    3832   	db $AA,$00,$AA
04404B 00 AA AA    3833   	db $00,$AA,$AA
04404E AA AA AA    3834   	db $AA,$AA,$AA
044051             3835   
044051 55 55 55    3836   	db $55,$55,$55
044054 FF 00 00    3837   	db $FF,$00,$00
044057 00 FF 00    3838   	db $00,$FF,$00
04405A FF FF 00    3839   	db $FF,$FF,$00
04405D 00 00 FF    3840   	db $00,$00,$FF
044060 FF 00 FF    3841   	db $FF,$00,$FF
044063 00 FF FF    3842   	db $00,$FF,$FF
044066 FF FF FF    3843   	db $FF,$FF,$FF
044069             3844   
044069 00 00 55    3845   	db $00,$00,$55
04406C 00 55 00    3846   	db $00,$55,$00
04406F 00 55 55    3847   	db $00,$55,$55
044072 00 55 AA    3848   	db $00,$55,$AA
044075 00 55 FF    3849   	db $00,$55,$FF
044078 00 AA 55    3850   	db $00,$AA,$55
04407B 00 AA FF    3851   	db $00,$AA,$FF
04407E 00 FF 55    3852   	db $00,$FF,$55
044081             3853   
044081 00 FF AA    3854   	db $00,$FF,$AA
044084 55 00 00    3855   	db $55,$00,$00
044087 55 00 55    3856   	db $55,$00,$55
04408A 55 00 AA    3857   	db $55,$00,$AA
04408D 55 00 FF    3858   	db $55,$00,$FF
044090 55 55 00    3859   	db $55,$55,$00
044093 55 55 AA    3860   	db $55,$55,$AA
044096 55 55 FF    3861   	db $55,$55,$FF
044099             3862   
044099 55 AA 00    3863   	db $55,$AA,$00
04409C 55 AA 55    3864   	db $55,$AA,$55
04409F 55 AA AA    3865   	db $55,$AA,$AA
0440A2 55 AA FF    3866   	db $55,$AA,$FF
0440A5 55 FF 00    3867   	db $55,$FF,$00
0440A8 55 FF 55    3868   	db $55,$FF,$55
0440AB 55 FF AA    3869   	db $55,$FF,$AA
0440AE 55 FF FF    3870   	db $55,$FF,$FF
0440B1             3871   
0440B1 AA 00 55    3872   	db $AA,$00,$55
0440B4 AA 00 FF    3873   	db $AA,$00,$FF
0440B7 AA 55 00    3874   	db $AA,$55,$00
0440BA AA 55 55    3875   	db $AA,$55,$55
0440BD AA 55 AA    3876   	db $AA,$55,$AA
0440C0 AA 55 FF    3877   	db $AA,$55,$FF
0440C3 AA AA 55    3878   	db $AA,$AA,$55
0440C6 AA AA FF    3879   	db $AA,$AA,$FF
0440C9             3880   
0440C9 AA FF 00    3881   	db $AA,$FF,$00
0440CC AA FF 55    3882   	db $AA,$FF,$55
0440CF AA FF AA    3883   	db $AA,$FF,$AA
0440D2 AA FF FF    3884   	db $AA,$FF,$FF
0440D5 FF 00 55    3885   	db $FF,$00,$55
0440D8 FF 00 AA    3886   	db $FF,$00,$AA
0440DB FF 55 00    3887   	db $FF,$55,$00
0440DE FF 55 55    3888   	db $FF,$55,$55
0440E1             3889   
0440E1 FF 55 AA    3890   	db $FF,$55,$AA
0440E4 FF 55 FF    3891   	db $FF,$55,$FF
0440E7 FF AA 00    3892   	db $FF,$AA,$00
0440EA FF AA 55    3893   	db $FF,$AA,$55
0440ED FF AA AA    3894   	db $FF,$AA,$AA
0440F0 FF AA FF    3895   	db $FF,$AA,$FF
0440F3 FF FF 55    3896   	db $FF,$FF,$55
0440F6 FF FF AA    3897   	db $FF,$FF,$AA
0440F9             3898   
0440F9             3899   ; sprite structure:
0440F9             3900   ; =================
0440F9             3901   ; colors_count  :   byte
0440F9             3902   ; frames count	:	byte
0440F9             3903   ; spr size		:	byte
0440F9             3904   ; data			:   width x height bytes of colors
0440F9             3905   
0440F9             3906   ; ===============================================
0440F9             3907   ; A = byte to debug
0440F9             3908   debug_byte:
0440F9 F5          3909   	PUSH AF
0440FA C5          3910   	PUSH BC
0440FB D5          3911   	PUSH DE
0440FC E5          3912   	PUSH HL
0440FD 21 00 00 00 3913   	LD HL,$000000
044101 6F          3914   	LD L,A
044102 11 3E 41 04 3915   	LD DE,debug_text
044106 D5          3916   	PUSH DE
044107 CD 44 41 04 3917   	CALL num2dec
04410B E1          3918   	POP HL
04410C 23          3919   	INC HL
04410D 23          3920   	INC HL
04410E 01 03 00 00 3921   	LD BC,3
044112 3E 00       3922   	LD A,0
044114 49 DF       3923   	RST.LIS $18
044116 E1          3924   	POP HL
044117 D1          3925   	POP DE
044118 C1          3926   	POP BC
044119 F1          3927   	POP AF
04411A C9          3928   	RET
04411B             3929   
04411B             3930   ; HL = word to debug
04411B             3931   debug_word:
04411B F5          3932   	PUSH AF
04411C C5          3933   	PUSH BC
04411D D5          3934   	PUSH DE
04411E E5          3935   	PUSH HL
04411F 11 00 00 00 3936   	LD DE,$000000 ; remove HLU
044123 5D          3937   	LD E,L
044124 54          3938   	LD D,H
044125 D5          3939   	PUSH DE
044126 E1          3940   	POP HL
044127 11 3E 41 04 3941   	LD DE,debug_text
04412B D5          3942   	PUSH DE
04412C CD 44 41 04 3943   	CALL num2dec
044130 E1          3944   	POP HL
044131 01 05 00 00 3945   	LD BC,5
044135 3E 00       3946   	LD A,0
044137 49 DF       3947   	RST.LIS $18
044139 E1          3948   	POP HL
04413A D1          3949   	POP DE
04413B C1          3950   	POP BC
04413C F1          3951   	POP AF
04413D C9          3952   	RET
04413E             3953   
04413E             3954   debug_text:
04413E             3955   	DS 6
044144             3956   
044144             3957   ; 16 bits number to string
044144             3958   num2dec:
044144 01 F0 D8 FF 3959   	LD BC,-10000
044148 CD 65 41 04 3960   	CALL num1
04414C 01 18 FC FF 3961   	LD BC,-1000
044150 CD 65 41 04 3962   	CALL num1
044154 01 9C FF FF 3963   	LD BC,-100
044158 CD 65 41 04 3964   	CALL num1
04415C 01 F6 FF FF 3965   	LD BC,-10
044160 CD 65 41 04 3966   	CALL num1
044164 48          3967   	LD C,B
044165             3968   
044165 3E 2F       3969   num1: LD A,'0'-1
044167 3C          3970   num2: INC A
044168 09          3971   	ADD HL,BC
044169 38 FC       3972   	JR C,num2
04416B ED 42       3973   	SBC HL,BC
04416D             3974   
04416D 12          3975   	LD (DE),A
04416E 13          3976   	INC DE
04416F C9          3977   	RET
