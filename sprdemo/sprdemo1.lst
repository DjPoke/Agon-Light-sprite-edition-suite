PC     Output      Line
040000             0001   ; sprdemo1.asm
040000             0002   ; (B.Vignoli)
040000             0003   ;
040000             0004   ; MIT Licence
040000             0005   ; 2024
040000             0006   
040000             0007   .ASSUME ADL=1
040000             0008   .ORG $040000
040000             0009   
040000 C3 30 0A 04 0010   	JP start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .ALIGN 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .DB "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	INCLUDE "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0207*  
040045             0208*  	MACRO VDU_DE
040045             0209*  		LD A,E
040045             0210*  		RST.LIS	10h
040045             0211*  		LD A,D
040045             0212*  		RST.LIS	10h
040045             0213*  	ENDMACRO
040045             0214*  
040045             0215*  	MACRO VDU_HL
040045             0216*  		LD A,L
040045             0217*  		RST.LIS	10h
040045             0218*  		LD A,H
040045             0219*  		RST.LIS	10h
040045             0220*  	ENDMACRO
040045             0019   	INCLUDE "sprites.inc"
040045             0001*  ; sprites.inc
040045             0002*  ; (B.Vignoli)
040045             0003*  ;
040045             0004*  ; MIT Licence
040045             0005*  ; 2024
040045             0006*  
040045             0007*  ;===================================
040045             0008*  ; equ's
040045             0009*  HEADER_BUFFER_SIZE:	equ 16
040045             0010*  
040045             0011*  MAX_PAL_DATA: equ 836 ; max palette chars
040045             0012*  MAX_PAL_DATA_HI: equ 03h
040045             0013*  MAX_PAL_DATA_LO: equ 44h
040045             0014*  
040045             0015*  ;===================================
040045             0016*  ; data
040045             0017*  spr_header:
040045 4A 41 53 43 0018*  	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
04004F 30 31 30 30 0019*  	db "0100",13,10
       0D 0A       
040055             0020*  
040055             0021*  spr_color_buffer:
040055 00 00 00    0022*  	db 0,0,0
040058             0023*  
040058             0024*  spr_real_palette_buffer:
040058             0025*  	ds 192
040118             0026*  
040118             0027*  spr_palette_buffer:
040118             0028*  	ds MAX_PAL_DATA + 1
04045D             0029*  
04045D             0030*  spr_temp_chars_buffer:
04045D 00 00 00 00 0031*  	db 0,0,0,0
040461             0032*  
040461             0033*  spr_frames_count:
040461 00          0034*  	db 0
040462             0035*  
040462             0036*  spr_bitmap_size:
040462 00          0037*  	db 0
040463             0038*  
040463             0039*  spr_start_bitmap:
040463 00          0040*  	db 0
040464             0041*  
040464             0042*  spr_current_bitmap:
040464 00          0043*  	db 0
040465             0044*  
040465             0045*  spr_current_sprite:
040465 00          0046*  	db 0
040466             0047*  
040466             0048*  ; real number of colors
040466             0049*  spr_new_colors_count:
040466 00          0050*  	db 0
040467             0051*  
040467             0052*  spr_colors_count:
040467 00          0053*  	db 0
040468             0054*  
040468             0055*  spr_red_tint:
040468 00          0056*  	db 0
040469             0057*  
040469             0058*  spr_green_tint:
040469 00          0059*  	db 0
04046A             0060*  
04046A             0061*  spr_blue_tint:
04046A 00          0062*  	db 0
04046B             0063*  
04046B             0064*  ; file error message
04046B             0065*  spr_file_error:
04046B 46 69 6C 65 0066*  	db "File error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
040485             0067*  
040485             0068*  ; header error message
040485             0069*  spr_header_error:
040485 48 65 61 64 0070*  	db "Header error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
04049F             0071*  
04049F             0072*  ; data error message
04049F             0073*  spr_data_error:
04049F 44 61 74 61 0074*  	db "Data error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0404B9             0075*  
0404B9             0076*  spr_rgb_palette:
0404B9 00 00 00    0077*  	db $00,$00,$00
0404BC AA 00 00    0078*  	db $AA,$00,$00
0404BF 00 AA 00    0079*  	db $00,$AA,$00
0404C2 AA AA 00    0080*  	db $AA,$AA,$00
0404C5 00 00 AA    0081*  	db $00,$00,$AA
0404C8 AA 00 AA    0082*  	db $AA,$00,$AA
0404CB 00 AA AA    0083*  	db $00,$AA,$AA
0404CE AA AA AA    0084*  	db $AA,$AA,$AA
0404D1             0085*  
0404D1 55 55 55    0086*  	db $55,$55,$55
0404D4 FF 00 00    0087*  	db $FF,$00,$00
0404D7 00 FF 00    0088*  	db $00,$FF,$00
0404DA FF FF 00    0089*  	db $FF,$FF,$00
0404DD 00 00 FF    0090*  	db $00,$00,$FF
0404E0 FF 00 FF    0091*  	db $FF,$00,$FF
0404E3 00 FF FF    0092*  	db $00,$FF,$FF
0404E6 FF FF FF    0093*  	db $FF,$FF,$FF
0404E9             0094*  
0404E9 00 00 55    0095*  	db $00,$00,$55
0404EC 00 55 00    0096*  	db $00,$55,$00
0404EF 00 55 55    0097*  	db $00,$55,$55
0404F2 00 55 AA    0098*  	db $00,$55,$AA
0404F5 00 55 FF    0099*  	db $00,$55,$FF
0404F8 00 AA 55    0100*  	db $00,$AA,$55
0404FB 00 AA FF    0101*  	db $00,$AA,$FF
0404FE 00 FF 55    0102*  	db $00,$FF,$55
040501             0103*  
040501 00 FF AA    0104*  	db $00,$FF,$AA
040504 55 00 00    0105*  	db $55,$00,$00
040507 55 00 55    0106*  	db $55,$00,$55
04050A 55 00 AA    0107*  	db $55,$00,$AA
04050D 55 00 FF    0108*  	db $55,$00,$FF
040510 55 55 00    0109*  	db $55,$55,$00
040513 55 55 AA    0110*  	db $55,$55,$AA
040516 55 55 FF    0111*  	db $55,$55,$FF
040519             0112*  
040519 55 AA 00    0113*  	db $55,$AA,$00
04051C 55 AA 55    0114*  	db $55,$AA,$55
04051F 55 AA AA    0115*  	db $55,$AA,$AA
040522 55 AA FF    0116*  	db $55,$AA,$FF
040525 55 FF 00    0117*  	db $55,$FF,$00
040528 55 FF 55    0118*  	db $55,$FF,$55
04052B 55 FF AA    0119*  	db $55,$FF,$AA
04052E 55 FF FF    0120*  	db $55,$FF,$FF
040531             0121*  
040531 AA 00 55    0122*  	db $AA,$00,$55
040534 AA 00 FF    0123*  	db $AA,$00,$FF
040537 AA 55 00    0124*  	db $AA,$55,$00
04053A AA 55 55    0125*  	db $AA,$55,$55
04053D AA 55 AA    0126*  	db $AA,$55,$AA
040540 AA 55 FF    0127*  	db $AA,$55,$FF
040543 AA AA 55    0128*  	db $AA,$AA,$55
040546 AA AA FF    0129*  	db $AA,$AA,$FF
040549             0130*  
040549 AA FF 00    0131*  	db $AA,$FF,$00
04054C AA FF 55    0132*  	db $AA,$FF,$55
04054F AA FF AA    0133*  	db $AA,$FF,$AA
040552 AA FF FF    0134*  	db $AA,$FF,$FF
040555 FF 00 55    0135*  	db $FF,$00,$55
040558 FF 00 AA    0136*  	db $FF,$00,$AA
04055B FF 55 00    0137*  	db $FF,$55,$00
04055E FF 55 55    0138*  	db $FF,$55,$55
040561             0139*  
040561 FF 55 AA    0140*  	db $FF,$55,$AA
040564 FF 55 FF    0141*  	db $FF,$55,$FF
040567 FF AA 00    0142*  	db $FF,$AA,$00
04056A FF AA 55    0143*  	db $FF,$AA,$55
04056D FF AA AA    0144*  	db $FF,$AA,$AA
040570 FF AA FF    0145*  	db $FF,$AA,$FF
040573 FF FF 55    0146*  	db $FF,$FF,$55
040576 FF FF AA    0147*  	db $FF,$FF,$AA
040579             0148*  
040579             0149*  ;===================================
040579             0150*  ; set default palette as the one
040579             0151*  ; to use for sprites
040579             0152*  ; (don't forget me when needed !)
040579             0153*  spr_set_default_palette:
040579 21 B9 04 04 0154*  	LD HL,spr_rgb_palette
04057D 11 58 00 04 0155*  	LD DE,spr_real_palette_buffer
040581 01 C0 00 00 0156*  	LD BC,64*3
040585 ED B0       0157*  	LDIR
040587 C9          0158*  	RET
040588             0159*  
040588             0160*  ; load a palette
040588             0161*  ; the right mode must
040588             0162*  ; be set before
040588             0163*  ; hl -> pointer to palette
040588             0164*  spr_load_palette:
040588             0165*  	; compare loaded header with needed header
040588 11 45 00 04 0166*  	ld de,spr_header
04058C 06 10       0167*  	ld b,HEADER_BUFFER_SIZE
04058E             0168*  
04058E             0169*  spr_lp_compare:
04058E 1A          0170*  	ld a,(de)
04058F BE          0171*  	cp (hl)
040590 C2 FA 05 04 0172*  	jp nz,spr_lp_header_error
040594             0173*  
040594 13          0174*  	inc de
040595 23          0175*  	inc hl
040596 05          0176*  	dec b
040597             0177*  
040597 78          0178*  	ld a,b
040598 FE 00       0179*  	cp 0
04059A C2 8E 05 04 0180*  	jp nz,spr_lp_compare
04059E             0181*  
04059E E5          0182*  	push hl
04059F DD E1       0183*  	pop ix
0405A1             0184*  
0405A1             0185*  	; prepare to read the number of colors
0405A1 21 55 00 04 0186*  	ld hl,spr_color_buffer
0405A5             0187*  
0405A5             0188*  spr_lp_getcount:
0405A5             0189*  	; read a string for colors count
0405A5 DD 7E 00    0190*  	ld a,(ix+0)
0405A8 DD 23       0191*  	inc ix
0405AA             0192*  
0405AA FE 30       0193*  	cp 48 ; < 0
0405AC 38 0A       0194*  	jr c,spr_lpgc_next
0405AE FE 3A       0195*  	cp 58 ; > 9
0405B0 D2 FA 06 04 0196*  	jp nc,spr_lp_data_error
0405B4             0197*  
0405B4 77          0198*  	ld (hl),a
0405B5 23          0199*  	inc hl
0405B6 18 ED       0200*  	jr spr_lp_getcount
0405B8             0201*  
0405B8             0202*  spr_lpgc_next:
0405B8 F5          0203*  	push af
0405B9 3E 0D       0204*  	ld a,13
0405BB 77          0205*  	ld (hl),a ; store CR
0405BC F1          0206*  	pop af
0405BD             0207*  
0405BD             0208*  	; test CR
0405BD FE 0D       0209*  	cp 13
0405BF C2 F0 05 04 0210*  	jp nz,spr_lp_close_error
0405C3             0211*  
0405C3             0212*  	; read LF
0405C3 DD 7E 00    0213*  	ld a,(ix+0)
0405C6 DD 23       0214*  	inc ix
0405C8             0215*  
0405C8             0216*  	; test LF
0405C8 FE 0A       0217*  	cp 10
0405CA C2 F0 05 04 0218*  	jp nz,spr_lp_close_error
0405CE             0219*  
0405CE             0220*  	; prepare to read color strings
0405CE 11 00 00 00 0221*  	ld de,#000000
0405D2 21 18 01 04 0222*  	ld hl,spr_palette_buffer
0405D6             0223*  
0405D6             0224*  spr_lp_load_pal_loop:
0405D6             0225*  	; read colors data
0405D6 DD 7E 00    0226*  	ld a,(ix+0)
0405D9 DD 23       0227*  	inc ix
0405DB             0228*  
0405DB 77          0229*  	ld (hl),a ; store loaded char in palette buffer
0405DC 23          0230*  	inc hl
0405DD 13          0231*  	inc de ; count chars
0405DE 7A          0232*  	ld a,d
0405DF FE 03       0233*  	cp MAX_PAL_DATA_HI
0405E1 DA D6 05 04 0234*  	jp c,spr_lp_load_pal_loop
0405E5 7B          0235*  	ld a,e
0405E6 FE 44       0236*  	cp MAX_PAL_DATA_LO
0405E8 DA D6 05 04 0237*  	jp c,spr_lp_load_pal_loop
0405EC C3 02 06 04 0238*  	jp spr_lp_read_palette_data
0405F0             0239*  
0405F0             0240*  spr_lp_close_error:
0405F0 C5          0241*  	push bc
0405F1             0242*  
0405F1             0243*  	; read error
0405F1 CD 8F 09 04 0244*  	call spr_print_file_error
0405F5             0245*  
0405F5 C1          0246*  	pop bc
0405F6 C3 F9 06 04 0247*  	jp spr_lp_exit
0405FA             0248*  
0405FA             0249*  spr_lp_header_error:
0405FA             0250*  	; write error
0405FA CD 70 09 04 0251*  	call spr_print_header_error
0405FE C3 F9 06 04 0252*  	jp spr_lp_exit
040602             0253*  
040602             0254*  spr_lp_read_palette_data:
040602             0255*  	; read the number of colors we have in the palette
040602 21 55 00 04 0256*  	ld hl,spr_color_buffer
040606 7E          0257*  	ld a,(hl)
040607 47          0258*  	ld b,a
040608 23          0259*  	inc hl
040609 7E          0260*  	ld a,(hl)
04060A 4F          0261*  	ld c,a ; bc = 1st char, 2nd char or CR
04060B             0262*  
04060B             0263*  	; first is a char number ?
04060B 78          0264*  	ld a,b
04060C FE 30       0265*  	cp 48
04060E DA FA 06 04 0266*  	jp c,spr_lp_data_error
040612 FE 3A       0267*  	cp 58
040614 D2 FA 06 04 0268*  	jp nc,spr_lp_data_error
040618             0269*  
040618 79          0270*  	ld a,c
040619 FE 0D       0271*  	cp 13
04061B C2 3D 06 04 0272*  	jp nz,spr_lp_two_numbers
04061F             0273*  
04061F             0274*  ; only one number
04061F 78          0275*  	ld a,b
040620 D6 30       0276*  	sub 48
040622             0277*  
040622 21 66 04 04 0278*  	ld hl,spr_new_colors_count
040626 77          0279*  	ld (hl),a
040627             0280*  
040627 FE 00       0281*  	cp 0
040629 CA FA 06 04 0282*  	jp z,spr_lp_data_error
04062D FE 03       0283*  	cp 3
04062F DA 72 06 04 0284*  	jp c,spr_lp_two_colors
040633 FE 05       0285*  	cp 5
040635 DA 88 06 04 0286*  	jp c,spr_lp_four_colors
040639             0287*  
040639 C3 9E 06 04 0288*  	jp spr_lp_sixteen_colors
04063D             0289*  
04063D             0290*  ; two numbers
04063D             0291*  spr_lp_two_numbers:
04063D 79          0292*  	ld a,c
04063E FE 30       0293*  	cp 48
040640 DA FA 06 04 0294*  	jp c,spr_lp_data_error
040644 FE 3A       0295*  	cp 58
040646 D2 FA 06 04 0296*  	jp nc,spr_lp_data_error
04064A             0297*  
04064A 78          0298*  	ld a,b
04064B D6 30       0299*  	sub 48
04064D 01 00 00 00 0300*  	ld bc,#000000
040651 47          0301*  	ld b,a
040652 0E 0A       0302*  	ld c,10
040654 ED 4C       0303*  	mlt bc
040656 81          0304*  	add a,c
040657             0305*  
040657 21 66 04 04 0306*  	ld hl,spr_new_colors_count
04065B 77          0307*  	ld (hl),a
04065C             0308*  
04065C FE 0A       0309*  	cp 10
04065E DA FA 06 04 0310*  	jp c,spr_lp_data_error
040662 FE 11       0311*  	cp 17
040664 DA 9E 06 04 0312*  	jp c,spr_lp_sixteen_colors
040668 FE 41       0313*  	cp 65
04066A DA B4 06 04 0314*  	jp c,spr_lp_sixty_four_colors
04066E             0315*  
04066E C3 FA 06 04 0316*  	jp spr_lp_data_error
040672             0317*  
040672             0318*  spr_lp_two_colors:
040672 21 67 04 04 0319*  	ld hl,spr_colors_count
040676 3E 02       0320*  	ld a,2
040678 77          0321*  	ld (hl),a
040679             0322*  
040679             0323*  spr_lptc_done:
040679 21 66 04 04 0324*  	ld hl,spr_new_colors_count
04067D 7E          0325*  	ld a,(hl) ; real number of coulours
04067E 06 00       0326*  	ld b,0 ; start wit color 0
040680 21 18 01 04 0327*  	ld hl,spr_palette_buffer ; palette will be got here
040684 C3 CA 06 04 0328*  	jp spr_lp_read_colors
040688             0329*  
040688             0330*  spr_lp_four_colors:
040688 21 67 04 04 0331*  	ld hl,spr_colors_count
04068C 3E 04       0332*  	ld a,4
04068E 77          0333*  	ld (hl),a
04068F             0334*  
04068F             0335*  spr_lpfc_done:
04068F 21 66 04 04 0336*  	ld hl,spr_new_colors_count
040693 7E          0337*  	ld a,(hl) ; real number of coulours
040694 06 00       0338*  	ld b,0 ; start wit color 0
040696 21 18 01 04 0339*  	ld hl,spr_palette_buffer ; palette will be got here
04069A C3 CA 06 04 0340*  	jp spr_lp_read_colors
04069E             0341*  
04069E             0342*  spr_lp_sixteen_colors:
04069E 21 67 04 04 0343*  	ld hl,spr_colors_count
0406A2 3E 10       0344*  	ld a,16
0406A4 77          0345*  	ld (hl),a
0406A5             0346*  
0406A5             0347*  spr_lpsc_done:
0406A5 21 66 04 04 0348*  	ld hl,spr_new_colors_count
0406A9 7E          0349*  	ld a,(hl) ; real number of coulours
0406AA 06 00       0350*  	ld b,0 ; start wit color 0
0406AC 21 18 01 04 0351*  	ld hl,spr_palette_buffer ; palette will be got here
0406B0 C3 CA 06 04 0352*  	jp spr_lp_read_colors
0406B4             0353*  
0406B4             0354*  spr_lp_sixty_four_colors:
0406B4 21 67 04 04 0355*  	ld hl,spr_colors_count
0406B8 3E 40       0356*  	ld a,64
0406BA 77          0357*  	ld (hl),a
0406BB             0358*  
0406BB             0359*  spr_lpsfc_done:
0406BB 21 66 04 04 0360*  	ld hl,spr_new_colors_count
0406BF 7E          0361*  	ld a,(hl) ; real number of coulours
0406C0 06 00       0362*  	ld b,0 ; start wit color 0
0406C2 21 18 01 04 0363*  	ld hl,spr_palette_buffer ; palette will be taken here
0406C6 C3 CA 06 04 0364*  	jp spr_lp_read_colors
0406CA             0365*  
0406CA             0366*  spr_lp_read_colors:
0406CA F5          0367*  	push af
0406CB             0368*  
0406CB CD 02 07 04 0369*  	call spr_lp_read_tint ; read red tint
0406CF             0370*  
0406CF E5          0371*  	push hl
0406D0 21 68 04 04 0372*  	ld hl,spr_red_tint
0406D4 77          0373*  	ld (hl),a
0406D5 E1          0374*  	pop hl
0406D6             0375*  
0406D6 CD 02 07 04 0376*  	call spr_lp_read_tint ; read green tint
0406DA             0377*  
0406DA E5          0378*  	push hl
0406DB 21 69 04 04 0379*  	ld hl,spr_green_tint
0406DF 77          0380*  	ld (hl),a
0406E0 E1          0381*  	pop hl
0406E1             0382*  
0406E1 CD 02 07 04 0383*  	call spr_lp_read_tint ; read blue tint
0406E5             0384*  
0406E5 E5          0385*  	push hl
0406E6 21 6A 04 04 0386*  	ld hl,spr_blue_tint
0406EA 77          0387*  	ld (hl),a
0406EB E1          0388*  	pop hl
0406EC             0389*  
0406EC CD 8E 07 04 0390*  	call spr_lp_set_tint
0406F0             0391*  
0406F0 F1          0392*  	pop af
0406F1             0393*  
0406F1 04          0394*  	inc b ; increment number of colors
0406F2 3D          0395*  	dec a ; decrement real number of colors
0406F3 FE 00       0396*  	cp 0
0406F5 C2 CA 06 04 0397*  	jp nz,spr_lp_read_colors
0406F9             0398*  
0406F9             0399*  spr_lp_exit:
0406F9 C9          0400*  	ret
0406FA             0401*  
0406FA             0402*  spr_lp_data_error:
0406FA C3 AE 09 04 0403*  	jp spr_print_data_error
0406FE             0404*  
0406FE             0405*  spr_lp_file_error:
0406FE C3 8F 09 04 0406*  	jp spr_print_file_error
040702             0407*  
040702             0408*  spr_lp_read_tint:
040702 0E 00       0409*  	ld c,0 ; number of chars readen for a single string number
040704 11 5D 04 04 0410*  	ld de,spr_temp_chars_buffer ; temp buffer for a string number
040708             0411*  
040708             0412*  	; read next string number
040708 CD 72 07 04 0413*  	call spr_lprt_read_chars
04070C             0414*  
04070C 79          0415*  	ld a,c
04070D FE 00       0416*  	cp 0 ; no numbers
04070F CA 29 07 04 0417*  	jp z,spr_lprt_wrong_exit
040713 FE 04       0418*  	cp 4 ; too many numbers
040715 D2 29 07 04 0419*  	jp nc,spr_lprt_wrong_exit
040719             0420*  
040719 FE 03       0421*  	cp 3
04071B 28 29       0422*  	jr z,spr_lprt_three_int
04071D             0423*  
04071D FE 02       0424*  	cp 2
04071F 28 0A       0425*  	jr z,spr_lprt_two_int
040721             0426*  
040721             0427*  	; one int only
040721 11 5D 04 04 0428*  	ld de,spr_temp_chars_buffer
040725 1A          0429*  	ld a,(de)
040726 D6 30       0430*  	sub 48
040728 C9          0431*  	ret
040729             0432*  
040729             0433*  spr_lprt_wrong_exit:
040729 AF          0434*  	xor a
04072A C9          0435*  	ret
04072B             0436*  
04072B             0437*  ; two int
04072B             0438*  spr_lprt_two_int:
04072B C5          0439*  	push bc
04072C 11 5D 04 04 0440*  	ld de,spr_temp_chars_buffer
040730 1A          0441*  	ld a,(de)
040731 D6 30       0442*  	sub 48
040733 D5          0443*  	push de
040734 11 00 00 00 0444*  	ld de,#000000
040738 5F          0445*  	ld e,a
040739 16 0A       0446*  	ld d,10
04073B ED 5C       0447*  	mlt de
04073D 43          0448*  	ld b,e
04073E D1          0449*  	pop de
04073F 13          0450*  	inc de
040740 1A          0451*  	ld a,(de)
040741 D6 30       0452*  	sub 48
040743 80          0453*  	add a,b ; full int value is here
040744 C1          0454*  	pop bc
040745 C9          0455*  	ret
040746             0456*  
040746             0457*  ; three int
040746             0458*  spr_lprt_three_int:
040746 C5          0459*  	push bc
040747 11 5D 04 04 0460*  	ld de,spr_temp_chars_buffer
04074B 1A          0461*  	ld a,(de)
04074C D6 30       0462*  	sub 48
04074E D5          0463*  	push de
04074F 11 00 00 00 0464*  	ld de,#000000
040753 5F          0465*  	ld e,a
040754 16 64       0466*  	ld d,100
040756 ED 5C       0467*  	mlt de
040758 43          0468*  	ld b,e
040759 D1          0469*  	pop de
04075A 13          0470*  	inc de
04075B 1A          0471*  	ld a,(de)
04075C D6 30       0472*  	sub 48
04075E D5          0473*  	push de
04075F 11 00 00 00 0474*  	ld de,#000000
040763 5F          0475*  	ld e,a
040764 16 0A       0476*  	ld d,10
040766 ED 5C       0477*  	mlt de
040768 4B          0478*  	ld c,e
040769 D1          0479*  	pop de
04076A 13          0480*  	inc de
04076B 1A          0481*  	ld a,(de)
04076C D6 30       0482*  	sub 48
04076E 81          0483*  	add a,c
04076F 80          0484*  	add a,b ; full int value is here
040770 C1          0485*  	pop bc
040771 C9          0486*  	ret
040772             0487*  
040772             0488*  spr_lprt_read_chars:
040772 3E 0D       0489*  	ld a,13
040774 12          0490*  	ld (de),a ; store eol as next default temp char
040775             0491*  
040775 7E          0492*  	ld a,(hl) ; get the new char in the palette buffer
040776 23          0493*  	inc hl
040777             0494*  
040777 FE 20       0495*  	cp 32
040779 C8          0496*  	ret z ; ret if space
04077A FE 0D       0497*  	cp 13
04077C 28 F4       0498*  	jr z,spr_lprt_read_chars ; loop if CR
04077E FE 0A       0499*  	cp 10
040780 C8          0500*  	ret z ; ret if LF
040781 FE 30       0501*  	cp 48
040783 D8          0502*  	ret c ; ret if not number
040784 FE 3A       0503*  	cp 58
040786 D0          0504*  	ret nc ; ret if not number
040787             0505*  
040787             0506*  ; found a number, store it
040787 12          0507*  	ld (de),a
040788 13          0508*  	inc de
040789 0C          0509*  	inc c
04078A C3 72 07 04 0510*  	jp spr_lprt_read_chars
04078E             0511*  
04078E             0512*  ; set tint
04078E             0513*  spr_lp_set_tint:
04078E F5          0514*  	push af
04078F C5          0515*  	push bc
040790 D5          0516*  	push de
040791 E5          0517*  	push hl
040792             0518*  
040792 C5          0519*  	push bc
040793             0520*  
040793             0521*  	; store palette in the real palette buffer
040793             0522*  	; to use RGB values later with sprites
040793 E5          0523*  	push hl
040794 D5          0524*  	push de
040795 C5          0525*  	push bc
040796 21 58 00 04 0526*  	ld hl,spr_real_palette_buffer
04079A 11 00 00 00 0527*  	ld de,$000000
04079E 58          0528*  	ld e,b
04079F 16 03       0529*  	ld d,3
0407A1 ED 5C       0530*  	mlt de
0407A3 19          0531*  	add hl,de
0407A4 11 68 04 04 0532*  	ld de,spr_red_tint
0407A8 1A          0533*  	ld a,(de)
0407A9 77          0534*  	ld (hl),a ; red
0407AA 23          0535*  	inc hl
0407AB 11 69 04 04 0536*  	ld de,spr_green_tint
0407AF 1A          0537*  	ld a,(de)
0407B0 77          0538*  	ld (hl),a ; green
0407B1 23          0539*  	inc hl
0407B2 11 6A 04 04 0540*  	ld de,spr_blue_tint
0407B6 1A          0541*  	ld a,(de)
0407B7 77          0542*  	ld (hl),a ; blue
0407B8 C1          0543*  	pop bc
0407B9 D1          0544*  	pop de
0407BA E1          0545*  	pop hl
0407BB             0546*  
0407BB             0547*  	vdu 19
0407BB 3E 13       0001*M 		LD	A, function
0407BD 49 D7       0002*M 		RST.LIS	10h
0407BF C1          0548*  	pop bc
0407C0 78          0549*  	ld a,b
0407C1             0550*  	vdu_a
0407C1 49 D7       0001*M 		RST.LIS	10h
0407C3             0551*  	vdu 255
0407C3 3E FF       0001*M 		LD	A, function
0407C5 49 D7       0002*M 		RST.LIS	10h
0407C7             0552*  
0407C7 21 68 04 04 0553*  	ld hl,spr_red_tint
0407CB 7E          0554*  	ld a,(hl)
0407CC             0555*  	vdu_a
0407CC 49 D7       0001*M 		RST.LIS	10h
0407CE             0556*  
0407CE 21 69 04 04 0557*  	ld hl,spr_green_tint
0407D2 7E          0558*  	ld a,(hl)
0407D3             0559*  	vdu_a
0407D3 49 D7       0001*M 		RST.LIS	10h
0407D5             0560*  
0407D5 21 6A 04 04 0561*  	ld hl,spr_blue_tint
0407D9 7E          0562*  	ld a,(hl)
0407DA             0563*  	vdu_a
0407DA 49 D7       0001*M 		RST.LIS	10h
0407DC             0564*  
0407DC E1          0565*  	pop hl
0407DD D1          0566*  	pop de
0407DE C1          0567*  	pop bc
0407DF F1          0568*  	pop af
0407E0 C9          0569*  	ret
0407E1             0570*  
0407E1             0571*  ; init a sprite
0407E1             0572*  ; hl -> address of sprite data
0407E1             0573*  ; a -> current sprite number
0407E1             0574*  ; c -> return number of frames
0407E1             0575*  spr_init:
0407E1 E5          0576*  	PUSH HL
0407E2 DD E1       0577*  	POP IX
0407E4             0578*  
0407E4 21 61 04 04 0579*  	LD HL,spr_frames_count
0407E8 DD 4E 01    0580*  	LD C,(IX+1) ; get frames count
0407EB 71          0581*  	ld (HL),C
0407EC             0582*  
0407EC 21 62 04 04 0583*  	LD HL,spr_bitmap_size
0407F0 DD 46 02    0584*  	LD B,(IX+2) ; get bitmap size
0407F3 70          0585*  	ld (HL),B
0407F4             0586*  
0407F4 DD 23       0587*  	INC IX
0407F6 DD 23       0588*  	INC IX
0407F8 DD 23       0589*  	INC IX
0407FA             0590*  
0407FA 21 65 04 04 0591*  	LD HL,spr_current_sprite
0407FE 77          0592*  	LD (HL),A
0407FF             0593*  
0407FF 21 64 04 04 0594*  	LD HL,spr_current_bitmap
040803 11 63 04 04 0595*  	LD DE,spr_start_bitmap
040807 7E          0596*  	LD A,(HL)
040808 12          0597*  	LD (DE),A
040809             0598*  
040809             0599*  spri_big_loop:
040809 C5          0600*  	PUSH BC
04080A DD E5       0601*  	PUSH IX
04080C             0602*  
04080C             0603*  	; select bitmap
04080C             0604*  	VDU 23
04080C 3E 17       0001*M 		LD	A, function
04080E 49 D7       0002*M 		RST.LIS	10h
040810             0605*  	VDU 27
040810 3E 1B       0001*M 		LD	A, function
040812 49 D7       0002*M 		RST.LIS	10h
040814             0606*  	VDU 0
040814 3E 00       0001*M 		LD	A, function
040816 49 D7       0002*M 		RST.LIS	10h
040818 21 64 04 04 0607*  	LD HL,spr_current_bitmap
04081C 7E          0608*  	LD A,(HL)
04081D E5          0609*  	PUSH HL
04081E             0610*  	VDU_A
04081E 49 D7       0001*M 		RST.LIS	10h
040820 E1          0611*  	POP HL
040821 3C          0612*  	INC A
040822 77          0613*  	LD (HL),A
040823             0614*  
040823             0615*  	; width & height -> de, hl
040823 21 62 04 04 0616*  	LD HL,spr_bitmap_size
040827 11 00 00 00 0617*  	LD DE,$000000
04082B 5E          0618*  	LD E,(HL)
04082C D5          0619*  	PUSH DE
04082D E1          0620*  	POP HL
04082E             0621*  
04082E             0622*  	; get bitmap data
04082E D5          0623*  	PUSH DE
04082F E5          0624*  	PUSH HL
040830 D5          0625*  	PUSH DE
040831             0626*  	VDU 23
040831 3E 17       0001*M 		LD	A, function
040833 49 D7       0002*M 		RST.LIS	10h
040835             0627*  	VDU 27
040835 3E 1B       0001*M 		LD	A, function
040837 49 D7       0002*M 		RST.LIS	10h
040839             0628*  	VDU 1
040839 3E 01       0001*M 		LD	A, function
04083B 49 D7       0002*M 		RST.LIS	10h
04083D D1          0629*  	POP DE
04083E             0630*  	VDU_DE
04083E 7B          0001*M 		LD A,E
04083F 49 D7       0002*M 		RST.LIS	10h
040841 7A          0003*M 		LD A,D
040842 49 D7       0004*M 		RST.LIS	10h
040844 E1          0631*  	POP HL
040845             0632*  	VDU_HL
040845 7D          0001*M 		LD A,L
040846 49 D7       0002*M 		RST.LIS	10h
040848 7C          0003*M 		LD A,H
040849 49 D7       0004*M 		RST.LIS	10h
04084B D1          0633*  	POP DE
04084C 53          0634*  	LD D,E
04084D ED 5C       0635*  	MLT DE ; de -> size of data
04084F             0636*  
04084F DD E1       0637*  	POP IX
040851 C1          0638*  	POP BC
040852             0639*  
040852             0640*  spri_loop:
040852 DD 7E 00    0641*  	LD A,(IX+0)
040855 DD E5       0642*  	PUSH IX
040857 D5          0643*  	PUSH DE
040858 C5          0644*  	PUSH BC
040859 CD CD 09 04 0645*  	CALL spr_send_RGBA_to_VDP
04085D C1          0646*  	POP BC
04085E D1          0647*  	POP DE
04085F DD E1       0648*  	POP IX
040861 DD 23       0649*  	INC IX
040863 1B          0650*  	DEC DE
040864 7A          0651*  	LD A,D
040865 B3          0652*  	OR E
040866 FE 00       0653*  	CP 0
040868 20 E8       0654*  	JR NZ,spri_loop
04086A             0655*  
04086A 0D          0656*  	DEC C
04086B 79          0657*  	LD A,C
04086C FE 00       0658*  	CP 0
04086E 28 04       0659*  	JR Z,spri_add_frames_to_sprite
040870 C3 09 08 04 0660*  	JP spri_big_loop
040874             0661*  
040874             0662*  spri_add_frames_to_sprite:
040874             0663*  	; prepare current sprite
040874 21 65 04 04 0664*  	LD HL,spr_current_sprite
040878 7E          0665*  	LD A,(HL)
040879             0666*  
040879             0667*  	; select sprite
040879 F5          0668*  	PUSH AF
04087A             0669*  	VDU 23
04087A 3E 17       0001*M 		LD	A, function
04087C 49 D7       0002*M 		RST.LIS	10h
04087E             0670*  	VDU 27
04087E 3E 1B       0001*M 		LD	A, function
040880 49 D7       0002*M 		RST.LIS	10h
040882             0671*  	VDU 4
040882 3E 04       0001*M 		LD	A, function
040884 49 D7       0002*M 		RST.LIS	10h
040886 F1          0672*  	POP AF
040887             0673*  	VDU_A
040887 49 D7       0001*M 		RST.LIS	10h
040889             0674*  
040889             0675*  	; clear frames in sprite
040889             0676*  	VDU 23
040889 3E 17       0001*M 		LD	A, function
04088B 49 D7       0002*M 		RST.LIS	10h
04088D             0677*  	VDU 27
04088D 3E 1B       0001*M 		LD	A, function
04088F 49 D7       0002*M 		RST.LIS	10h
040891             0678*  	VDU 5
040891 3E 05       0001*M 		LD	A, function
040893 49 D7       0002*M 		RST.LIS	10h
040895             0679*  
040895 21 61 04 04 0680*  	LD HL,spr_frames_count
040899 4E          0681*  	LD C,(HL) ; c -> frames count
04089A 21 63 04 04 0682*  	LD HL,spr_start_bitmap
04089E 7E          0683*  	LD A,(HL) ; a -> start bitmap
04089F             0684*  
04089F             0685*  spriafts_loop:
04089F C5          0686*  	PUSH BC
0408A0 F5          0687*  	PUSH AF
0408A1             0688*  	VDU 23
0408A1 3E 17       0001*M 		LD	A, function
0408A3 49 D7       0002*M 		RST.LIS	10h
0408A5             0689*  	VDU 27
0408A5 3E 1B       0001*M 		LD	A, function
0408A7 49 D7       0002*M 		RST.LIS	10h
0408A9             0690*  	VDU 6
0408A9 3E 06       0001*M 		LD	A, function
0408AB 49 D7       0002*M 		RST.LIS	10h
0408AD F1          0691*  	POP AF
0408AE F5          0692*  	PUSH AF
0408AF             0693*  	VDU_A
0408AF 49 D7       0001*M 		RST.LIS	10h
0408B1 F1          0694*  	POP AF
0408B2 3C          0695*  	INC A
0408B3 C1          0696*  	POP BC
0408B4 0D          0697*  	DEC C
0408B5 47          0698*  	LD B,A ; save a in B
0408B6 79          0699*  	LD A,C
0408B7 FE 00       0700*  	CP 0
0408B9 78          0701*  	LD A,B ;restore A
0408BA C2 9F 08 04 0702*  	JP NZ,spriafts_loop
0408BE             0703*  
0408BE 21 61 04 04 0704*  	LD HL,spr_frames_count
0408C2 4E          0705*  	LD C,(HL)
0408C3 C9          0706*  	RET
0408C4             0707*  
0408C4             0708*  ; activate sprites
0408C4             0709*  ; a -> sprites count
0408C4             0710*  spr_activate:
0408C4 F5          0711*  	PUSH AF
0408C5             0712*  	VDU 23
0408C5 3E 17       0001*M 		LD	A, function
0408C7 49 D7       0002*M 		RST.LIS	10h
0408C9             0713*  	VDU 27
0408C9 3E 1B       0001*M 		LD	A, function
0408CB 49 D7       0002*M 		RST.LIS	10h
0408CD             0714*  	VDU 7
0408CD 3E 07       0001*M 		LD	A, function
0408CF 49 D7       0002*M 		RST.LIS	10h
0408D1 F1          0715*  	POP AF
0408D2             0716*  	VDU_A
0408D2 49 D7       0001*M 		RST.LIS	10h
0408D4 C9          0717*  	RET
0408D5             0718*  
0408D5             0719*  
0408D5             0720*  ;  a sprite
0408D5             0721*  ; a -> sprite number
0408D5             0722*  ; de -> x
0408D5             0723*  ; hl -> y
0408D5             0724*  spr_set_position:
0408D5 E5          0725*  	PUSH HL
0408D6 D5          0726*  	PUSH DE
0408D7 F5          0727*  	PUSH AF
0408D8             0728*  	VDU 23
0408D8 3E 17       0001*M 		LD	A, function
0408DA 49 D7       0002*M 		RST.LIS	10h
0408DC             0729*  	VDU 27
0408DC 3E 1B       0001*M 		LD	A, function
0408DE 49 D7       0002*M 		RST.LIS	10h
0408E0             0730*  	VDU 4
0408E0 3E 04       0001*M 		LD	A, function
0408E2 49 D7       0002*M 		RST.LIS	10h
0408E4 F1          0731*  	POP AF
0408E5             0732*  	VDU_A
0408E5 49 D7       0001*M 		RST.LIS	10h
0408E7             0733*  
0408E7             0734*  	VDU 23
0408E7 3E 17       0001*M 		LD	A, function
0408E9 49 D7       0002*M 		RST.LIS	10h
0408EB             0735*  	VDU 27
0408EB 3E 1B       0001*M 		LD	A, function
0408ED 49 D7       0002*M 		RST.LIS	10h
0408EF             0736*  	VDU 13
0408EF 3E 0D       0001*M 		LD	A, function
0408F1 49 D7       0002*M 		RST.LIS	10h
0408F3 D1          0737*  	POP DE
0408F4             0738*  	VDU_DE
0408F4 7B          0001*M 		LD A,E
0408F5 49 D7       0002*M 		RST.LIS	10h
0408F7 7A          0003*M 		LD A,D
0408F8 49 D7       0004*M 		RST.LIS	10h
0408FA E1          0739*  	POP HL
0408FB             0740*  	VDU_HL
0408FB 7D          0001*M 		LD A,L
0408FC 49 D7       0002*M 		RST.LIS	10h
0408FE 7C          0003*M 		LD A,H
0408FF 49 D7       0004*M 		RST.LIS	10h
040901 C9          0741*  	RET
040902             0742*  
040902             0743*  ; a -> sprite number
040902             0744*  spr_show:
040902 F5          0745*  	PUSH AF
040903             0746*  	VDU 23
040903 3E 17       0001*M 		LD	A, function
040905 49 D7       0002*M 		RST.LIS	10h
040907             0747*  	VDU 27
040907 3E 1B       0001*M 		LD	A, function
040909 49 D7       0002*M 		RST.LIS	10h
04090B             0748*  	VDU 4
04090B 3E 04       0001*M 		LD	A, function
04090D 49 D7       0002*M 		RST.LIS	10h
04090F F1          0749*  	POP AF
040910             0750*  	VDU_A
040910 49 D7       0001*M 		RST.LIS	10h
040912             0751*  
040912             0752*  	VDU 23
040912 3E 17       0001*M 		LD	A, function
040914 49 D7       0002*M 		RST.LIS	10h
040916             0753*  	VDU 27
040916 3E 1B       0001*M 		LD	A, function
040918 49 D7       0002*M 		RST.LIS	10h
04091A             0754*  	VDU 11
04091A 3E 0B       0001*M 		LD	A, function
04091C 49 D7       0002*M 		RST.LIS	10h
04091E C9          0755*  	RET
04091F             0756*  
04091F             0757*  ; a -> sprite number
04091F             0758*  spr_hide:
04091F F5          0759*  	PUSH AF
040920             0760*  	VDU 23
040920 3E 17       0001*M 		LD	A, function
040922 49 D7       0002*M 		RST.LIS	10h
040924             0761*  	VDU 27
040924 3E 1B       0001*M 		LD	A, function
040926 49 D7       0002*M 		RST.LIS	10h
040928             0762*  	VDU 4
040928 3E 04       0001*M 		LD	A, function
04092A 49 D7       0002*M 		RST.LIS	10h
04092C F1          0763*  	POP AF
04092D             0764*  	VDU_A
04092D 49 D7       0001*M 		RST.LIS	10h
04092F             0765*  
04092F             0766*  	VDU 23
04092F 3E 17       0001*M 		LD	A, function
040931 49 D7       0002*M 		RST.LIS	10h
040933             0767*  	VDU 27
040933 3E 1B       0001*M 		LD	A, function
040935 49 D7       0002*M 		RST.LIS	10h
040937             0768*  	VDU 12
040937 3E 0C       0001*M 		LD	A, function
040939 49 D7       0002*M 		RST.LIS	10h
04093B C9          0769*  	RET
04093C             0770*  
04093C             0771*  ; flip buffer
04093C             0772*  spr_update:
04093C             0773*  	VDU 23
04093C 3E 17       0001*M 		LD	A, function
04093E 49 D7       0002*M 		RST.LIS	10h
040940             0774*  	VDU 27
040940 3E 1B       0001*M 		LD	A, function
040942 49 D7       0002*M 		RST.LIS	10h
040944             0775*  	VDU 15
040944 3E 0F       0001*M 		LD	A, function
040946 49 D7       0002*M 		RST.LIS	10h
040948 C9          0776*  	ret
040949             0777*  
040949             0778*  ; flip buffer
040949             0779*  spr_flip:
040949             0780*  	VDU 23
040949 3E 17       0001*M 		LD	A, function
04094B 49 D7       0002*M 		RST.LIS	10h
04094D             0781*  	VDU 0
04094D 3E 00       0001*M 		LD	A, function
04094F 49 D7       0002*M 		RST.LIS	10h
040951             0782*  	VDU $C3
040951 3E C3       0001*M 		LD	A, function
040953 49 D7       0002*M 		RST.LIS	10h
040955 C9          0783*  	ret
040956             0784*  
040956             0785*  spr_set_next_frame:
040956             0786*  	VDU 23
040956 3E 17       0001*M 		LD	A, function
040958 49 D7       0002*M 		RST.LIS	10h
04095A             0787*  	VDU 27
04095A 3E 1B       0001*M 		LD	A, function
04095C 49 D7       0002*M 		RST.LIS	10h
04095E             0788*  	VDU 8
04095E 3E 08       0001*M 		LD	A, function
040960 49 D7       0002*M 		RST.LIS	10h
040962 C9          0789*  	RET
040963             0790*  
040963             0791*  spr_set_previous_frame:
040963             0792*  	VDU 23
040963 3E 17       0001*M 		LD	A, function
040965 49 D7       0002*M 		RST.LIS	10h
040967             0793*  	VDU 27
040967 3E 1B       0001*M 		LD	A, function
040969 49 D7       0002*M 		RST.LIS	10h
04096B             0794*  	VDU 9
04096B 3E 09       0001*M 		LD	A, function
04096D 49 D7       0002*M 		RST.LIS	10h
04096F C9          0795*  	RET
040970             0796*  
040970             0797*  ; print 'header error'
040970             0798*  spr_print_header_error:
040970             0799*  	vdu 7
040970 3E 07       0001*M 		LD	A, function
040972 49 D7       0002*M 		RST.LIS	10h
040974             0800*  
040974             0801*  	; locate x,y
040974             0802*  	vdu 31
040974 3E 1F       0001*M 		LD	A, function
040976 49 D7       0002*M 		RST.LIS	10h
040978             0803*  	vdu 0
040978 3E 00       0001*M 		LD	A, function
04097A 49 D7       0002*M 		RST.LIS	10h
04097C             0804*  	vdu 0
04097C 3E 00       0001*M 		LD	A, function
04097E 49 D7       0002*M 		RST.LIS	10h
040980             0805*  
040980             0806*  	; print text
040980 21 85 04 04 0807*  	ld hl,spr_header_error
040984 01 00 00 00 0808*  	ld bc,0
040988 AF          0809*  	xor a
040989 49 DF       0810*  	rst.lis $18
04098B             0811*  
04098B C3 29 0A 04 0812*  	jp spr_input_key
04098F             0813*  
04098F             0814*  ; print 'file error'
04098F             0815*  spr_print_file_error:
04098F             0816*  	vdu 7
04098F 3E 07       0001*M 		LD	A, function
040991 49 D7       0002*M 		RST.LIS	10h
040993             0817*  
040993             0818*  	; locate x,y
040993             0819*  	vdu 31
040993 3E 1F       0001*M 		LD	A, function
040995 49 D7       0002*M 		RST.LIS	10h
040997             0820*  	vdu 0
040997 3E 00       0001*M 		LD	A, function
040999 49 D7       0002*M 		RST.LIS	10h
04099B             0821*  	vdu 0
04099B 3E 00       0001*M 		LD	A, function
04099D 49 D7       0002*M 		RST.LIS	10h
04099F             0822*  
04099F             0823*  	; print text
04099F 21 6B 04 04 0824*  	ld hl,spr_file_error
0409A3 01 00 00 00 0825*  	ld bc,0
0409A7 AF          0826*  	xor a
0409A8 49 DF       0827*  	rst.lis $18
0409AA             0828*  
0409AA C3 29 0A 04 0829*  	jp spr_input_key
0409AE             0830*  
0409AE             0831*  ; print 'data error'
0409AE             0832*  spr_print_data_error:
0409AE             0833*  	vdu 7
0409AE 3E 07       0001*M 		LD	A, function
0409B0 49 D7       0002*M 		RST.LIS	10h
0409B2             0834*  
0409B2             0835*  	; locate x,y
0409B2             0836*  	vdu 31
0409B2 3E 1F       0001*M 		LD	A, function
0409B4 49 D7       0002*M 		RST.LIS	10h
0409B6             0837*  	vdu 0
0409B6 3E 00       0001*M 		LD	A, function
0409B8 49 D7       0002*M 		RST.LIS	10h
0409BA             0838*  	vdu 0
0409BA 3E 00       0001*M 		LD	A, function
0409BC 49 D7       0002*M 		RST.LIS	10h
0409BE             0839*  
0409BE             0840*  	; print text
0409BE 21 9F 04 04 0841*  	ld hl,spr_data_error
0409C2 01 00 00 00 0842*  	ld bc,0
0409C6 AF          0843*  	xor a
0409C7 49 DF       0844*  	rst.lis $18
0409C9             0845*  
0409C9 C3 29 0A 04 0846*  	jp spr_input_key
0409CD             0847*  
0409CD             0848*  ; send RGB tint into the VDP
0409CD             0849*  ; a -> color
0409CD             0850*  ; hl -> real palette
0409CD             0851*  spr_send_RGBA_to_VDP:
0409CD F5          0852*  	PUSH AF
0409CE             0853*  
0409CE 21 58 00 04 0854*  	LD HL,spr_real_palette_buffer
0409D2 11 00 00 00 0855*  	LD DE,$000000
0409D6 5F          0856*  	LD E,A
0409D7 16 03       0857*  	LD D,3
0409D9 ED 5C       0858*  	MLT DE
0409DB 19          0859*  	ADD HL,DE
0409DC             0860*  
0409DC E5          0861*  	PUSH HL
0409DD 7E          0862*  	LD A,(HL)
0409DE             0863*  	VDU_A
0409DE 49 D7       0001*M 		RST.LIS	10h
0409E0 E1          0864*  	POP HL
0409E1             0865*  
0409E1 23          0866*  	INC HL
0409E2 E5          0867*  	PUSH HL
0409E3 7E          0868*  	LD A,(HL)
0409E4             0869*  	VDU_A
0409E4 49 D7       0001*M 		RST.LIS	10h
0409E6 E1          0870*  	POP HL
0409E7             0871*  
0409E7 23          0872*  	INC HL
0409E8 E5          0873*  	PUSH HL
0409E9 7E          0874*  	LD A,(HL)
0409EA             0875*  	VDU_A
0409EA 49 D7       0001*M 		RST.LIS	10h
0409EC E1          0876*  	POP HL
0409ED             0877*  
0409ED F1          0878*  	POP AF
0409EE             0879*  
0409EE FE 00       0880*  	CP 0 ; color = 0 ?
0409F0 20 04       0881*  	JR NZ,spr_srtv_not_transparent
0409F2             0882*  
0409F2 3E 00       0883*  	LD A,0 ; alpha = 0
0409F4 18 02       0884*  	JR spr_srtv_write
0409F6             0885*  
0409F6             0886*  spr_srtv_not_transparent:
0409F6 3E FF       0887*  	LD A,255 ; alpha = 255
0409F8             0888*  
0409F8             0889*  spr_srtv_write:
0409F8             0890*  	VDU_A
0409F8 49 D7       0001*M 		RST.LIS	10h
0409FA C9          0891*  	RET
0409FB             0892*  
0409FB             0893*  ; sleep 10 ms (approximatively)
0409FB             0894*  spr_sleep10:
0409FB 01 10 27 00 0895*  	LD BC,10000
0409FF CD 0D 0A 04 0896*  	CALL spr_sleep
040A03 C9          0897*  	RET
040A04             0898*  
040A04             0899*  ; sleep 50 ms (approximatively)
040A04             0900*  spr_sleep50:
040A04 01 50 C3 00 0901*  	LD BC,50000
040A08 CD 0D 0A 04 0902*  	CALL spr_sleep
040A0C C9          0903*  	RET
040A0D             0904*  
040A0D             0905*  ; sleep microseconds
040A0D             0906*  ; input : BC*HL
040A0D             0907*  spr_sleep:
040A0D C5          0908*  	PUSH BC
040A0E 00          0909*  	NOP ; 18 NOPS
040A0F 00          0910*  	NOP ; for 18 MHtz
040A10 00          0911*  	NOP
040A11 00          0912*  	NOP
040A12 00          0913*  	NOP
040A13 00          0914*  	NOP
040A14 00          0915*  	NOP
040A15 00          0916*  	NOP
040A16 00          0917*  	NOP
040A17 00          0918*  	NOP
040A18 00          0919*  	NOP
040A19 00          0920*  	NOP
040A1A 00          0921*  	NOP
040A1B 00          0922*  	NOP
040A1C 00          0923*  	NOP
040A1D 00          0924*  	NOP
040A1E 00          0925*  	NOP
040A1F 00          0926*  	NOP
040A20 C1          0927*  	POP BC
040A21 0B          0928*  	DEC BC
040A22 78          0929*  	LD A,B
040A23 B1          0930*  	OR C
040A24 FE 00       0931*  	CP 0
040A26 20 E5       0932*  	JR NZ,spr_sleep
040A28 C9          0933*  	RET
040A29             0934*  
040A29             0935*  ; get an ascii key value
040A29             0936*  ; (needed in case of file errors)
040A29             0937*  spr_input_key:
040A29 C5          0938*  	push bc
040A2A             0939*  	moscall mos_getkey
040A2A 3E 00       0001*M 		LD	A, function
040A2C 49 CF       0002*M 		RST.LIS	08h
040A2E C1          0940*  	pop bc
040A2F C9          0941*  	ret
040A30             0020   
040A30             0021   ; equ
040A30             0022   
040A30             0023   
040A30             0024   ; start main program ============================
040A30             0025   start:
040A30 F5          0026   	PUSH AF
040A31 C5          0027   	PUSH BC
040A32 D5          0028   	PUSH DE
040A33 DD E5       0029   	PUSH IX
040A35 FD E5       0030   	PUSH IY
040A37             0031   
040A37             0032   	; reset sprites and bitmaps data
040A37             0033   	VDU 23
040A37 3E 17       0001M  		LD	A, function
040A39 49 D7       0002M  		RST.LIS	10h
040A3B             0034   	VDU 27
040A3B 3E 1B       0001M  		LD	A, function
040A3D 49 D7       0002M  		RST.LIS	10h
040A3F             0035   	VDU 16
040A3F 3E 10       0001M  		LD	A, function
040A41 49 D7       0002M  		RST.LIS	10h
040A43             0036   
040A43             0037   	; set mode 8
040A43             0038   	VDU 22
040A43 3E 16       0001M  		LD	A, function
040A45 49 D7       0002M  		RST.LIS	10h
040A47             0039   	VDU 8
040A47 3E 08       0001M  		LD	A, function
040A49 49 D7       0002M  		RST.LIS	10h
040A4B             0040   
040A4B             0041   	; set black paper color
040A4B             0042   	VDU 17
040A4B 3E 11       0001M  		LD	A, function
040A4D 49 D7       0002M  		RST.LIS	10h
040A4F             0043   	VDU 128
040A4F 3E 80       0001M  		LD	A, function
040A51 49 D7       0002M  		RST.LIS	10h
040A53             0044   
040A53             0045   	; hide cursor
040A53             0046   	VDU 23
040A53 3E 17       0001M  		LD	A, function
040A55 49 D7       0002M  		RST.LIS	10h
040A57             0047   	VDU 1
040A57 3E 01       0001M  		LD	A, function
040A59 49 D7       0002M  		RST.LIS	10h
040A5B             0048   	VDU 0
040A5B 3E 00       0001M  		LD	A, function
040A5D 49 D7       0002M  		RST.LIS	10h
040A5F             0049   
040A5F             0050   	; disable logical screen
040A5F             0051   	VDU 23
040A5F 3E 17       0001M  		LD	A, function
040A61 49 D7       0002M  		RST.LIS	10h
040A63             0052   	VDU 0
040A63 3E 00       0001M  		LD	A, function
040A65 49 D7       0002M  		RST.LIS	10h
040A67             0053   	VDU $C0
040A67 3E C0       0001M  		LD	A, function
040A69 49 D7       0002M  		RST.LIS	10h
040A6B             0054   	VDU 0
040A6B 3E 00       0001M  		LD	A, function
040A6D 49 D7       0002M  		RST.LIS	10h
040A6F             0055   
040A6F             0056   	; set pen 15
040A6F             0057   	VDU 17
040A6F 3E 11       0001M  		LD	A, function
040A71 49 D7       0002M  		RST.LIS	10h
040A73             0058   	VDU 15
040A73 3E 0F       0001M  		LD	A, function
040A75 49 D7       0002M  		RST.LIS	10h
040A77             0059   
040A77 21 FF 0A 04 0060   	LD HL,palette1
040A7B CD 88 05 04 0061   	CALL spr_load_palette
040A7F             0062   
040A7F 21 7D 0B 04 0063   	LD HL,sprite1
040A83 3E 00       0064   	LD A,0 ; sprite number
040A85 CD E1 07 04 0065   	CALL spr_init ; c -> frames count
040A89             0066   
040A89 3E 01       0067   	LD A,1 ; 1 sprite activated
040A8B CD C4 08 04 0068   	CALL spr_activate
040A8F             0069   
040A8F 3E 00       0070   	LD A,0
040A91 11 00 00 00 0071   	LD DE,0
040A95 D5          0072   	PUSH DE
040A96 21 70 00 00 0073   	LD HL,112
040A9A CD D5 08 04 0074   	CALL spr_set_position
040A9E             0075   
040A9E 3E 00       0076   	LD A,0
040AA0 CD 02 09 04 0077   	CALL spr_show
040AA4             0078   
040AA4 D1          0079   	POP DE
040AA5             0080   
040AA5             0081   main_loop:
040AA5 D5          0082   	PUSH DE
040AA6 3E 00       0083   	LD A,0
040AA8 21 70 00 00 0084   	LD HL,112
040AAC CD D5 08 04 0085   	CALL spr_set_position
040AB0 CD 3C 09 04 0086   	CALL spr_update
040AB4 CD 04 0A 04 0087   	CALL spr_sleep50
040AB8 CD 56 09 04 0088   	CALL spr_set_next_frame
040ABC D1          0089   	POP DE
040ABD 13          0090   	INC DE
040ABE 13          0091   	INC DE
040ABF 21 40 01 00 0092   	LD HL,320
040AC3 B7          0093   	OR A
040AC4 ED 52       0094   	SBC HL,DE
040AC6 19          0095   	ADD HL,DE
040AC7 C2 A5 0A 04 0096   	JP NZ,main_loop
040ACB             0097   
040ACB             0098   exit_program:
040ACB             0099   	; reset to mode 1
040ACB             0100   	VDU 22
040ACB 3E 16       0001M  		LD	A, function
040ACD 49 D7       0002M  		RST.LIS	10h
040ACF             0101   	VDU 1
040ACF 3E 01       0001M  		LD	A, function
040AD1 49 D7       0002M  		RST.LIS	10h
040AD3             0102   
040AD3             0103   	; enable logical screen
040AD3             0104   	VDU 23
040AD3 3E 17       0001M  		LD	A, function
040AD5 49 D7       0002M  		RST.LIS	10h
040AD7             0105   	VDU 0
040AD7 3E 00       0001M  		LD	A, function
040AD9 49 D7       0002M  		RST.LIS	10h
040ADB             0106   	VDU $C0
040ADB 3E C0       0001M  		LD	A, function
040ADD 49 D7       0002M  		RST.LIS	10h
040ADF             0107   	VDU 1
040ADF 3E 01       0001M  		LD	A, function
040AE1 49 D7       0002M  		RST.LIS	10h
040AE3             0108   
040AE3             0109   	; position the texte cursor at home
040AE3             0110   	VDU 30
040AE3 3E 1E       0001M  		LD	A, function
040AE5 49 D7       0002M  		RST.LIS	10h
040AE7             0111   
040AE7             0112   	; show cursor
040AE7             0113   	VDU 23
040AE7 3E 17       0001M  		LD	A, function
040AE9 49 D7       0002M  		RST.LIS	10h
040AEB             0114   	VDU 1
040AEB 3E 01       0001M  		LD	A, function
040AED 49 D7       0002M  		RST.LIS	10h
040AEF             0115   	VDU 1
040AEF 3E 01       0001M  		LD	A, function
040AF1 49 D7       0002M  		RST.LIS	10h
040AF3             0116   
040AF3 FD E1       0117   	POP IY
040AF5 DD E1       0118   	POP IX
040AF7 D1          0119   	POP DE
040AF8 C1          0120   	POP BC
040AF9 F1          0121   	POP AF
040AFA 21 00 00 00 0122   	LD HL,0
040AFE             0123   
040AFE C9          0124   	RET
040AFF             0125   
040AFF             0126   ; ===============================================
040AFF             0127   palette1:
040AFF 4A 41 53 43 0128   .incbin "data/BountyBoy.pal"
       2D 50 41 4C 
       0D 0A 30 31 
       30 30 0D 0A 
       31 31 0D 0A 
       30 20 30 20 
       30 0D 0A 38 
       35 20 30 20 
       30 0D 0A 30 
       20 30 20 38 
       35 0D 0A 31 
       37 30 20 30 
       20 30 0D 0A 
       32 35 35 20 
       30 20 30 0D 
       0A 32 35 35 
       20 38 35 20 
       38 35 0D 0A 
       31 37 30 20 
       31 37 30 20 
       30 0D 0A 32 
       35 35 20 32 
       35 35 20 30 
       0D 0A 30 20 
       30 20 32 35 
       35 0D 0A 30 
       20 38 35 20 
       32 35 35 0D 
       0A 32 35 35 
       20 32 35 35 
       20 32 35 35 
       0D 0A       
040B7D             0129   
040B7D             0130   sprite1:
040B7D 10 04 10 00 0131   .incbin "data/BountyBoy.spr"
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 01 
       01 03 03 03 
       03 01 01 00 
       00 00 00 00 
       00 00 01 03 
       03 03 03 01 
       03 03 03 01 
       00 00 00 00 
       00 00 01 03 
       01 03 01 03 
       01 03 01 01 
       00 00 00 00 
       01 01 03 01 
       03 01 05 01 
       01 01 01 01 
       01 00 00 01 
       03 03 01 03 
       01 01 05 05 
       05 0A 09 00 
       01 01 00 01 
       03 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 01 
       00 01 01 01 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 00 00 00 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 00 
       00 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 05 
       05 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 02 08 08 
       08 08 00 00 
       00 00 00 00 
       00 00 00 00 
       00 03 04 04 
       04 04 04 04 
       00 00 00 00 
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
       01 03 03 03 
       03 01 01 00 
       00 00 00 00 
       00 00 00 01 
       03 03 03 01 
       03 03 03 01 
       00 00 00 00 
       00 00 01 03 
       01 03 01 03 
       01 03 01 01 
       00 01 00 00 
       00 01 03 01 
       03 01 05 01 
       01 01 01 01 
       01 01 00 00 
       01 03 01 03 
       01 01 05 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 01 01 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 01 01 00 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 00 
       00 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 05 
       05 07 06 00 
       00 00 00 00 
       00 00 00 03 
       02 02 02 00 
       08 08 08 00 
       04 00 00 00 
       00 00 00 00 
       03 03 03 03 
       04 04 04 04 
       00 00 00 00 
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
       01 03 03 03 
       03 01 01 00 
       00 01 00 00 
       00 00 00 00 
       01 03 03 01 
       03 03 03 01 
       01 01 00 00 
       00 00 00 01 
       03 03 01 03 
       01 03 01 01 
       01 00 00 00 
       00 00 01 03 
       03 01 05 01 
       01 01 01 01 
       00 00 00 00 
       00 01 03 03 
       01 01 05 05 
       05 0A 09 00 
       00 00 00 00 
       00 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 00 
       00 01 03 03 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 00 01 03 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 01 
       01 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 04 00 00 
       00 00 00 03 
       02 06 07 05 
       05 07 06 08 
       04 00 00 00 
       00 00 00 03 
       03 02 00 00 
       00 00 08 04 
       04 00 00 00 
       00 00 00 00 
       03 03 03 00 
       00 00 04 04 
       00 00 00 00 
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
       01 03 03 03 
       03 01 01 00 
       00 00 00 00 
       00 00 00 01 
       03 03 03 01 
       03 03 03 01 
       00 00 00 00 
       00 00 01 03 
       01 03 01 03 
       01 03 01 01 
       00 01 00 00 
       00 01 03 01 
       03 01 05 01 
       01 01 01 01 
       01 01 00 00 
       01 03 01 03 
       01 01 05 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 01 01 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 01 01 00 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 00 
       00 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 05 
       05 07 06 00 
       00 00 00 00 
       00 00 00 03 
       02 02 02 00 
       08 08 08 00 
       04 00 00 00 
       00 00 00 00 
       03 03 03 03 
       04 04 04 04 
       00 00 00    
