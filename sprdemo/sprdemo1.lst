PC     Output      Line
040000             0001   ; sprdemo.asm
040000             0002   ; (B.Vignoli)
040000             0003   ;
040000             0004   ; MIT Licence
040000             0005   ; 2024
040000             0006   
040000             0007   .ASSUME ADL=1
040000             0008   .ORG $040000
040000             0009   
040000 C3 DC 09 04 0010   	JP start
040004             0011   
040004             0012   ; MOS header
040004 00 00 00 00 0013   .ALIGN 64
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040040 4D 4F 53 00 0014   .DB "MOS",0,1
       01          
040045             0015   
040045             0016   .FILLBYTE 0
040045             0017   
040045             0018   	INCLUDE "mos_api.inc"
040045             0001*  ;
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ; Created:	03/08/2022
040045             0005*  ; Last Updated:	11/11/2023
040045             0006*  ;
040045             0007*  ; Modinfo:
040045             0008*  ; 05/08/2022:	Added mos_feof
040045             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0013*  ; 13/10/2022:	Added mos_oscli
040045             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0023*  ; 19/05/2023:	Added sysvar_scrMode
040045             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0025*  ; 03/08/2023:	Added mos_setkbvector
040045             0026*  ; 10/08/2023:	Added mos_getkbmap
040045             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0028*  
040045             0029*  ; VDP control (VDU 23, 0, n)
040045             0030*  ;
040045             0031*  vdp_gp:			EQU 	80h
040045             0032*  vdp_keycode:		EQU 	81h
040045             0033*  vdp_cursor:		EQU	82h
040045             0034*  vdp_scrchar:		EQU	83h
040045             0035*  vdp_scrpixel:		EQU	84h
040045             0036*  vdp_audio:		EQU	85h
040045             0037*  vdp_mode:		EQU	86h
040045             0038*  vdp_rtc:		EQU	87h
040045             0039*  vdp_keystate:		EQU	88h
040045             0040*  vdp_logicalcoords:	EQU	C0h
040045             0041*  vdp_terminalmode:	EQU	FFh
040045             0042*  
040045             0043*  ; MOS high level functions
040045             0044*  ;
040045             0045*  mos_getkey:		EQU	00h
040045             0046*  mos_load:		EQU	01h
040045             0047*  mos_save:		EQU	02h
040045             0048*  mos_cd:			EQU	03h
040045             0049*  mos_dir:		EQU	04h
040045             0050*  mos_del:		EQU	05h
040045             0051*  mos_ren:		EQU	06h
040045             0052*  mos_mkdir:		EQU	07h
040045             0053*  mos_sysvars:		EQU	08h
040045             0054*  mos_editline:		EQU	09h
040045             0055*  mos_fopen:		EQU	0Ah
040045             0056*  mos_fclose:		EQU	0Bh
040045             0057*  mos_fgetc:		EQU	0Ch
040045             0058*  mos_fputc:		EQU	0Dh
040045             0059*  mos_feof:		EQU	0Eh
040045             0060*  mos_getError:		EQU	0Fh
040045             0061*  mos_oscli:		EQU	10h
040045             0062*  mos_copy:		EQU	11h
040045             0063*  mos_getrtc:		EQU	12h
040045             0064*  mos_setrtc:		EQU	13h
040045             0065*  mos_setintvector:	EQU	14h
040045             0066*  mos_uopen:		EQU	15h
040045             0067*  mos_uclose:		EQU	16h
040045             0068*  mos_ugetc:		EQU	17h
040045             0069*  mos_uputc:		EQU 	18h
040045             0070*  mos_getfil:		EQU	19h
040045             0071*  mos_fread:		EQU	1Ah
040045             0072*  mos_fwrite:		EQU	1Bh
040045             0073*  mos_flseek:		EQU	1Ch
040045             0074*  mos_setkbvector:	EQU	1Dh
040045             0075*  mos_getkbmap:		EQU	1Eh
040045             0076*  mos_i2c_open:		EQU	1Fh
040045             0077*  mos_i2c_close:		EQU	20h
040045             0078*  mos_i2c_write:		EQU	21h
040045             0079*  mos_i2c_read:		EQU	22h
040045             0080*  
040045             0081*  
040045             0082*  ; FatFS file access functions
040045             0083*  ;
040045             0084*  ffs_fopen:		EQU	80h
040045             0085*  ffs_fclose:		EQU	81h
040045             0086*  ffs_fread:		EQU	82h
040045             0087*  ffs_fwrite:		EQU	83h
040045             0088*  ffs_flseek:		EQU	84h
040045             0089*  ffs_ftruncate:		EQU	85h
040045             0090*  ffs_fsync:		EQU	86h
040045             0091*  ffs_fforward:		EQU	87h
040045             0092*  ffs_fexpand:		EQU	88h
040045             0093*  ffs_fgets:		EQU	89h
040045             0094*  ffs_fputc:		EQU	8Ah
040045             0095*  ffs_fputs:		EQU	8Bh
040045             0096*  ffs_fprintf:		EQU	8Ch
040045             0097*  ffs_ftell:		EQU	8Dh
040045             0098*  ffs_feof:		EQU	8Eh
040045             0099*  ffs_fsize:		EQU	8Fh
040045             0100*  ffs_ferror:		EQU	90h
040045             0101*  
040045             0102*  ; FatFS directory access functions
040045             0103*  ;
040045             0104*  ffs_dopen:		EQU	91h
040045             0105*  ffs_dclose:		EQU	92h
040045             0106*  ffs_dread:		EQU	93h
040045             0107*  ffs_dfindfirst:		EQU	94h
040045             0108*  ffs_dfindnext:		EQU	95h
040045             0109*  
040045             0110*  ; FatFS file and directory management functions
040045             0111*  ;
040045             0112*  ffs_stat:		EQU	96h
040045             0113*  ffs_unlink:		EQU	97h
040045             0114*  ffs_rename:		EQU	98h
040045             0115*  ffs_chmod:		EQU	99h
040045             0116*  ffs_utime:		EQU	9Ah
040045             0117*  ffs_mkdir:		EQU	9Bh
040045             0118*  ffs_chdir:		EQU	9Ch
040045             0119*  ffs_chdrive:		EQU	9Dh
040045             0120*  ffs_getcwd:		EQU	9Eh
040045             0121*  
040045             0122*  ; FatFS volume management and system configuration functions
040045             0123*  ;
040045             0124*  ffs_mount:		EQU	9Fh
040045             0125*  ffs_mkfs:		EQU	A0h
040045             0126*  ffs_fdisk:		EQU	A1h
040045             0127*  ffs_getfree:		EQU	A2h
040045             0128*  ffs_getlabel:		EQU	A3h
040045             0129*  ffs_setlabel:		EQU	A4h
040045             0130*  ffs_setcp:		EQU	A5h
040045             0131*  
040045             0132*  ; File access modes
040045             0133*  ;
040045             0134*  fa_read:		EQU	01h
040045             0135*  fa_write:		EQU	02h
040045             0136*  fa_open_existing:	EQU	00h
040045             0137*  fa_create_new:		EQU	04h
040045             0138*  fa_create_always:	EQU	08h
040045             0139*  fa_open_always:		EQU	10h
040045             0140*  fa_open_append:		EQU	30h
040045             0141*  
040045             0142*  ; System variable indexes for api_sysvars
040045             0143*  ; Index into _sysvars in globals.asm
040045             0144*  ;
040045             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040045             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040045             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040045             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040045             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040045             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040045             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040045             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040045             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040045             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040045             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040045             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040045             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040045             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040045             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040045             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040045             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040045             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040045             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040045             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040045             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040045             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040045             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040045             0177*  
040045             0178*  ; Flags for the VPD protocol
040045             0179*  ;
040045             0180*  vdp_pflag_cursor:	EQU	00000001b
040045             0181*  vdp_pflag_scrchar:	EQU	00000010b
040045             0182*  vdp_pflag_point:	EQU	00000100b
040045             0183*  vdp_pflag_audio:	EQU	00001000b
040045             0184*  vdp_pflag_mode:		EQU	00010000b
040045             0185*  vdp_pflag_rtc:		EQU	00100000b
040045             0186*  vdp_pflag_mouse:	EQU	01000000b
040045             0187*  vdp_pflag_buffered:	EQU	10000000b
040045             0188*  
040045             0189*  ;
040045             0190*  ; Macro for calling the API
040045             0191*  ; Parameters:
040045             0192*  ; - function: One of the function numbers listed above
040045             0193*  ;
040045             0194*  	MACRO moscall function
040045             0195*  		LD	A, function
040045             0196*  		RST.LIS	08h
040045             0197*  	ENDMACRO
040045             0198*  
040045             0199*  	MACRO vdu function
040045             0200*  		LD	A, function
040045             0201*  		RST.LIS	10h
040045             0202*  	ENDMACRO
040045             0203*  
040045             0204*  	MACRO vdu_a
040045             0205*  		RST.LIS	10h
040045             0206*  	ENDMACRO
040045             0207*  
040045             0208*  	MACRO VDU_DE
040045             0209*  		LD A,E
040045             0210*  		RST.LIS	10h
040045             0211*  		LD A,D
040045             0212*  		RST.LIS	10h
040045             0213*  	ENDMACRO
040045             0214*  
040045             0215*  	MACRO VDU_HL
040045             0216*  		LD A,L
040045             0217*  		RST.LIS	10h
040045             0218*  		LD A,H
040045             0219*  		RST.LIS	10h
040045             0220*  	ENDMACRO
040045             0019   	INCLUDE "sprites.inc"
040045             0001*  ; sprites.inc
040045             0002*  ; (B.Vignoli)
040045             0003*  ;
040045             0004*  ; MIT Licence
040045             0005*  ; 2024
040045             0006*  
040045             0007*  ;===================================
040045             0008*  ; equ's
040045             0009*  HEADER_BUFFER_SIZE:	equ 16
040045             0010*  
040045             0011*  MAX_PAL_DATA: equ 836 ; max palette chars
040045             0012*  MAX_PAL_DATA_HI: equ 03h
040045             0013*  MAX_PAL_DATA_LO: equ 44h
040045             0014*  
040045             0015*  ;===================================
040045             0016*  ; data
040045             0017*  header:
040045 4A 41 53 43 0018*  	db "JASC-PAL",13,10
       2D 50 41 4C 
       0D 0A       
04004F 30 31 30 30 0019*  	db "0100",13,10
       0D 0A       
040055             0020*  
040055             0021*  color_buffer:
040055 00 00 00    0022*  	db 0,0,0
040058             0023*  
040058             0024*  real_palette_buffer:
040058             0025*  	ds 192
040118             0026*  
040118             0027*  palette_buffer:
040118             0028*  	ds MAX_PAL_DATA + 1
04045D             0029*  
04045D             0030*  temp_chars_buffer:
04045D 00 00 00 00 0031*  	db 0,0,0,0
040461             0032*  
040461             0033*  frames_count:
040461 00          0034*  	db 0
040462             0035*  
040462             0036*  bitmap_size:
040462 00          0037*  	db 0
040463             0038*  
040463             0039*  start_bitmap:
040463 00          0040*  	db 0
040464             0041*  
040464             0042*  current_bitmap:
040464 00          0043*  	db 0
040465             0044*  
040465             0045*  current_sprite:
040465 00          0046*  	db 0
040466             0047*  
040466             0048*  ; real number of colors
040466             0049*  new_colors_count:
040466 00          0050*  	db 0
040467             0051*  
040467             0052*  colors_count:
040467 00          0053*  	db 0
040468             0054*  
040468             0055*  red_tint:
040468 00          0056*  	db 0
040469             0057*  
040469             0058*  green_tint:
040469 00          0059*  	db 0
04046A             0060*  
04046A             0061*  blue_tint:
04046A 00          0062*  	db 0
04046B             0063*  
04046B             0064*  ; file error message
04046B             0065*  file_error:
04046B 46 69 6C 65 0066*  	db "File error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
040485             0067*  
040485             0068*  ; header error message
040485             0069*  header_error:
040485 48 65 61 64 0070*  	db "Header error !           ",0
       65 72 20 65 
       72 72 6F 72 
       20 21 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
04049F             0071*  
04049F             0072*  ; data error message
04049F             0073*  data_error:
04049F 44 61 74 61 0074*  	db "Data error !             ",0
       20 65 72 72 
       6F 72 20 21 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 00       
0404B9             0075*  
0404B9             0076*  ;===================================
0404B9             0077*  ; load a palette
0404B9             0078*  ; the right mode must
0404B9             0079*  ; be set before
0404B9             0080*  ; hl -> pointer to palette
0404B9             0081*  load_palette:
0404B9             0082*  	; compare loaded header with needed header
0404B9 11 45 00 04 0083*  	ld de,header
0404BD 06 10       0084*  	ld b,HEADER_BUFFER_SIZE
0404BF             0085*  
0404BF             0086*  lp_compare:
0404BF 1A          0087*  	ld a,(de)
0404C0 BE          0088*  	cp (hl)
0404C1 C2 2B 05 04 0089*  	jp nz,lp_header_error
0404C5             0090*  
0404C5 13          0091*  	inc de
0404C6 23          0092*  	inc hl
0404C7 05          0093*  	dec b
0404C8             0094*  
0404C8 78          0095*  	ld a,b
0404C9 FE 00       0096*  	cp 0
0404CB C2 BF 04 04 0097*  	jp nz,lp_compare
0404CF             0098*  
0404CF E5          0099*  	push hl
0404D0 DD E1       0100*  	pop ix
0404D2             0101*  
0404D2             0102*  	; prepare to read the number of colors
0404D2 21 55 00 04 0103*  	ld hl,color_buffer
0404D6             0104*  
0404D6             0105*  lp_getcount:
0404D6             0106*  	; read a string for colors count
0404D6 DD 7E 00    0107*  	ld a,(ix+0)
0404D9 DD 23       0108*  	inc ix
0404DB             0109*  
0404DB FE 30       0110*  	cp 48 ; < 0
0404DD 38 0A       0111*  	jr c,lpgc_next
0404DF FE 3A       0112*  	cp 58 ; > 9
0404E1 D2 2B 06 04 0113*  	jp nc,lp_data_error
0404E5             0114*  
0404E5 77          0115*  	ld (hl),a
0404E6 23          0116*  	inc hl
0404E7 18 ED       0117*  	jr lp_getcount
0404E9             0118*  
0404E9             0119*  lpgc_next:
0404E9 F5          0120*  	push af
0404EA 3E 0D       0121*  	ld a,13
0404EC 77          0122*  	ld (hl),a ; store CR
0404ED F1          0123*  	pop af
0404EE             0124*  
0404EE             0125*  	; test CR
0404EE FE 0D       0126*  	cp 13
0404F0 C2 21 05 04 0127*  	jp nz,lp_close_error
0404F4             0128*  
0404F4             0129*  	; read LF
0404F4 DD 7E 00    0130*  	ld a,(ix+0)
0404F7 DD 23       0131*  	inc ix
0404F9             0132*  
0404F9             0133*  	; test LF
0404F9 FE 0A       0134*  	cp 10
0404FB C2 21 05 04 0135*  	jp nz,lp_close_error
0404FF             0136*  
0404FF             0137*  	; prepare to read color strings
0404FF 11 00 00 00 0138*  	ld de,#000000
040503 21 18 01 04 0139*  	ld hl,palette_buffer
040507             0140*  
040507             0141*  lp_load_pal_loop:
040507             0142*  	; read colors data
040507 DD 7E 00    0143*  	ld a,(ix+0)
04050A DD 23       0144*  	inc ix
04050C             0145*  
04050C 77          0146*  	ld (hl),a ; store loaded char in palette buffer
04050D 23          0147*  	inc hl
04050E 13          0148*  	inc de ; count chars
04050F 7A          0149*  	ld a,d
040510 FE 03       0150*  	cp MAX_PAL_DATA_HI
040512 DA 07 05 04 0151*  	jp c,lp_load_pal_loop
040516 7B          0152*  	ld a,e
040517 FE 44       0153*  	cp MAX_PAL_DATA_LO
040519 DA 07 05 04 0154*  	jp c,lp_load_pal_loop
04051D C3 33 05 04 0155*  	jp lp_read_palette_data
040521             0156*  
040521             0157*  lp_close_error:
040521 C5          0158*  	push bc
040522             0159*  
040522             0160*  	; read error
040522 CD C2 08 04 0161*  	call print_file_error
040526             0162*  
040526 C1          0163*  	pop bc
040527 C3 2A 06 04 0164*  	jp lp_exit
04052B             0165*  
04052B             0166*  lp_header_error:
04052B             0167*  	; write error
04052B CD A2 08 04 0168*  	call print_header_error
04052F C3 2A 06 04 0169*  	jp lp_exit
040533             0170*  
040533             0171*  lp_read_palette_data:
040533             0172*  	; read the number of colors we have in the palette
040533 21 55 00 04 0173*  	ld hl,color_buffer
040537 7E          0174*  	ld a,(hl)
040538 47          0175*  	ld b,a
040539 23          0176*  	inc hl
04053A 7E          0177*  	ld a,(hl)
04053B 4F          0178*  	ld c,a ; bc = 1st char, 2nd char or CR
04053C             0179*  
04053C             0180*  	; first is a char number ?
04053C 78          0181*  	ld a,b
04053D FE 30       0182*  	cp 48
04053F DA 2B 06 04 0183*  	jp c,lp_data_error
040543 FE 3A       0184*  	cp 58
040545 D2 2B 06 04 0185*  	jp nc,lp_data_error
040549             0186*  
040549 79          0187*  	ld a,c
04054A FE 0D       0188*  	cp 13
04054C C2 6E 05 04 0189*  	jp nz,lp_two_numbers
040550             0190*  
040550             0191*  ; only one number
040550 78          0192*  	ld a,b
040551 D6 30       0193*  	sub 48
040553             0194*  
040553 21 66 04 04 0195*  	ld hl,new_colors_count
040557 77          0196*  	ld (hl),a
040558             0197*  
040558 FE 00       0198*  	cp 0
04055A CA 2B 06 04 0199*  	jp z,lp_data_error
04055E FE 03       0200*  	cp 3
040560 DA A3 05 04 0201*  	jp c,lp_two_colors
040564 FE 05       0202*  	cp 5
040566 DA B9 05 04 0203*  	jp c,lp_four_colors
04056A             0204*  
04056A C3 CF 05 04 0205*  	jp lp_sixteen_colors
04056E             0206*  
04056E             0207*  ; two numbers
04056E             0208*  lp_two_numbers:
04056E 79          0209*  	ld a,c
04056F FE 30       0210*  	cp 48
040571 DA 2B 06 04 0211*  	jp c,lp_data_error
040575 FE 3A       0212*  	cp 58
040577 D2 2B 06 04 0213*  	jp nc,lp_data_error
04057B             0214*  
04057B 78          0215*  	ld a,b
04057C D6 30       0216*  	sub 48
04057E 01 00 00 00 0217*  	ld bc,#000000
040582 47          0218*  	ld b,a
040583 0E 0A       0219*  	ld c,10
040585 ED 4C       0220*  	mlt bc
040587 81          0221*  	add a,c
040588             0222*  
040588 21 66 04 04 0223*  	ld hl,new_colors_count
04058C 77          0224*  	ld (hl),a
04058D             0225*  
04058D FE 0A       0226*  	cp 10
04058F DA 2B 06 04 0227*  	jp c,lp_data_error
040593 FE 11       0228*  	cp 17
040595 DA CF 05 04 0229*  	jp c,lp_sixteen_colors
040599 FE 41       0230*  	cp 65
04059B DA E5 05 04 0231*  	jp c,lp_sixty_four_colors
04059F             0232*  
04059F C3 2B 06 04 0233*  	jp lp_data_error
0405A3             0234*  
0405A3             0235*  lp_two_colors:
0405A3 21 67 04 04 0236*  	ld hl,colors_count
0405A7 3E 02       0237*  	ld a,2
0405A9 77          0238*  	ld (hl),a
0405AA             0239*  
0405AA             0240*  lptc_done:
0405AA 21 66 04 04 0241*  	ld hl,new_colors_count
0405AE 7E          0242*  	ld a,(hl) ; real number of coulours
0405AF 06 00       0243*  	ld b,0 ; start wit color 0
0405B1 21 18 01 04 0244*  	ld hl,palette_buffer ; palette will be got here
0405B5 C3 FB 05 04 0245*  	jp lp_read_colors
0405B9             0246*  
0405B9             0247*  lp_four_colors:
0405B9 21 67 04 04 0248*  	ld hl,colors_count
0405BD 3E 04       0249*  	ld a,4
0405BF 77          0250*  	ld (hl),a
0405C0             0251*  
0405C0             0252*  lpfc_done:
0405C0 21 66 04 04 0253*  	ld hl,new_colors_count
0405C4 7E          0254*  	ld a,(hl) ; real number of coulours
0405C5 06 00       0255*  	ld b,0 ; start wit color 0
0405C7 21 18 01 04 0256*  	ld hl,palette_buffer ; palette will be got here
0405CB C3 FB 05 04 0257*  	jp lp_read_colors
0405CF             0258*  
0405CF             0259*  lp_sixteen_colors:
0405CF 21 67 04 04 0260*  	ld hl,colors_count
0405D3 3E 10       0261*  	ld a,16
0405D5 77          0262*  	ld (hl),a
0405D6             0263*  
0405D6             0264*  lpsc_done:
0405D6 21 66 04 04 0265*  	ld hl,new_colors_count
0405DA 7E          0266*  	ld a,(hl) ; real number of coulours
0405DB 06 00       0267*  	ld b,0 ; start wit color 0
0405DD 21 18 01 04 0268*  	ld hl,palette_buffer ; palette will be got here
0405E1 C3 FB 05 04 0269*  	jp lp_read_colors
0405E5             0270*  
0405E5             0271*  lp_sixty_four_colors:
0405E5 21 67 04 04 0272*  	ld hl,colors_count
0405E9 3E 40       0273*  	ld a,64
0405EB 77          0274*  	ld (hl),a
0405EC             0275*  
0405EC             0276*  lpsfc_done:
0405EC 21 66 04 04 0277*  	ld hl,new_colors_count
0405F0 7E          0278*  	ld a,(hl) ; real number of coulours
0405F1 06 00       0279*  	ld b,0 ; start wit color 0
0405F3 21 18 01 04 0280*  	ld hl,palette_buffer ; palette will be taken here
0405F7 C3 FB 05 04 0281*  	jp lp_read_colors
0405FB             0282*  
0405FB             0283*  lp_read_colors:
0405FB F5          0284*  	push af
0405FC             0285*  
0405FC CD 33 06 04 0286*  	call lp_read_tint ; read red tint
040600             0287*  
040600 E5          0288*  	push hl
040601 21 68 04 04 0289*  	ld hl,red_tint
040605 77          0290*  	ld (hl),a
040606 E1          0291*  	pop hl
040607             0292*  
040607 CD 33 06 04 0293*  	call lp_read_tint ; read green tint
04060B             0294*  
04060B E5          0295*  	push hl
04060C 21 69 04 04 0296*  	ld hl,green_tint
040610 77          0297*  	ld (hl),a
040611 E1          0298*  	pop hl
040612             0299*  
040612 CD 33 06 04 0300*  	call lp_read_tint ; read blue tint
040616             0301*  
040616 E5          0302*  	push hl
040617 21 6A 04 04 0303*  	ld hl,blue_tint
04061B 77          0304*  	ld (hl),a
04061C E1          0305*  	pop hl
04061D             0306*  
04061D CD BF 06 04 0307*  	call lp_set_tint
040621             0308*  
040621 F1          0309*  	pop af
040622             0310*  
040622 04          0311*  	inc b ; increment number of colors
040623 3D          0312*  	dec a ; decrement real number of colors
040624 FE 00       0313*  	cp 0
040626 C2 FB 05 04 0314*  	jp nz,lp_read_colors
04062A             0315*  
04062A             0316*  lp_exit:
04062A C9          0317*  	ret
04062B             0318*  
04062B             0319*  lp_data_error:
04062B C3 E2 08 04 0320*  	jp print_data_error
04062F             0321*  
04062F             0322*  lp_file_error:
04062F C3 C2 08 04 0323*  	jp print_file_error
040633             0324*  
040633             0325*  lp_read_tint:
040633 0E 00       0326*  	ld c,0 ; number of chars readen for a single string number
040635 11 5D 04 04 0327*  	ld de,temp_chars_buffer ; temp buffer for a string number
040639             0328*  
040639             0329*  	; read next string number
040639 CD A3 06 04 0330*  	call lprt_read_chars
04063D             0331*  
04063D 79          0332*  	ld a,c
04063E FE 00       0333*  	cp 0 ; no numbers
040640 CA 5A 06 04 0334*  	jp z,lprt_wrong_exit
040644 FE 04       0335*  	cp 4 ; too many numbers
040646 D2 5A 06 04 0336*  	jp nc,lprt_wrong_exit
04064A             0337*  
04064A FE 03       0338*  	cp 3
04064C 28 29       0339*  	jr z,lprt_three_int
04064E             0340*  
04064E FE 02       0341*  	cp 2
040650 28 0A       0342*  	jr z,lprt_two_int
040652             0343*  
040652             0344*  	; one int only
040652 11 5D 04 04 0345*  	ld de,temp_chars_buffer
040656 1A          0346*  	ld a,(de)
040657 D6 30       0347*  	sub 48
040659 C9          0348*  	ret
04065A             0349*  
04065A             0350*  lprt_wrong_exit:
04065A AF          0351*  	xor a
04065B C9          0352*  	ret
04065C             0353*  
04065C             0354*  ; two int
04065C             0355*  lprt_two_int:
04065C C5          0356*  	push bc
04065D 11 5D 04 04 0357*  	ld de,temp_chars_buffer
040661 1A          0358*  	ld a,(de)
040662 D6 30       0359*  	sub 48
040664 D5          0360*  	push de
040665 11 00 00 00 0361*  	ld de,#000000
040669 5F          0362*  	ld e,a
04066A 16 0A       0363*  	ld d,10
04066C ED 5C       0364*  	mlt de
04066E 43          0365*  	ld b,e
04066F D1          0366*  	pop de
040670 13          0367*  	inc de
040671 1A          0368*  	ld a,(de)
040672 D6 30       0369*  	sub 48
040674 80          0370*  	add a,b ; full int value is here
040675 C1          0371*  	pop bc
040676 C9          0372*  	ret
040677             0373*  
040677             0374*  ; three int
040677             0375*  lprt_three_int:
040677 C5          0376*  	push bc
040678 11 5D 04 04 0377*  	ld de,temp_chars_buffer
04067C 1A          0378*  	ld a,(de)
04067D D6 30       0379*  	sub 48
04067F D5          0380*  	push de
040680 11 00 00 00 0381*  	ld de,#000000
040684 5F          0382*  	ld e,a
040685 16 64       0383*  	ld d,100
040687 ED 5C       0384*  	mlt de
040689 43          0385*  	ld b,e
04068A D1          0386*  	pop de
04068B 13          0387*  	inc de
04068C 1A          0388*  	ld a,(de)
04068D D6 30       0389*  	sub 48
04068F D5          0390*  	push de
040690 11 00 00 00 0391*  	ld de,#000000
040694 5F          0392*  	ld e,a
040695 16 0A       0393*  	ld d,10
040697 ED 5C       0394*  	mlt de
040699 4B          0395*  	ld c,e
04069A D1          0396*  	pop de
04069B 13          0397*  	inc de
04069C 1A          0398*  	ld a,(de)
04069D D6 30       0399*  	sub 48
04069F 81          0400*  	add a,c
0406A0 80          0401*  	add a,b ; full int value is here
0406A1 C1          0402*  	pop bc
0406A2 C9          0403*  	ret
0406A3             0404*  
0406A3             0405*  lprt_read_chars:
0406A3 3E 0D       0406*  	ld a,13
0406A5 12          0407*  	ld (de),a ; store eol as next default temp char
0406A6             0408*  
0406A6 7E          0409*  	ld a,(hl) ; get the new char in the palette buffer
0406A7 23          0410*  	inc hl
0406A8             0411*  
0406A8 FE 20       0412*  	cp 32
0406AA C8          0413*  	ret z ; ret if space
0406AB FE 0D       0414*  	cp 13
0406AD 28 F4       0415*  	jr z,lprt_read_chars ; loop if CR
0406AF FE 0A       0416*  	cp 10
0406B1 C8          0417*  	ret z ; ret if LF
0406B2 FE 30       0418*  	cp 48
0406B4 D8          0419*  	ret c ; ret if not number
0406B5 FE 3A       0420*  	cp 58
0406B7 D0          0421*  	ret nc ; ret if not number
0406B8             0422*  
0406B8             0423*  ; found a number, store it
0406B8 12          0424*  	ld (de),a
0406B9 13          0425*  	inc de
0406BA 0C          0426*  	inc c
0406BB C3 A3 06 04 0427*  	jp lprt_read_chars
0406BF             0428*  
0406BF             0429*  ; set tint
0406BF             0430*  lp_set_tint:
0406BF F5          0431*  	push af
0406C0 C5          0432*  	push bc
0406C1 D5          0433*  	push de
0406C2 E5          0434*  	push hl
0406C3             0435*  
0406C3 C5          0436*  	push bc
0406C4             0437*  
0406C4             0438*  	; store palette in the real palette buffer
0406C4             0439*  	; to use RGB values later with sprites
0406C4 E5          0440*  	push hl
0406C5 D5          0441*  	push de
0406C6 C5          0442*  	push bc
0406C7 21 58 00 04 0443*  	ld hl,real_palette_buffer
0406CB 11 00 00 00 0444*  	ld de,$000000
0406CF 58          0445*  	ld e,b
0406D0 16 03       0446*  	ld d,3
0406D2 ED 5C       0447*  	mlt de
0406D4 19          0448*  	add hl,de
0406D5 11 68 04 04 0449*  	ld de,red_tint
0406D9 1A          0450*  	ld a,(de)
0406DA 77          0451*  	ld (hl),a ; red
0406DB 23          0452*  	inc hl
0406DC 11 69 04 04 0453*  	ld de,green_tint
0406E0 1A          0454*  	ld a,(de)
0406E1 77          0455*  	ld (hl),a ; green
0406E2 23          0456*  	inc hl
0406E3 11 6A 04 04 0457*  	ld de,blue_tint
0406E7 1A          0458*  	ld a,(de)
0406E8 77          0459*  	ld (hl),a ; blue
0406E9 C1          0460*  	pop bc
0406EA D1          0461*  	pop de
0406EB E1          0462*  	pop hl
0406EC             0463*  
0406EC             0464*  	vdu 19
0406EC 3E 13       0001*M 		LD	A, function
0406EE 49 D7       0002*M 		RST.LIS	10h
0406F0 C1          0465*  	pop bc
0406F1 78          0466*  	ld a,b
0406F2             0467*  	vdu_a
0406F2 49 D7       0001*M 		RST.LIS	10h
0406F4             0468*  	vdu 255
0406F4 3E FF       0001*M 		LD	A, function
0406F6 49 D7       0002*M 		RST.LIS	10h
0406F8             0469*  
0406F8 21 68 04 04 0470*  	ld hl,red_tint
0406FC 7E          0471*  	ld a,(hl)
0406FD             0472*  	vdu_a
0406FD 49 D7       0001*M 		RST.LIS	10h
0406FF             0473*  
0406FF 21 69 04 04 0474*  	ld hl,green_tint
040703 7E          0475*  	ld a,(hl)
040704             0476*  	vdu_a
040704 49 D7       0001*M 		RST.LIS	10h
040706             0477*  
040706 21 6A 04 04 0478*  	ld hl,blue_tint
04070A 7E          0479*  	ld a,(hl)
04070B             0480*  	vdu_a
04070B 49 D7       0001*M 		RST.LIS	10h
04070D             0481*  
04070D E1          0482*  	pop hl
04070E D1          0483*  	pop de
04070F C1          0484*  	pop bc
040710 F1          0485*  	pop af
040711 C9          0486*  	ret
040712             0487*  
040712             0488*  ; init a sprite
040712             0489*  ; hl -> address of sprite data
040712             0490*  ; a -> current sprite number
040712             0491*  ; c -> return number of frames
040712             0492*  init_sprite:
040712 E5          0493*  	PUSH HL
040713 DD E1       0494*  	POP IX
040715             0495*  
040715 21 61 04 04 0496*  	LD HL,frames_count
040719 DD 4E 01    0497*  	LD C,(IX+1) ; get frames count
04071C 71          0498*  	ld (HL),C
04071D             0499*  
04071D 21 62 04 04 0500*  	LD HL,bitmap_size
040721 DD 46 02    0501*  	LD B,(IX+2) ; get bitmap size
040724 70          0502*  	ld (HL),B
040725             0503*  
040725 DD 23       0504*  	INC IX
040727 DD 23       0505*  	INC IX
040729 DD 23       0506*  	INC IX
04072B             0507*  
04072B 21 65 04 04 0508*  	LD HL,current_sprite
04072F 77          0509*  	LD (HL),A
040730             0510*  
040730 21 64 04 04 0511*  	LD HL,current_bitmap
040734 11 63 04 04 0512*  	LD DE,start_bitmap
040738 7E          0513*  	LD A,(HL)
040739 12          0514*  	LD (DE),A
04073A             0515*  
04073A             0516*  is_big_loop:
04073A C5          0517*  	PUSH BC
04073B DD E5       0518*  	PUSH IX
04073D             0519*  
04073D             0520*  	; select bitmap
04073D             0521*  	VDU 23
04073D 3E 17       0001*M 		LD	A, function
04073F 49 D7       0002*M 		RST.LIS	10h
040741             0522*  	VDU 27
040741 3E 1B       0001*M 		LD	A, function
040743 49 D7       0002*M 		RST.LIS	10h
040745             0523*  	VDU 0
040745 3E 00       0001*M 		LD	A, function
040747 49 D7       0002*M 		RST.LIS	10h
040749 21 64 04 04 0524*  	LD HL,current_bitmap
04074D 7E          0525*  	LD A,(HL)
04074E E5          0526*  	PUSH HL
04074F             0527*  	VDU_A
04074F 49 D7       0001*M 		RST.LIS	10h
040751 E1          0528*  	POP HL
040752 3C          0529*  	INC A
040753 77          0530*  	LD (HL),A
040754             0531*  
040754             0532*  	; width & height -> de, hl
040754 21 62 04 04 0533*  	LD HL,bitmap_size
040758 11 00 00 00 0534*  	LD DE,$000000
04075C 5E          0535*  	LD E,(HL)
04075D D5          0536*  	PUSH DE
04075E E1          0537*  	POP HL
04075F             0538*  
04075F             0539*  	; get bitmap data
04075F D5          0540*  	PUSH DE
040760 E5          0541*  	PUSH HL
040761 D5          0542*  	PUSH DE
040762             0543*  	VDU 23
040762 3E 17       0001*M 		LD	A, function
040764 49 D7       0002*M 		RST.LIS	10h
040766             0544*  	VDU 27
040766 3E 1B       0001*M 		LD	A, function
040768 49 D7       0002*M 		RST.LIS	10h
04076A             0545*  	VDU 1
04076A 3E 01       0001*M 		LD	A, function
04076C 49 D7       0002*M 		RST.LIS	10h
04076E D1          0546*  	POP DE
04076F             0547*  	VDU_DE
04076F 7B          0001*M 		LD A,E
040770 49 D7       0002*M 		RST.LIS	10h
040772 7A          0003*M 		LD A,D
040773 49 D7       0004*M 		RST.LIS	10h
040775 E1          0548*  	POP HL
040776             0549*  	VDU_HL
040776 7D          0001*M 		LD A,L
040777 49 D7       0002*M 		RST.LIS	10h
040779 7C          0003*M 		LD A,H
04077A 49 D7       0004*M 		RST.LIS	10h
04077C D1          0550*  	POP DE
04077D 53          0551*  	LD D,E
04077E ED 5C       0552*  	MLT DE ; de -> size of data
040780             0553*  
040780 DD E1       0554*  	POP IX
040782 C1          0555*  	POP BC
040783             0556*  
040783             0557*  is_loop:
040783 DD 7E 00    0558*  	LD A,(IX+0)
040786 DD E5       0559*  	PUSH IX
040788 D5          0560*  	PUSH DE
040789 C5          0561*  	PUSH BC
04078A CD 09 09 04 0562*  	CALL send_RGBA_to_VDP
04078E C1          0563*  	POP BC
04078F D1          0564*  	POP DE
040790 DD E1       0565*  	POP IX
040792 DD 23       0566*  	INC IX
040794 1B          0567*  	DEC DE
040795 7A          0568*  	LD A,D
040796 B3          0569*  	OR E
040797 FE 00       0570*  	CP 0
040799 20 E8       0571*  	JR NZ,is_loop
04079B             0572*  
04079B 0D          0573*  	DEC C
04079C 79          0574*  	LD A,C
04079D FE 00       0575*  	CP 0
04079F 28 04       0576*  	JR Z,is_add_frames_to_sprite
0407A1 C3 3A 07 04 0577*  	JP is_big_loop
0407A5             0578*  
0407A5             0579*  is_add_frames_to_sprite:
0407A5             0580*  	; prepare current sprite
0407A5 21 65 04 04 0581*  	LD HL,current_sprite
0407A9 7E          0582*  	LD A,(HL)
0407AA             0583*  
0407AA             0584*  	; select sprite
0407AA F5          0585*  	PUSH AF
0407AB             0586*  	VDU 23
0407AB 3E 17       0001*M 		LD	A, function
0407AD 49 D7       0002*M 		RST.LIS	10h
0407AF             0587*  	VDU 27
0407AF 3E 1B       0001*M 		LD	A, function
0407B1 49 D7       0002*M 		RST.LIS	10h
0407B3             0588*  	VDU 4
0407B3 3E 04       0001*M 		LD	A, function
0407B5 49 D7       0002*M 		RST.LIS	10h
0407B7 F1          0589*  	POP AF
0407B8             0590*  	VDU_A
0407B8 49 D7       0001*M 		RST.LIS	10h
0407BA             0591*  
0407BA             0592*  	; clear frames in sprite
0407BA             0593*  	VDU 23
0407BA 3E 17       0001*M 		LD	A, function
0407BC 49 D7       0002*M 		RST.LIS	10h
0407BE             0594*  	VDU 27
0407BE 3E 1B       0001*M 		LD	A, function
0407C0 49 D7       0002*M 		RST.LIS	10h
0407C2             0595*  	VDU 5
0407C2 3E 05       0001*M 		LD	A, function
0407C4 49 D7       0002*M 		RST.LIS	10h
0407C6             0596*  
0407C6 21 61 04 04 0597*  	LD HL,frames_count
0407CA 4E          0598*  	LD C,(HL) ; c -> frames count
0407CB 21 63 04 04 0599*  	LD HL,start_bitmap
0407CF 7E          0600*  	LD A,(HL) ; a -> start bitmap
0407D0             0601*  
0407D0             0602*  isafts_loop:
0407D0 C5          0603*  	PUSH BC
0407D1 F5          0604*  	PUSH AF
0407D2             0605*  	VDU 23
0407D2 3E 17       0001*M 		LD	A, function
0407D4 49 D7       0002*M 		RST.LIS	10h
0407D6             0606*  	VDU 27
0407D6 3E 1B       0001*M 		LD	A, function
0407D8 49 D7       0002*M 		RST.LIS	10h
0407DA             0607*  	VDU 6
0407DA 3E 06       0001*M 		LD	A, function
0407DC 49 D7       0002*M 		RST.LIS	10h
0407DE F1          0608*  	POP AF
0407DF F5          0609*  	PUSH AF
0407E0             0610*  	VDU_A
0407E0 49 D7       0001*M 		RST.LIS	10h
0407E2 F1          0611*  	POP AF
0407E3 3C          0612*  	INC A
0407E4 C1          0613*  	POP BC
0407E5 0D          0614*  	DEC C
0407E6 47          0615*  	LD B,A ; save a in B
0407E7 79          0616*  	LD A,C
0407E8 FE 00       0617*  	CP 0
0407EA 78          0618*  	LD A,B ;restore A
0407EB C2 D0 07 04 0619*  	JP NZ,isafts_loop
0407EF             0620*  
0407EF 21 61 04 04 0621*  	LD HL,frames_count
0407F3 4E          0622*  	LD C,(HL)
0407F4 C9          0623*  	RET
0407F5             0624*  
0407F5             0625*  ; activate sprites
0407F5             0626*  ; a -> sprites count
0407F5             0627*  activate_sprites:
0407F5 F5          0628*  	PUSH AF
0407F6             0629*  	VDU 23
0407F6 3E 17       0001*M 		LD	A, function
0407F8 49 D7       0002*M 		RST.LIS	10h
0407FA             0630*  	VDU 27
0407FA 3E 1B       0001*M 		LD	A, function
0407FC 49 D7       0002*M 		RST.LIS	10h
0407FE             0631*  	VDU 7
0407FE 3E 07       0001*M 		LD	A, function
040800 49 D7       0002*M 		RST.LIS	10h
040802 F1          0632*  	POP AF
040803             0633*  	VDU_A
040803 49 D7       0001*M 		RST.LIS	10h
040805 C9          0634*  	RET
040806             0635*  
040806             0636*  
040806             0637*  ;  a sprite
040806             0638*  ; a -> sprite number
040806             0639*  ; de -> x
040806             0640*  ; hl -> y
040806             0641*  set_sprite_position:
040806 E5          0642*  	PUSH HL
040807 D5          0643*  	PUSH DE
040808 F5          0644*  	PUSH AF
040809             0645*  	VDU 23
040809 3E 17       0001*M 		LD	A, function
04080B 49 D7       0002*M 		RST.LIS	10h
04080D             0646*  	VDU 27
04080D 3E 1B       0001*M 		LD	A, function
04080F 49 D7       0002*M 		RST.LIS	10h
040811             0647*  	VDU 4
040811 3E 04       0001*M 		LD	A, function
040813 49 D7       0002*M 		RST.LIS	10h
040815 F1          0648*  	POP AF
040816             0649*  	VDU_A
040816 49 D7       0001*M 		RST.LIS	10h
040818             0650*  
040818             0651*  	VDU 23
040818 3E 17       0001*M 		LD	A, function
04081A 49 D7       0002*M 		RST.LIS	10h
04081C             0652*  	VDU 27
04081C 3E 1B       0001*M 		LD	A, function
04081E 49 D7       0002*M 		RST.LIS	10h
040820             0653*  	VDU 13
040820 3E 0D       0001*M 		LD	A, function
040822 49 D7       0002*M 		RST.LIS	10h
040824 D1          0654*  	POP DE
040825             0655*  	VDU_DE
040825 7B          0001*M 		LD A,E
040826 49 D7       0002*M 		RST.LIS	10h
040828 7A          0003*M 		LD A,D
040829 49 D7       0004*M 		RST.LIS	10h
04082B E1          0656*  	POP HL
04082C             0657*  	VDU_HL
04082C 7D          0001*M 		LD A,L
04082D 49 D7       0002*M 		RST.LIS	10h
04082F 7C          0003*M 		LD A,H
040830 49 D7       0004*M 		RST.LIS	10h
040832 C9          0658*  	RET
040833             0659*  
040833             0660*  ; a -> sprite number
040833             0661*  show_sprite:
040833 F5          0662*  	PUSH AF
040834             0663*  	VDU 23
040834 3E 17       0001*M 		LD	A, function
040836 49 D7       0002*M 		RST.LIS	10h
040838             0664*  	VDU 27
040838 3E 1B       0001*M 		LD	A, function
04083A 49 D7       0002*M 		RST.LIS	10h
04083C             0665*  	VDU 4
04083C 3E 04       0001*M 		LD	A, function
04083E 49 D7       0002*M 		RST.LIS	10h
040840 F1          0666*  	POP AF
040841             0667*  	VDU_A
040841 49 D7       0001*M 		RST.LIS	10h
040843             0668*  
040843             0669*  	VDU 23
040843 3E 17       0001*M 		LD	A, function
040845 49 D7       0002*M 		RST.LIS	10h
040847             0670*  	VDU 27
040847 3E 1B       0001*M 		LD	A, function
040849 49 D7       0002*M 		RST.LIS	10h
04084B             0671*  	VDU 11
04084B 3E 0B       0001*M 		LD	A, function
04084D 49 D7       0002*M 		RST.LIS	10h
04084F C9          0672*  	RET
040850             0673*  
040850             0674*  ; a -> sprite number
040850             0675*  hide_sprite:
040850 E5          0676*  	PUSH HL
040851 D5          0677*  	PUSH DE
040852 F5          0678*  	PUSH AF
040853             0679*  	VDU 23
040853 3E 17       0001*M 		LD	A, function
040855 49 D7       0002*M 		RST.LIS	10h
040857             0680*  	VDU 27
040857 3E 1B       0001*M 		LD	A, function
040859 49 D7       0002*M 		RST.LIS	10h
04085B             0681*  	VDU 4
04085B 3E 04       0001*M 		LD	A, function
04085D 49 D7       0002*M 		RST.LIS	10h
04085F F1          0682*  	POP AF
040860             0683*  	VDU_A
040860 49 D7       0001*M 		RST.LIS	10h
040862             0684*  
040862             0685*  	VDU 23
040862 3E 17       0001*M 		LD	A, function
040864 49 D7       0002*M 		RST.LIS	10h
040866             0686*  	VDU 27
040866 3E 1B       0001*M 		LD	A, function
040868 49 D7       0002*M 		RST.LIS	10h
04086A             0687*  	VDU 12
04086A 3E 0C       0001*M 		LD	A, function
04086C 49 D7       0002*M 		RST.LIS	10h
04086E C9          0688*  	RET
04086F             0689*  
04086F             0690*  ; flip buffer
04086F             0691*  flip:
04086F             0692*  	VDU 23
04086F 3E 17       0001*M 		LD	A, function
040871 49 D7       0002*M 		RST.LIS	10h
040873             0693*  	VDU 27
040873 3E 1B       0001*M 		LD	A, function
040875 49 D7       0002*M 		RST.LIS	10h
040877             0694*  	VDU 15
040877 3E 0F       0001*M 		LD	A, function
040879 49 D7       0002*M 		RST.LIS	10h
04087B             0695*  
04087B             0696*  	VDU 23
04087B 3E 17       0001*M 		LD	A, function
04087D 49 D7       0002*M 		RST.LIS	10h
04087F             0697*  	VDU 0
04087F 3E 00       0001*M 		LD	A, function
040881 49 D7       0002*M 		RST.LIS	10h
040883             0698*  	VDU $C3
040883 3E C3       0001*M 		LD	A, function
040885 49 D7       0002*M 		RST.LIS	10h
040887 C9          0699*  	ret
040888             0700*  
040888             0701*  set_sprite_next_frame:
040888             0702*  	VDU 23
040888 3E 17       0001*M 		LD	A, function
04088A 49 D7       0002*M 		RST.LIS	10h
04088C             0703*  	VDU 27
04088C 3E 1B       0001*M 		LD	A, function
04088E 49 D7       0002*M 		RST.LIS	10h
040890             0704*  	VDU 8
040890 3E 08       0001*M 		LD	A, function
040892 49 D7       0002*M 		RST.LIS	10h
040894 C9          0705*  	RET
040895             0706*  
040895             0707*  set_sprite_previous_frame:
040895             0708*  	VDU 23
040895 3E 17       0001*M 		LD	A, function
040897 49 D7       0002*M 		RST.LIS	10h
040899             0709*  	VDU 27
040899 3E 1B       0001*M 		LD	A, function
04089B 49 D7       0002*M 		RST.LIS	10h
04089D             0710*  	VDU 9
04089D 3E 09       0001*M 		LD	A, function
04089F 49 D7       0002*M 		RST.LIS	10h
0408A1 C9          0711*  	RET
0408A2             0712*  
0408A2             0713*  ; print 'header error'
0408A2             0714*  print_header_error:
0408A2             0715*  	vdu 7
0408A2 3E 07       0001*M 		LD	A, function
0408A4 49 D7       0002*M 		RST.LIS	10h
0408A6             0716*  
0408A6             0717*  	; locate x,y
0408A6             0718*  	vdu 31
0408A6 3E 1F       0001*M 		LD	A, function
0408A8 49 D7       0002*M 		RST.LIS	10h
0408AA             0719*  	vdu 0
0408AA 3E 00       0001*M 		LD	A, function
0408AC 49 D7       0002*M 		RST.LIS	10h
0408AE             0720*  	vdu 0
0408AE 3E 00       0001*M 		LD	A, function
0408B0 49 D7       0002*M 		RST.LIS	10h
0408B2             0721*  
0408B2             0722*  	; print text
0408B2 21 85 04 04 0723*  	ld hl,header_error
0408B6 01 00 00 00 0724*  	ld bc,0
0408BA AF          0725*  	xor a
0408BB 49 DF       0726*  	rst.lis $18
0408BD             0727*  
0408BD CD 02 09 04 0728*  	call input_key
0408C1 C9          0729*  	ret
0408C2             0730*  
0408C2             0731*  ; print 'file error'
0408C2             0732*  print_file_error:
0408C2             0733*  	vdu 7
0408C2 3E 07       0001*M 		LD	A, function
0408C4 49 D7       0002*M 		RST.LIS	10h
0408C6             0734*  
0408C6             0735*  	; locate x,y
0408C6             0736*  	vdu 31
0408C6 3E 1F       0001*M 		LD	A, function
0408C8 49 D7       0002*M 		RST.LIS	10h
0408CA             0737*  	vdu 0
0408CA 3E 00       0001*M 		LD	A, function
0408CC 49 D7       0002*M 		RST.LIS	10h
0408CE             0738*  	vdu 0
0408CE 3E 00       0001*M 		LD	A, function
0408D0 49 D7       0002*M 		RST.LIS	10h
0408D2             0739*  
0408D2             0740*  	; print text
0408D2 21 6B 04 04 0741*  	ld hl,file_error
0408D6 01 00 00 00 0742*  	ld bc,0
0408DA AF          0743*  	xor a
0408DB 49 DF       0744*  	rst.lis $18
0408DD             0745*  
0408DD CD 02 09 04 0746*  	call input_key
0408E1 C9          0747*  	ret
0408E2             0748*  
0408E2             0749*  ; print 'data error'
0408E2             0750*  print_data_error:
0408E2             0751*  	vdu 7
0408E2 3E 07       0001*M 		LD	A, function
0408E4 49 D7       0002*M 		RST.LIS	10h
0408E6             0752*  
0408E6             0753*  	; locate x,y
0408E6             0754*  	vdu 31
0408E6 3E 1F       0001*M 		LD	A, function
0408E8 49 D7       0002*M 		RST.LIS	10h
0408EA             0755*  	vdu 0
0408EA 3E 00       0001*M 		LD	A, function
0408EC 49 D7       0002*M 		RST.LIS	10h
0408EE             0756*  	vdu 0
0408EE 3E 00       0001*M 		LD	A, function
0408F0 49 D7       0002*M 		RST.LIS	10h
0408F2             0757*  
0408F2             0758*  	; print text
0408F2 21 9F 04 04 0759*  	ld hl,data_error
0408F6 01 00 00 00 0760*  	ld bc,0
0408FA AF          0761*  	xor a
0408FB 49 DF       0762*  	rst.lis $18
0408FD             0763*  
0408FD CD 02 09 04 0764*  	call input_key
040901 C9          0765*  	ret
040902             0766*  
040902             0767*  ; get an ascii key value
040902             0768*  input_key:
040902 C5          0769*  	push bc
040903             0770*  	moscall mos_getkey
040903 3E 00       0001*M 		LD	A, function
040905 49 CF       0002*M 		RST.LIS	08h
040907 C1          0771*  	pop bc
040908 C9          0772*  	ret
040909             0773*  
040909             0774*  ; send RGB tint into the VDP
040909             0775*  ; a -> color
040909             0776*  ; hl -> real palette
040909             0777*  send_RGBA_to_VDP:
040909 F5          0778*  	PUSH AF
04090A             0779*  
04090A 21 58 00 04 0780*  	LD HL,real_palette_buffer
04090E 11 00 00 00 0781*  	LD DE,$000000
040912 5F          0782*  	LD E,A
040913 16 03       0783*  	LD D,3
040915 ED 5C       0784*  	MLT DE
040917 19          0785*  	ADD HL,DE
040918             0786*  
040918 E5          0787*  	PUSH HL
040919 7E          0788*  	LD A,(HL)
04091A             0789*  	VDU_A
04091A 49 D7       0001*M 		RST.LIS	10h
04091C E1          0790*  	POP HL
04091D             0791*  
04091D 23          0792*  	INC HL
04091E E5          0793*  	PUSH HL
04091F 7E          0794*  	LD A,(HL)
040920             0795*  	VDU_A
040920 49 D7       0001*M 		RST.LIS	10h
040922 E1          0796*  	POP HL
040923             0797*  
040923 23          0798*  	INC HL
040924 E5          0799*  	PUSH HL
040925 7E          0800*  	LD A,(HL)
040926             0801*  	VDU_A
040926 49 D7       0001*M 		RST.LIS	10h
040928 E1          0802*  	POP HL
040929             0803*  
040929 F1          0804*  	POP AF
04092A             0805*  
04092A FE 00       0806*  	CP 0 ; color = 0 ?
04092C 20 04       0807*  	JR NZ,srtv_not_transparent
04092E             0808*  
04092E 3E 00       0809*  	LD A,0 ; alpha = 0
040930 18 02       0810*  	JR srtv_write
040932             0811*  
040932             0812*  srtv_not_transparent:
040932 3E FF       0813*  	LD A,255 ; alpha = 255
040934             0814*  
040934             0815*  srtv_write:
040934             0816*  	VDU_A
040934 49 D7       0001*M 		RST.LIS	10h
040936 C9          0817*  	RET
040937             0818*  
040937             0819*  ; sleep 10 ms (approximatively)
040937             0820*  sleep10:
040937 01 10 27 00 0821*  	LD BC,10000
04093B CD 49 09 04 0822*  	CALL sleep
04093F C9          0823*  	RET
040940             0824*  
040940             0825*  ; sleep 50 ms (approximatively)
040940             0826*  sleep50:
040940 01 50 C3 00 0827*  	LD BC,50000
040944 CD 49 09 04 0828*  	CALL sleep
040948 C9          0829*  	RET
040949             0830*  
040949             0831*  ; sleep microseconds
040949             0832*  ; input : BC*HL
040949             0833*  sleep:
040949 C5          0834*  	PUSH BC
04094A 00          0835*  	NOP ; 18 NOPS
04094B 00          0836*  	NOP ; for 18 MHtz
04094C 00          0837*  	NOP
04094D 00          0838*  	NOP
04094E 00          0839*  	NOP
04094F 00          0840*  	NOP
040950 00          0841*  	NOP
040951 00          0842*  	NOP
040952 00          0843*  	NOP
040953 00          0844*  	NOP
040954 00          0845*  	NOP
040955 00          0846*  	NOP
040956 00          0847*  	NOP
040957 00          0848*  	NOP
040958 00          0849*  	NOP
040959 00          0850*  	NOP
04095A 00          0851*  	NOP
04095B 00          0852*  	NOP
04095C C1          0853*  	POP BC
04095D 0B          0854*  	DEC BC
04095E 78          0855*  	LD A,B
04095F B1          0856*  	OR C
040960 FE 00       0857*  	CP 0
040962 20 E5       0858*  	JR NZ,sleep
040964 C9          0859*  	RET
040965             0020   	INCLUDE "debug.inc"
040965             0001*  ;=================
040965             0002*  ; Debug functions
040965             0003*  ;=================
040965             0004*  ; A = byte to debug
040965             0005*  debug_byte:
040965 F5          0006*  	PUSH AF
040966 C5          0007*  	PUSH BC
040967 D5          0008*  	PUSH DE
040968 E5          0009*  	PUSH HL
040969 21 00 00 00 0010*  	LD HL,$000000
04096D 6F          0011*  	LD L,A
04096E 11 AA 09 04 0012*  	LD DE,debug_text
040972 D5          0013*  	PUSH DE
040973 CD B0 09 04 0014*  	CALL num2dec
040977 E1          0015*  	POP HL
040978 23          0016*  	INC HL
040979 23          0017*  	INC HL
04097A 01 03 00 00 0018*  	LD BC,3
04097E 3E 00       0019*  	LD A,0
040980 49 DF       0020*  	RST.LIS $18
040982 E1          0021*  	POP HL
040983 D1          0022*  	POP DE
040984 C1          0023*  	POP BC
040985 F1          0024*  	POP AF
040986 C9          0025*  	RET
040987             0026*  
040987             0027*  ; HL = word to debug
040987             0028*  debug_word:
040987 F5          0029*  	PUSH AF
040988 C5          0030*  	PUSH BC
040989 D5          0031*  	PUSH DE
04098A E5          0032*  	PUSH HL
04098B 11 00 00 00 0033*  	LD DE,$000000 ; remove HLU
04098F 5D          0034*  	LD E,L
040990 54          0035*  	LD D,H
040991 D5          0036*  	PUSH DE
040992 E1          0037*  	POP HL
040993 11 AA 09 04 0038*  	LD DE,debug_text
040997 D5          0039*  	PUSH DE
040998 CD B0 09 04 0040*  	CALL num2dec
04099C E1          0041*  	POP HL
04099D 01 05 00 00 0042*  	LD BC,5
0409A1 3E 00       0043*  	LD A,0
0409A3 49 DF       0044*  	RST.LIS $18
0409A5 E1          0045*  	POP HL
0409A6 D1          0046*  	POP DE
0409A7 C1          0047*  	POP BC
0409A8 F1          0048*  	POP AF
0409A9 C9          0049*  	RET
0409AA             0050*  
0409AA             0051*  debug_text:
0409AA             0052*  	DS 6
0409B0             0053*  
0409B0             0054*  ; 16 bits number to string
0409B0             0055*  num2dec:
0409B0 01 F0 D8 FF 0056*  	LD BC,-10000
0409B4 CD D1 09 04 0057*  	CALL num1
0409B8 01 18 FC FF 0058*  	LD BC,-1000
0409BC CD D1 09 04 0059*  	CALL num1
0409C0 01 9C FF FF 0060*  	LD BC,-100
0409C4 CD D1 09 04 0061*  	CALL num1
0409C8 01 F6 FF FF 0062*  	LD BC,-10
0409CC CD D1 09 04 0063*  	CALL num1
0409D0 48          0064*  	LD C,B
0409D1             0065*  
0409D1 3E 2F       0066*  num1: LD A,'0'-1
0409D3 3C          0067*  num2: INC A
0409D4 09          0068*  	ADD HL,BC
0409D5 38 FC       0069*  	JR C,num2
0409D7 ED 42       0070*  	SBC HL,BC
0409D9             0071*  
0409D9 12          0072*  	LD (DE),A
0409DA 13          0073*  	INC DE
0409DB C9          0074*  	RET
0409DC             0021   
0409DC             0022   ; equ
0409DC             0023   
0409DC             0024   
0409DC             0025   ; start main program ============================
0409DC             0026   start:
0409DC F5          0027   	PUSH AF
0409DD C5          0028   	PUSH BC
0409DE D5          0029   	PUSH DE
0409DF DD E5       0030   	PUSH IX
0409E1 FD E5       0031   	PUSH IY
0409E3             0032   
0409E3             0033   	; reset sprites and bitmaps data
0409E3             0034   	VDU 23
0409E3 3E 17       0001M  		LD	A, function
0409E5 49 D7       0002M  		RST.LIS	10h
0409E7             0035   	VDU 27
0409E7 3E 1B       0001M  		LD	A, function
0409E9 49 D7       0002M  		RST.LIS	10h
0409EB             0036   	VDU 16
0409EB 3E 10       0001M  		LD	A, function
0409ED 49 D7       0002M  		RST.LIS	10h
0409EF             0037   
0409EF             0038   	; set mode 136 (double buffered mode 8)
0409EF             0039   	VDU 22
0409EF 3E 16       0001M  		LD	A, function
0409F1 49 D7       0002M  		RST.LIS	10h
0409F3             0040   	VDU 8;+128
0409F3 3E 08       0001M  		LD	A, function
0409F5 49 D7       0002M  		RST.LIS	10h
0409F7             0041   
0409F7             0042   	; set black paper color
0409F7             0043   	VDU 17
0409F7 3E 11       0001M  		LD	A, function
0409F9 49 D7       0002M  		RST.LIS	10h
0409FB             0044   	VDU 128
0409FB 3E 80       0001M  		LD	A, function
0409FD 49 D7       0002M  		RST.LIS	10h
0409FF             0045   
0409FF             0046   	; clear screen
0409FF             0047   	VDU 12
0409FF 3E 0C       0001M  		LD	A, function
040A01 49 D7       0002M  		RST.LIS	10h
040A03             0048   
040A03             0049   	; hide cursor
040A03             0050   	VDU 23
040A03 3E 17       0001M  		LD	A, function
040A05 49 D7       0002M  		RST.LIS	10h
040A07             0051   	VDU 1
040A07 3E 01       0001M  		LD	A, function
040A09 49 D7       0002M  		RST.LIS	10h
040A0B             0052   	VDU 0
040A0B 3E 00       0001M  		LD	A, function
040A0D 49 D7       0002M  		RST.LIS	10h
040A0F             0053   
040A0F             0054   	; disable logical screen
040A0F             0055   	VDU 23
040A0F 3E 17       0001M  		LD	A, function
040A11 49 D7       0002M  		RST.LIS	10h
040A13             0056   	VDU 0
040A13 3E 00       0001M  		LD	A, function
040A15 49 D7       0002M  		RST.LIS	10h
040A17             0057   	VDU $C0
040A17 3E C0       0001M  		LD	A, function
040A19 49 D7       0002M  		RST.LIS	10h
040A1B             0058   	VDU 0
040A1B 3E 00       0001M  		LD	A, function
040A1D 49 D7       0002M  		RST.LIS	10h
040A1F             0059   
040A1F             0060   	; set pen 15
040A1F             0061   	VDU 17
040A1F 3E 11       0001M  		LD	A, function
040A21 49 D7       0002M  		RST.LIS	10h
040A23             0062   	VDU 15
040A23 3E 0F       0001M  		LD	A, function
040A25 49 D7       0002M  		RST.LIS	10h
040A27             0063   
040A27 21 AF 0A 04 0064   	LD HL,palette1
040A2B CD B9 04 04 0065   	CALL load_palette
040A2F             0066   
040A2F 21 2D 0B 04 0067   	LD HL,sprite1
040A33 3E 00       0068   	LD A,0 ; sprite number
040A35 CD 12 07 04 0069   	CALL init_sprite ; c -> frames count
040A39             0070   
040A39 3E 01       0071   	LD A,1 ; 1 sprite activated
040A3B CD F5 07 04 0072   	CALL activate_sprites
040A3F             0073   
040A3F 3E 00       0074   	LD A,0
040A41 11 00 00 00 0075   	LD DE,0
040A45 D5          0076   	PUSH DE
040A46 21 70 00 00 0077   	LD HL,112
040A4A CD 06 08 04 0078   	CALL set_sprite_position
040A4E             0079   
040A4E 3E 00       0080   	LD A,0
040A50 CD 33 08 04 0081   	CALL show_sprite
040A54             0082   
040A54 D1          0083   	POP DE
040A55             0084   
040A55             0085   main_loop:
040A55 D5          0086   	PUSH DE
040A56 3E 00       0087   	LD A,0
040A58 21 70 00 00 0088   	LD HL,112
040A5C CD 06 08 04 0089   	CALL set_sprite_position
040A60 CD 6F 08 04 0090   	CALL flip
040A64 CD 40 09 04 0091   	CALL sleep50
040A68 CD 88 08 04 0092   	CALL set_sprite_next_frame
040A6C D1          0093   	POP DE
040A6D 13          0094   	INC DE
040A6E 13          0095   	INC DE
040A6F 21 40 01 00 0096   	LD HL,320
040A73 B7          0097   	OR A
040A74 ED 52       0098   	SBC HL,DE
040A76 19          0099   	ADD HL,DE
040A77 C2 55 0A 04 0100   	JP NZ,main_loop
040A7B             0101   
040A7B             0102   exit_program:
040A7B             0103   	; reset to mode 1
040A7B             0104   	VDU 22
040A7B 3E 16       0001M  		LD	A, function
040A7D 49 D7       0002M  		RST.LIS	10h
040A7F             0105   	VDU 1
040A7F 3E 01       0001M  		LD	A, function
040A81 49 D7       0002M  		RST.LIS	10h
040A83             0106   
040A83             0107   	; enable logical screen
040A83             0108   	VDU 23
040A83 3E 17       0001M  		LD	A, function
040A85 49 D7       0002M  		RST.LIS	10h
040A87             0109   	VDU 0
040A87 3E 00       0001M  		LD	A, function
040A89 49 D7       0002M  		RST.LIS	10h
040A8B             0110   	VDU $C0
040A8B 3E C0       0001M  		LD	A, function
040A8D 49 D7       0002M  		RST.LIS	10h
040A8F             0111   	VDU 1
040A8F 3E 01       0001M  		LD	A, function
040A91 49 D7       0002M  		RST.LIS	10h
040A93             0112   
040A93             0113   	; position the texte cursor at home
040A93             0114   	VDU 30
040A93 3E 1E       0001M  		LD	A, function
040A95 49 D7       0002M  		RST.LIS	10h
040A97             0115   
040A97             0116   	; show cursor
040A97             0117   	VDU 23
040A97 3E 17       0001M  		LD	A, function
040A99 49 D7       0002M  		RST.LIS	10h
040A9B             0118   	VDU 1
040A9B 3E 01       0001M  		LD	A, function
040A9D 49 D7       0002M  		RST.LIS	10h
040A9F             0119   	VDU 1
040A9F 3E 01       0001M  		LD	A, function
040AA1 49 D7       0002M  		RST.LIS	10h
040AA3             0120   
040AA3 FD E1       0121   	POP IY
040AA5 DD E1       0122   	POP IX
040AA7 D1          0123   	POP DE
040AA8 C1          0124   	POP BC
040AA9 F1          0125   	POP AF
040AAA 21 00 00 00 0126   	LD HL,0
040AAE             0127   
040AAE C9          0128   	RET
040AAF             0129   
040AAF             0130   ; ===============================================
040AAF             0131   palette1:
040AAF 4A 41 53 43 0132   .incbin "data/BountyBoy.pal"
       2D 50 41 4C 
       0D 0A 30 31 
       30 30 0D 0A 
       31 31 0D 0A 
       30 20 30 20 
       30 0D 0A 38 
       35 20 30 20 
       30 0D 0A 30 
       20 30 20 38 
       35 0D 0A 31 
       37 30 20 30 
       20 30 0D 0A 
       32 35 35 20 
       30 20 30 0D 
       0A 32 35 35 
       20 38 35 20 
       38 35 0D 0A 
       31 37 30 20 
       31 37 30 20 
       30 0D 0A 32 
       35 35 20 32 
       35 35 20 30 
       0D 0A 30 20 
       30 20 32 35 
       35 0D 0A 30 
       20 38 35 20 
       32 35 35 0D 
       0A 32 35 35 
       20 32 35 35 
       20 32 35 35 
       0D 0A       
040B2D             0133   
040B2D             0134   sprite1:
040B2D 10 04 10 00 0135   .incbin "data/BountyBoy.spr"
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 01 
       01 03 03 03 
       03 01 01 00 
       00 00 00 00 
       00 00 01 03 
       03 03 03 01 
       03 03 03 01 
       00 00 00 00 
       00 00 01 03 
       01 03 01 03 
       01 03 01 01 
       00 00 00 00 
       01 01 03 01 
       03 01 05 01 
       01 01 01 01 
       01 00 00 01 
       03 03 01 03 
       01 01 05 05 
       05 0A 09 00 
       01 01 00 01 
       03 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 01 
       00 01 01 01 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 00 00 00 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 00 
       00 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 05 
       05 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 02 08 08 
       08 08 00 00 
       00 00 00 00 
       00 00 00 00 
       00 03 04 04 
       04 04 04 04 
       00 00 00 00 
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
       01 03 03 03 
       03 01 01 00 
       00 00 00 00 
       00 00 00 01 
       03 03 03 01 
       03 03 03 01 
       00 00 00 00 
       00 00 01 03 
       01 03 01 03 
       01 03 01 01 
       00 01 00 00 
       00 01 03 01 
       03 01 05 01 
       01 01 01 01 
       01 01 00 00 
       01 03 01 03 
       01 01 05 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 01 01 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 01 01 00 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 00 
       00 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 05 
       05 07 06 00 
       00 00 00 00 
       00 00 00 03 
       02 02 02 00 
       08 08 08 00 
       04 00 00 00 
       00 00 00 00 
       03 03 03 03 
       04 04 04 04 
       00 00 00 00 
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
       01 03 03 03 
       03 01 01 00 
       00 01 00 00 
       00 00 00 00 
       01 03 03 01 
       03 03 03 01 
       01 01 00 00 
       00 00 00 01 
       03 03 01 03 
       01 03 01 01 
       01 00 00 00 
       00 00 01 03 
       03 01 05 01 
       01 01 01 01 
       00 00 00 00 
       00 01 03 03 
       01 01 05 05 
       05 0A 09 00 
       00 00 00 00 
       00 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 00 
       00 01 03 03 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 00 01 03 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 01 
       01 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 04 00 00 
       00 00 00 03 
       02 06 07 05 
       05 07 06 08 
       04 00 00 00 
       00 00 00 03 
       03 02 00 00 
       00 00 08 04 
       04 00 00 00 
       00 00 00 00 
       03 03 03 00 
       00 00 04 04 
       00 00 00 00 
       00 00 00 00 
       00 01 01 01 
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
       01 03 03 03 
       03 01 01 00 
       00 00 00 00 
       00 00 00 01 
       03 03 03 01 
       03 03 03 01 
       00 00 00 00 
       00 00 01 03 
       01 03 01 03 
       01 03 01 01 
       00 01 00 00 
       00 01 03 01 
       03 01 05 01 
       01 01 01 01 
       01 01 00 00 
       01 03 01 03 
       01 01 05 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 03 01 
       05 01 01 05 
       05 0A 09 00 
       00 00 00 00 
       01 01 01 01 
       05 05 05 05 
       05 05 05 05 
       00 00 00 00 
       00 01 01 00 
       05 05 05 0A 
       0A 0A 05 05 
       00 00 00 00 
       00 00 00 00 
       00 00 05 05 
       05 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 06 05 
       05 06 00 00 
       00 00 00 00 
       00 00 00 00 
       00 06 06 06 
       06 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 01 
       01 07 06 00 
       00 00 00 00 
       00 00 00 00 
       00 06 07 05 
       05 07 06 00 
       00 00 00 00 
       00 00 00 03 
       02 02 02 00 
       08 08 08 00 
       04 00 00 00 
       00 00 00 00 
       03 03 03 03 
       04 04 04 04 
       00 00 00    
